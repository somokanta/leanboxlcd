
<?php

/**
 * hook_form_alter()
 */
function modify_views_forms_form_alter(&$form, &$form_state, $form_id) {
  // custom validator for node title unique value
  $node_type = array('hul_code_master', 'pricelist_group_master', 'product_division_master', 'resource_type', 'vehicle_master');
  if (isset($form['#node']) && !isset($form['#node']->nid) && in_array($form['#node']->type, $node_type)) {
    $form['#validate'][] = 'node_title_validate';
  }
  
  if ($form_id == 'editableviews_entity_form_payment_collection') {
      $form['#validate'][] = 'payment_collection_validate';
      if (isset($form['node'])) {
         foreach ($form['node'] as $key => $value) {
            //Remove the wrapper from the collection date field
            $form['node'][$key]['field_collection_cheque_date'][LANGUAGE_NONE][0]['#theme_wrappers'] = array();
            //Make the fine amount field disabled if type is signed
            if ($value['field_flag']['und']['#default_value'][0] == 'signed') {
               $form['node'][$key]['field_fine_amount']['#disabled'] = TRUE;
            }
         }
      }
   }

   if($form_id == 'editableviews_entity_form_collection_closure') {
    // Validation for Collection Closore Table
    $form['#validate'][] = 'collection_closure_validate';
  }
        
    if ($form_id == 'editableviews_entity_form_crm_screen') {
      if (isset($form['node'])) {
         foreach ($form['node'] as $key => $value) {
            $select = array('' => '- SELECT -');
            $sales_status_option = _get_distributors_sales_status_option('field_call_status_user');
            $sales_status_option = $select + $sales_status_option;
            $form['node'][$key]['field_sales_call_status']['und']['#options'] = $sales_status_option;

            $delivery_status_option = _get_distributors_sales_status_option('field_delivery_status_user');
            $delivery_status_option = $select + $delivery_status_option;
            $form['node'][$key]['field_sales_delivery_status']['und']['#options'] = $delivery_status_option;
         }
      }
   }

   if ($form_id == 'views_exposed_form') {
      $select = array('All' => '- SELECT -');
      if (isset($form['field_sales_call_status_tid']['#options'])) {
         $sales_status_option = _get_distributors_sales_status_option('field_call_status_user');
         $sales_status_option = $select + $sales_status_option;
         $form['field_sales_call_status_tid']['#options'] = $sales_status_option;
      }
      if (isset($form['field_sales_delivery_status_tid']['#options'])) {
         $sales_status_option = _get_distributors_sales_status_option('field_delivery_status_user');
         $sales_status_option = $select + $sales_status_option;
         $form['field_sales_delivery_status_tid']['#options'] = $sales_status_option;
      }
      if (isset($form['field_pod_call_history_tid']['#options'])) {
         $sales_status_option = _get_distributors_sales_status_option('field_call_status_user');
         $sales_status_option = $select + $sales_status_option;
         $form['field_pod_call_history_tid']['#options'] = $sales_status_option;
      }
      if (isset($form['field_pod_delivery_history_tid']['#options'])) {
         $sales_status_option = _get_distributors_sales_status_option('field_delivery_status_user');
         $sales_status_option = $select + $sales_status_option;
         $form['field_pod_delivery_history_tid']['#options'] = $sales_status_option;
      }
      
      if (arg(0) == 'bills-assignment-acknowledgement') {   
        $form['field_assigned_person_value']['#attributes'] = array('required' => TRUE);
        $form['field_assignment_date_value']['value']['#attributes'] = array('required' => TRUE);
      }
   }

   if ($form_id == 'editableviews_entity_form_signed_bills_upload') {
    if ($form['#view_display_name'] == 'page_2' || $form['#view_display_name'] == 'page_3') {
      $select = array('' => '- In Stock -');

      $salesman = get_all_salesman_data("salesman", NULL);
      $salesman = $select + $salesman;

      foreach ($form['node'] as $key => $value) {
        if ($value['#bundle'] == 'payment_collection') {
          $form['node'][$key]['field_assigned_person'][LANGUAGE_NONE][0]['value']['#type'] = 'select';
          $form['node'][$key]['field_assigned_person'][LANGUAGE_NONE][0]['value']['#multiple'] = FALSE;
          $form['node'][$key]['field_assigned_person'][LANGUAGE_NONE][0]['value']['#options'] = $salesman;
          $form['node'][$key]['field_assigned_person'][LANGUAGE_NONE][0]['value']['#size'] = 1;
        }
      }
    }
    if ($form['#view_display_name'] == 'page' || $form['#view_display_name'] == 'page_1') {
      foreach ($form['node'] as $key => $value) {
        if (!empty($form['node'][$key]['field_file']['und'][0]['#description'])) {
          $form['node'][$key]['field_file']['und'][0]['#description'] = "";
        }
      }
    }    
  }
  
  if(($form_id == 'editableviews_entity_form_pick_confirm_report') || ($form_id == 'editableviews_entity_form_picking_report') || ($form_id == 'editableviews_entity_form_party_packing_report') || ($form_id == 'editableviews_entity_form_unloading_form') || ($form_id == 'editableviews_entity_form_dispatch_data_report')) {
    // fetching supervisior on the basis of logged in users distributor id
    global $user;
    // Fetching distributor id  from each node
    $distributor_id = change_feeds_import_get_distributor_id($user->uid);    
    $query = db_select('field_data_field_resource_name', 'fps');
    $query->join('field_data_field_resource_type','fst','fst.entity_id = fps.entity_id');
    $query->join('node','n', 'n.nid = fps.entity_id');
    $query->condition('n.uid', $distributor_id);
    
    if($form_id == 'editableviews_entity_form_pick_confirm_report') {
      $query->condition('fst.field_resource_type_value', 'PICK CONFIRM SUPERVISOR');
      $field_supervisor = 'field_pc_pick_supervisor';
     // $field_count = 'field_picking_picking_team_count';
    }
    if($form_id == 'editableviews_entity_form_picking_report') {
      $query->condition('fst.field_resource_type_value', 'PICKING SUPERVISOR');
      $field_supervisor = 'field_picking_pick_supervisor';
     // $field_count = 'field_picking_picking_team_count';
    }
    if($form_id == 'editableviews_entity_form_party_packing_report') {
      $query->condition('fst.field_resource_type_value', 'PARTY PACKING SUPERVISOR');
      $field_supervisor = 'field_party_packing_supervisor';
     // $field_count = 'field_party_packer_team_count';
    }
    if($form_id == 'editableviews_entity_form_unloading_form') {
      $query->condition('fst.field_resource_type_value', 'Unloading SUPERVISOR');
      $field_supervisor = 'field_unloading_supervisor';
     // $field_count = 'field_unloading_team_count';
    }
    if ($form_id == 'editableviews_entity_form_dispatch_data_report') {
      $query->condition('fst.field_resource_type_value', 'Dispatch SUPERVISOR');
      $field_supervisor = 'field_dispatch_supervisor';
    }

    $query->fields('fps', array('field_resource_name_value'));
    $options = $query->execute()->FetchCol();
    $multi_supervisor = array_combine($options, $options);
    $multi_supervisor = array_merge(array(" "=>'SELECT'),$multi_supervisor);
    //$count_array = array('1'=>'1','2'=>'2','3'=>'3','4'=>'4','5'=>'5','6'=>'6','7'=>'7','8'=>'8','9'=>'9');
    $count_array = array(1,2,3,4,5,6,7,8,9);
    $multi_count = array_merge(array("0"=>'SELECT'), $count_array);

    $query = db_select('field_data_field_resource_name', 'fps');
    $query->join('field_data_field_resource_type','fst','fst.entity_id = fps.entity_id');
    $query->join('node','n', 'n.nid = fps.entity_id');
    $query->condition('n.uid', $distributor_id);
    
    if($form_id == 'editableviews_entity_form_pick_confirm_report') {
      $query->condition('fst.field_resource_type_value', 'PICK CONFIRM NAME');
      $field_packer = 'field_pc_picker_name';
    }
    if($form_id == 'editableviews_entity_form_picking_report') {
      $query->condition('fst.field_resource_type_value', 'PICKER NAME');
      $field_packer = 'field_picking_picker_name';
    }
    if($form_id == 'editableviews_entity_form_party_packing_report') {
      $query->condition('fst.field_resource_type_value', 'PARTY PACKER NAME');
      $field_packer = 'field_party_packer_name';
    }
    if ($form_id == 'editableviews_entity_form_dispatch_data_report') {
      $query->condition('fst.field_resource_type_value', 'CASHIER');
      $field_packer = 'field_cashier_name';
    }

    $query->fields('fps', array('field_resource_name_value'));
    $options = $query->execute()->FetchCol();
    $multi_packer = array_combine($options, $options);
    $multi_packer = array_merge(array(" "=>'SELECT'),$multi_packer);
    
    foreach ($form['node'] as $key => $value) {
      $form['node'][$key]['field_unloading_date'][LANGUAGE_NONE][0]['#theme_wrappers'] = array();
      $form['node'][$key][$field_supervisor][LANGUAGE_NONE][0]['value']['#type'] = 'select';
      $form['node'][$key][$field_supervisor][LANGUAGE_NONE][0]['value']['#multiple'] = FALSE;
      $form['node'][$key][$field_supervisor][LANGUAGE_NONE][0]['value']['#options'] = $multi_supervisor;
      $form['node'][$key][$field_supervisor][LANGUAGE_NONE][0]['value']['#size'] = 1;
      $form['node'][$key]['field_dispatch_supervisor'][LANGUAGE_NONE][0]['#theme_wrappers'] = array();
      $form['node'][$key][$field_supervisor][LANGUAGE_NONE][0]['value']['#type'] = 'select';
      $form['node'][$key][$field_supervisor][LANGUAGE_NONE][0]['value']['#multiple'] = FALSE;
      $form['node'][$key][$field_supervisor][LANGUAGE_NONE][0]['value']['#options'] = $multi_supervisor;
      $form['node'][$key][$field_supervisor][LANGUAGE_NONE][0]['value']['#size'] = 1;
      if(($form_id == 'editableviews_entity_form_pick_confirm_report') || ($form_id == 'editableviews_entity_form_picking_report') || ($form_id == 'editableviews_entity_form_party_packing_report') || ($form_id == 'editableviews_entity_form_dispatch_data_report')) {
        $form['node'][$key][$field_packer][LANGUAGE_NONE][0]['value']['#type'] = 'select';
        $form['node'][$key][$field_packer][LANGUAGE_NONE][0]['value']['#multiple'] = FALSE;
        $form['node'][$key][$field_packer][LANGUAGE_NONE][0]['value']['#options'] = $multi_packer;
        $form['node'][$key][$field_packer][LANGUAGE_NONE][0]['value']['#size'] = 1;
      }
//      $form['node'][$key][$field_count][LANGUAGE_NONE][0]['value']['#type'] = 'select';
//      $form['node'][$key][$field_count][LANGUAGE_NONE][0]['value']['#multiple'] = FALSE;
//      $form['node'][$key][$field_count][LANGUAGE_NONE][0]['value']['#options'] = $multi_count;
//      $form['node'][$key][$field_count][LANGUAGE_NONE][0]['value']['#size'] = 1;
    }
  }
}

function payment_collection_validate($form, &$form_state) {
  foreach($form_state['values']['node'] as $nid => $form_data){
    $title = $form_data['title'];
    $cash_amt = $form_data['field_cash_amt']['und'][0]['value'];
    $cheque_amt = $form_data['field_collection_cheque_amt']['und'][0]['value'];
    $cheque_no = $form_data['field_collection_cheque_number']['und'][0]['value'];
    $cheque_date = $form_data['field_collection_cheque_date']['und'][0]['value'];
    $return_flag = $form_data['field_returned_bill_flag']['und'][0]['value'];
    //remark functionality
    $return_remarks = $form_data['field_return_remarks']['und'][0]['value'];
    $diff_amount = $form_data['field_field_amnt_difference']['und'][0]['value'];
    $partial_collection_remarks = $form_data['field_partial_collection_remarks']['und'][0]['value'];
    //Fine Amount
    $flag_type = $form_data['field_flag']['und'][0]['value'];
    $fine_amount = $form_data['field_fine_amount']['und'][0]['value'];

// || !empty($cheque_date) && (empty($cheque_amt) || empty($cheque_no)) || !empty($cheque_no) && (empty($cheque_amt) || empty($cheque_date))
    if( !empty($cheque_amt) && (empty($cheque_date) || empty($cheque_no)) ) {
      form_set_error('form', t('Please fill cheque number, cheque amount and cheque date for bill '.$title));
    }
    if(!empty($return_flag) && (!empty($cheque_amt) || !empty($cash_amt) || !empty($fine_amount))) {
      form_set_error('form', t("Return flag is marked for $title. Please remove cash, cheque and fine amount."));
    }
    if(!empty($return_flag) && (empty($return_remarks))) {
      form_set_error('form', t("Return flag is marked for bill:$title. Please write return remark."));
    }
    if(!empty($diff_amount) && empty($partial_collection_remarks) && (!empty($cheque_amt) || !empty($cash_amt))) {
      form_set_error('form', t("Please write partial collection remark for bill:$title."));
    }
    if($flag_type == 'bounced' && empty($fine_amount) && $fine_amount !=='0') {
      form_set_error('form', t("Please add fine amount for bounced bill:$title."));
    }
  }
}

function collection_closure_validate($form, &$form_state) {
  foreach($form_state['values']['node'] as $nid => $form_data){
    $title = $form_data['title'];
    $closure_flag = $form_data['field_terminated_bill_flag']['und'][0]['value'];
    $collection_closure_remarks = $form_data['field_collection_closure_remarks']['und'][0]['value'];
    
    if(!empty($closure_flag) && empty($collection_closure_remarks)) {
      form_set_error('form', t("Closure flag is marked for $title. Please fill collection closure remark."));
    }
  }
  
}

function modify_views_forms_field_widget_form_alter(&$element, &$form_state, $context) {
//  if($element['#field_name'] == 'field_picking_start_time' || $element['#field_name'] == 'field_picking_end_time' || $element['#field_name'] == 'field_unloading_start_time' || $element['#field_name'] == 'field_unloading_end_time' || $element['#field_name'] == 'field_party_packing_start_time' || $element['#field_name'] == 'field_party_packing_end_time') {
//    //$element['value']['#description'] = t('Enter Value in 24 Hr format (HH:MM)');
//  }
}

/**
 * Custom validate handler
 * @param array $form
 * @param array $form_state
 */
function node_title_validate($form, &$form_state) {
 // dpm($form_state);
  $title = $form_state['values']['title'];
  $type = $form_state['values']['type'];
  $query = db_select('node', 'n');
  $query->fields('n', array('title'));
  $query->addTag('node_uid');
  $query->condition('n.type', $type);
  $query->condition('n.title', $title);
  $result = $query->execute()->fetchField();
  if (!empty($result)) {
    form_set_error('title', t('This value already exists.Kindly enter unique value'));
  }
  
}


/**
 * 
 * @param type $vars
 * @return type
 */
function modify_views_forms_date_popup($vars) {
//  $element = $vars['element'];
//  $attributes = !empty($element['#wrapper_attributes']) ? $element['#wrapper_attributes'] : array('class' => array());
//  $attributes['class'][] = 'container-inline-date';
//  // If there is no description, the floating date elements need some extra padding below them.
//  $wrapper_attributes = array('class' => array('date-padding'));
//  if (empty($element['date']['#description'])) {
//    $wrapper_attributes['class'][] = 'clearfix';
//  }
//  // Add an wrapper to mimic the way a single value field works, for ease in using #states.
//  if (isset($element['#children'])) {
//    $element['#children'] = '<div id="' . $element['#id'] . '" ' . drupal_attributes($wrapper_attributes) .'>' . $element['#children'] . '</div>';
//  }
//  return '<div ' . drupal_attributes($attributes) .'>' . theme('form_element', $element) . '</div>';
}


function modify_views_forms_field_attach_validate($entity_type, $entity, &$errors) {

  if($entity_type == 'node') {
    if (!empty($entity->field_unloading_start_time)) {
      foreach ($entity->field_unloading_start_time as $langcode => $items) {
        foreach ($items as $delta => $item) {
          if (!empty($item['value']) && !preg_match("/^(?:0?[0-9]|1[0-2]):[0-5][0-9] [AP]M$/", $item['value'])) {   
            $nid = $entity->nid;
            form_set_error("node][$nid][field_unloading_start_time][$langcode][$delta][value", 'Please Enter data in 12 Hour Format with (AM/PM) for EXAMPLE 10:10 AM and 10:10 PM');
          }
        }
      }
    }

    if (!empty($entity->field_unloading_end_time)) {
      foreach ($entity->field_unloading_end_time as $langcode => $items) {
        foreach ($items as $delta => $item) {
          if (!empty($item['value']) && !preg_match("/^(?:0?[0-9]|1[0-2]):[0-5][0-9] [AP]M$/", $item['value'])) {
            $nid = $entity->nid;
            form_set_error("node][$nid][field_unloading_end_time][$langcode][$delta][value", 'Please Enter data in 12 Hour Format with (AM/PM) for EXAMPLE 10:10 AM and 10:10 PM');
          }
        }
      }
    }
    if (!empty($entity->field_party_packing_start_time)) {
      foreach ($entity->field_party_packing_start_time as $langcode => $items) {
        foreach ($items as $delta => $item) {
          if (!empty($item['value']) && !preg_match("/^(?:0?[0-9]|1[0-2]):[0-5][0-9] [AP]M$/", $item['value'])) {
            $nid = $entity->nid;
            form_set_error("node][$nid][field_party_packing_start_time][$langcode][$delta][value", 'Please Enter data in 12 Hour Format with (AM/PM) for EXAMPLE 10:10 AM and 10:10 PM');
          }
        }
      }
    }
    if (!empty($entity->field_party_packing_end_time)) {
      foreach ($entity->field_party_packing_end_time as $langcode => $items) {
        foreach ($items as $delta => $item) {
          if (!empty($item['value']) && !preg_match("/^(?:0?[0-9]|1[0-2]):[0-5][0-9] [AP]M$/", $item['value'])) {
            $nid = $entity->nid;
            form_set_error("node][$nid][field_party_packing_end_time][$langcode][$delta][value", 'Please Enter data in 12 Hour Format with (am/pm)');
          }
        }
      }
    }
    if (!empty($entity->field_picking_start_time)) {
      foreach ($entity->field_picking_start_time as $langcode => $items) {
        foreach ($items as $delta => $item) {
          if (!empty($item['value']) && !preg_match("/^(?:0?[0-9]|1[0-2]):[0-5][0-9] [AP]M$/", $item['value'])) {
            $nid = $entity->nid;
            form_set_error("node][$nid][field_picking_start_time][$langcode][$delta][value", 'Please Enter data in 12 Hour Format with (am/pm)');
          }
        }
      }
    }
    if (!empty($entity->field_picking_end_time)) {
      foreach ($entity->field_picking_end_time as $langcode => $items) {
        foreach ($items as $delta => $item) {
          if (!empty($item['value']) && !preg_match("/^(?:0?[0-9]|1[0-2]):[0-5][0-9] [AP]M$/", $item['value'])) {
            $nid = $entity->nid;
            form_set_error("node][$nid][field_picking_end_time][$langcode][$delta][value", 'Please Enter data in 12 Hour Format with (am/pm)');
          }
        }
      }
    }
  }
}

/**
 * 
 * @param type $user_field
 * @return type
 */
function _get_distributors_sales_status_option($user_field) {
   $res = array();
   $user_id = $GLOBALS['user']->uid;
   $distributor_id = change_feeds_import_get_distributor_id($user_id);
   if (!empty($distributor_id)) {
      $query = db_select('taxonomy_term_data', 't');
      $query->join("field_data_" .$user_field, 'uf', 'uf.entity_id = t.tid');
      $query->condition("uf." .$user_field. "_uid", $distributor_id);
      $query->fields('t', array('tid', 'name'));
      $res = $query->execute()->fetchAllKeyed(0, 1);
   }
   return $res;
}
