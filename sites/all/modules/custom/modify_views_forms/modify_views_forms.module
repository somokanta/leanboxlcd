
<?php

/**
 * hook_form_alter()
 */
function modify_views_forms_form_alter(&$form, &$form_state, $form_id) {
    global $user;
    if (in_array('central_distributor', $user->roles)) {
         $central_distributor_id = change_feeds_import_get_distributor_id($user->uid);
    }
    else {
         // have to fetch parent distributor id
         $central_distributor_id = get_central_distributor_id($user->uid);
    }
  // custom validator for node title unique value
  $node_type = array('hul_code_master', 'pricelist_group_master', 'product_division_master', 'resource_type', 'vehicle_master');
  if (isset($form['#node']) && !isset($form['#node']->nid) && in_array($form['#node']->type, $node_type)) {
    $form['#validate'][] = 'node_title_validate';
  }
  
  if ($form_id == 'editableviews_entity_form_payment_collection') {
      $form['#validate'][] = 'payment_collection_validate';
      if (isset($form['node'])) {
         foreach ($form['node'] as $key => $value) {
            //Remove the wrapper from the collection date field
            $form['node'][$key]['field_collection_cheque_date'][LANGUAGE_NONE][0]['#theme_wrappers'] = array();
            //Make the fine amount field disabled if type is signed
            if ($value['field_flag']['und']['#default_value'][0] == 'signed') {
               $form['node'][$key]['field_fine_amount']['#disabled'] = TRUE;
            }
         }
      }
   }

  if($form_id == 'editableviews_entity_form_collection_closure') {
    // Validation for Collection Closore Table
    $form['#validate'][] = 'collection_closure_validate';
  }

  if($form_id == 'editableviews_entity_form_change_to_be_collected_amount') {
    // Validation for Change To Be Collected Amount Table
    $form['#validate'][] = 'change_to_be_collected_amt_validate';
  }
        
    if ($form_id == 'editableviews_entity_form_crm_screen') {
      if (isset($form['node'])) {
         foreach ($form['node'] as $key => $value) {
            $select = array('' => '- SELECT -');
            $sales_status_option = _get_distributors_sales_status_option('field_call_status_user');
            $sales_status_option = $select + $sales_status_option;
            $form['node'][$key]['field_sales_call_status']['und']['#options'] = $sales_status_option;

            $delivery_status_option = _get_distributors_sales_status_option('field_delivery_status_user');
            $delivery_status_option = $select + $delivery_status_option;
            $form['node'][$key]['field_sales_delivery_status']['und']['#options'] = $delivery_status_option;
         }
      }
   }

   if ($form_id == 'views_exposed_form') {
      $select = array('All' => '- SELECT -');
      if (isset($form['field_sales_call_status_tid']['#options'])) {
         $sales_status_option = _get_distributors_sales_status_option('field_call_status_user');
         $sales_status_option = $select + $sales_status_option;
         $form['field_sales_call_status_tid']['#options'] = $sales_status_option;
      }
      if (isset($form['field_sales_delivery_status_tid']['#options'])) {
         $sales_status_option = _get_distributors_sales_status_option('field_delivery_status_user');
         $sales_status_option = $select + $sales_status_option;
         $form['field_sales_delivery_status_tid']['#options'] = $sales_status_option;
      }
      if (isset($form['field_pod_call_history_tid']['#options'])) {
         $sales_status_option = _get_distributors_sales_status_option('field_call_status_user');
         $sales_status_option = $select + $sales_status_option;
         $form['field_pod_call_history_tid']['#options'] = $sales_status_option;
      }
      if (isset($form['field_pod_delivery_history_tid']['#options'])) {
         $sales_status_option = _get_distributors_sales_status_option('field_delivery_status_user');
         $sales_status_option = $select + $sales_status_option;
         $form['field_pod_delivery_history_tid']['#options'] = $sales_status_option;
      }
      
      if (arg(0) == 'bills-assignment-acknowledgement') {   
        $form['field_assigned_person_value']['#attributes'] = array('required' => TRUE);
        $form['field_assignment_date_value']['value']['#attributes'] = array('required' => TRUE);
      }
   }
   if ($form_id == 'editableviews_entity_form_vehicle_master') { 
           //if ($form_state['form_error'] == 1) return;
       $form['#validate'][] = 'validate_vehilce_master_edit'; 
       $form['#attached']['js'][] = drupal_get_path('module', 'deliverycost_calculation') . '/js/delivery_cost_edit.js';
       foreach ($form['node'] as $key => $value) {
           $mode_of_contract =  $value['#entity']->field_mode_of_contract[LANGUAGE_NONE][0]['value'];
           if ($mode_of_contract == 'Contracted') {
              // $form['node'][$key]['field_cost_per_day'][LANGUAGE_NONE][0]['value']['#attributes']['readonly']='readonly';
           }
           if ($mode_of_contract == 'Market') {
                //$form['node'][$key]['field_cost_per_month'][LANGUAGE_NONE][0]['value']['#attributes']['readonly']='readonly';
           }
           $form['node'][$key]['field_mode_of_contract'][LANGUAGE_NONE]['#attributes'] = array('class'=>array('mode_of_contract','mode_of_contract_'.$key),'vehicle_id'=>$key);
           $form['node'][$key]['field_cost_per_day'][LANGUAGE_NONE][0]['value']['#attributes']['class']= array('allownumericwithoutdecimal','cost_per_day_all','cost_per_day_'.$key);
           $form['node'][$key]['field_cost_per_month'][LANGUAGE_NONE][0]['value']['#attributes']['class'] = array('allownumericwithoutdecimal', 'cost_per_month_all','cost_per_month_'.$key);
           $form['node'][$key]['field_cost_per_month'][LANGUAGE_NONE][0]['value']['#attributes']['vehicle_id'] = $key;
           $form['node'][$key]['field_cost_per_day'][LANGUAGE_NONE][0]['value']['#attributes']['vehicle_id'] = $key;
           $form['node'][$key]['field_driver_phone_no'][LANGUAGE_NONE][0]['value']['#attributes'] = array('class'=>array('allownumericwithoutdecimal'),'maxlength'=>10);
       }
   }
   
   if ($form_id == 'editableviews_entity_form_Resource_Master_Report') {
       $form['#attached']['css'][] = drupal_get_path('module', 'deliverycost_calculation') . '/css/delivery_cost.css';
       $form['#validate'][] = 'validate_contact_number';  
       // This hidden field is to add calendar in resource master report.
       $form['calender_hide'] = array(
          '#type' => 'date_popup',
          '#date_year_range' => '-20:+2',
         '#prefix'=>'<div style="display:none;">',
          '#suffix'=>'</div>',
         '#attributes'=>array('style'=>'display:none;','readonly')
          
        );
       $form['#attached']['js'][] = drupal_get_path('module', 'deliverycost_calculation') . '/js/delivery_cost_edit.js';
       foreach ($form['node'] as $key => $value) {
           $form['node'][$key]['field_cost_per_day'][LANGUAGE_NONE][0]['value']['#attributes'] = array('class'=>array('allownumericwithoutdecimal','resource_cost_per_day_all','resource_cost_per_day_'.$key),'resource_id'=>$key,'readonly'=>'readonly');
           $form['node'][$key]['field_cost_per_month'][LANGUAGE_NONE][0]['value']['#attributes'] = array('class'=>array('allownumericwithoutdecimal','resource_cost_per_month_all','resource_cost_per_month_'.$key),'resource_id'=>$key);
       }
   }
   
   if ($form_id == 'editableviews_entity_form_dispatch_data_report') {
      $form['#attached']['js'][] = drupal_get_path('module', 'mrc_inventory_returns') . '/js/fSelect.js';
      $form['#attached']['css'][] = drupal_get_path('module', 'mrc_inventory_returns') . '/css/fSelect.css';  
      $form['#attached']['js'][] = drupal_get_path('module', 'deliverycost_calculation') . '/js/trip_dispatch_delivery_boy.js';
      $form['#attached']['css'][] = drupal_get_path('module', 'deliverycost_calculation') . '/css/delivery_cost.css';  
      $form['#validate'][] = 'validate_bill_editing_confirmation'; //TP to Host Entru task
      $form['#validate'][] = 'validate_trip_status'; 
      $form['#validate'][] = 'validate_dispatch_time'; 
      $form['#validate'][] = 'validate_working_day';
      //$form['#validate'][] = 'validate_vehicle_reporting_time';
      // Validate trip status report dispatch start time and end time
      $select = array('' => '- Select -');
      $vehicle = get_all_vehicle_data($central_distributor_id);
      $vehicle = $select + $vehicle;
      $delivery_boys = get_all_resources_by_type('Delivery Boy');
      $delivery_boys = $select + $delivery_boys;
      
      //field-dispatch-status
      foreach ($form['node'] as $key => $value) {
//        $value['field_vehicle_reporting_date'][LANGUAGE_NONE][0]['#default_value']['value']=  $value['field_vehicle_reporting_date'][LANGUAGE_NONE][0]['#default_value']['value'] ? $value['field_vehicle_reporting_date'][LANGUAGE_NONE][0]['#default_value']['value'] : date('Y-m-d');
//        $form['node'][$key]['field_vehicle_reporting_date'][LANGUAGE_NONE][0]['#required'] = TRUE;
//        $form['node'][$key]['field_vehicle_reporting_time'][LANGUAGE_NONE][0]['value']['#required'] = TRUE;
//        $form['node'][$key]['field_loading_dispatch_date'][LANGUAGE_NONE][0]['#required']  = TRUE;
        $form['node'][$key]['field_dispatch_supervisor'][LANGUAGE_NONE][0]['value']['#required'] = TRUE;
        $form['node'][$key]['field_cashier_name'][LANGUAGE_NONE][0]['value']['#required'] = TRUE;
        
         $trip_status = $value['#entity']->field_dispatch_status[LANGUAGE_NONE][0]['value'];
         $form['node'][$key]['field_vehicle_no'][LANGUAGE_NONE][0]['value']['#type'] = 'textfield';
         //$form['node'][$key]['field_vehicle_no'][LANGUAGE_NONE][0]['value']['#multiple'] = FALSE;
         //$form['node'][$key]['field_vehicle_no'][LANGUAGE_NONE][0]['value']['#options'] = $vehicle;
         $form['node'][$key]['field_vehicle_no'][LANGUAGE_NONE][0]['value']['#size'] = 35;
         $form['node'][$key]['field_vehicle_no'][LANGUAGE_NONE][0]['value']['#prefix'] = '<div class="trip_staus_vehicle">';
         $form['node'][$key]['field_vehicle_no'][LANGUAGE_NONE][0]['value']['#required']    =  true;
         $form['node'][$key]['field_vehicle_no'][LANGUAGE_NONE][0]['value']['#suffix'] = '</div>';
         $form['node'][$key]['field_vehicle_no'][LANGUAGE_NONE][0]['value']['#autocomplete_path'] = 'vehicle_maintenance/autocomplete/'.$central_distributor_id;
         // Not editable when dispatch start time alreay entered.
         $dispatch_pre_start_time = trim($value['#entity']->field_dispatch_pre_start_time[LANGUAGE_NONE][0]['value']);
         if (!empty($dispatch_pre_start_time)) {
               $form['node'][$key]['field_cashier_name']['#access'] = FALSE;
               $form['node'][$key]['field_dispatch_date']['#access'] = FALSE;
         }
  
         $form['node'][$key]['field_delivery_boy'][LANGUAGE_NONE]['#options'] = $delivery_boys;
         $form['node'][$key]['field_delivery_boy'][LANGUAGE_NONE]['#multiple']    =  true;
         $form['node'][$key]['field_delivery_boy'][LANGUAGE_NONE]['#required']    =  true;
         $form['node'][$key]['field_delivery_boy'][LANGUAGE_NONE]['#attributes'] = array('class'=>array('delivery_boy'));
         
         // if trip status is completed then delivery boy can't be editable
         if ($trip_status == 1) {
              $form['node'][$key]['field_delivery_boy']['#access'] = FALSE;
         }
             // Not editable when dispatch start time alreay entered.
      }
      // Delivery boy team create a delivery boy field in trip dispatch   
   }

   if ($form_id == 'editableviews_entity_form_signed_bills_upload' || $form_id == 'editableviews_entity_form_missing_bills_assignment') {
    if ($form['#view_display_name'] == 'page_2' || $form['#view_display_name'] == 'page_3' || $form['#view_display_name'] == 'missing_cheques_assignment') {
      $select = array('' => '- In Stock -');

      $salesman = get_all_salesman_data("salesman", NULL);
      $salesman = $select + $salesman;

      foreach ($form['node'] as $key => $value) {
        if ($value['#bundle'] == 'payment_collection') {
          $form['node'][$key]['field_assigned_person'][LANGUAGE_NONE][0]['value']['#type'] = 'select';
          $form['node'][$key]['field_assigned_person'][LANGUAGE_NONE][0]['value']['#multiple'] = FALSE;
          $form['node'][$key]['field_assigned_person'][LANGUAGE_NONE][0]['value']['#options'] = $salesman;
          $form['node'][$key]['field_assigned_person'][LANGUAGE_NONE][0]['value']['#size'] = 1;
        }
      }
    }
    if ($form['#view_display_name'] == 'page' || $form['#view_display_name'] == 'page_1') {
      foreach ($form['node'] as $key => $value) {
        if (!empty($form['node'][$key]['field_file']['und'][0]['#description'])) {
          $form['node'][$key]['field_file']['und'][0]['#description'] = "";
        }
      }
    }    
  }
  
  if(($form_id == 'editableviews_entity_form_pick_confirm_report') || ($form_id == 'editableviews_entity_form_picking_report') || ($form_id == 'editableviews_entity_form_party_packing_report') || ($form_id == 'editableviews_entity_form_unloading_form') || ($form_id == 'editableviews_entity_form_dispatch_data_report')) {
    // fetching supervisior on the basis of logged in users distributor id
    global $user;
    // Fetching distributor id  from each node
    $distributor_id = change_feeds_import_get_distributor_id($user->uid);    
    $query = db_select('field_data_field_resource_name', 'fps');
    $query->join('field_data_field_resource_type','fst','fst.entity_id = fps.entity_id');
    $query->join('node','n', 'n.nid = fps.entity_id');
    
    
    if($form_id == 'editableviews_entity_form_pick_confirm_report') {
      $query->condition('fst.field_resource_type_value', 'PICK CONFIRM SUPERVISOR');
      $field_supervisor = 'field_pc_pick_supervisor';
     // $field_count = 'field_picking_picking_team_count';
      $query->condition('n.uid', $distributor_id);
    }
    if($form_id == 'editableviews_entity_form_picking_report') {
      $query->condition('fst.field_resource_type_value', 'PICKING SUPERVISOR');
      $field_supervisor = 'field_picking_pick_supervisor';
     // $field_count = 'field_picking_picking_team_count';
      $query->condition('n.uid', $distributor_id);
    }
    if($form_id == 'editableviews_entity_form_party_packing_report') {
      $query->condition('fst.field_resource_type_value', 'PARTY PACKING SUPERVISOR');
      $field_supervisor = 'field_party_packing_supervisor';
      $query->condition('n.uid', $distributor_id);
     // $field_count = 'field_party_packer_team_count';
    }
    if($form_id == 'editableviews_entity_form_unloading_form') {
      $query->condition('fst.field_resource_type_value', 'Unloading SUPERVISOR');
      $field_supervisor = 'field_unloading_supervisor';
     // $field_count = 'field_unloading_team_count';
      $query->condition('n.uid', $distributor_id);
    }
    if ($form_id == 'editableviews_entity_form_dispatch_data_report') {
       $query->condition('fst.field_resource_type_value', 'Dispatch SUPERVISOR');
      $field_supervisor = 'field_dispatch_supervisor';
      $query->condition('n.uid', $central_distributor_id);
    }

    $query->fields('fps', array('field_resource_name_value'));
    $options = $query->execute()->FetchCol();
    $multi_supervisor = array_combine($options, $options);
    //$multi_supervisor = array_merge(array(" "=>'SELECT'),$multi_supervisor);
    //$count_array = array('1'=>'1','2'=>'2','3'=>'3','4'=>'4','5'=>'5','6'=>'6','7'=>'7','8'=>'8','9'=>'9');
    $count_array = array(1,2,3,4,5,6,7,8,9);
    $multi_count = array_merge(array("0"=>'SELECT'), $count_array);

    $query = db_select('field_data_field_resource_name', 'fps');
    $query->join('field_data_field_resource_type','fst','fst.entity_id = fps.entity_id');
    $query->join('node','n', 'n.nid = fps.entity_id');
    $query->condition('n.uid', $distributor_id);
    
    if($form_id == 'editableviews_entity_form_pick_confirm_report') {
      $query->condition('fst.field_resource_type_value', 'PICK CONFIRM NAME');
      $field_packer = 'field_pc_picker_name';
    }
    if($form_id == 'editableviews_entity_form_picking_report') {
      $query->condition('fst.field_resource_type_value', 'PICKER NAME');
      $field_packer = 'field_picking_picker_name';
    }
    if($form_id == 'editableviews_entity_form_party_packing_report') {
      $query->condition('fst.field_resource_type_value', 'PARTY PACKER NAME');
      $field_packer = 'field_party_packer_name';
    }
    if ($form_id == 'editableviews_entity_form_dispatch_data_report') {
      $query->condition('fst.field_resource_type_value', 'CASHIER');
      $field_packer = 'field_cashier_name';
      $query->condition('n.uid', $central_distributor_id);
    }

    $query->fields('fps', array('field_resource_name_value'));
    $options = $query->execute()->FetchCol();
    $multi_packer = array_combine($options, $options);
    $multi_packer = array_merge(array(" "=>'SELECT'),$multi_packer);
    
    foreach ($form['node'] as $key => $value) {
      $form['node'][$key]['field_unloading_date'][LANGUAGE_NONE][0]['#theme_wrappers'] = array();
      $form['node'][$key][$field_supervisor][LANGUAGE_NONE][0]['value']['#type'] = 'select';
      $form['node'][$key][$field_supervisor][LANGUAGE_NONE][0]['value']['#multiple'] = FALSE;
      $form['node'][$key][$field_supervisor][LANGUAGE_NONE][0]['value']['#options'] = $multi_supervisor;
      $form['node'][$key][$field_supervisor][LANGUAGE_NONE][0]['value']['#size'] = 1;
      $form['node'][$key]['field_dispatch_supervisor'][LANGUAGE_NONE][0]['#theme_wrappers'] = array();
      $form['node'][$key][$field_supervisor][LANGUAGE_NONE][0]['value']['#type'] = 'select';
      $form['node'][$key][$field_supervisor][LANGUAGE_NONE][0]['value']['#multiple'] = FALSE;
      $form['node'][$key][$field_supervisor][LANGUAGE_NONE][0]['value']['#options'] = $multi_supervisor;
      $form['node'][$key][$field_supervisor][LANGUAGE_NONE][0]['value']['#size'] = 1;
      if(($form_id == 'editableviews_entity_form_pick_confirm_report') || ($form_id == 'editableviews_entity_form_picking_report') || ($form_id == 'editableviews_entity_form_party_packing_report') || ($form_id == 'editableviews_entity_form_dispatch_data_report')) {
        $form['node'][$key][$field_packer][LANGUAGE_NONE][0]['value']['#type'] = 'select';
        $form['node'][$key][$field_packer][LANGUAGE_NONE][0]['value']['#multiple'] = FALSE;
        $form['node'][$key][$field_packer][LANGUAGE_NONE][0]['value']['#options'] = $multi_packer;
        $form['node'][$key][$field_packer][LANGUAGE_NONE][0]['value']['#size'] = 1;
      }
//      $form['node'][$key][$field_count][LANGUAGE_NONE][0]['value']['#type'] = 'select';
//      $form['node'][$key][$field_count][LANGUAGE_NONE][0]['value']['#multiple'] = FALSE;
//      $form['node'][$key][$field_count][LANGUAGE_NONE][0]['value']['#options'] = $multi_count;
//      $form['node'][$key][$field_count][LANGUAGE_NONE][0]['value']['#size'] = 1;
    }
  }
  // cashier name values only active cashier values
  if ($form_id == 'editableviews_entity_form_dispatch_data_report') {
       $select = array('' => '- Select -');
       $cashier_flag=1;
       $cashiers = get_all_resources_by_type('Cashier',$cashier_flag);
       $cashiers_boys = $select + $cashiers;
       $field_cashier = 'field_cashier_name';
       foreach ($form['node'] as $key => $value) { 
           $form['node'][$key][$field_cashier][LANGUAGE_NONE][0]['value']['#type'] = 'select';
           $form['node'][$key][$field_cashier][LANGUAGE_NONE][0]['value']['#multiple'] = FALSE;
           $form['node'][$key][$field_cashier][LANGUAGE_NONE][0]['value']['#options'] = $cashiers_boys;
           $form['node'][$key][$field_cashier][LANGUAGE_NONE][0]['value']['#size'] = 1;
       }
      
  }
  
  if ($form_id == 'editableviews_entity_form_hul_code_master') {
    $form['#validate'][] = 'hul_phone_no_validate';
  }
}

function hul_phone_no_validate(&$form, &$form_state) {
  $mess = '';
  foreach($form['node'] as $key => $value) {
    $node_phone_number[$key]['hul_code'] = $value['#entity']->title;
  }
  foreach($form_state['values']['node'] as $nid => $form_data) {
    $hul_code = $form_state['values']['node'][$nid];
    $hul_phone_no = $form_data['field_hul_phone_no'][LANGUAGE_NONE][0]['value'];
    if (!preg_match('/^[0-9]*$/', $hul_phone_no)) {
      $mess .= t("Phone number must be numeric for HUL Code - " . $node_phone_number[$nid]['hul_code'] . '<br>');
    }
    else if (strlen($hul_phone_no) != 10) {
      $mess .= t("Phone number has to be 10 digits for HUL Code - " . $node_phone_number[$nid]['hul_code'] . '<br>');
    }
  }
  if(!empty($mess)) {
    form_set_error('form', $mess);
  }
}
// Contact Number Validation.
function validate_contact_number(&$form, &$form_state) {  
    $mess = '';
    foreach ($form_state['values']['node'] as $nid => $form_data) {
        $contact_number = $form_data['field_contact_number'][LANGUAGE_NONE][0]['value'];
        if (!preg_match('/^[0-9]*$/', $contact_number)) {
          $mess .= t("Contact Number must be numeric.");
        }
    }
    if (!empty($mess)) {
        form_set_error('form', $mess);    
    }
}

function payment_collection_validate($form, &$form_state) {
  foreach($form_state['values']['node'] as $nid => $form_data){
    $title = $form_data['title'];
    $cash_amt = $form_data['field_cash_amt']['und'][0]['value'];
    $cheque_amt = $form_data['field_collection_cheque_amt']['und'][0]['value'];
    $cheque_no = $form_data['field_collection_cheque_number']['und'][0]['value'];
    $cheque_date = $form_data['field_collection_cheque_date']['und'][0]['value'];
    $return_flag = $form_data['field_returned_bill_flag']['und'][0]['value'];
    //remark functionality
    $return_remarks = $form_data['field_return_remarks']['und'][0]['value'];
    $diff_amount = $form_data['field_field_amnt_difference']['und'][0]['value'];
    $partial_collection_remarks = $form_data['field_partial_collection_remarks']['und'][0]['value'];
    //Fine Amount
    $flag_type = $form_data['field_flag']['und'][0]['value'];
    $fine_amount = $form_data['field_fine_amount']['und'][0]['value'];

// || !empty($cheque_date) && (empty($cheque_amt) || empty($cheque_no)) || !empty($cheque_no) && (empty($cheque_amt) || empty($cheque_date))
    if( !empty($cheque_amt) && (empty($cheque_date) || empty($cheque_no)) ) {
      form_set_error('form', t('Please fill cheque number, cheque amount and cheque date for bill '.$title));
    }
    if(!empty($return_flag) && (!empty($cheque_amt) || !empty($cash_amt) || !empty($fine_amount))) {
      form_set_error('form', t("Return flag is marked for $title. Please remove cash, cheque and fine amount."));
    }
    if(!empty($return_flag) && (empty($return_remarks))) {
      form_set_error('form', t("Return flag is marked for bill:$title. Please write return remark."));
    }
    if(!empty($diff_amount) && empty($partial_collection_remarks) && (!empty($cheque_amt) || !empty($cash_amt))) {
      form_set_error('form', t("Please write partial collection remark for bill:$title."));
    }
    if($flag_type == 'bounced' && empty($fine_amount) && $fine_amount !=='0') {
      form_set_error('form', t("Please add fine amount for bounced bill:$title."));
    }
  }
}

function collection_closure_validate($form, &$form_state) {
  foreach($form_state['values']['node'] as $nid => $form_data){
    $title = $form_data['title'];
    $closure_flag = $form_data['field_terminated_bill_flag']['und'][0]['value'];
    $collection_closure_remarks = $form_data['field_collection_closure_remarks']['und'][0]['value'];
    
    if(!empty($closure_flag) && empty($collection_closure_remarks)) {
      form_set_error('form', t("Closure flag is marked for $title. Please fill collection closure remark."));
    }
  }
  
}
// validate dispatch pre start time and start time
function validate_dispatch_time($form, &$form_state) {
    $mess = '';
    foreach ($form['node'] as $key => $value) { // It is for fetching existing node values
            $node_status[$key]['trip_id'] = $value['#entity']->title;
    }
    foreach($form_state['values']['node'] as $nid => $form_data){
      $dispatch_pre_start_time =  trim($form_data['field_dispatch_pre_start_time'][LANGUAGE_NONE][0]['value']);
      $dispatch_start_time = trim($form_data['field_dispatch_start_time'][LANGUAGE_NONE][0]['value']);
      $trip_id = $node_status[$nid]['trip_id'];
      $start_time_flag =  $end_time_flag = 0;
      
      if (!empty($dispatch_pre_start_time)) {
          $pre_start_time = explode(':',$dispatch_pre_start_time);
          if (count($pre_start_time) != 2) {
               $start_time_flag = 1;
          }
          if (!empty($pre_start_time)) {
              $hour = (int)$pre_start_time[0];
              $minutes_array = explode(' ',$pre_start_time[1]);
              $minutes = (int)$minutes_array[0];
              $am_pm =  strtolower(trim($minutes_array[1]));
          }
          if ($hour>12 || !is_numeric($hour) || $hour<=0 ) {
              $start_time_flag = 1;
          }
          if ($minutes>60 && is_numeric($minutes) ) {
                  $start_time_flag = 1;
          }
          if ($minutes< 0 && !is_numeric($minutes)) {
                  $start_time_flag = 1;
          }
          if ($minutes< 0) {
                  $start_time_flag = 1;
          }
          if($am_pm!='am' && $am_pm!='pm') {
                  $start_time_flag = 1;
          }
     }
     // dispatch end time validation
     if (!empty($dispatch_start_time)) {
          $pre_start_time = explode(':',$dispatch_start_time);
          if (count($pre_start_time) != 2) {
               $end_time_flag = 1;
          }
          if (!empty($pre_start_time)) {
              $hour = (int)$pre_start_time[0];
              $minutes_array = explode(' ',$pre_start_time[1]);
              $minutes = (int)$minutes_array[0];
              $am_pm =  strtolower(trim($minutes_array[1]));
          }
          if ($hour>12 || !is_numeric($hour) || $hour<=0 ) {
              $end_time_flag = 1;
          }
          if ($minutes>60 && is_numeric($minutes) ) {
                  $end_time_flag = 1;
          }
          if ($minutes< 0 && !is_numeric($minutes)) {
                  $end_time_flag = 1;
          }
          if ($minutes< 0) {
                  $end_time_flag = 1;
          }
          if($am_pm!='am' && $am_pm!='pm') {
                  $end_time_flag = 1;
          }
          
     }
    if ($start_time_flag == 1) {
        $mess.= t('Please enter valid dispatch start time for Trip ID:'.$trip_id.'.Allowed format is hh:mm AM/PM').'<br>'; 
    }
    if ($end_time_flag == 1) {
       $mess.= t('Please enter valid dispatch end time for Trip ID:'.$trip_id.'.Allowed format is hh:mm AM/PM').'<br>'; 
    }
  }
  //print_r($mess);die;
  if (!empty($mess)) {
      form_set_error('form',$mess);
  }
}

function check_active_vehicles($string,$central_distributor_id) {
  $result = array();
  if (!empty($string) && !empty($central_distributor_id)) {
    $query = db_select('node', 'n');
    $query->leftjoin('field_data_field_is_active', 'is_active', 'is_active.entity_id = n.nid');
    //$query->join('field_data_field_mode_of_contract', 'mode_contract', 'mode_contract.entity_id = n.nid');
    $query->condition('n.type', 'vehicle_master');
    $query->condition('is_active.field_is_active_value', 1);
    //$query->condition('mode_contract.field_mode_of_contract_value', 'Contracted');
    $query->condition('n.uid', $central_distributor_id);
    $query->condition('n.title', $string);
    $query->fields('n', array('title', 'nid'));
    $result = $query->execute()->fetchAllKeyed(0, 0);
  }
  return $result;
}


//This function is used to validate bill_editing_confirmation
function validate_bill_editing_confirmation($form, &$form_state) {
  $node_status = array();
  foreach ($form['node'] as $key => $value) { // It is for fetching existing node values
    if (isset($value['#entity']->title)) {
      if ($value['#entity']->field_confirm_bill_edit_status['und'][0]['value'] != 1) {
        form_set_error('form', t("Bill Confirmation status is not completed for trip: " . $value['#entity']->title));
      }
    }
  }
}

// This function is used to validate trip status
function validate_trip_status($form, &$form_state) {
    $node_status = array();
    global $user;
    $dis_id = change_feeds_import_get_distributor_id($user->uid);
    if (in_array('central_distributor', $user->roles)) {
         $central_distributor_id = change_feeds_import_get_distributor_id($user->uid);
    }
    else {
         // have to fetch parent distributor id
         $central_distributor_id = get_central_distributor_id($user->uid);
    }
    foreach ($form['node'] as $key => $value) { // It is for fetching existing node values
            $node_status[$key]['trip_id'] = $value['#entity']->title;
            $node_status[$key]['distributor_id'] = $value['#entity']->uid;
            
    }
   // This is user input values.  Edit screen, that if Pre-start or Start time is being entered/already entered for a Trip ID, then entering Cashier name is mandatory.
  foreach($form_state['values']['node'] as $nid => $form_data){
      $pre_start_time = trim($form_data[field_dispatch_pre_start_time][LANGUAGE_NONE][0]['value']);
      $dispatch_start_time = trim($form_data[field_dispatch_start_time][LANGUAGE_NONE][0]['value']);
      $cashier_name =  trim($form_data['field_cashier_name'][LANGUAGE_NONE][0]['value']);
      $dispatch_date = trim($form_data['field_dispatch_date'][LANGUAGE_NONE][0]['value']);
      $vehicle_no = trim($form_data['field_vehicle_no'][LANGUAGE_NONE][0]['value']);
      
      if (!empty($vehicle_no) && empty(validate_vehicle_number($vehicle_no,$central_distributor_id))) {
      form_set_error('form', t("Please enter valid Vehicle Number for Trip ID: " . $node_status[$nid]['trip_id']));
     }
      $active_vehicle = check_active_vehicles($vehicle_no,$central_distributor_id);
      if (empty($active_vehicle) && !empty($vehicle_no)) {
          form_set_error('form', t("Please select active vehicle for Trip ID: ". $node_status[$nid]['trip_id'])); 
      }
     
    if (empty($dispatch_date)) {
      form_set_error('form', t("Please enter the Dispatch date for Trip ID: " . $node_status[$nid]['trip_id']));
    }
    if (empty($pre_start_time)) {
      form_set_error('form', t("Please enter the Dispatch Start Time for Trip ID: " . $node_status[$nid]['trip_id']));
    }
    if (empty($dispatch_start_time)) {
      form_set_error('form', t("Please enter the Dispatch End Time for Trip ID: " . $node_status[$nid]['trip_id']));
    }

    if (!empty($pre_start_time) || !empty($dispatch_start_time)) {
            if(empty($cashier_name)) {
                form_set_error('form', t("Please enter the Cashier Name for Trip ID: ". $node_status[$nid]['trip_id'])); 
            }  
            if(empty($dispatch_date)){
              form_set_error('form', t("Please enter the Dispatch date for Trip ID: ".$node_status[$nid]['trip_id']));
            }
      }
      
    // Validation for Dispatched Assets.
    $query = db_select('node', 'n');
    $query->condition('n.type', 'assets_count');
    $query->condition('n.uid',$node_status[$nid]['distributor_id']);
    $query->condition('n.title', $node_status[$nid]['trip_id']);
    $query->leftjoin('field_data_field_dispatch_count', 'dc', 'dc.entity_id = n.nid');
    $query->addExpression("SUM(dc.field_dispatch_count_value)", 'total_dispatch_count_value');
    $res = $query->execute()->fetchField();
 
    if (strlen($res) == 0) {
      $flag = 0;
    }
    else {
      $flag = 1;
      break;
    }
    if ($flag == 0) {
      form_set_error('dispatch_count', 'Please enter Dispatched Assets for Trip ID ' . $node_status[$nid]['trip_id']);
    }
    // End Validation for Dispatched Assets.
  }
}

// function checks non working days ofresource and vehicle
function validate_working_day($form, &$form_state) {
     // This is user input values.  Edit screen, that if Pre-start or Start time is being entered/already entered for a Trip ID, then entering Cashier name is mandatory.
    $public_holidays = get_public_holiday();
    $weekoff = strtolower(get_resource_weekly_off_day());
    foreach($form_state['values']['node'] as $nid => $form_data){
      $vehicle_number =  trim($form_data['field_vehicle_no'][LANGUAGE_NONE][0]['value']);
      $dispatch_date = trim($form_data['field_dispatch_date'][LANGUAGE_NONE][0]['value']);
      $working_day = strtolower(date('l',strtotime($dispatch_date))); 
      $field_delivery_boys = $form_data['field_delivery_boy'][LANGUAGE_NONE];
      if (!empty($dispatch_date)) {
            if (!empty($field_delivery_boys)) {
                foreach($field_delivery_boys as $res_key=>$resource) {
                    $resource_nids[$resource['nid']] = $resource['nid'];
                    $resource_selected_weekly_off = get_resource_weeklyoff_selected(array($resource['nid']));
                    
                    $master_nid = $resource['nid'];
                    $type = 'resource_extra_working';
                    $start_period = strtotime($dispatch_date);
                    // checking already added this date in extra working
                    $is_exist = check_extra_working_exists($master_nid,$start_period,$type);
                    $resource_selected_weekly_off[$resource['nid']]['weekly_off_selected'];
                    if (empty($is_exist)) {
                        if (!empty($resource_selected_weekly_off[$resource['nid']]['weekly_off_selected']) && strtolower($resource_selected_weekly_off[$resource['nid']]['weekly_off_selected']) == $working_day) {
                            if(!empty($resource_selected_weekly_off[$resource['nid']]['resource_name'])) {
                             $mess.= t('You are selecting non working day(Dispacth Date:'.date('d-M-Y',strtotime($dispatch_date)).') for Resource:'.$resource_selected_weekly_off[$resource['nid']]['resource_name'].' Please add extra working day.').l(t('Add Extra Working'), '/resource-master-report/edit/', array('query' => array('field_resource_name_value'=>$resource_selected_weekly_off[$resource['nid']]['resource_name']),'attributes' => array('target' => '_blank'))).'<br>'; 
                            }
                        }
                        else if(empty($resource_selected_weekly_off[$resource['nid']]['weekly_off_selected']) && $weekoff == $working_day || in_array($dis_date,$public_holidays)) {
                           if(!empty($resource_selected_weekly_off[$resource['nid']]['resource_name'])) {
                               $mess.= t('You are selecting non working day(Dispacth Date:'.date('d-M-Y',strtotime($dispatch_date)).') for Resource:'.$resource_selected_weekly_off[$resource['nid']]['resource_name'].' Please add extra working day.').l(t('Add Extra Working'), '/resource-master-report/edit/', array('query' => array('field_resource_name_value'=>$resource_selected_weekly_off[$resource['nid']]['resource_name']),'attributes' => array('target' => '_blank'))).'<br>';
                            } 
                        }
                
                        
                    }
                }
            }
            $type = 'vehicle_master';
            $master_nid = get_nid_from_title($vehicle_number,$type);
            $type = 'vehicle_extra_working';
            $start_period = strtotime($dispatch_date);
            // checking already added this date in extra working
            $is_exist = check_extra_working_exists($master_nid,$start_period,$type);
            $dis_date = date('Y-m-d',strtotime($dispatch_date));
            if (!empty($dispatch_date) && !empty($vehicle_number) && empty($is_exist)) {
                 if ($weekoff == $working_day || in_array($dis_date,$public_holidays)) {
                     $mess.= t('You are selecting non working day(Dispacth Date:'.date('d-M-Y',strtotime($dispatch_date)).') for vehicle:'.$vehicle_number.' Please add extra working day.').l(t('Add Extra Working'), 'vehicle-master/edit/', array('query' => array('title'=>$vehicle_number),'attributes' => array('target' => '_blank'))).'<br>';
                 }
            }
        }
    }
  if (!empty($mess)) {
      form_set_error('form',$mess);
  }
}


function change_to_be_collected_amt_validate($form, &$form_state) {
  foreach($form_state['values']['node'] as $nid => $form_data){
    $to_be_collected_amt = $form_data['field_remaining_amt_collection']['und'][0]['value'];
    $declaration_rem = $form_data['field_declaration_remarks']['und'][0]['value'];
    $sales_reg_nid = $form_data['field_sales_bill_no_ref']['und'][0]['nid'];
    
    $query = db_select('node', 'n');
    $query->join('field_data_field_bill_value', 'bv', 'bv.entity_id = n.nid');
    $query->condition('n.type', 'sales_register_data');
    $query->condition('n.nid', $sales_reg_nid, '=');
    $query->fields('bv', array('field_bill_value_value'));
    $bill_value = $query->execute()->fetch();
    
    if(empty($to_be_collected_amt) || !is_numeric($to_be_collected_amt)) {
      form_set_error('form', t("To be collected amount is required and should be numeric."));
    }
    
    if (empty($declaration_rem) && ($to_be_collected_amt != $bill_value->field_bill_value_value)) {
      form_set_error('form', t("Declaration Remark is required due to change in collected amount."));
    }
  }
}

function modify_views_forms_field_widget_form_alter(&$element, &$form_state, $context) {
//  if($element['#field_name'] == 'field_picking_start_time' || $element['#field_name'] == 'field_picking_end_time' || $element['#field_name'] == 'field_unloading_start_time' || $element['#field_name'] == 'field_unloading_end_time' || $element['#field_name'] == 'field_party_packing_start_time' || $element['#field_name'] == 'field_party_packing_end_time') {
//    //$element['value']['#description'] = t('Enter Value in 24 Hr format (HH:MM)');
//  }
}

/**
 * Custom validate handler
 * @param array $form
 * @param array $form_state
 */
function node_title_validate($form, &$form_state) {
 // dpm($form_state);
  $title = $form_state['values']['title'];
  $type = $form_state['values']['type'];
  $query = db_select('node', 'n');
  $query->fields('n', array('title'));
  $query->addTag('node_uid');
  $query->condition('n.type', $type);
  $query->condition('n.title', $title);
  $result = $query->execute()->fetchField();
  if (!empty($result)) {
    form_set_error('title', t('This value already exists.Kindly enter unique value'));
  }
  
}


/**
 * 
 * @param type $vars
 * @return type
 */
function modify_views_forms_date_popup($vars) {
//  $element = $vars['element'];
//  $attributes = !empty($element['#wrapper_attributes']) ? $element['#wrapper_attributes'] : array('class' => array());
//  $attributes['class'][] = 'container-inline-date';
//  // If there is no description, the floating date elements need some extra padding below them.
//  $wrapper_attributes = array('class' => array('date-padding'));
//  if (empty($element['date']['#description'])) {
//    $wrapper_attributes['class'][] = 'clearfix';
//  }
//  // Add an wrapper to mimic the way a single value field works, for ease in using #states.
//  if (isset($element['#children'])) {
//    $element['#children'] = '<div id="' . $element['#id'] . '" ' . drupal_attributes($wrapper_attributes) .'>' . $element['#children'] . '</div>';
//  }
//  return '<div ' . drupal_attributes($attributes) .'>' . theme('form_element', $element) . '</div>';
}


function modify_views_forms_field_attach_validate($entity_type, $entity, &$errors) {

  if($entity_type == 'node') {
    if (!empty($entity->field_unloading_start_time)) {
      foreach ($entity->field_unloading_start_time as $langcode => $items) {
        foreach ($items as $delta => $item) {
          if (!empty($item['value']) && !preg_match("/^(?:0?[0-9]|1[0-2]):[0-5][0-9] [AP]M$/", $item['value'])) {   
            $nid = $entity->nid;
            form_set_error("node][$nid][field_unloading_start_time][$langcode][$delta][value", 'Please Enter data in 12 Hour Format with (AM/PM) for EXAMPLE 10:10 AM and 10:10 PM');
          }
        }
      }
    }

    if (!empty($entity->field_unloading_end_time)) {
      foreach ($entity->field_unloading_end_time as $langcode => $items) {
        foreach ($items as $delta => $item) {
          if (!empty($item['value']) && !preg_match("/^(?:0?[0-9]|1[0-2]):[0-5][0-9] [AP]M$/", $item['value'])) {
            $nid = $entity->nid;
            form_set_error("node][$nid][field_unloading_end_time][$langcode][$delta][value", 'Please Enter data in 12 Hour Format with (AM/PM) for EXAMPLE 10:10 AM and 10:10 PM');
          }
        }
      }
    }
    if (!empty($entity->field_party_packing_start_time)) {
      foreach ($entity->field_party_packing_start_time as $langcode => $items) {
        foreach ($items as $delta => $item) {
          if (!empty($item['value']) && !preg_match("/^(?:0?[0-9]|1[0-2]):[0-5][0-9] [AP]M$/", $item['value'])) {
            $nid = $entity->nid;
            form_set_error("node][$nid][field_party_packing_start_time][$langcode][$delta][value", 'Please Enter data in 12 Hour Format with (AM/PM) for EXAMPLE 10:10 AM and 10:10 PM');
          }
        }
      }
    }
    if (!empty($entity->field_party_packing_end_time)) {
      foreach ($entity->field_party_packing_end_time as $langcode => $items) {
        foreach ($items as $delta => $item) {
          if (!empty($item['value']) && !preg_match("/^(?:0?[0-9]|1[0-2]):[0-5][0-9] [AP]M$/", $item['value'])) {
            $nid = $entity->nid;
            form_set_error("node][$nid][field_party_packing_end_time][$langcode][$delta][value", 'Please Enter data in 12 Hour Format with (am/pm)');
          }
        }
      }
    }
    if (!empty($entity->field_picking_start_time)) {
      foreach ($entity->field_picking_start_time as $langcode => $items) {
        foreach ($items as $delta => $item) {
          if (!empty($item['value']) && !preg_match("/^(?:0?[0-9]|1[0-2]):[0-5][0-9] [AP]M$/", $item['value'])) {
            $nid = $entity->nid;
            form_set_error("node][$nid][field_picking_start_time][$langcode][$delta][value", 'Please Enter data in 12 Hour Format with (am/pm)');
          }
        }
      }
    }
    if (!empty($entity->field_picking_end_time)) {
      foreach ($entity->field_picking_end_time as $langcode => $items) {
        foreach ($items as $delta => $item) {
          if (!empty($item['value']) && !preg_match("/^(?:0?[0-9]|1[0-2]):[0-5][0-9] [AP]M$/", $item['value'])) {
            $nid = $entity->nid;
            form_set_error("node][$nid][field_picking_end_time][$langcode][$delta][value", 'Please Enter data in 12 Hour Format with (am/pm)');
          }
        }
      }
    }
  }
}

/**
 * 
 * @param type $user_field
 * @return type
 */
function _get_distributors_sales_status_option($user_field) {
   $res = array();
   $user_id = $GLOBALS['user']->uid;
   $distributor_id = change_feeds_import_get_distributor_id($user_id);
   if (!empty($distributor_id)) {
      $query = db_select('taxonomy_term_data', 't');
      $query->join("field_data_" .$user_field, 'uf', 'uf.entity_id = t.tid');
      $query->condition("uf." .$user_field. "_uid", $distributor_id);
      $query->fields('t', array('tid', 'name'));
      $res = $query->execute()->fetchAllKeyed(0, 1);
   }
   return $res;
}


function get_all_vehicle_data($central_distributor_id) {
   $res = array();
   //$user_id = $GLOBALS['user']->uid;
   //$distributor_id = change_feeds_import_get_distributor_id($user_id);
   if (!empty($distributor_id)) {
      $query = db_select('node', 'n');
      $query->fields('n', array('title'));
      $query->condition('n.type', 'vehicle_master');
      $query->condition('n.uid', $central_distributor_id);
      // New condition for fetching active vehicles only
      $query->leftjoin('field_data_field_is_active', 'is_active', 'is_active.entity_id = n.nid');
    //$query->join('field_data_field_mode_of_contract', 'mode_contract', 'mode_contract.entity_id = n.nid');
      $query->condition('n.type', 'vehicle_master');
      $query->condition('is_active.field_is_active_value', '1');
      $res = $query->execute()->fetchAllKeyed(0, 0);
   }
   return $res;
}
function validate_vehilce_master_edit(&$form, &$form_state) {
    //print_r($form_state['values']['node']);die;
    $mess = '';
    foreach ($form_state['values']['node'] as $nid => $form_data) {
        $vehicle_number = $form_data['title'];
        //$data = check_vehicle_contract_end_period($nid);
        $mode_of_contract = $form_data['field_mode_of_contract'][LANGUAGE_NONE][0]['value'];
        if ($mode_of_contract == 'Contracted') {
           if (empty($form_data['field_cost_per_month'][LANGUAGE_NONE][0][value])) {
               $mess .= t("Please enter Cost per Month for Vehilce Number:$vehicle_number") . '<br>';
           } 
        }
        elseif ($mode_of_contract == 'Market') {
            if (empty($form_data['field_cost_per_day'][LANGUAGE_NONE][0][value])) {
               $mess .= t("Please enter Cost per Day for Vehilce Number:$vehicle_number") . '<br>';
           } 
        }
        $mobile_number = trim($form_data['field_driver_phone_no'][LANGUAGE_NONE][0]['value']);
        $valid_mobile = validate_mobile($mobile_number);
        $field_is_active = trim($form_data['field_is_active'][LANGUAGE_NONE][0]['value']);
        if (empty($valid_mobile) && !empty($mobile_number)) {
            $mess .= t("Please enter valid driver mobile number for Vehilce Number:$vehicle_number") . '<br>';
        }
    }
    if (!empty($mess)) {
        form_set_error('form', $mess);
        
    }
}

function check_vehicle_contract_end_period($vehicle_nid) {
   global $user;
   $distributor_id = change_feeds_import_get_distributor_id($user->uid);
   if (!empty($vehicle_nid)) {
        $query = db_select('node', 'n');
        $end_period = strtotime(date('Y-m-d'));
        $end_period_change =  strtotime('-1 day', $end_period);
        $query->join('field_data_field_vehicle_number_ref', 'vehicle_ref', 'vehicle_ref.entity_id = n.nid');
        $query->join('field_data_field_end_period', 'end_period', 'end_period.entity_id = n.nid');
        $query->condition('vehicle_ref.field_vehicle_number_ref_nid', $vehicle_nid);
        $query->condition('end_period.field_end_period_value', $end_period, '>=');
        $query->condition('n.type', 'vehicle_contract');
        $query->condition('n.uid', $distributor_id);
        $query->fields('n', array('nid'));
        $query->orderBy('n.nid', array('desc'));
        $query->range(0, 1);
        $result = $query->execute()->fetchAllKeyed(0, 0);
        if (!empty($result)) {
            $node = node_load($vehicle_nid);
            if (!empty($node)) {
                $node->field_end_period_value[LANGUAGE_NONE][0]['value'] = $end_period_change;
                node_save($node);
            }
        }
    }
}

// validate vehicle reporting start time and end time.
//function validate_vehicle_reporting_time($form, &$form_state) {
//  $mess = '';
//  foreach ($form['node'] as $key => $value) { // It is for fetching existing node values
//    $node_status[$key]['trip_id'] = $value['#entity']->title;
//  }
//    
//  foreach ($form_state['values']['node'] as $nid => $form_data) {
//    
//    $vehicle_reporting_date = trim($form_data['field_vehicle_reporting_date'][LANGUAGE_NONE][0]['value']);
//    $vehicle_reporting_date1 = explode(" ",$vehicle_reporting_date);
//    $vehicle_reporting_date = strtotime($vehicle_reporting_date1[0]);
//    
//    $vehicle_time = trim($form_data['field_vehicle_reporting_time'][LANGUAGE_NONE][0]['value']);
//    
//    $vehicle_start_time = strtotime($vehicle_reporting_date1[0] . ' '. trim($form_data['field_vehicle_reporting_time'][LANGUAGE_NONE][0]['value']));
//   
//    $loading_dispatch_date = trim($form_data['field_loading_dispatch_date'][LANGUAGE_NONE][0]['value']);
//    $loading_dispatch_date1 = explode(" ",$loading_dispatch_date);
//    $loading_dispatch_date = strtotime($loading_dispatch_date1[0]);
//    
//    $dispatch_date = trim($form_data['field_dispatch_date'][LANGUAGE_NONE][0]['value']);
//    $dispatch_date1 = explode(" ",$dispatch_date);
//    $dispatch_date = strtotime($dispatch_date1[0]);
//    
//    $dispatch_pre_start_time = strtotime($dispatch_date1[0] .' '. trim($form_data['field_dispatch_pre_start_time'][LANGUAGE_NONE][0]['value']));
//    
//    $dispatch_start_time = strtotime($dispatch_date1[0] .' '. trim($form_data['field_dispatch_start_time'][LANGUAGE_NONE][0]['value']));
//    
//    $trip_id = $node_status[$nid]['trip_id'];
//    $start_time_flag = 0;
//   
//    if (!empty($vehicle_time)) {
//      $pre_start_time = explode(':', $vehicle_time);
//      if (count($pre_start_time) != 2) {
//        $start_time_flag = 1;
//      }
//      if (!empty($pre_start_time)) {
//        $hour = (int) $pre_start_time[0];
//        $minutes_array = explode(' ', $pre_start_time[1]);
//        $minutes = (int) $minutes_array[0];
//        $am_pm = strtolower(trim($minutes_array[1]));
//      }
//      if ($hour > 12 || !is_numeric($hour) || $hour <= 0) {
//        $start_time_flag = 1;
//      }
//      if ($minutes > 60 && is_numeric($minutes)) {
//        $start_time_flag = 1;
//      }
//      if ($minutes < 0 && !is_numeric($minutes)) {
//        $start_time_flag = 1;
//      }
//      if ($minutes < 0) {
//        $start_time_flag = 1;
//      }
//      if ($am_pm != 'am' && $am_pm != 'pm') {
//        $start_time_flag = 1;
//      }
//    }
//
//    if ($start_time_flag == 1) {
//      $mess .= t('Please enter valid vehicle reporting time for Trip ID:' . $trip_id . '.Allowed format is hh:mm AM/PM') . '<br>';
//    }
//
//    if ($vehicle_start_time > $dispatch_pre_start_time && $vehicle_start_time > $dispatch_start_time) {
//      $mess .= t('Vehicle Reporting time should be less than Dispatch Start & End Time for Trip ID:' . ' ' . $trip_id . '') . '<br>';
//    }
//    if ($vehicle_reporting_date > $dispatch_date) {
//      $mess .= t('Vehicle Reporting Date should be equal to or less than Dispatch Date for Trip ID:' . ' ' . $trip_id . '') . '<br>';
//    }
//
//    if ($loading_dispatch_date > $dispatch_date) {
//      $mess .= t('Loading/Dispatch Date field should be equal to or less than Dispatch Date for Trip ID:' . ' ' . $trip_id . '') . '<br>';
//    }
//
//    if ($vehicle_reporting_date > $loading_dispatch_date) {
//      $mess .= t('Vehicle Reporting Date should be equal to or less than Loading/Dispatch Date for Trip ID:' . ' ' . $trip_id . '') . '<br>';
//    }
//  }
// 
//  if (!empty($mess)) {
//    form_set_error('form', $mess);
//  }
//}
