<?php

require_once DRUPAL_ROOT . '/sites/all/modules/custom/reverse_geocode/directions-api-clients-route-optimization-master/php/SwaggerClient-php/autoload.php';

function dispatch_planning_menu() {

  $items['edit-trip-delivered'] = array(
    'title' => 'Edit Delivered Trip -details',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_edit_trip_delivered_callback_form'),
    'access arguments' => array('dispatch planning screen'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'dispatch_planning_farey.form.inc',
    // Page callback, etc. need to be added here.
  );

  $items['godown-short-screen'] = array(
    'title' => 'Godown Short Screen',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_godown_callback_form'),
    'access arguments' => array('dispatch planning screen'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'dispatch_planning_godown.form.inc',
    // Page callback, etc. need to be added here.
  );

  $items['sales-register-bills/autocomplete/%'] = array(
    'title' => 'bills autocomplete',
    'page callback' => '_get_all_tripsbill_from_sales_register',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['godown-short/import'] = array(
    'title' => 'Godown Short Upload',
    'description' => 'Godown Short Upload',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('godown_short_upload_form'),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'godown_short_upload.inc',
  );

  $items['full-deliver/import'] = array(
    'title' => 'Full deliver or undeliver upload',
    'description' => 'Full deliver or undeliver upload',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('full_deliver_upload_form'),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'full_deliver_upload.inc',
  );

  $items['partial-deliver/import'] = array(
    'title' => 'Partial Delivered Upload',
    'description' => 'Partial Delivered Upload',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('partial_deliver_upload_form'),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'partial_deliver_upload.inc',
  );

  $items['full-return-printout'] = array(
    'title' => 'Full Return Printout',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('get_data_of_full_return_form'),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'full_return_printout.inc',
  );

  $items['download-return/%'] = array(
    'title' => 'Download Full Return',
    'page callback' => 'download_return',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'full_return_printout.inc',
  );

  $items['partial-return-printout'] = array(
    'title' => 'Partial Return Printout',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('get_data_of_partial_return_form'),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'partial_return_printout.inc',
  );

  $items['delivery-pending-printout'] = array(
    'title' => 'Delivery Pending Printout',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('get_data_of_delivery_pending_form'),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'delivery_pending_printout.inc',
  );
  $items['download-delivery-pending/%/%'] = array(
    'title' => 'Download Delivery Pending',
    'page callback' => 'download_delivery_pending',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'delivery_pending_printout.inc',
  );


  $items['download-partial-return/%'] = array(
    'title' => 'Download Partial Return',
    'page callback' => 'download_partial_return',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'partial_return_printout.inc',
  );

  $items['delivered-trip-data'] = array(
    'title' => 'Delivered Trip',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_delivered_trip_data_callback'),
    'access arguments' => array('dispatch planning screen'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'dispatch_planning_farey.form.inc',
    // Page callback, etc. need to be added here.
  );
  $items['delivered-trip-data/export'] = array(
    'title' => 'Delivered Trip',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_delivered_trip_data_download_callback'),
    'access arguments' => array('dispatch planning screen'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'dispatch_planning_farey.form.inc',
    // Page callback, etc. need to be added here.
  );

  $items['delivered-tripwise-vrs-data'] = array(
    'title' => 'VRS data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_delivered_tripwise_vrs_data_callback'),
    'access arguments' => array('Ptl trip creation'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'dispatch_planning_farey_vrs.form.inc',
    // Page callback, etc. need to be added here.
  );

  $items['delivered-tripwise-vrs-delete-data'] = array(
    'title' => 'VRS delete data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_delivered_tripwise_vrs_delete_data_callback'),
    'access arguments' => array('Ptl trip creation'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'dispatch_planning_farey_vrs.form.inc',
    // Page callback, etc. need to be added here.
  );

  $items['admin/dispatch-planning'] = array(
    'title' => 'Dispatch Planning',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dispatch_planning_form'),
    'access arguments' => array('dispatch planning screen'),
    'type' => MENU_NORMAL_ITEM,
    // Page callback, etc. need to be added here.
  );
  $items['admin/master-dispatch-planning'] = array(
    'title' => 'Master Trip Creation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('master_dispatch_planning_form'),
    'access arguments' => array('Ptl trip creation'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'master_dispatch_planning_form.inc',
    // Page callback, etc. need to be added here.
  );
  $items['admin/delete-master-dispatch-planning'] = array(
    'title' => 'Delete Master Trip Creation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('delete_master_dispatch_planning_form'),
    'access arguments' => array('Ptl trip creation'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'master_dispatch_planning_form.inc',
    // Page callback, etc. need to be added here.
  );
  $items['admin/dispatch-planning/form'] = array(
    'title' => 'Dispatch Planning',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
    // Access callback, page callback, and theme callback will be inherited
    // from 'admin/config/system/foo', if not specified here to override.
  );
  $items['admin/dispatch-planning/delete'] = array(
    'title' => 'Delete trips',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('trip_delete_form'),
    'access arguments' => array('dispatch planning screen'),
    'weight' => 2,
    // Page callback and theme callback will be inherited from
    // 'admin/config/system/foo', if not specified here to override.
    // Need to add access callback or access arguments.
  );
  $items['admin/dispatch-planning/delivery-pending'] = array(
    'title' => 'Delivery Pending',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('delivery_pending_form'),
    'access arguments' => array('dispatch planning screen'),
    'file' => 'delivery_pending.form.inc',
    'weight' => 1,
    // Page callback and theme callback will be inherited from
    // 'admin/config/system/foo', if not specified here to override.
    // Need to add access callback or access arguments.
  );
  // Need separate menu without tab.
  $items['admin/dispatch_planning/delivery_pending'] = array(
    'title' => 'Delivery Pending',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('delivery_pending_form'),
    'access arguments' => array('dispatch planning screen'),
    'file' => 'delivery_pending.form.inc',
  );

  $items['admin/dispatch-planning/api-url'] = array(
    'title' => 'API URL',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('api_dispatch_uri_setting_form'),
    'access arguments' => array('dispatch planning api url'),
    'file' => 'api_dispatch_uri_setting_form.inc',
    'weight' => 3,
  );

  $items['modified-van-autocomplete-callback/%'] = array(
    'title' => 'Get All Modified Van',
    'page callback' => 'get_modified_van_from_loading_date',
    'access callback' => TRUE,
    'page arguments' => array(1),
  );
  $items['bill/autocomplete'] = array(
    'title' => 'bill_autocomplete',
    'page callback' => 'bill_autocomplete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['vrswise-trip/autocomplete'] = array(
    'title' => 'trip_autocomplete',
    'page callback' => 'vrswise_trip_id_autocomplete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['dp_trip/autocomplete'] = array(
    'title' => 'trip_autocomplete',
    'page callback' => 'dp_trip_id_autocomplete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['bill/pending/autocomplete/%'] = array(
    'title' => 'bill_pending_autocomplete',
    'page callback' => 'bill_pending_autocomplete',
    'page arguments' => array(3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['bills/autocomplete/%'] = array(
    'title' => 'bills autocomplete',
    'page callback' => '_get_all_tripsbill',
    'page arguments' => array(2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['trip/autocomplete'] = array(
    'title' => 'trip_id_autocomplete',
    'page callback' => 'trip_id_autocomplete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['vehicle/autocomplete'] = array(
    'title' => 'vehicle_names_autocomplete',
    'page callback' => 'vehicle_names_autocomplete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['hht_id/autocomplete'] = array(
    'title' => 'hht_id_autocomplete',
    'page callback' => 'hht_id_autocomplete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['cashier/autocomplete'] = array(
    'title' => 'cashier_names_autocomplete',
    'page callback' => 'cashier_names_autocomplete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['runsheet/autocomplete'] = array(
    'title' => 'runsheet_autocomplete',
    'page callback' => 'runsheet_autocomplete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'delete_fareye_dp_id_form.inc',
  );

// $items['dispatch-planning-cron'] = array(
//    'title' => '',
//    'page callback' => 'dispatch_planning_cron_callback',
//    'access callback' => TRUE,
//    'type' => MENU_NORMAL_ITEM,
//  );
  $items['loose-picking-sheet'] = array(
    'title' => 'Loose PICKING SHEET',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ptl_loose_sheet_form'),
    'access arguments' => array('Distributor Upload File'),
    'type' => MENU_CALLBACK,
    'file' => 'ptl_dispatch_planning.inc',
  );
  $items['billwise-picking-sheet'] = array(
    'title' => 'Bill-wise Loose Picking Sheet',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ptl_billwise_sheet_form'),
    'access arguments' => array('Distributor Upload File'),
    'type' => MENU_CALLBACK,
    'file' => 'ptl_dispatch_planning.inc',
  );
  $items['download-loose-picking/%'] = array(
    'title' => 'Download PTL Loose',
    'page callback' => 'download_ptl_loose_sheet',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'ptl_dispatch_planning.inc',
  );
  $items['download-billwise-picking/%'] = array(
    'title' => 'Download PTL Billwise',
    'page callback' => 'download_ptl_billwise',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'ptl_dispatch_planning.inc',
  );
  $items['cld-picking-sheet'] = array(
    'title' => 'CLD PICKING SHEET',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ptl_cld_sheet_form'),
    'access arguments' => array('Distributor Upload File'),
    'type' => MENU_CALLBACK,
    'file' => 'ptl_dispatch_planning.inc',
  );
  $items['download-cld-picking/%'] = array(
    'title' => 'CLD PICKING SHEET',
    'page callback' => 'download_ptl_cld_sheet',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'ptl_dispatch_planning.inc',
  );
  $items['delete-ptl-trip'] = array(
    'title' => 'Resent Trip To PTL',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('delete_fetch_data_ptl_trip_form'),
    'access arguments' => array('Ptl trip creation'),
    'type' => MENU_CALLBACK,
    'file' => 'ptl_dispatch_planning.inc',
  );
  $items['create-ptl-trip'] = array(
    'title' => 'Create Trip To PTL',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('create_fetch_data_ptl_trip_form'),
    'access arguments' => array('Ptl trip creation'),
    'type' => MENU_CALLBACK,
    'file' => 'ptl_dispatch_planning.inc',
  );
  $items['drs-box-id-sheet'] = array(
    'title' => 'DRS BOX ID',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drs_box_id_sheet_form'),
    'access arguments' => array('Distributor Upload File'),
    'type' => MENU_CALLBACK,
    'file' => 'ptl_dispatch_planning.inc',
  );
  $items['download-drs-box-id/%'] = array(
    'title' => 'Download DRS BOX ID',
    'page callback' => 'download_drs_box_id_sheet',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'ptl_dispatch_planning.inc',
  );
// Master PTL
  $items['master-loose-picking-sheet'] = array(
    'title' => 'Master Loose PICKING SHEET',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('master_ptl_loose_sheet_form'),
    'access arguments' => array('Distributor Upload File'),
    'type' => MENU_CALLBACK,
    'file' => 'master_ptl_dispatch_planning.inc',
  );
  $items['download-master-loose-picking/%'] = array(
    'title' => 'Download Master PTL Loose',
    'page callback' => 'download_master_ptl_loose_sheet',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'master_ptl_dispatch_planning.inc',
  );
  $items['master-cld-picking-sheet'] = array(
    'title' => 'Master CLD PICKING SHEET',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('master_ptl_cld_sheet_form'),
    'access arguments' => array('Distributor Upload File'),
    'type' => MENU_CALLBACK,
    'file' => 'master_ptl_dispatch_planning.inc',
  );
  $items['download-master-cld-picking/%/%'] = array(
    'title' => 'CLD PICKING SHEET',
    'page callback' => 'download_master_ptl_cld_sheet',
    'page arguments' => array(1, 2),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'master_ptl_dispatch_planning.inc',
  );
  $items['delete-master-ptl-trip'] = array(
    'title' => 'Resent Master Trip To PTL',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('delete_fetch_data_master_ptl_trip_form'),
    'access arguments' => array('Ptl trip creation'),
    'type' => MENU_CALLBACK,
    'file' => 'master_ptl_dispatch_planning.inc',
  );
  $items['create-master-ptl-trip'] = array(
    'title' => 'Create Master Trip To PTL',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('create_fetch_data_master_ptl_trip_form'),
    'access arguments' => array('Ptl trip creation'),
    'type' => MENU_CALLBACK,
    'file' => 'master_ptl_dispatch_planning.inc',
  );
//Master trip box id report
  $items['master-trip-box-id'] = array(
    'title' => 'Master Trip – Box IDs Report',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('master_trip_box_id_form'),
    'access arguments' => array('Distributor Upload File'),
    'type' => MENU_CALLBACK,
    'file' => 'master_ptl_dispatch_planning.inc',
  );
  $items['download-master-trip-box-id/%'] = array(
    'title' => 'Master Trip – Box IDs Report',
    'page callback' => 'download_master_trip_box_id',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'master_ptl_dispatch_planning.inc',
  );


  $items['vrs-popup-details/%ctools_js/%/%'] = array(
    'page callback' => 'vrs_popup_details_callback',
    'page arguments' => array(1, 2, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['dispatch-assets-screen'] = array(
    'title' => 'Enter Dispatched Assets',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_dispatch_assets_form'),
    'access arguments' => array('dispatch planning screen'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'dispatch_assets.form.inc'
  );

  $items['planned-assets-screen'] = array(
    'title' => 'Enter Planned Assets',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_planned_assets_form'),
    'access arguments' => array('dispatch planning screen'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'planned_assets.form.inc'
  );

  $items['delete-fareye-dp-id'] = array(
    'title' => 'Delete Fareye data DP ID wise',
    'description' => 'Delete Fareye data DP ID wise',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('delete_fareye_dp_id_form'),
    'access arguments' => array('Delete Api data'),
    'file' => 'delete_fareye_dp_id_form.inc',
  );

  $items['asset-summary-printout'] = array(
    'title' => 'Returns Summary Printout',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('get_data_of_asset_summary_return_form'),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'asset_summary_return_printout.inc',
  );

  $items['delivery-summary-printout'] = array(
    'title' => 'Delivery Summary Printout',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('get_data_of_delivery_summary_return_form'),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'delivery_summary_return_printout.inc',
  );

  $items['get_bank_names/autocomplete'] = array(
    'title' => 'Autocomplete for Bank Names',
    'page callback' => '_get_bank_names',
    'access arguments' => array('returns confirmation'), //or whatever permission makes sense
    'type' => MENU_CALLBACK,
  );

  $items['delivery-pending-report'] = array(
    'title' => 'Delivery Pending Report',
    'page callback' => array('delivery_pending_report_callback'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'delivery_pending_report.inc',
  );

  $items['delivery-pending-report/export'] = array(
    'title' => 'Delivery Pending Report Export',
    'description' => 'Delivery Pending Report Export',
    'page callback' => array('delivery_pending_export'),
    'file' => 'delivery_pending_report.inc',
    'access callback' => TRUE,
  );

  $items['delivery-confirmation-status-report'] = array(
    'title' => 'Delivery Confirmation Status Report',
    'page callback' => 'delivery_confirmation_status_callback',
    'access arguments' => array('Distributor Upload File'),
    'type' => MENU_CALLBACK,
    'file' => 'delivery_confirmation_status_report.inc',
  );

  $items['delivery-confirmation-status-report/export'] = array(
    'title' => 'Delivery Confirmation Status Report Export',
    'description' => 'Delivery Confirmation Status Report Export',
    'page callback' => array('delivery_confirmation_status_export'),
    'file' => 'delivery_confirmation_status_report.inc',
    'access callback' => TRUE,
  );
  // CLD Confirmation Sheet.
  $items['cld-confirmation-sheet'] = array(
    'title' => 'CLD CONFIRMATION SHEET',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ptl_cld_confirmation_sheet_form'),
    'access arguments' => array('Distributor Upload File'),
    'type' => MENU_CALLBACK,
    'file' => 'ptl_dispatch_planning.inc',
  );
  $items['download-cld-confirmation/%'] = array(
    'title' => 'CLD CONFIRMAION SHEET',
    'page callback' => 'download_ptl_cld_confirmation_sheet',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'ptl_dispatch_planning.inc',
  );

  $items['admin/config/sms-config'] = array(
    'title' => 'Setting Form For SMS Config',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sms_config_form'),
    'access callback' => 'check_if_fr_role_user_admin',
  );
  $items['message-re-send/%'] = array(
    'title' => 'Message Resend',
    'page callback' => 'message_re_triggered',
    'page arguments' => array(1),
    'access arguments' => array('Distributor Upload File'),
  );
  $items['message-send-cron'] = array(
    'title' => 'Message Send Cron',
    'page callback' => 'message_triggered_cron',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );  
  $items['bill-wise-message-re-send/%'] = array(
    'title' => 'Message Resend',
    'page callback' => 'bill_message_re_triggered',
    'page arguments' => array(1),
    'access arguments' => array('Distributor Upload File'),
  );

  return $items;
}

/**
 * Ajax menu callback.
 */
function vrs_popup_details_callback($ajax, $type, $trip_number) {
  if ($ajax) {
    ctools_include('ajax');
    ctools_include('modal');

    $form_state = array(
      'ajax' => TRUE,
      'title' => t("$type Bill Details"),
      'type' => $type,
      'trip_number' => $trip_number,
    );

    // Use ctools to generate ajax instructions for the browser to create
    // a form in a modal popup.
    $output = ctools_modal_form_wrapper('vrs_popup_details_form', $form_state);

    // If the form has been submitted, there may be additional instructions
    // such as dismissing the modal popup.
    if (!empty($form_state['ajax_commands'])) {
      $output = $form_state['ajax_commands'];
    }

    // Return the ajax instructions to the browser via ajax_render().
    print ajax_render($output);
    drupal_exit();
  }
  else {
    return drupal_get_form('vrs_popup_details_form');
  }
}

/**
 * Drupal form to be put in a modal.
 */
function vrs_popup_details_form($form, $form_state) {
  $form = array();
  $trip_number = $form_state['trip_number'];
  $type = $form_state['type'];

  $query = db_select('dispatch_planning_api_data', 'ad');
  $query->condition('ad.runsheet_number', $trip_number, '=');


  if ($type == 'Signed_Bills') {
    $header = array('beat_name', 'party_code', 'party_name', 'bill_number', 'bill_date', 'bill_value', 'res_confirm_signed_bill_amount');
    $query->condition('ad.res_confirm_signed_bill_amount', 'NA', '!=');
    $query->isNotNull('ad.res_confirm_signed_bill_amount');
  }
  else if ($type == 'Cheque_Bills') {
    $header = array('beat_name', 'party_code', 'party_name', 'bill_number', 'bill_date', 'bill_value', 'res_cheque_amount');
    $query->condition('ad.res_cheque_amount', 'NA', '!=');
    $query->isNotNull('ad.res_cheque_amount');
  }
  else {
    $header = array('beat_name', 'party_code', 'party_name', 'bill_number', 'bill_date', 'bill_value', 'res_cash_amount');
    $query->condition('ad.res_cash_amount', 'NA', '!=');
    $query->isNotNull('ad.res_cash_amount');
  }
  // $query->condition('ad.hub', $rs_code, '=');
  $query->fields('ad', $header);
  $rows = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  $form['ret_trip_details'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
  );
  return $form;
}

function dispatch_planning_permission() {

  return array(
    'dispatch planning screen' => array(
      'title' => t('dispatch planning screen'),
      'description' => t('View and operate the dispatch planning screen')
    ),
    'dispatch planning screen-rs-admin' => array(
      'title' => t('dispatch planning screen-rs-admin'),
      'description' => t('View and operate for only Rs-admin Role')
    ),
    'only-rs-admin-with-distributor' => array(
      'title' => t('only-rs-admin-with-distributor'),
      'description' => t('View data for only Rs-admin and Distributor Role')
    ),
    'only-rs-admin-with existing data' => array(
      'title' => t('only-rs-admin-with existing data'),
      'description' => t('only-rs-admin-with existing data')
    ),
    'dispatch planning api url' => array(
      'title' => t('dispatch planning api url'),
      'description' => t('dispatch planning api url'),
    ),
    'services_access_ptl_api' => array(
      'title' => t(''),
      'description' => t('PTL Api Access')
    ),
    'services_access_farey_api' => array(
      'title' => t('Farey Api Access'),
      'description' => t('Farey Api Access')
    ),
    'Ptl trip creation' => array(
      'title' => t('Ptl trip creation'),
      'description' => t('Ptl trip creation')
    ),
    'Delete Api data' => array(
      'title' => t('Delete Api data'),
      'description' => t('Delete Api data')
    )
  );
}

/**
 * 
 * @return array API for PTL data
 */
function dispatch_planning_services_resources() {
  $ptl_resource = array(
    '#api_version' => 3002,
  );
  $ptl_resource = array(
    'ptl-api-data' => array(
      'actions' => array(
        'dispatch-planning-api-data-fetch' => array(
          'help' => 'Get Farey Data',
          'callback' => 'fetch_dispatch_planning_api_data',
          'args' => array(
            array(
              'name' => 'data',
              'type' => 'array',
              'description' => 'Post data',
              'source' => 'data',
              'optional' => TRUE,
            ),
          ),
          'file' => array(
            'type' => 'inc',
            'module' => 'dispatch_planning',
            'name' => 'dispatch_planning_farey_api'
          ),
          'access arguments' => array('services_access_farey_api'),
        ),
        'ptl-api-put-qty-sum' => array(
          'help' => 'Update PTL Put Qty Sum Table Data',
          'callback' => 'update_ptl_put_qty_sum_data',
          'args' => array(
            array(
              'name' => 'ptl_job',
              'type' => 'string',
              'description' => 'PTL JOB',
              'source' => array('data' => 'ptl_job'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'id',
              'type' => 'string',
              'description' => 'ID',
              'source' => array('data' => 'id'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'rs_code',
              'type' => 'string',
              'description' => 'Rs Code',
              'source' => array('data' => 'rs_code'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'api_time',
              'type' => 'string',
              'description' => 'line_count',
              'source' => array('data' => 'api_time'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'line_count',
              'type' => 'string',
              'description' => 'line_count',
              'source' => array('data' => 'line_count'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'put_qty_sum',
              'type' => 'string',
              'description' => 'Put qty sum',
              'source' => array('data' => 'put_qty_sum'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'box_id',
              'type' => 'string',
              'description' => 'Box ID',
              'source' => array('data' => 'box_id'),
              'optional' => TRUE,
            ),
          ),
          'file' => array(
            'type' => 'inc',
            'module' => 'dispatch_planning',
            'name' => 'ptl_dispatch_planning'
          ),
          'access arguments' => array('services_access_ptl_api'),
        ),
        'master-ptl-api-put-qty-sum' => array(
          'help' => 'Update PTL Put Qty Sum Table Data',
          'callback' => 'update_master_ptl_put_qty_sum_data',
          'args' => array(
            array(
              'name' => 'ptl_job',
              'type' => 'string',
              'description' => 'PTL JOB',
              'source' => array('data' => 'ptl_job'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'id',
              'type' => 'string',
              'description' => 'ID',
              'source' => array('data' => 'id'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'rs_code',
              'type' => 'string',
              'description' => 'Rs Code',
              'source' => array('data' => 'rs_code'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'api_time',
              'type' => 'string',
              'description' => 'line_count',
              'source' => array('data' => 'api_time'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'line_count',
              'type' => 'string',
              'description' => 'line_count',
              'source' => array('data' => 'line_count'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'put_qty_sum',
              'type' => 'string',
              'description' => 'Put qty sum',
              'source' => array('data' => 'put_qty_sum'),
              'optional' => FALSE,
            ),
          ),
          'file' => array(
            'type' => 'inc',
            'module' => 'dispatch_planning',
            'name' => 'master_ptl_dispatch_planning'
          ),
          'access arguments' => array('services_access_ptl_api'),
        ),
        'ptl-api-data-fetch' => array(
          'help' => 'Get PTL Data',
          'callback' => 'fetch_ptl_data',
          'args' => array(
            array(
              'name' => 'rs_code',
              'type' => 'string',
              'description' => 'RS Code',
              'source' => array('data' => 'rs_code'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'api_time',
              'type' => 'string',
              'description' => 'Pass last fetch time',
              'source' => array('data' => 'api_time'),
              'optional' => FALSE,
            ),
          ),
          'file' => array(
            'type' => 'inc',
            'module' => 'dispatch_planning',
            'name' => 'ptl_dispatch_planning'
          ),
          'access arguments' => array('services_access_ptl_api'),
        ),
        'ptl-sku-ean-api' => array(
          'help' => 'Get SKU EAn and MRP Data',
          'callback' => 'fetch_sku_ean_mrp_data',
          'args' => array(
            array(
              'name' => 'rs_code',
              'type' => 'string',
              'description' => 'RS Code',
              'source' => array('data' => 'rs_code'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'api_time',
              'type' => 'string',
              'description' => 'Pass last fetch time',
              'source' => array('data' => 'api_time'),
              'optional' => FALSE,
            ),
          ),
          'file' => array(
            'type' => 'inc',
            'module' => 'dispatch_planning',
            'name' => 'ptl_dispatch_planning'
          ),
          'access arguments' => array('services_access_ptl_api'),
        ),
        'ptl-api-data-update' => array(
          'help' => 'Get PTL Data',
          'callback' => 'update_ptl_data',
          'args' => array(
//            array(
//              'name' => 'rs_code',
//              'type' => 'string',
//              'description' => 'RS Code',
//              'source' => array('data' => 'rs_code'),
//              'optional' => FALSE,
//            ),
            array(
              'name' => 'unique_id',
              'type' => 'string',
              'description' => 'Unique ID',
              'source' => array('data' => 'unique_id'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'update_time',
              'type' => 'string',
              'description' => 'Pass update time',
              'source' => array('data' => 'update_time'),
              'optional' => FALSE,
            ),
          ),
          'file' => array(
            'type' => 'inc',
            'module' => 'dispatch_planning',
            'name' => 'ptl_dispatch_planning'
          ),
          'access arguments' => array('services_access_ptl_api'),
        ),
        'ptl-api-put-qty' => array(
          'help' => 'Qty update PTL Data',
          'callback' => 'put_qty_ptl_data',
          'args' => array(
            array(
              'name' => 'id_qty',
              'type' => 'string',
              'description' => 'ID and Put QTY',
              'source' => array('data' => 'id_qty'),
              'optional' => FALSE,
            ),
          ),
          'file' => array(
            'type' => 'inc',
            'module' => 'dispatch_planning',
            'name' => 'ptl_dispatch_planning'
          ),
          'access arguments' => array('services_access_ptl_api'),
        ),
        'ptl-header-data-update' => array(
          'help' => 'Update PTL Header Data',
          'callback' => 'update_ptl_header_data',
          'args' => array(
            array(
              'name' => 'ptl_job',
              'type' => 'string',
              'description' => 'PTL JOB',
              'source' => array('data' => 'ptl_job'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'trip_id',
              'type' => 'string',
              'description' => 'Trip ID',
              'source' => array('data' => 'trip_id'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'rs_code',
              'type' => 'string',
              'description' => 'Rs Code',
              'source' => array('data' => 'rs_code'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'vehicle',
              'type' => 'string',
              'description' => 'Vehicle',
              'source' => array('data' => 'vehicle'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'bill_lines',
              'type' => 'string',
              'description' => 'Bill Lines',
              'source' => array('data' => 'bill_lines'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'total_qty',
              'type' => 'string',
              'description' => 'Totla QTY',
              'source' => array('data' => 'total_qty'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'operator_id',
              'type' => 'string',
              'description' => 'Operator ID',
              'source' => array('data' => 'operator_id'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'start_time',
              'type' => 'string',
              'description' => 'Start Date/Time',
              'source' => array('data' => 'start_time'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'end_time',
              'type' => 'string',
              'description' => 'End Date Time',
              'source' => array('data' => 'end_time'),
              'optional' => FALSE,
            ),
          ),
          'file' => array(
            'type' => 'inc',
            'module' => 'dispatch_planning',
            'name' => 'ptl_dispatch_planning'
          ),
          'access arguments' => array('services_access_ptl_api'),
        ),
//MASTER PTL
        'master-ptl-api-data-fetch' => array(
          'help' => 'Get Master PTL Data',
          'callback' => 'fetch_master_ptl_data',
          'args' => array(
            array(
              'name' => 'rs_code',
              'type' => 'string',
              'description' => 'RS Code',
              'source' => array('data' => 'rs_code'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'api_time',
              'type' => 'string',
              'description' => 'Pass last fetch time',
              'source' => array('data' => 'api_time'),
              'optional' => FALSE,
            ),
          ),
          'file' => array(
            'type' => 'inc',
            'module' => 'dispatch_planning',
            'name' => 'master_ptl_dispatch_planning'
          ),
          'access arguments' => array('services_access_ptl_api'),
        ),
        'master-ptl-api-data-update' => array(
          'help' => 'Update Master PTL Data',
          'callback' => 'update_master_ptl_data',
          'args' => array(
            array(
              'name' => 'unique_id',
              'type' => 'string',
              'description' => 'Unique ID',
              'source' => array('data' => 'unique_id'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'update_time',
              'type' => 'string',
              'description' => 'Pass update time',
              'source' => array('data' => 'update_time'),
              'optional' => FALSE,
            ),
          ),
          'file' => array(
            'type' => 'inc',
            'module' => 'dispatch_planning',
            'name' => 'master_ptl_dispatch_planning'
          ),
          'access arguments' => array('services_access_ptl_api'),
        ),
        'master-ptl-sku-ean-api' => array(
          'help' => 'Get SKU EAn and MRP Data',
          'callback' => 'fetch_master_ptl_sku_ean_mrp_data',
          'args' => array(
            array(
              'name' => 'rs_code',
              'type' => 'string',
              'description' => 'RS Code',
              'source' => array('data' => 'rs_code'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'api_time',
              'type' => 'string',
              'description' => 'Pass last fetch time',
              'source' => array('data' => 'api_time'),
              'optional' => FALSE,
            ),
          ),
          'file' => array(
            'type' => 'inc',
            'module' => 'dispatch_planning',
            'name' => 'master_ptl_dispatch_planning'
          ),
          'access arguments' => array('services_access_ptl_api'),
        ),
        'master-ptl-api-put-qty' => array(
          'help' => 'Qty update Master PTL Data',
          'callback' => 'put_qty_master_ptl_data',
          'args' => array(
            array(
              'name' => 'id_qty',
              'type' => 'string',
              'description' => 'ID and Put QTY',
              'source' => array('data' => 'id_qty'),
              'optional' => FALSE,
            ),
          ),
          'file' => array(
            'type' => 'inc',
            'module' => 'dispatch_planning',
            'name' => 'master_ptl_dispatch_planning'
          ),
          'access arguments' => array('services_access_ptl_api'),
        ),
        'master-ptl-header-data-update' => array(
          'help' => 'Update PTL Header Data',
          'callback' => 'update_master_ptl_header_data',
          'args' => array(
            array(
              'name' => 'ptl_job',
              'type' => 'string',
              'description' => 'PTL JOB',
              'source' => array('data' => 'ptl_job'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'trip_id',
              'type' => 'string',
              'description' => 'Trip ID',
              'source' => array('data' => 'trip_id'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'rs_code',
              'type' => 'string',
              'description' => 'Rs Code',
              'source' => array('data' => 'rs_code'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'vehicle',
              'type' => 'string',
              'description' => 'Vehicle',
              'source' => array('data' => 'vehicle'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'bill_lines',
              'type' => 'string',
              'description' => 'Bill Lines',
              'source' => array('data' => 'bill_lines'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'total_qty',
              'type' => 'string',
              'description' => 'Totla QTY',
              'source' => array('data' => 'total_qty'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'operator_id',
              'type' => 'string',
              'description' => 'Operator ID',
              'source' => array('data' => 'operator_id'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'start_time',
              'type' => 'string',
              'description' => 'Start Date/Time',
              'source' => array('data' => 'start_time'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'end_time',
              'type' => 'string',
              'description' => 'End Date Time',
              'source' => array('data' => 'end_time'),
              'optional' => FALSE,
            ),
          ),
          'file' => array(
            'type' => 'inc',
            'module' => 'dispatch_planning',
            'name' => 'master_ptl_dispatch_planning'
          ),
          'access arguments' => array('services_access_ptl_api'),
        ),
      ),
    ),
  );
  return $ptl_resource;
}

/**
 * Implements of hook_views_api().
 */
function dispatch_planning_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'dispatch_planning') . '/views'
  );
}

/**
 * dispatch planning cron page callback function
 */
function dispatch_planning_cron_callback() {
  $query = db_select('dispatch_planning_api_log', 'a');
  $query->fields('a', array('request_data', 'id'));
  $query->condition('a.request_flag', 0);
  $query->condition('a.api_type', 'dispatch_planning');

  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  if (!empty($res)) {
    foreach ($res as $key => $val) {

// Write logic to hit API Here
      $json_api_data = $val['request_data'];
      $sql_ins_id = $val['id'];

      $request_headers = array('Content-Type' => 'application/json');
      $order_api_url = variable_get('dispatch_uri_settings');
      $options = array('headers' => $request_headers, 'method' => 'POST', 'data' => $json_api_data);
      $response = drupal_http_request($order_api_url, $options);

      $response_data = $response->data;
      if ($response_data) {
        $api_success = json_decode($response_data);
        $api_success = (isset($api_success->failCount) && $api_success->failCount == 0) ? 1 : 0;
        // create response log entry
        dispatch_planning_api_log_update($response_data, $sql_ins_id, $api_success);
      }
      else {
        //dpm($response);
      }
    }
  }
  return "1";
}

/**
 * @param type $form
 * @param type $form_state
 * @return string
 */
function dispatch_planning_form($form, &$form_state) {

  $form['#prefix'] = '<div id="itemlist-div">';
  $form['#suffix'] = '</div>';

  $form['#attached']['js'][] = drupal_get_path('module', 'dispatch_planning') . '/js/dispatch_planning_form.js';
  $form['#attached']['css'][] = drupal_get_path('module', 'dispatch_planning') . '/css/dispatch_planning.css';

  $form['loading_date'] = array(
    '#prefix' => '<div class="textfield-wrapper">',
    '#type' => 'date_popup',
    '#date_format' => 'm/d/y',
    '#title' => t('Loading date'),
    '#date_label_position' => '',
    //'#default_value' => empty($variables['from_date']) ? NULL : format_date($variables['from_date'], $type = 'custom', $format = 'Y-m-d H:i:s'),
    '#date_year_range' => '-20:+1',
    '#size' => 30,
    '#ajax' => array(
      'event' => 'change',
      'callback' => 'loading_date_ajax_callback',
      'wrapper' => 'van-wrapper',
    ),
    '#required' => TRUE,
  );

  $form['van'] = array(
    '#type' => 'select',
    '#title' => t('Van'),
    '#prefix' => '<div id="van-wrapper">',
    '#suffix' => '</div>',
    //'#autocomplete_path' => 'modified-van-autocomplete-callback',
    '#ajax' => array(
      'event' => 'change',
      'callback' => 'van_ajax_callback',
      'wrapper' => 'beat-wrapper',
    ),
    '#options' => array(),
    '#required' => TRUE,
    '#validated' => TRUE
  );
  $form['beat_name'] = array(
    '#type' => 'select',
    '#title' => t('Sales Beat'),
    '#prefix' => '<div id="beat-wrapper">',
    '#suffix' => '</div>',
    //'#autocomplete_path' => 'modified-van-autocomplete-callback',
    '#options' => array('' => 'All'),
  );
  if (isset($form_state['triggering_element']) && ($form_state['triggering_element']['#name'] == 'loading_date')) {
    if (!empty($form_state['values']['loading_date']) && is_string($form_state['values']['loading_date'])) {
      $form['van']['#options'] = get_modified_van_from_loading_date(strtotime($form_state['values']['loading_date']));
    }
  }

  if (isset($form_state['triggering_element']) && ($form_state['triggering_element']['#name'] == 'van')) {
    if (!empty($form_state['values']['van'])) {
      $form['beat_name']['#options'] = array('' => 'All') + get_beat_name_from_loading_date_and_van(strtotime($form_state['values']['loading_date']), $form_state['values']['van']);
    }
  }
  $form['van_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add Van'),
    '#ajax' => array(
      'wrapper' => 'itemlist-div',
      'callback' => 'custom_ajax_callback',
      'method' => 'replace',
      'effect' => 'fade',
    ),
    '#validate' => array('van_ajax_validate'),
    '#submit' => array('van_ajax_submit'),
    '#limit_validation_errors' => array(array('loading_date'), array('van'), array('beat_name')),
    '#suffix' => '</div>',
  );


  $form['divider1'] = array(
    '#markup' => '<div class="or"><span>OR</span></div>',
  );

  $form['bill_number'] = array(
    '#prefix' => '<div class="textfield-wrapper">',
    '#type' => 'textfield',
    '#title' => t('Bill number'),
    '#required' => TRUE,
    '#autocomplete_path' => 'bill/autocomplete'
  );

  $form['bill_number_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add Bill'),
    '#ajax' => array(
      'wrapper' => 'itemlist-div',
      'callback' => 'custom_ajax_callback',
      'method' => 'replace',
      'effect' => 'fade',
    ),
    '#submit' => array('bill_number_ajax_submit'),
    '#validate' => array('bill_number_ajax_validate'),
    '#limit_validation_errors' => array(array('bill_number')),
    '#suffix' => '</div>',
  );

//  $form['divider2'] = array(
//    '#markup' => '<div>----OR----</div>',
//  );
//
//  $form['trip_id'] = array(
//    '#type' => 'textfield',
//    '#title' => t('Trip id'),
//    '#required' => TRUE,
//    '#autocomplete_path' => 'trip/autocomplete'
//  );
//
//  $form['trip_id_submit'] = array(
//    '#type' => 'submit',
//    '#value' => t('Add Trip id'),
//    '#ajax' => array(
//      'wrapper' => 'itemlist-div',
//      'callback' => 'custom_ajax_callback',
//      'method' => 'replace',
//      'effect' => 'fade',
//    ),
//    '#submit' => array('trip_id_ajax_submit'),
//    '#validate' => array('trip_id_ajax_validate'),
//    '#limit_validation_errors' => array(array('trip_id')),
//  );


  if (!isset($form_state['dispatch_planning']['bills'])) {
    $form_state['dispatch_planning']['bills'] = array();
  }
  $options = $form_state['dispatch_planning']['bills'];

  $headers = array(
    'bill_number' => 'Bill Number',
    'party_name' => 'Party name',
    'bill_value' => 'Value',
    'van_loading_date' => 'Existing Van/Loading Date',
    //'sequence' => 'Delivery Sequence',
    //'trip_id' => 'Trip ID',
    'sales_beat' => 'Sales Beat'
  );


  foreach ($headers as $key => $value) {
    $sort_options[$key . ':asc'] = $value . ' - Asc';
    $sort_options[$key . ':desc'] = $value . ' - Desc';
  }


  $form['sort'] = array(
    '#type' => 'select',
    '#options' => $sort_options,
    '#ajax' => array(
      'wrapper' => 'itemlist-div',
      'callback' => 'custom_ajax_callback',
      'method' => 'replace',
      'effect' => 'fade',
    ),
    '#attributes' => array(
      'class' => array('sort-select', 'element-invisible'),
    ),
  );

  if (isset($form_state['triggering_element']) && ($form_state['triggering_element']['#name'] == 'sort')) {
    $active = explode(':', $form_state['values']['sort']);
    $form_state['dispatch_planning']['sort_field'] = $active[0];
    $form_state['dispatch_planning']['sort_order'] = $active[1];
  }

  if (isset($form_state['dispatch_planning']['sort_field'])) {
    $active_sort = $form_state['dispatch_planning']['sort_field'];
  }
  if (isset($form_state['dispatch_planning']['sort_order'])) {
    $active_order = $form_state['dispatch_planning']['sort_order'];
  }
  if ($active_order == 'asc') {
    $next_order = 'desc';
  }
  elseif ($active_order == 'desc') {
    $next_order = 'asc';
  }

  foreach ($headers as $k => $header) {
    $header_array[$k] = array(
      'data' => array(
        '#type' => 'link',
        '#title' => $header . (($active_sort == $k && $next_order) ? theme('tablesort_indicator', array('style' => $next_order)) : ''),
        '#href' => '',
        '#attributes' => array(
          'class' => ($active_sort == $k) ? array('active', 'header-link') : array('header-link'),
          'id' => $k,
          'data-sort' => ($active_sort == $k && $next_order) ? $next_order : '',
        ),
        '#options' => array(
          'html' => true,
        )
      ),
    );
  }

  if ($options) {
    if (isset($active_sort)) {
      $sort = ($active_sort == 'van_loading_date') ? 'van_loading_date_timestamp' : $active_sort;
      $options = _get_header_sort($options, $sort, $active_order);
    }

    $form['list_form_items'] = array(
      '#type' => 'tableselect',
      '#header' => $header_array,
      '#options' => $options,
      '#prefix' => '<div id="table-div">',
      '#suffix' => '</div>',
      '#empty' => t('No forms available.'),
      '#multiple' => TRUE,
    );

    $form['remove_selected'] = array(
      '#type' => 'submit',
      '#value' => t('Remove Checked items'),
      '#ajax' => array(
        'wrapper' => 'itemlist-div',
        'callback' => 'custom_ajax_callback',
        'method' => 'replace',
        'effect' => 'fade',
      ),
      '#submit' => array('remove_selected_ajax_submit'),
      '#limit_validation_errors' => array(array('list_form_items')),
    );

    $form['sequence'] = array('#type' => 'value');
    $form['header'] = array('#type' => 'value');

    $bill_count = count($options);
    $bill_value_sum = array_sum(array_map(
        function($item) {
        return $item['bill_value'];
      }, $options)
    );
    $form_state['dispatch_planning']['bill_value_sum'] = $bill_value_sum;

    $form['bill_summary'] = array(
      '#theme' => 'item_list',
      '#items' => array(
        'Bill Count : ' . $bill_count,
        'Bill Value : ' . $bill_value_sum,
      ),
    );

    $form['trip_execution_date'] = array(
      '#prefix' => '<div class="textfield-wrapper bottom-wrapper">',
      '#type' => 'date_popup',
      '#date_format' => 'm/d/y',
      '#title' => t('Trip Execution Date'),
      '#date_label_position' => '',
      '#date_year_range' => '-20:+1',
      '#size' => 30,
      '#required' => TRUE,
      '#ajax' => array(
        'event' => 'change',
        'callback' => 'trip_execution_date_ajax_callback',
        'wrapper' => 'hht-id-wrapper',
      ),
    );

    $form['hht_id'] = array(
      '#type' => 'textfield',
      '#title' => t('HHT ID'),
      '#required' => TRUE,
      '#prefix' => '<div id="hht-id-wrapper">',
      '#suffix' => '</div></div>',
      '#attributes' => array('readonly' => 'readonly'),
    );

    if (isset($form_state['triggering_element']) && ($form_state['triggering_element']['#name'] == 'trip_execution_date')) {

      if (!empty($form_state['values']['trip_execution_date']) && is_string($form_state['values']['trip_execution_date'])) {
        $date = strtotime($form_state['values']['trip_execution_date']);
        unset($form['hht_id']['#attributes']['readonly']);
        $form['hht_id']['#autocomplete_path'] = 'hht_id/autocomplete/' . $date;
      }
    }

    $form['vehicle_number'] = array(
      '#prefix' => '<div class="textfield-wrapper bottom-wrapper"><div id="vehicle-wrapper">',
      '#type' => 'textfield',
      '#title' => t('Vehicle Number'),
      '#autocomplete_path' => 'vehicle/autocomplete',
      '#suffix' => '</div>',
    );

    $form['cashier'] = array(
      '#prefix' => '<div id="cashier-wrapper">',
      '#type' => 'textfield',
      '#title' => t('Cashier name'),
      '#autocomplete_path' => 'cashier/autocomplete',
      '#suffix' => '</div></div>',
    );
    $form['skip_sequencing'] = array(
      '#type' => 'checkbox',
      '#title' => t('Check this to skip sequencing of bills'),
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Save',
      '#limit_validation_errors' => array(array('trip_execution_date'), array('hht_id'), array('vehicle_number'), array('cashier'), array('list_form_items'), array('skip_sequencing')),
      '#submit' => array('dispatch_planning_form_save_submit'),
      '#validate' => array('dispatch_planning_form_save_validate')
    );
  }
  return $form;
}

function trip_execution_date_ajax_callback($form, &$form_state) {
  return $form['hht_id'];
}

function loading_date_ajax_callback($form, &$form_state) {
  return $form['van'];
}

function van_ajax_callback($form, &$form_state) {
  return $form['beat_name'];
}

function custom_ajax_callback($form, &$form_state) {
  return $form;
}

function van_ajax_validate($form, &$form_state) {

  $van = $form_state['values']['van'];

  if (empty($van)) {
    form_set_error('van', 'Van number is required');
  }
}

function van_ajax_submit(&$form, &$form_state) {

  $van = $form_state['values']['van'];
  $loading_date = strtotime($form_state['values']['loading_date']);
  $beat_name = $form_state['values']['beat_name'];

  unset($form_state['input']['loading_date']);
  unset($form_state['input']['van']);
  $form['van']['#options'] = array();
  if (!empty($beat_name)) {
    $bills = get_bill_info(NULL, $van, $loading_date, $beat_name);
  }
  else {
    $bills = get_bill_info(NULL, $van, $loading_date);
  }
  $form_state['dispatch_planning']['bills'] += $bills;
  $form_state['rebuild'] = TRUE;
}

function bill_number_ajax_validate($form, &$form_state) {
  $bill_number = $form_state['values']['bill_number'];

  $query = db_select('node', 'n');
  $query->condition('n.title', $bill_number);
  $query->condition('n.type', 'sales_register_data');
  $query->fields('n', array('title'));
  $query->addTag('node_distributor_access');
  $result = $query->execute()->fetchField();

  if (empty($result)) {
    form_set_error('bill_number', 'Bill number does not exist');
  }
}

function bill_number_ajax_submit($form, &$form_state) {
  $bill_number = $form_state['values']['bill_number'];

  unset($form_state['input']['bill_number']);

  $bill_info = get_bill_info($bill_number);
  if (!empty($bill_info)) {
    $form_state['dispatch_planning']['bills'] += $bill_info;
  }

  $form_state['rebuild'] = TRUE;
}

//function trip_id_ajax_validate($form, &$form_state) {
//  $trip_id = $form_state['values']['trip_id'];
//
//  $query = db_select('node', 'n');
//  $query->condition('n.title', $trip_id);
//  $query->condition('n.type', 'dispatch_data');
//  $query->fields('n', array('title'));
//  $query->addTag('node_distributor_access');
//  $result = $query->execute()->fetchField();
//
//  if (empty($result)) {
//    form_set_error('trip_id', 'Trip ID does not exist');
//  }
//}
//
//function trip_id_ajax_submit($form, &$form_state) {
//  $trip_id = $form_state['values']['trip_id'];
//
//  unset($form_state['input']['trip_id']);
//
//  $bill_info = get_bill_info(NULL, NULL, NULL, $trip_id);
//  if (!empty($bill_info)) {
//    $form_state['dispatch_planning']['bills'] += $bill_info;
//  }
//
//  $form_state['rebuild'] = TRUE;
//}

function remove_selected_ajax_submit($form, &$form_state) {
  $rows = $form_state['input']['list_form_items'];
  $checked = array_filter($form_state['values']['list_form_items']);
  if (!empty($rows)) {
    foreach ($rows as $key => $value) {
      foreach ($form_state['dispatch_planning']['bills'][$key]['delivery_pending']['data'][$key] as $k => &$v) {
        if ($v['#name'] == "delivery_pending[$key]") {
          $v['#value'] = $form_state['input']['delivery_pending'][$key];
        }
      }
    }
  }
  if (!empty($checked)) {
    $form_state['dispatch_planning']['bills'] = array_diff_key($form_state['dispatch_planning']['bills'], array_flip($checked));
  }
  $form_state['rebuild'] = TRUE;
}

// function get cashier name of trips
function get_trip_cashiers($trip_ids, $bills_numbers) {
  $res = array();
  if (!empty($trip_ids) && !empty($bills_numbers)) {
    global $user;
    $user_id = $user->uid;
    $distributor_id = change_feeds_import_get_distributor_id($user_id);
    $query = db_select('dispatch_planning_api_data', 'ad');
    $query->fields('ad', array('runsheet_number', 'bill_number', 'fieldExecutiveName'));
    $query->condition('ad.runsheet_number', $trip_ids, 'IN');
    $query->condition('ad.bill_number', $bills_numbers, 'IN');
    $query->condition('ad.distributor_id', $distributor_id);
    $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  }
  return $res;
}

function dispatch_planning_form_save_validate($form, &$form_state) {
  require_once drupal_get_path('module', 'change_feeds_import') . '/form/upload_billing_data.inc';

  global $user;
  $user_id = $user->uid;
  $distributor_id = change_feeds_import_get_distributor_id($user_id);

  $rows = $form_state['values']['list_form_items'];
  $cashier = trim($form_state['values']['cashier']);
  $vehicle_number = trim($form_state['values']['vehicle_number']);
  $trip_execution_date = strtotime($form_state['values']['trip_execution_date']);
  $hht_id = trim($form_state['values']['hht_id']);
  $mess = '';
  $cashier_lower = strtolower($cashier);
  $vehicle_number_lower = strtolower($vehicle_number);
  if ($vehicle_number_lower == 'handover' && $cashier_lower != 'handover') {
    $mess .= t('Please select cashier name as Handover.') . '<br>';
  }
  elseif ($vehicle_number_lower != 'handover' && $cashier_lower == 'handover') {
    $mess .= t(' Please select Vehicle Number as Handover.') . '<br>';
  }
  // handover validation
  elseif ($vehicle_number_lower == 'handover' && $cashier_lower == 'handover') {
    // handover trip validation. handover trip bill number should be belongs to  same cashier
    $bills_nids = array_keys($rows);
    $sales_register_nodes = node_load_multiple($bills_nids);
    $hand_over_bills = array();
    $bills_previous_trips = array();
    foreach ($rows as $key => $val) {
      if (!empty($sales_register_nodes[$key]->field_previous_trip[LANGUAGE_NONE][0]['value'])) {
        $bills_previous_trips[] = $sales_register_nodes[$key]->field_previous_trip[LANGUAGE_NONE][0]['value'];
        $hand_over_bills[$sales_register_nodes[$key]->title] = $sales_register_nodes[$key]->title;
      }
      else {
        $mess .= t('Bill number: ' . $sales_register_nodes[$key]->title . ' does not belong to any Cashier.You can not add it to a Handover Trip.') . '<br>';
      }
    }
    $handover_bills_details = get_trip_cashiers($bills_previous_trips, $hand_over_bills);
    $previous_trip_cashier = array();
    if (!empty($handover_bills_details)) {
      foreach ($handover_bills_details as $hand_value) {
        $previous_trip_cashier[strtolower($hand_value['fieldExecutiveName'])] = strtolower($hand_value['fieldExecutiveName']);
        if (count($previous_trip_cashier) > 1) {
          $mess .= t('Bill number: ' . $hand_value['bill_number'] . ' belong to  cashier:' . $hand_value['fieldExecutiveName']) . '<br>';
        }
      }
    }
  }
  if (!empty($mess)) {
    form_set_error('list_form_items', $mess);
  }
  $skip_sequencing = $form_state['values']['skip_sequencing'];
  $bill_nids = array_keys($rows);
  $today = strtotime(date('Y-m-d 00:00:00'));

  if ($trip_execution_date < $today) {
    form_set_error('trip_execution_date', 'Trip execution date cannot be a previous date');
  }
  if (!empty(array_filter($rows))) {
    form_set_error('list_form_items', 'Please uncheck all rows');
  }

  if ($hht_id && $trip_execution_date) {
    if (empty(validate_hht_id($trip_execution_date, $hht_id))) {
      form_set_error('hht_id', 'HHT id invalid or HHT id already exists for this date');
    }
  }

  if (!empty($cashier) && empty(validate_cashier($cashier))) {
    form_set_error('cashier', 'Please enter a valid cashier');
  }
  if (!empty($vehicle_number) && empty(validate_vehicle_number($vehicle_number))) {
    form_set_error('vehicle_number', 'Please enter a valid vehicle number');
  }

  $query = db_select('node', 'n');
  $query->condition('n.uid', $distributor_id);
  $query->condition('n.type', 'sales_register_data');
  $query->condition('n.nid', $bill_nids, 'IN');
  $query->leftJoin('field_data_field_delivery_pending', 'dp', 'n.nid = dp.entity_id');
  $query->condition('dp.field_delivery_pending_value', 1, '=');
  $query->fields('n', array('title'));
  $res = $query->execute()->fetchCol();
  if (count($res) != count($bill_nids) && count($res) != 0) {
    $dp_bills = implode(',', $res);
    form_set_error('list_form_items', 'DP Bills and Non-DP bills cannot be combined together in a Trip. DP Bills are ' . $dp_bills);
  }
  ##############################################################################
  $query = db_select('node', 'n');
  $query->leftJoin('field_data_field_sales_party_code', 'spc', 'n.nid = spc.entity_id');

  $query->leftJoin('node', 'no', "no.title = spc.field_sales_party_code_value AND no.type = 'outlet_master' AND no.uid = $distributor_id");
  $query->leftJoin('field_data_field_revised_sequence', 'fs', 'fs.entity_id = no.nid');
  $query->leftJoin('field_data_field_area_hook', 'fa', 'fa.entity_id = no.nid');

  $query->leftJoin('field_data_field_hul_code', 'fh', 'fh.entity_id = no.nid');
  $query->leftJoin('node', 'hul', "fh.field_hul_code_value = hul.title AND hul.type = 'hul_code_master' AND hul.uid = $distributor_id");
  $query->leftJoin('field_data_field_hul_updated_lat', 'flat', 'flat.entity_id = hul.nid');
  $query->leftJoin('field_data_field_hul_updated_long', 'flong', 'flong.entity_id = hul.nid');

  $query->leftJoin('node', 'ndvp', 'ndvp.nid = fa.field_area_hook_nid');
  $query->leftJoin('field_data_field_dva_sales_day', 'da', 'da.entity_id = ndvp.nid');
  $query->leftJoin('field_data_field_dva_van_pl_group', 'fv', 'fv.entity_id = ndvp.nid');
  $query->leftJoin('field_data_field_dva_area_hook_group_name', 'gn', 'gn.entity_id = ndvp.nid');
  $query->addField('gn', 'field_dva_area_hook_group_name_value', 'area_hook_group_name');

  $query->addField('n', 'nid');
  $query->condition('n.uid', $distributor_id);
  $query->addField('n', 'title', 'bill_number');
  $query->condition('n.nid', $bill_nids, 'IN');

  $query->addField('no', 'title', 'party_code');
  $query->addField('fs', 'field_revised_sequence_value', 'sequence');
  $query->addField('fa', 'field_area_hook_nid', 'area_hook');

  $query->addField('flat', 'field_hul_updated_lat_value', 'lat');
  $query->addField('flong', 'field_hul_updated_long_value', 'lng');

  $query->orderBy('ISNULL(da.field_dva_sales_day_value)');
  $query->orderBy('da.field_dva_sales_day_value');
  $query->orderBy('ISNULL(fv.field_dva_van_pl_group_value)');
  $query->orderBy('fv.field_dva_van_pl_group_value');
  $query->orderBy('ISNULL(gn.field_dva_area_hook_group_name_value)');
  $query->orderBy('gn.field_dva_area_hook_group_name_value');
  $query->orderBy('ISNULL(fs.field_revised_sequence_value)');
  $query->orderBy('fs.field_revised_sequence_value');

  $res = $query->execute()->fetchAll();

  $bill_count = count($res);
  $sequence = $no_area = 0;

  $s = 1;
  foreach ($res as $val) {

    $manual_drs_sequence[$val->nid] = $s;
    $s++;

    if (!empty($val->lat) && !empty($val->lng)) {
      //$params['services'][] = array('id' => $val->nid, 'address' => array('location_id' => $val->nid, 'lon' => (double)$val->lng, 'lat' => (double)$val->lat));
      //NEW API ROUTIFIC
      $Locations['visits'][$val->nid]['location']['name'] = $val->nid;
      $Locations['visits'][$val->nid]['location']['lat'] = $val->lat;
      $Locations['visits'][$val->nid]['location']['lng'] = $val->lng;
      $Locations['visits'][$val->nid]['duration'] = 7; // 7 min stop on every outlet
    }

    if (is_null($val->sequence)) {
      $no_sequence = 1;
    }
    else {
      $sequence_array[$val->nid] = $val->sequence;
    }

    if (is_null($val->area_hook)) {
      $no_area = 1;
    }
    else {
      $area_hook[$val->area_hook] = $val->area_hook;
    }

    if (is_null($val->area_hook_group_name)) {
      $area_hook_group_name = 1;
    }
    else {
      $area_hook_group_name[$val->area_hook_group_name] = $val->area_hook_group_name;
    }
  }

  $form_state['dispatch_planning']['sequence_array'] = $sequence_array;

  $conf_nid = $form_state['leanbox_misc']['nid'] = check_node_title_exists($distributor_id, 'van_stop_master');
  if ($conf_nid) {
    $node = node_load($conf_nid);
    $origin_lat = $node->field_distributor_latitude[LANGUAGE_NONE][0]['value'];
    $origin_long = $node->field_distributor_longitude[LANGUAGE_NONE][0]['value'];
    //$enable_routing = $node->field_enable_routing[LANGUAGE_NONE][0]['value'];
    // Earlier it was on node field. now we are creating for centrally managed
    $enable_routing = check_dynamic_routing_configuration($distributor_id);
  }

  $bill_sequence_array = array();
  if (($no_area || $no_sequence || $area_hook_group_name || count($area_hook_group_name) > 1) && !$skip_sequencing && $origin_lat && $origin_long && $enable_routing) {

    //$params['vehicles'][] = array('vehicle_id' => 'origin', 'start_address' => array('location_id' => 'origin', 'lon' => (double)$origin_long, 'lat' => (double)$origin_lat), 'return_to_depot' => true);
    //NEW API ROUTIFIC
    $Locations['fleet']['origin']['start_location'] = array(
      "id" => 'origin',
      "name" => 'origin',
      "lat" => $origin_lat, //'19.1817531000', //
      "lng" => $origin_long //'72.9972678000',// 
    );
    $speed = 0.3;
    $Locations['fleet']['origin']['speed'] = $speed; // speed of the driver

    /* $post_result = graphhopper_postvrp_api($params);
      if ($post_result) {
      $job_id = $post_result->getJobId();
      if ($job_id) {

      for ($j = 0; $j < 10; $j++) {
      $solution = graphhopper_solution_api($job_id);
      if ($solution) {
      if ($solution->getStatus() == 'finished') {

      $routes = $solution->getSolution()->getRoutes();

      $data = $routes[0]->getActivities();

      $i = 1;
      foreach ($data as $key => $value) {
      if ($value->getType() == 'service') {
      $bill_sequence_array[$i] = $value->getLocationId();
      $i ++;
      }
      }
      break;
      }
      }
      sleep(0.5); // this should halt for 500 ms for every loop
      }
      }
      } */
    //NEW API ROUTIFIC
    $Locations['options']['shortest_distance'] = true;
    $Locations['options']['polylines'] = true;
    //dpm($Locations);
    $Locations_data = json_encode($Locations);
    $authorization = 'bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1ODgzOWY4ZjYyZmQyMzkzMGE4NjQwYjEiLCJpYXQiOjE1MDQ2Nzg4NTl9.AzJLVp6HDk6lbXCWxI1T8Y7US6R0panNjkY5B-pkdqg';
    $request_headers = array('Content-Type' => 'application/json', 'Authorization' => $authorization);
    $roitufic_api_url = variable_get('api_routific_url', 'https://api.routific.com/v1/vrp');
    $routific_options = array('headers' => $request_headers, 'method' => 'POST', 'data' => $Locations_data);

    $response_data = drupal_http_request($roitufic_api_url, $routific_options);
    //dpm($response_data,'API RESPONSE');
    $response_data = json_decode($response_data->data);

    if ($response_data->num_unserved) {
      //dpm($response_data->unserved,'unserved');
    }
    if ($response_data->status === 'success') {
      $response_array = $response_data->solution->origin;
      $i = 1;
      $form_state['dispatch_planning']['total_travel_time'] = $response_data->total_working_time; //total_travel_time
      $form_state['dispatch_planning']['total_distance'] = $response_data->total_distance;
      foreach ($response_array as $k => $v) {
        if ($v->location_name !== 'origin') {
          $bill_sequence_array[$i]['nid'] = $v->location_name;

          if ($k == 0) {
            $travel_time = 0;
          }
          else if ($k == 1) {
            $travel_time = strtotime($response_array[$k]->arrival_time) - strtotime($response_array[$k - 1]->arrival_time);
          }
          else {
            $travel_time = strtotime($response_array[$k]->arrival_time) - strtotime($response_array[$k - 1]->finish_time);
          }
          $travel_time = $travel_time / 60; // min
          $bill_sequence_array[$i]['prev_travel_time'] = $travel_time;
          $bill_sequence_array[$i]['prev_distance'] = round(($v->distance) / 1000, 2);
          $i++;
        }
      }
    }

    if (!empty($bill_sequence_array)) {
      $form_state['dispatch_planning']['bill_sequence_array'] = $bill_sequence_array;
    }
    else {
      // form_set_error('list_form_items', 'An error occured while generating sequence');
      form_set_error('list_form_items', 'API Error' . $response_data->error);
    }
  }
  $form_state['dispatch_planning']['manual_drs_sequence'] = $manual_drs_sequence;
  ##############################################################################
}

function dispatch_planning_form_save_submit($form, &$form_state) {
  $rows = $form_state['values']['list_form_items'];
  $cashier = trim($form_state['values']['cashier']);
  $vehicle_number = trim($form_state['values']['vehicle_number']);
  $trip_execution_date = strtotime($form_state['values']['trip_execution_date']);
  $hht_id = trim($form_state['values']['hht_id']);

  $dispatch_bill_count = count($rows);
  $bill_value_sum = $form_state['dispatch_planning']['bill_value_sum'];

  $bill_nids = array_keys($rows);

  global $user;
  $user_id = $user->uid;
  $distributor_id = change_feeds_import_get_distributor_id($user_id);

  if (isset($form_state['dispatch_planning']['bill_sequence_array']) && !empty($form_state['dispatch_planning']['bill_sequence_array'])) {
    $bill_sequence = $form_state['dispatch_planning']['bill_sequence_array'];
    $total_travel_time = $form_state['dispatch_planning']['total_travel_time'];
    $total_distance = $form_state['dispatch_planning']['total_distance'];

    $seq_flag = 1;
  }

  $txn = db_transaction();

  $query = db_select('trip_id_sequence', 'ts');
  $query->forUpdate();
  $query->addField('ts', 'next_id');
  $query->condition('ts.distributor_id', $distributor_id);
  $trip_id = $query->execute()->fetchField();


  if ($trip_id) {
    // Increment the next_value.
    db_update('trip_id_sequence')
      ->fields(array('next_id' => $trip_id + 1))
      ->condition('distributor_id', $distributor_id)
      ->execute();
  }
  else {
    $trip_id = 1;
    $insert = db_insert('trip_id_sequence')
      ->fields(array(
      'distributor_id' => $distributor_id,
      'next_id' => $trip_id + 1
    ));
    $insert->execute();
  }

  $node = new stdClass();
  $node->title = $trip_id;
  $node->type = "dispatch_data";
  node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
  $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
  $node->uid = $user->uid;
  $node->status = 1; //(1 or 0): published or not
  $node->comment = 0; // 0 = comments disabled, 1 = read only, 2 = read/write
  $node->field_bill_count[$node->language][0]['value'] = $dispatch_bill_count;
  $node->field_dispatch_bill_value[$node->language][0]['value'] = $bill_value_sum;
  $node->field_cashier_name[$node->language][0]['value'] = $cashier;
  $node->field_vehicle_no[$node->language][0]['value'] = $vehicle_number;
  $node->field_trip_id[$node->language][0]['value'] = $trip_id;
  $node->field_trip_creation_date[$node->language][0]['value'] = strtotime(date('Y/m/d 00:00:00'));
  $node->field_trip_executon_date[$node->language][0]['value'] = $trip_execution_date;
  $node->field_hht_id[$node->language][0]['nid'] = get_nid_from_hht_id($hht_id);

  if ($seq_flag) {
    $node->field_sequence_method[$node->language][0]['value'] = 1;
    $node->field_total_travel_time[$node->language][0]['value'] = round($total_travel_time / 60, 2);
    $node->field_total_distance[$node->language][0]['value'] = round($total_distance, 4);
  }
  else {
    $node->field_sequence_method[$node->language][0]['value'] = 0;
  }

  $node = node_submit($node); // Prepare node for saving
  node_save($node);

  $nid = $node->nid;

  $sequence_array = $form_state['dispatch_planning']['sequence_array'];
  $manual_drs_sequence = $form_state['dispatch_planning']['manual_drs_sequence'];
  if ($seq_flag) {

    $bill_sequence_new = array();
    foreach ($bill_sequence as $key => $value) {
      $bill_sequence_new[$key] = $value['nid'];
      $node = node_load($value['nid']);

      $node->field_bill_sequence[LANGUAGE_NONE][0]['value'] = $key;
      $node->field_drs_sequence[LANGUAGE_NONE][0]['value'] = $key;
      if (isset($node->field_delivery_pending[LANGUAGE_NONE])) {
        $node->field_delivery_pending = array();
      }
      $node->field_trip_id_reference[LANGUAGE_NONE][0]['nid'] = $nid;
      // calculate time and distance

      $node->field_prev_arrival_time[LANGUAGE_NONE][0]['value'] = $value['prev_travel_time'];
      $node->field_prev_distance[LANGUAGE_NONE][0]['value'] = $value['prev_distance'];
      node_save($node);
    }

    $diff = array_diff($bill_nids, $bill_sequence_new);
    if (!empty($diff)) {
      foreach ($diff as $value) {
        $node = node_load($value);

        $node->field_drs_sequence[LANGUAGE_NONE][0]['value'] = ++$key;

        if (isset($node->field_delivery_pending[LANGUAGE_NONE])) {
          $node->field_delivery_pending = array();
        }
        $node->field_trip_id_reference[LANGUAGE_NONE][0]['nid'] = $nid;
        node_save($node);
      }
    }
  }
  else {
    foreach ($bill_nids as $value) {
      $node = node_load($value);

      if (isset($sequence_array[$value]) && !empty($sequence_array[$value])) {
        $node->field_bill_sequence[LANGUAGE_NONE][0]['value'] = $sequence_array[$value];
      }
      $node->field_drs_sequence[LANGUAGE_NONE][0]['value'] = $manual_drs_sequence[$value];

      if (isset($node->field_delivery_pending[LANGUAGE_NONE])) {
        $node->field_delivery_pending = array();
      }
      $node->field_trip_id_reference[LANGUAGE_NONE][0]['nid'] = $nid;
      node_save($node);
    }
  }

  drupal_set_message('Successfully updated. Trip id ' . $trip_id);
}

function get_bill_info($bill_number, $van = NULL, $loading_date = NULL, $beat_name = NULL, $trip_id = NULL, $delivery_pending = NULL, $res_status = NULL) {

  global $user;
  $user_id = $user->uid;
  $distributor_id = change_feeds_import_get_distributor_id($user_id);
  $query = db_select('node', 'n');
  $query->leftJoin('field_data_field_bill_value', 'bv', 'n.nid = bv.entity_id');

  // commented on 9 march
  //$query->leftJoin('field_data_field_sales_party_code', 'spc', 'n.nid = spc.entity_id');
  $query->leftJoin('field_data_field_billing_loading_date', 'ld', 'n.nid = ld.entity_id');
  $query->leftJoin('field_data_field_billing_van', 'v', 'n.nid = v.entity_id');
  $query->leftJoin('field_data_field_delivery_pending', 'dp', 'n.nid = dp.entity_id');
  $query->leftJoin('field_data_field_trip_id_reference', 't', 'n.nid = t.entity_id');
  $query->leftJoin('node', 'nt', 'nt.nid = t.field_trip_id_reference_nid');

  // commented on 9 march
  // $query->leftJoin('field_data_field_party_code', 'pc', 'pc.field_party_code_value = spc.field_sales_party_code_value');
//  $query->condition('pc.bundle', 'outlet_master');
//  $query->join('node', 'oun', 'oun.nid = pc.entity_id');
//  $query->condition('oun.uid', $distributor_id, '=');
  // added on 9 march
  $query->leftJoin('field_data_field_party_code_reference', 'pc', 'pc.entity_id = n.nid');
  $query->leftjoin('node', 'oun', 'oun.nid = pc.field_party_code_reference_nid');


  $query->leftJoin('field_data_field_party_name', 'pn', 'pn.entity_id = oun.nid');
  $query->leftJoin('field_data_field_beat_name', 'bn', 'bn.entity_id = oun.nid');


  $query->addField('n', 'nid', 'nid');
  $query->addField('n', 'title', 'bill_number');

  $query->addField('pn', 'field_party_name_value', 'party_name');
  $query->addField('bv', 'field_bill_value_value', 'bill_value');

  //$query->addField('nt', 'title', 'trip_id');
  //$query->addExpression("CONCAT_WS(' - ', field_billing_van_value, FROM_UNIXTIME(field_billing_loading_date_value, '%m/%d/%y'))", 'van_loading_date');
  $query->addExpression("CONCAT_WS(' - ', field_billing_van_value, DATE_FORMAT(CONVERT_TZ(FROM_UNIXTIME(field_billing_loading_date_value),'+00:00','+05:30'), '%m/%d/%y'))", 'van_loading_date');


  $query->addField('bn', 'field_beat_name_value', 'sales_beat');

  // commented on 9 march
//  $db_or = db_or();
//  $db_or->condition('pc.bundle', 'outlet_master');
//  $db_or->isNull('pc.bundle');
//
//  $query->condition($db_or);

  if (!is_null($bill_number)) {
    $query->condition('n.title', $bill_number);
  }
  if (!is_null($van)) {
    $query->condition('field_billing_van_value', $van);
  }
  if (!is_null($loading_date)) {
    $query->condition('field_billing_loading_date_value', $loading_date);
  }
  // This is for delivery pending screen, fetch bills status full return and blank
  if (!empty($res_status)) {
    $query->join('dispatch_planning_api_data', 'ad', 'n.title = ad.bill_number AND n.uid = ad.distributor_id');
    $query->condition('ad.delivery_pending_flag', 1, '!=');
    // This will enable later on after delivery confirmation flag -1. delivery confirmation
    $query->leftjoin('field_data_field_vrs_status', 'vs', 'vs.entity_id = nt.nid');
    $query->condition('vs.field_vrs_status_value', '-1', '=');
    $db_or = db_or();
    $db_or->condition('ad.res_status', NULL);
    $db_or->condition('ad.res_status', '');
    $db_or->condition('ad.res_status', 'undeliver');
    $query->condition($db_or);
  }


  if (!is_null($trip_id)) {
    $query->condition('nt.title', $trip_id);
  }
  else {
    $query->addExpression("CONCAT_WS(' - ', field_billing_van_value, field_billing_loading_date_value)", 'van_loading_date_timestamp');

    if (!is_null($delivery_pending)) {
      $query->isNotNull('t.field_trip_id_reference_nid');
      $query->addField('dp', 'field_delivery_pending_value', 'field_delivery_pending_value');
    }
    else {
      $db_or2 = db_or();
      $db_or2->isNull('t.field_trip_id_reference_nid');
      $db_or2->condition('dp.field_delivery_pending_value', 1);
      $query->condition($db_or2);
    }
  }

  if (!is_null($beat_name)) {
    $query->condition('field_beat_name_value', $beat_name);
  }

  $query->condition('n.type', 'sales_register_data');
  $query->addTag('node_distributor_access');

  $res = $query->execute()->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_UNIQUE | PDO::FETCH_ASSOC);


//  foreach ($res as $key => $value) {
//    $res[$key]['sequence']['data'] = array(
//      '#type' => 'textfield',
//      '#title' => 'Sequence',
//      '#title_display' => 'invisible',
//      '#default_value' => '',
//      '#name' => "sequence[$key]",
//    );
//  }
  return $res;
}

function get_modified_van_from_loading_date($date, $string) {
  $result = array();
//  if (!empty($date) && !empty($string)) {
//    $query = db_select('field_data_field_billing_van', 'v');
//    $query->join('field_data_field_billing_loading_date', 'l', 'l.entity_id = v.entity_id');
//    $query->fields('v', array('field_billing_van_value'));
//    $query->condition('l.field_billing_loading_date_value', $date);
//    $query->condition('v.field_billing_van_value', db_like($string) . '%', 'LIKE');
//    $result = $query->execute()->fetchAllKeyed(0, 0);
//  }
//  drupal_json_output($result);
  if (!empty($date)) {
    $query = db_select('node', 'n');
    $query->join('field_data_field_billing_van', 'v', 'v.entity_id = n.nid');
    $query->join('field_data_field_billing_loading_date', 'l', 'l.entity_id = n.nid');
    $query->leftJoin('field_data_field_delivery_pending', 'dp', 'n.nid = dp.entity_id');
    $query->leftJoin('field_data_field_trip_id_reference', 'ft', 'ft.entity_id = n.nid');

    $query->fields('v', array('field_billing_van_value'));
    $query->condition('l.field_billing_loading_date_value', $date);
    $query->condition('n.type', 'sales_register_data');

    $db_or = db_or();
    $db_or->isNull('ft.field_trip_id_reference_nid');
    $db_or->condition('dp.field_delivery_pending_value', 1);
    $query->condition($db_or);

    $query->addTag('node_distributor_access');

    $result = $query->execute()->fetchAllKeyed(0, 0);
  }
  return $result;
}

function get_beat_name_from_loading_date_and_van($date, $van) {
  $result = array();
  if (!empty($date)) {

    global $user;
    $user_id = $user->uid;
    $distributor_id = change_feeds_import_get_distributor_id($user_id);
    $query = db_select('node', 'n');
    $query->join('field_data_field_billing_van', 'v', 'v.entity_id = n.nid');
    $query->join('field_data_field_billing_loading_date', 'l', 'l.entity_id = n.nid');
    $query->leftJoin('field_data_field_delivery_pending', 'dp', 'n.nid = dp.entity_id');
    $query->leftJoin('field_data_field_sales_party_code', 'fsp', 'fsp.entity_id = n.nid');
    $query->join('node', 'no', 'no.title = fsp.field_sales_party_code_value');
    $query->leftJoin('field_data_field_beat_name', 'fb', 'no.nid = fb.entity_id');
    $query->condition('no.uid', $distributor_id);
    $query->condition('no.type', 'outlet_master');

    $query->leftJoin('field_data_field_trip_id_reference', 'ft', 'ft.entity_id = n.nid');

    $query->addField('fb', 'field_beat_name_value');
    $query->condition('v.field_billing_van_value', $van);
    $query->condition('l.field_billing_loading_date_value', $date);
    $query->condition('n.type', 'sales_register_data');

    $db_or = db_or();
    $db_or->isNull('ft.field_trip_id_reference_nid');
    $db_or->condition('dp.field_delivery_pending_value', 1);
    $query->condition($db_or);

    $query->addTag('node_distributor_access');

    $result = $query->execute()->fetchAllKeyed(0, 0);
  }
  return $result;
}

function bill_autocomplete($string = '', $delivery_pending = NULL) {
  $result = array();

  if ($string) {
    $query = db_select('node', 'n');
    $query->join('field_data_field_billing_loading_date', 'ld', 'n.nid = ld.entity_id');
    $query->leftJoin('field_data_field_trip_id_reference', 'ft', 'ft.entity_id = n.nid');
    $query->leftJoin('field_data_field_delivery_pending', 'dp', 'n.nid = dp.entity_id');
    $query->condition('n.title', db_like($string) . '%', 'LIKE');
    $query->condition('n.type', 'sales_register_data');

    if (is_null($delivery_pending)) {
      $db_or = db_or();
      $db_or->isNull('ft.field_trip_id_reference_nid');
      $db_or->condition('dp.field_delivery_pending_value', 1);
      $query->condition($db_or);
    }
    else {
      $query->isNotNull('ft.field_trip_id_reference_nid');
    }

    $query->fields('n', array('title'));
    $query->range(0, 15);
    $query->addTag('node_distributor_access');
    $result = $query->execute()->fetchAllKeyed(0, 0);
  }

  drupal_json_output($result);
}

function bill_pending_autocomplete($trip_id, $string = '') {
  $result = array();
  global $user;
  $distributor_id = change_feeds_import_get_distributor_id($user->uid);
  $res_status = array('undeliver', '');
  if (!empty($trip_id)) {
    $node_obj = node_load_multiple(NULL, array('title' => $trip_id, 'type' => 'dispatch_data', 'uid' => $distributor_id));
    $trip_nid = key($node_obj);
  }
  if (!empty($string) && !empty($trip_nid)) {
    $query = db_select('node', 'n');
    $query->join('field_data_field_billing_loading_date', 'ld', 'n.nid = ld.entity_id');
    $query->join('field_data_field_trip_id_reference', 'ft', 'ft.entity_id = n.nid');
    $query->join('dispatch_planning_api_data', 'ad', 'ad.bill_number = n.title');
    $query->condition('n.title', '%' . db_like($string) . '%', 'LIKE');
    $query->condition('n.type', 'sales_register_data');
    $query->condition('ad.distributor_id', $distributor_id);
    $query->condition('ad.delivery_pending_flag', 1, '!=');
    // This is for delivery pending screen, fetch bills status full return and blank
    $db_or = db_or();
    $db_or->condition('ad.res_status', NULL);
    $db_or->condition('ad.res_status', '');
    $db_or->condition('ad.res_status', 'undeliver');
    $query->condition($db_or);
    if (!empty($trip_nid)) {
      $query->condition('ft.field_trip_id_reference_nid', $trip_nid);
      $query->leftjoin('field_data_field_vrs_status', 'vs', 'vs.entity_id = ft.field_trip_id_reference_nid');
      $query->condition('vs.field_vrs_status_value', '-1', '=');
    }
    $query->fields('n', array('title'));
    $query->addTag('node_distributor_access');
    $result = $query->execute()->fetchAllKeyed(0, 0);
  }
  drupal_json_output($result);
}

function trip_id_autocomplete($string = '') {
  $result = array();
  if ($string) {
    $query = db_select('node', 'n');
    $query->condition('n.title', db_like($string) . '%', 'LIKE');
    $query->condition('n.type', 'dispatch_data');
    $query->fields('n', array('title'));
    $query->range(0, 15);
    $query->addTag('node_distributor_access');
    $result = $query->execute()->fetchAllKeyed(0, 0);
  }
  drupal_json_output($result);
}

function vrswise_trip_id_autocomplete($string = '') {
  $result = array();

  if ($string) {
    $query = db_select('node', 'n');
    $query->condition('n.title', db_like($string) . '%', 'LIKE');
    $query->condition('n.type', 'dispatch_data');
    $query->fields('n', array('title'));
    $query->range(0, 15);
    $query->leftjoin('dispatch_delivered_vrs_details', 'vd', 'vd.trip_id =n.title AND n.uid = vd.dis_id');
    $query->isNull('vd.trip_id');
    $query->addTag('node_distributor_access');
    $result = $query->execute()->fetchAllKeyed(0, 0);
  }

  drupal_json_output($result);
}

function dp_trip_id_autocomplete($string = '') {
  $result = array();
  global $user;
  $distributor_id = change_feeds_import_get_distributor_id($user->uid);
  if (!empty($string)) {
    $query = db_select('node', 'n');
    $query->condition('n.title', db_like($string) . '%', 'LIKE');
    $query->condition('n.type', 'dispatch_data');
    $query->join('dispatch_planning_api_data', 'ad', 'ad.runsheet_number = n.title');
    $query->leftjoin('field_data_field_vrs_status', 'vs', 'vs.entity_id = n.nid');
    $query->condition('vs.field_vrs_status_value', -1);
    $query->fields('n', array('title'));
    $query->condition('ad.distributor_id', $distributor_id);
    $query->condition('n.uid', $distributor_id);
    $result = $query->execute()->fetchAllKeyed(0, 0);
  }
  drupal_json_output($result);
}

function _get_header_sort($array, $field_name, $order) {
  if ($order == 'asc') {
    uasort($array, function ($a, $b) use ($field_name) {
      if ($a[$field_name] == $b[$field_name]) {
        return 0;
      }
      return ($a[$field_name] < $b[$field_name]) ? -1 : 1;
    });
  }
  else {
    uasort($array, function ($a, $b) use ($field_name) {
      if ($a[$field_name] == $b[$field_name]) {
        return 0;
      }
      return ($a[$field_name] > $b[$field_name]) ? -1 : 1;
    });
  }
  return $array;
}

/**
 * implements hook_query_TAG_NAME_alter()
 * @param QueryAlterableInterface $query
 */
function dispatch_planning_query_node_distributor_access_alter(QueryAlterableInterface $query) {
  global $user;
  $user_id = $user->uid;
  $distributor_id = change_feeds_import_get_distributor_id($user_id);
  $tables = & $query->getTables();

  foreach ($tables as $alias => $table) {
    if ($table['table'] == 'node') {
      $nalias = $alias;
      break;
    }
  }
  $query->condition("$nalias.uid", $distributor_id);
}

function cashier_names_autocomplete($string = '') {
  $result = array();

  if ($string) {
    $query = db_select('node', 'n');
    $query->join('field_data_field_resource_type', 'rt', 'rt.entity_id = n.nid');
    $query->join('field_data_field_resource_name', 'rn', 'rn.entity_id = n.nid');
    $query->condition('field_resource_name_value', db_like($string) . '%', 'LIKE');
    $query->range(0, 15);

    $query->condition('field_resource_type_value', 'CASHIER');
    $query->fields('rn', array('field_resource_name_value'));
    $query->addTag('node_distributor_access');
    $result = $query->execute()->fetchAllKeyed(0, 0);
  }

  drupal_json_output($result);
}

function vehicle_names_autocomplete($string = '') {
  $result = array();

  if ($string) {
    $query = db_select('node', 'n');
    $query->condition('type', 'vehicle_master');
    $query->fields('n', array('title'));
    $query->condition('title', db_like($string) . '%', 'LIKE');
    $query->range(0, 15);
    $query->addTag('node_distributor_access');
    $result = $query->execute()->fetchAllKeyed(0, 0);
  }

  drupal_json_output($result);
}

function hht_id_autocomplete($date, $string) {
  $result = array();

//  if ($string) {
//    $query = db_select('node', 'n');
//    $query->condition('type', 'hht_master');
//    $query->fields('n', array('title'));
//    $query->condition('title', db_like($string) . '%', 'LIKE');
//
//    $query->range(0, 15);
//    $query->addTag('node_distributor_access');
//    $result = $query->execute()->fetchAllKeyed(0, 0);
//  }
//
//  if ($date) {
//    $query = db_select('node', 'n');
//    $query->condition('type', 'hht_master');
//    $query->fields('n', array('title'));
//    $query->leftJoin('field_data_field_hht_id', 'fh', 'fh.field_hht_id_nid = n.nid');
//    $query->leftJoin('field_data_field_trip_executon_date', 'fd', 'fh.entity_id = fd.entity_id');
//    $query->condition('field_trip_executon_date_value', $date);
//    $query->addTag('node_distributor_access');
//    $res = $query->execute()->fetchAllKeyed(0, 0);
//
//    $result = array_diff_key($result, $res);
//  }

  $query = db_select('node', 'n');
  $query->condition('n.type', 'hht_master');
  $query->fields('n', array('title'));
  $query->condition('n.title', db_like($string) . '%', 'LIKE');
//$query->addExpression("IF(SUM(field_trip_executon_date_value = '1488220200'), 'Yes', 'No')", 'hola');
//$query->addExpression("SUM(field_trip_executon_date_value = '1488220200')", 'aaa');

  $query->addExpression("MAX(IF((field_trip_executon_date_value = $date AND (nt.status = 1)), nt.title, 0))", 'trip_id');
  $query->leftJoin('field_data_field_hht_id', 'fh', 'fh.field_hht_id_nid = n.nid');
  $query->leftJoin('node', 'nt', 'nt.nid = fh.entity_id');

//  //Dont consider deleted trips
//  $db_or = db_or();
//  $db_or->isNull('nt.status');
//  $db_or->condition('nt.status', 0);
//  $query->condition($db_or);

  $query->leftJoin('field_data_field_trip_executon_date', 'fd', 'fh.entity_id = fd.entity_id');
  $query->groupBy('n.title');
  $query->addTag('node_distributor_access');
  $res = $query->execute()->fetchAll();

  $date_string = date('m/d/Y', $date);
  foreach ($res as $val) {
    if ($val->trip_id) {
      $result[$val->title] = "$val->title ($val->trip_id - $date_string)";
    }
    else {
      $result[$val->title] = $val->title;
    }
  }

  drupal_json_output($result);
}

function validate_hht_id($date, $hht_id) {

  $query = db_select('node', 'n');
  $query->condition('n.type', 'hht_master');

  $query->leftJoin('field_data_field_hht_id', 'fh', 'fh.field_hht_id_nid = n.nid');
  $query->leftJoin('field_data_field_trip_executon_date', 'fd', 'fh.entity_id = fd.entity_id');
  $query->leftJoin('node', 'nt', 'nt.nid = fh.entity_id');
  //$query->fields('fd', array('field_trip_executon_date_value'));

  $query->addExpression("IF((nt.status = 1), field_trip_executon_date_value, 0)", 'date');

//  //Dont consider deleted trips
//  $db_or = db_or();
//  $db_or->isNull('nt.status');
//  $db_or->condition('nt.status', 0);
//  $query->condition($db_or);

  $query->condition('n.title', $hht_id);
  $query->addTag('node_distributor_access');
  $result = $query->execute()->fetchAllKeyed(0, 0);

  if (empty($result) || isset($result[$date])) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

function get_nid_from_hht_id($hht_id) {

  $query = db_select('node', 'n');
  $query->fields('n', array('nid'));
  $query->condition('type', 'hht_master');
  $query->condition('title', $hht_id);
  $query->addTag('node_distributor_access');
  $result = $query->execute()->fetchField();

  return $result;
}

function validate_cashier($cashier) {
  $query = db_select('node', 'n');
  $query->join('field_data_field_resource_type', 'rt', 'rt.entity_id = n.nid');
  $query->join('field_data_field_resource_name', 'rn', 'rn.entity_id = n.nid');
  $query->condition('field_resource_name_value', $cashier);

  $query->condition('field_resource_type_value', 'CASHIER');
  $query->fields('rn', array('field_resource_name_value'));
  $query->addTag('node_distributor_access');
  $result = $query->execute()->fetchField();

  return $result;
}

function validate_vehicle_number($vehicle_number) {
  $query = db_select('node', 'n');
  $query->condition('type', 'vehicle_master');
  $query->fields('n', array('title'));
  $query->condition('title', $vehicle_number);
  $query->addTag('node_distributor_access');
  $result = $query->execute()->fetchField();

  return $result;
}

function trip_delete_form($form, &$form_state) {
  $form['#prefix'] = '<div id="itemlist-div">';
  $form['#suffix'] = '</div>';
  $form['trip_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Trip id'),
    '#required' => TRUE,
    //'#autocomplete_path' => 'trip/autocomplete'
  );

  $form['trip_id_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Show bills'),
    '#ajax' => array(
      'wrapper' => 'itemlist-div',
      'callback' => 'custom_ajax_callback',
      'method' => 'replace',
      'effect' => 'fade',
    ),
    '#submit' => array('trip_id_ajax_submit'),
    '#validate' => array('trip_id_ajax_validate'),
    //'#limit_validation_errors' => array(array('trip_id')),
  );

  $header_array = array(
    'bill_number' => 'Bill Number',
    'party_name' => 'Party name',
    'bill_value' => 'Value',
    'sales_beat' => 'Sales Beat',
    'van_loading_date' => 'Existing Van/Loading Date',
    //'sequence' => 'Delivery Sequence',
    //'trip_id' => 'Trip ID',
  );

  if (!isset($form_state['dispatch_planning']['bills'])) {
    $form_state['dispatch_planning']['bills'] = array();
  }
  $options = $form_state['dispatch_planning']['bills'];

  if ($options) {
    $form['list_form_items'] = array(
      '#theme' => 'table',
      '#header' => $header_array,
      '#rows' => $form_state['dispatch_planning']['bills'],
      '#prefix' => '<div id="table-div">',
      '#suffix' => '</div>',
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Delete trip',
      '#validate' => array('trip_id_ajax_validate'),
      //'#limit_validation_errors' => array(array('trip_execution_date'), array('hht_id'), array('vehicle_number'), array('cashier'), array('list_form_items')),
    );
  }
  else {
    if (isset($form_state['values']['trip_id'])) {
      $form['no_bills'] = array(
        '#markup' => '<p>No bills attached to the trip</p>',
      );

      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Delete trip',
        '#validate' => array('trip_id_ajax_validate'),
        //'#limit_validation_errors' => array(array('trip_execution_date'), array('hht_id'), array('vehicle_number'), array('cashier'), array('list_form_items')),
      );
    }
  }

  return $form;
}

function trip_id_ajax_validate($form, &$form_state) {
  $trip_id = $form_state['values']['trip_id'];

  $query = db_select('node', 'n');
  $query->leftJoin('field_data_field_dispatch_status', 'fs', 'fs.entity_id = n.nid');
  $db_or = db_or();
  $db_or->isNull('fs.field_dispatch_status_value');
  $db_or->condition('fs.field_dispatch_status_value', 0);
  $query->condition($db_or);
  $query->condition('n.title', $trip_id);
  $query->condition('n.type', 'dispatch_data');
  $query->fields('n', array('title'));
  $query->condition('status', 1);
  $query->addTag('node_distributor_access');
  $result = $query->execute()->fetchField();

  if (empty($result)) {
    form_set_error('trip_id', 'Trip ID does not exist or is already deleted or is already dispatched');
  }

  //TP TO HOST ENTRY RELATED CHANGE
  global $user;
  $user_id = $user->uid;
  $distributor_id = change_feeds_import_get_distributor_id($user_id);

  //A Trip ID has been sent to PTL (i.e. data exists in PTL Complete report for that Trip ID)
  $ptl_data_exist = check_trip_exist_in_ptl($trip_id, $distributor_id);
  if (!empty($ptl_data_exist)) {
    form_set_error('trip_id', "Trip $trip_id data is already exist in PTL!");
  }


  //A Trip ID has been attached to a Master Trip
  $master_trip_id = check_trip_attach_to_master_ptl($trip_id, $distributor_id);
  if (!empty($master_trip_id)) {
    form_set_error('trip_id', "Trip ID $trip_id has already been attached to a Master Trip ID $master_trip_id");
  }


  //PTL Loose confirmation has been done for that Trip ID
  $loose_completed = check_ptl_loose_confirmation_for_trip($trip_id, $distributor_id);
  if (!empty($loose_completed)) {
    form_set_error('trip_id', "PTL Loose confirmation has been done for Trip ID: $trip_id");
  }

  //CLD Confirmation has been done for that Trip ID


  $cld_completed = check_cld_confirmation_for_trip($trip_id, $distributor_id);
  if (!empty($cld_completed)) {
    form_set_error('trip_id', "CLD confirmation has been done for Trip ID: $trip_id");
  }


  //Re-upload of custom billing data has been done
  $bill_reupload = check_reupload_for_any_bills_in_trip($trip_id, $distributor_id);
  if (!empty($bill_reupload)) {
    form_set_error('trip_id', "Re-upload of custom billing data has been done for the bills: $bill_reupload");
  }
}

function trip_id_ajax_submit($form, &$form_state) {
  $trip_id = $form_state['values']['trip_id'];

  //unset($form_state['input']['trip_id']);

  $bill_info = get_bill_info(NULL, NULL, NULL, NULL, $trip_id);

  if (!empty($bill_info)) {
    $form_state['dispatch_planning']['bills'] = $bill_info;
  }
  else {
    $form_state['dispatch_planning']['bills'] = array();
  }

  $form_state['rebuild'] = TRUE;
}

function trip_delete_form_submit($form, &$form_state) {
  global $user;
  $distributor_id = change_feeds_import_get_distributor_id($user->uid);
  $trip_id = $form_state['values']['trip_id'];

  $query = db_select('node', 'n');
  $query->condition('n.title', $trip_id);
  $query->condition('n.type', 'dispatch_data');
  $query->join('field_data_field_trip_id_reference', 'ft', 'ft.field_trip_id_reference_nid = n.nid');
  $query->leftjoin('field_data_field_dispatch_n_value', 'nv', 'nv.entity_id = ft.entity_id');
  $query->fields('n', array('nid'));
  $query->fields('ft', array('entity_id'));
  $query->addTag('node_distributor_access');
  $result = $query->execute()->fetchAll(PDO::FETCH_GROUP);

  $dispatch_nid = key($result);

  foreach ($result[$dispatch_nid] as $value) {

    $node = node_load($value->entity_id);

    if ($node) {
      $node->field_trip_id_reference = array();
      $node->field_bill_sequence = array();
      $node->field_drs_sequence = array();
      $node->field_dispatch_n_value = array();

      $previously_dp = check_previous_dp_status($node->field_previous_trip['und'][0]['value'], $node->title, $distributor_id);
      if (!empty($previously_dp)) {
        $node->field_delivery_pending['und'][0]['value'] = 1;
      }
      node_save($node);
    }
  }

  $dispatch_node = node_load($dispatch_nid);
  if ($dispatch_node) {
    $dispatch_node->status = 0;
    node_save($dispatch_node);
  }

  // Delete Farey table data dispatch_planning_api_data, dispatch_planning_item_details
  delete_data_from_farey_table($trip_id, $distributor_id);

  //Delete data from dispatch_qty_confirmation table
  delete_data_from_dispatch_qty_confirmation($trip_id, $distributor_id);

  drupal_set_message('Successfully deleted');
}

/**
 *  Return 1 in case of DP
 */
function check_previous_dp_status($trip_id, $bill_number, $dis_id) {
  $query = db_select('dispatch_planning_api_data', 'ad');
  $query->condition('ad.distributor_id', $dis_id, '=');
  $query->condition('ad.runsheet_number', $trip_id, '=');
  $query->condition('ad.bill_number', $bill_number, '=');
  $query->fields('ad', array('delivery_pending_flag'));
  $res = $query->execute()->fetchField();
  return $res;
}

// delete data from farey table when delete a trip
function delete_data_from_farey_table($trip_id, $distributor_id) {
  if (!empty($trip_id) && !empty($distributor_id)) {
    $query = db_select('dispatch_planning_api_data', 'ad');
    $query->fields('ad', array('id'));
    $query->condition('ad.runsheet_number', $trip_id);
    $query->condition('ad.distributor_id', $distributor_id);
    $res = $query->execute()->fetchAllKeyed(0, 0);
    if (!empty($res)) {
      $num_deleted = db_delete('dispatch_planning_item_details')
        ->condition('trip_bill_reference', $res, 'IN')
        ->execute();
    }
    $num_deleted = db_delete('dispatch_planning_api_data')
      ->condition('runsheet_number', $trip_id)
      ->execute();
  }
}

function dispatch_planning_form_views_exposed_form_alter(&$form, &$form_state) {
  if ($form['#id'] == 'views-exposed-form-billing-report-page') {
    //Show Yes, No, and All for Trip id field in billing report
    $form['field_trip_id_reference_nid_op']['#options'] = array(
      'in' => 'All',
      'empty' => 'No',
      'not empty' => 'Yes',
    );

    $form['field_trip_id_reference_nid']['#access'] = FALSE;
  }
  if ($form['#id'] == 'views-exposed-form-dispatch-planning-inventory-return-sheet-page') {
    $select = array('' => '- Select -');
    $line_options = array(
      'line_deliver' => 'line_deliver',
      'line_partial_deliver' => 'line_partial_deliver',
      'line_undeliver' => 'line_undeliver',
    );
    $line_options = $select + $line_options;

    $form['line_level_status']['#type'] = 'select';
    $form['line_level_status']['#size'] = 1;
    $form['line_level_status']['#options'] = $line_options;
    $form['line_level_status']['#validated'] = TRUE;
  }

  if ($form['#id'] == 'views-exposed-form-returned-assets-page') {
    array_unshift($form['#validate'], 'received_assets_validation_callback');
  }
}

function received_assets_validation_callback($form, &$form_state) {
  $trip_id = $form_state['values']['title'];

  if (!empty($trip_id)) {
    global $user;
    $dis_id = change_feeds_import_get_distributor_id($user->uid);
    // Checking Trip ID exist in the system
    $trip_node_obj = node_load_multiple(NULL, array('title' => $trip_id, 'type' => 'dispatch_data', 'uid' => $dis_id));
    $trip_node_key = key($trip_node_key);
    $trip_node = $trip_node_obj[$trip_node_key];
    if (empty($trip_node_obj)) {
      form_set_error('form', t("Trip ID:$trip_id does not exists."));
    }
    $node_obj = node_load_multiple(NULL, array('title' => $trip_id, 'type' => 'assets_count', 'uid' => $dis_id));
    $key = key($node_obj);
    $node = $node_obj[$key];
    $target = array('attributes' => array('target' => '_blank'));
    /* User should enter dispatch count before entering received assest. Dispatched assets
      screen creates assets count of node.
     */
    if (!empty($node)) {
      $trip_detail = check_trip_id_exists_or_not($dis_id, $trip_id);
      $vrs_status = $trip_detail->field_vrs_status_value;

      $current_vrs_status = $vrs_status;
      $field_vrs_status = field_info_field('field_vrs_status');
      $vrs_status_values = list_allowed_values($field_vrs_status);
      unset($vrs_status_values[-1]);
      if (isset($vrs_status_values[$current_vrs_status])) {
        form_set_error('form', t("Trip is already in $vrs_status_values[$current_vrs_status] status."));
        //drupal_set_message(t("Trip is already in $vrs_status_values[$current_vrs_status] status."), 'error');
      }

      /*
        if ($vrs_status == 0) {
        form_set_error('form', t('Trip is already in returns confirmation pending status.'));
        //drupal_set_message(t('Trip is already in returns confirmation pending status.'), 'error');
        }
        if ($vrs_status == 1) {
        form_set_error('form',  t('Trip is already in returns confirmed status.'));
        //drupal_set_message(t('Trip is already in returns confirmed status.'), 'error');
        }
        else if ($vrs_status == 2) {
        form_set_error('form',  t('Trip is already in VRS confirmed status.'));
        //drupal_set_message(t('Trip is already in VRS confirmed status.'), 'error');
        }
        else if ($vrs_status == 3) {
        form_set_error('form', t('Trip is already in VRS pending status.'));
        //drupal_set_message(t('Trip is already in VRS pending status.'), 'error');
        }
        else if ($vrs_status == 4) {
        form_set_error('form', t('Trip is already in Handover pending status.'));
        //drupal_set_message(t('Trip is already in Handover pending status.'), 'error');
        }
        else if ($vrs_status == 5) {
        form_set_error('form', t('Trip is already in Handover confirmed status.'));
        //drupal_set_message(t('Trip is already in Handover confirmed status.'), 'error');
        }
       */
    }
    else {
      $dispatch_link = l(t(' Click here to enter Dispatch count'), 'dispatch-assets-screen/' . $trip_id, $target);
      form_set_error('form', t("Please enter Dispatch Count for Trip ID:$trip_id first.") . $dispatch_link);
    }
  }
}

function get_delivery_boy_names($node_nid) {
  $query = db_select('field_data_field_trip_id_reference', 'ftr');
  $query->condition('ftr.entity_id', $node_nid);
  $query->leftjoin('field_data_field_delivery_boy', 'db', 'db.entity_id = ftr.field_trip_id_reference_nid');
  $query->leftjoin('node', 'n', 'db.field_delivery_boy_nid = n.nid');
  $query->addExpression('GROUP_CONCAT(DISTINCT n.title)', 'delivery_boys');
  $res = $query->execute()->fetchField();
  return $res;
}

/**
 *
 * @param type $value
 * @param type $node
 * @param type $trip_execution_date
 * @param type $hht_id
 * @param type $cashier
 * @param type $trip_id
 * @return array
 */
function dispatch_planning_sales_reg_api($node, $trip_execution_date, $vehicle_no, $cashier, $trip_id) {

  $api_data = array();
  // get billing data details
  $node_uid = $node->uid;
  $node_nid = $node->nid;
  $rs_code = dispatch_planning_get_rscode_using_uid($node_uid);
  $bill_number = $node->title;
  $vehicle = $node->field_billing_van[LANGUAGE_NONE][0]['value'];
  $bill_date = date('Y-m-d', $node->field_sr_bill_date[LANGUAGE_NONE][0]['value']);
  $bill_value = $node->field_bill_value[LANGUAGE_NONE][0]['value'];
  $party_code = $node->field_sales_party_code[LANGUAGE_NONE][0]['value'];
  $store_sequence = $node->field_drs_sequence[LANGUAGE_NONE][0]['value'];

  $billing_data_details = $billing_data_details_insert = dispatch_planning_get_billing_data($node_uid, $bill_number);
  $outlet_data_details = dispatch_planning_get_outlet_data($node_uid, $party_code);
  /// comma separated values
  $delivery_boy_names = get_delivery_boy_names($node_nid);
  $delivery_boy_arr = explode(",", $delivery_boy_names);

  foreach ($billing_data_details as $key => $val) {
    $query = db_select('godown_data', 'ga');
    $query->fields('ga', array('godown_short'));
    $query->condition('ga.trip_id', $trip_id);
    $query->condition('ga.distributor_id', $node_uid);
    $query->condition('ga.bill_number', $bill_number);
    $query->condition('ga.sku_code', $val['sku_code']);
    //$query->condition('ga.batch_code', $val['BASEPACK_CODE']);
    $gowdown_short = $query->execute()->fetchField();

    $dispath_qty = $billing_data_details[$key]['sum_net_sales_quantity'] = $val['Sum_of_TOTAL_SALES_QTY'] - $gowdown_short;
    $billing_data_details_insert[$key]['sum_net_sales_quantity'] = $dispath_qty; // send dispath_qty in API as well insert in farey table
    unset($billing_data_details[$key]['og_Sum_of_NET_SALES_QTY']); // dont send og_Sum_of_NET_SALES_QTY in API
    unset($billing_data_details[$key]['Sum_of_TOTAL_SALES_QTY']); // dont send Sum_of_TOTAL_SALES_QTY in API
  }
  if (empty($outlet_data_details['field_hul_updated_lat_value'])) {
    $outlet_data_details['field_hul_updated_lat_value'] = 0;
  }
  if (empty($outlet_data_details['field_hul_updated_long_value'])) {
    $outlet_data_details['field_hul_updated_long_value'] = 0;
  }
  $job_type = variable_get('dispatch_job_type', 'delivery1');
  $api_data['jobType'] = $job_type;  // delivery1 for hul
  $api_data['merchantCode'] = 'hul';  // hul for Merchant code

  $reference_no = $trip_id . '_' . $rs_code . '_' . $bill_number;
  $api_data['referenceNo'] = $reference_no;
  $api_data['date'] = date('Y-m-d', $trip_execution_date);
  $api_data['city'] = 'Mumbai';
  // $api_data['hub'] = $rs_code;
  $api_data['hub'] = $rs_code; // need to remove when moving to HUL
  $api_data['fieldExecutive'] = $rs_code . '_' . $cashier;
  $api_data['fieldExecutiveName'] = $cashier;

  $api_data['jobData']['vehicle'] = $vehicle_no;
  $api_data['jobData']['party_hll_code'] = $outlet_data_details['field_hul_code_value']; // hul code in outlet
  // $api_data['jobData']['lat_long'] = $outlet_data_details['field_hul_updated_lat_value'] . ',' . $outlet_data_details['field_hul_updated_long_value'];
  //$api_data['jobData']['lat_long']['lat_longLatitude'] = $outlet_data_details['field_hul_updated_lat_value'];
  // $api_data['jobData']['lat_long']['lat_longLongitude'] = $outlet_data_details['field_hul_updated_long_value'];
  $api_data['latitude'] = $outlet_data_details['field_hul_updated_lat_value'];
  $api_data['longitude'] = $outlet_data_details['field_hul_updated_long_value'];
  //$api_data['jobData']['slot'] = 3;
  $api_data['jobData']['bill_value'] = (int) $bill_value;
  $api_data['jobData']['item_details'] = $billing_data_details; // array
  $api_data['jobData']['bill_date'] = $bill_date;
  $api_data['jobData']['locality'] = 'ABCD_locality';  // Hardcoded as suggested by gaurav  
  $api_data['jobData']['store_sequence_no'] = $store_sequence;  // drs sequence
  $api_data['jobData']['party_name'] = $outlet_data_details['field_party_name_value']; // party name in outlet
  $api_data['jobData']['beat_name'] = $outlet_data_details['field_beat_name_value'];  // beat name in outlet
  $api_data['jobData']['party_code'] = $party_code;
  $api_data['jobData']['bill_number'] = $bill_number;
  $api_data['jobData']['runsheet_number'] = $trip_id;
  // adding the salesman in array to insert in dispatch_planning_api_data table
  $api_data['jobData']['salesman'] = $outlet_data_details['field_salesman_value'];  // salesman in outlet
  foreach ($delivery_boy_arr as $key => $del_boy_name) {
    $api_data['jobData']['array_delivery_boy'][$key]['delivery_boy_value'] = $del_boy_name; // delivery boy commented
    $api_data['jobData']['array_delivery_boy'][$key]['delivery_boy'] = $del_boy_name; // delivery boy commented
  }
  /**
   * Insert data into dispatch_planning_api_data table
   */
  $id = dispatch_planning_api_data($api_data, $node_uid, $delivery_boy_names);
  // Don't send the salesman in API
  unset($api_data['jobData']['salesman']);
  //unset($api_data['jobData']['delivery_boy']);
  /**
   * Insert data into dispatch_planning_item_details table
   */
  dispatch_planning_item_details($billing_data_details_insert, $id);
  return $api_data;
}

/*
 * Insert data into dispatch_planning_api_data table
 */

function dispatch_planning_api_data($api_data, $node_uid = 0, $delivery_boy_names) {
  if (!empty($api_data)) {
    $query = db_insert('dispatch_planning_api_data');
    $fields = array(
      'distributor_id' => $node_uid,
      'jobType' => $api_data['jobType'],
      'referenceNo' => $api_data['referenceNo'],
      'date' => $api_data['date'],
      'dispatch_date' => strtotime($api_data['date']),
      'city' => $api_data['city'],
      'hub' => $api_data['hub'],
      'fieldExecutive' => $api_data['fieldExecutive'],
      'fieldExecutiveName' => $api_data['fieldExecutiveName'],
      'vehicle' => $api_data['jobData']['vehicle'],
      'party_hll_code' => $api_data['jobData']['party_hll_code'],
      'lat_longlatitude' => $api_data['latitude'],
      'lat_longlongitude' => $api_data['longitude'],
      'bill_value' => $api_data['jobData']['bill_value'],
      'bill_date' => strtotime($api_data['jobData']['bill_date']),
      'locality' => $api_data['jobData']['locality'],
      'store_sequence_no' => $api_data['jobData']['store_sequence_no'],
      'party_name' => $api_data['jobData']['party_name'],
      'beat_name' => $api_data['jobData']['beat_name'],
      'party_code' => $api_data['jobData']['party_code'],
      'bill_number' => $api_data['jobData']['bill_number'],
      'runsheet_number' => $api_data['jobData']['runsheet_number'],
      'salesman' => $api_data['jobData']['salesman'],
      'delivery_boy' => $delivery_boy_names,
      'created_time' => REQUEST_TIME
      //'updated_time' => REQUEST_TIME //updated time should enter from response and manual edit.
    );
    $query->fields($fields);
    $result_id = $query->execute();
    return $result_id;
  }
}

/**
 * Insert data into dispatch_planning_item_details table
 */
function dispatch_planning_item_details($billing_data_details, $id) {
  if (!empty($billing_data_details)) {
    foreach ($billing_data_details as $data) {
      $query = db_insert('dispatch_planning_item_details');
      $fields = array(
        'tur' => $data['tur'],
        'mrp' => $data['mrp'],
        'product_name' => $data['product_name'],
        'sum_net_sales_cases' => $data['sum_net_sales_cases'],
        'sum_net_sales_quantity' => $data['Sum_of_TOTAL_SALES_QTY'],
        'dispatch_qty' => $data['sum_net_sales_quantity'],
        'og_sum_net_sales_quantity' => $data['og_Sum_of_NET_SALES_QTY'],
        'sku_code' => $data['sku_code'],
        'sum_net_sales_kgs' => $data['sum_net_sales_kgs'],
        'sum_net_sales_value' => $data['sum_net_sales_value'],
        'sku_description' => $data['sku_description'],
        'trip_bill_reference' => $id,
        'res_godown_short' => $data['Sum_of_TOTAL_SALES_QTY'] - $data['sum_net_sales_quantity']
      );
      $query->fields($fields);
      $result_id = $query->execute();
    }
  }
}

/**
 * 
 * @param type $node_uid
 * @param type $bill_number
 * @return array
 */
function dispatch_planning_get_billing_data($node_uid, $bill_number) {
  $query = db_select('custom_billing_data', 'bd');
  $query->fields('bd', array('tur', 'mrp', 'product_name'));
  $query->addfield('bd', 'Sum_of_NET_SALES_CASES', 'sum_net_sales_cases');
  $query->addfield('bd', 'Sum_of_TOTAL_SALES_QTY', 'Sum_of_TOTAL_SALES_QTY');
  //$query->addfield('bd', 'Sum_of_TOTAL_SALES_QTY', 'sum_net_sales_quantity');
  $query->addfield('bd', 'sku7_code', 'sku_code');
  $query->addfield('bd', 'Sum_of_NET_SALES_KGS', 'sum_net_sales_kgs');
  $query->addfield('bd', 'Sum_of_NET_SALES_QTY', 'og_Sum_of_NET_SALES_QTY');
  // send per unit value
  //$query->addExpression('ROUND(IFNULL((Sum_of_NET_SALES_VALUE - ((Sum_of_OTHER_DISCOUNT + Sum_of_SCHEME_DISCOUNT)*(1 + (Sum_of_TAX_PERCENTAGE/100))))/Sum_of_TOTAL_SALES_QTY,0), 2)', 'sum_net_sales_value');
  //Added for TP and Host qty feature. Previous line was commented. we calculate while billing upload
  $query->addExpression('ROUND(IFNULL(line_level_value,0), 2)', 'sum_net_sales_value');

  $query->addfield('bd', 'product_name', 'sku_description');
  $query->orderBy('bd.product_name', 'DESC');

  //TP IMPORTANT: only those SKU which Sum_of_TOTAL_SALES_QTY is > 0
  $query->condition('bd.Sum_of_TOTAL_SALES_QTY', 0, '>');

  $query->condition('bd.distributor_id', $node_uid);
  $query->condition('bd.bill_number', $bill_number);
  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  return $res;
}

/**
 * 
 * @param type $node_uid
 * @param type $party_code
 * @return array
 */
function dispatch_planning_get_outlet_data($node_uid, $party_code) {
  $query = db_select('node', 'n');
  $query->condition('n.type', 'outlet_master');
  $query->condition('n.uid', $node_uid);
  //$query->join('field_data_field_sales_party_code', 'pc', 'pc.field_sales_party_code_value = n.title');
  $query->leftjoin('field_data_field_hul_code', 'hc', 'hc.entity_id = n.nid');
  $query->join('node', 'n1', 'n1.title = field_hul_code_value AND n.uid = n1.uid');

  $query->leftjoin('field_data_field_party_name', 'pn', 'pn.entity_id = n.nid');
  $query->leftjoin('field_data_field_beat_name', 'bn', 'bn.entity_id = n.nid');
  $query->leftjoin('field_data_field_salesman', 'sm', 'sm.entity_id = n.nid');
  $query->leftjoin('field_data_field_hul_updated_lat', 'hl', 'hl.entity_id = n1.nid');
  $query->leftjoin('field_data_field_hul_updated_long', 'ul', 'ul.entity_id = n1.nid');

  $query->fields('bn', array('field_beat_name_value'));
  $query->fields('pn', array('field_party_name_value'));
  $query->fields('sm', array('field_salesman_value'));
  $query->fields('hc', array('field_hul_code_value'));
  $query->fields('hl', array('field_hul_updated_lat_value'));
  $query->fields('ul', array('field_hul_updated_long_value'));

  $query->condition('n.type', 'outlet_master');
  $query->condition('n.title', $party_code);

  $res = $query->execute()->fetch(PDO::FETCH_ASSOC);
  return $res;
}

/**
 * 
 * @param type $node_uid
 * @return string
 */
function dispatch_planning_check_api_authentication($node_uid) {
  $query = db_select('field_data_field_dispatch_planing_api', 'dp');
  $query->fields('dp', array('entity_id'));
  $query->condition('dp.field_dispatch_planing_api_value', 1);
  $query->condition('dp.entity_id', $node_uid);
  $res = $query->execute()->fetchField();
  return $res;
}

/**
 * 
 * @param type $json_api_data
 */
function dispatch_planning_api_log($json_api_data, $trip_id, $api_type, $dis_id, $api_flag = 0) {
  $sql_ins_id = db_insert('dispatch_planning_api_log')
    ->fields(array(
      'trip_id' => $trip_id,
      'distributor_id' => $dis_id,
      'request_data' => $json_api_data,
      'api_type' => $api_type, // pass vraiable defined in oxigen wallet configuratation form
      'request_time' => time(),
      'api_success' => $api_flag,
    ))
    ->execute();
  return $sql_ins_id;
}

/**
 * 
 * @param $response_data (json_decode), $sql_ins_id (serial id)
 */
function dispatch_planning_api_log_update($response_data, $sql_ins_id, $api_success) {
  db_update('dispatch_planning_api_log')
    ->fields(array(
      'response_data' => $response_data,
      'api_success' => $api_success,
      'request_flag' => 1
    ))
    ->condition('id', $sql_ins_id, '=')
    ->execute();
}

/**
 * 
 * @param type $distributor_id
 * @return type bool false when configuration is not set
 */
function check_dynamic_routing_configuration($distributor_id) {
  $query = db_select('field_data_field_dynamic_routing_config', 'tp');
  $query->fields('tp', array('entity_id'));
  $query->condition('tp.field_dynamic_routing_config_value', 1);
  $query->condition('tp.entity_id', $distributor_id);
  $res = $query->execute()->fetchField();
  return $res;
}

/**
 * Implements hook_node_update
 * @param type $node
 */
function dispatch_planning_node_update($node) {
  if ($node->type == 'dispatch_data') {
    global $user;
    $distributor_id = change_feeds_import_get_distributor_id($user->uid);
    $original_pre_start = $node->original->field_dispatch_pre_start_time[LANGUAGE_NONE][0]['value'];
    $new_pre_start = $node->field_dispatch_pre_start_time[LANGUAGE_NONE][0]['value'];
    $trip_id = $node->title;

    // dispatch_date is mandatory to push data to Fareye api
    $dispatch_date = $node->field_dispatch_date[LANGUAGE_NONE][0]['value'];
    if ($original_pre_start != $new_pre_start && empty($original_pre_start) && !empty($dispatch_date)) {
      // if empty farery table then hit api
      if (check_tripid_exist_in_farery_table($trip_id, $distributor_id) == 1) {
        drupal_register_shutdown_function('_update_dispatch_planning_api', $node);

        if ($node->field_sms_flag[LANGUAGE_NONE][0]['value']) {
          //_update_sms_integration_api($node);
              db_insert('sms_preprocess')
              ->fields(array(
                'trip_id' => $node->title,
                'distributor_id' => $distributor_id,
                'flag' => 0,
                'created_date' => REQUEST_TIME,
              ))
              ->execute();
        }
      }
    }
  }
}

// Function check farery table data present for particular trip id
function check_tripid_exist_in_farery_table($trip_id, $distributor_id) {
  if (!empty($trip_id) && !empty($distributor_id)) {
    $query = db_select('dispatch_planning_api_data', 'ad');
    $query->fields('ad', array('id'));
    $query->condition('ad.runsheet_number', $trip_id);
    $query->condition('ad.distributor_id', $distributor_id);
    $res = $query->execute()->fetchField();
    if (empty($res))
      return 1;
    else
      return 0;
  }
}

/**
 * function to update dispatch_planning_api table 
 *   and call api using drupal_http_request
 * $node type dispatch_data
 * @param object $node
 */
function _update_dispatch_planning_api($node) {

  if (!empty($node)) {
    $dis_id = $node->uid;
    // get api data here
    $api_authentication_flag = dispatch_planning_check_api_authentication($dis_id);

    if (!empty($api_authentication_flag)) {
      // $node passed is of type sales_regiser_data
      $trip_dispatch_date = strtotime($node->field_dispatch_date['und'][0]['value']);
      $vehicle_no = $node->field_vehicle_no['und'][0]['value'];
      // $hht_id = get_hht_id_from_nid($hht_nid);
      $cashier = $node->field_cashier_name['und'][0]['value'];
      $trip_id = $node->title;
      $nid = $node->nid;
      $res = _dispatch_planning_get_all_sales_nid($nid);

      if (!empty($res)) {
        foreach ($res as $key => $val) {
          $sales_nid = $val['nid'];
          $sales_node = node_load($sales_nid);

          //TP IMPORTANT: Send only those bills which sum(Sum_of_TOTAL_SALES_QTY) is > 0
          $total_sales_qty = get_total_sales_qty_from_custom_billing($sales_node->title, $dis_id);
          if ($total_sales_qty > 0) {
            $api_data[] = dispatch_planning_sales_reg_api($sales_node, $trip_dispatch_date, $vehicle_no, $cashier, $trip_id);
          }
        }
      }
      // call api here
      // Call Dispatch API Here
      if (!empty($api_data)) {
        $json_api_data = json_encode($api_data);
        // request log
        $api_type = 'dispatch_planning';
        $sql_ins_id = dispatch_planning_api_log($json_api_data, $trip_id, $api_type, $dis_id);


        $request_headers = array('Content-Type' => 'application/json');
        //$order_api_url = 'https://staging.fareye.co/api/v1/job?api_key=l1S6xa5mnxUXDuqv12q7lerLBL9l1ICq';
        $order_api_url = variable_get('dispatch_uri_settings', 'https://staging.fareye.co/api/v1/job?api_key=l1S6xa5mnxUXDuqv12q7lerLBL9l1ICq');
        $options = array('headers' => $request_headers, 'method' => 'POST', 'data' => $json_api_data);
        $response_data = drupal_http_request($order_api_url, $options);

        $response_data = $response_data->data;
        $api_success = json_decode($response_data);
        $api_success = ($api_success->failCount == 0) ? 1 : 0;
        // create response log entry
        dispatch_planning_api_log_update($response_data, $sql_ins_id, $api_success);
      }
    }
  }
}

/**
 * 
 * @param type $nid
 * @return type
 */
//function get_hht_id_from_nid($nid) {
//   $result = '';
//   if (!empty($nid)) {
//      $query = db_select('node', 'n');
//      $query->fields('n', array('title'));
//      $query->condition('n.nid', $nid);
//      $result = $query->execute()->fetchField();
//   }
//   return $result;
//}

/**
 * _dispatch_planning_get_all_sales_nid list using trip nid
 * @param type $nid
 * @return type
 */
function _dispatch_planning_get_all_sales_nid($nid) {
  $res = array();
  if (!empty($nid)) {
    $query = db_select('node', 'n');
    $query->condition('n.type', 'sales_register_data');
    $query->join('field_data_field_promised_date', 'pro_date', 'pro_date.entity_id = n.nid');
    $query->join('field_data_field_trip_id_reference', 'ti', 'ti.entity_id = n.nid');
    $query->join('field_data_field_drs_sequence', 'ds', 'ds.entity_id = n.nid');
    $query->orderBy('ds.field_drs_sequence_value', 'ASC');
    $query->condition('ti.field_trip_id_reference_nid', $nid);
    $query->fields('n', array('nid'));
    $query->fields('pro_date', array('field_promised_date_value'));
    $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  }
  return $res;
}

/**
 * 
 * @param type $node_uid
 * @return string
 */
function ptl_check_api_authentication($node_uid) {
  $query = db_select('field_data_field_ptl_data_configuration', 'tp');
  $query->fields('tp', array('entity_id'));
  $query->condition('tp.field_ptl_data_configuration_value', 1);
  $query->condition('tp.entity_id', $node_uid);
  $res = $query->execute()->fetchField();
  return $res;
}

/**
 * 
 * @param type $uid
 * @return string
 */
function dispatch_planning_get_rscode_using_uid($uid) {
  $query = db_select('field_data_field_third_party_username', 'rs');
  $query->condition('rs.entity_id', $uid);
  $query->fields('rs', array('field_third_party_username_value'));
  $res = $query->execute()->fetchField();
  return $res;
}

/**
 * 
 * @param type $sku7_code
 * @param type $distributor_id
 * @return type qty for sku in one unit case
 */
function get_sku_unit_case($sku7_code, $distributor_id) {
  $query = db_select('field_data_field_unit_case_units_', 'fucu');
  $query->fields('fucu', array('field_unit_case_units__value'));
  $query->join('field_data_field_sku7_code', 'sc', 'sc.entity_id = fucu.entity_id');
  $query->join('node', 'n', 'n.nid = fucu.entity_id');
  $query->condition('n.type', 'sku7_code_master');
  $query->condition('sc.field_sku7_code_value', $sku7_code, '=');
  $query->condition('n.uid', $distributor_id, '=');
  $res = $query->execute()->fetchField();
  return $res;
}

/**
 * 
 * @param type $sku7_code
 * @param type $rs_code
 * @return ean
 */
function get_sku_ean($sku7_code, $rs_code) {
  $query = db_select('sku_ean_mrp', 'p');
  $query->fields('p', array('ean', 'ean1', 'ean2', 'ean3'));
  $query->condition('p.rs_code', $rs_code, '=');
  $query->condition('p.sku', $sku7_code, '=');
  $result = $query->execute()->fetchAll();
  return $result;
}

function ptl_loading_sheet_by_trip_id($trip_id, $rs_code) {
  $query = db_select('ptl_data_configuration', 'pd');
  $query->addExpression("concat(vehicle ,' / ', DATE_FORMAT(CONVERT_TZ(FROM_UNIXTIME(loading_date),'+00:00','+05:30'), '%d-%b-%y'))", 'vehicle_loading');
  $query->condition('trip_id', $trip_id);
  $query->condition('rs_code', $rs_code);
  $query->groupBy('vehicle,loading_date');
  $results = $query->execute()->fetchAll();

  foreach ($results as $key => $value) {
    $vehicle_loading = $vehicle_loading . ', ' . $value->vehicle_loading;
  }

  return ltrim($vehicle_loading, ',');
}

function master_ptl_trip_ids_by_trip_id($trip_id, $rs_code) {
  $query = db_select('master_ptl_data', 'pd');
  $query->addExpression("GROUP_CONCAT(DISTINCT(trip_id))", 'trip_ids');
  $query->condition('ptl_job', $trip_id);
  $query->condition('rs_code', $rs_code);
  $results = $query->execute()->fetchField();

  return $results;
}

function ptl_no_of_bills_by_trip_id($trip_id, $rs_code) {
  $query = db_select('ptl_data_configuration', 'pd');
  $query->condition('trip_id', $trip_id);
  $query->condition('rs_code', $rs_code);
  $query->addExpression('count(DISTINCT(bill_number))', 'bill_number');
  $results = $query->execute()->fetchField();
  return $results;
}

function ptl_trip_date_by_trip_id($trip_id, $rs_code) {
  $query = db_select('ptl_data_configuration', 'pd');
  $query->condition('trip_id', $trip_id);
  $query->condition('rs_code', $rs_code);
  $query->fields('pd', array('created_time'));
  $results = $query->range(0, 1)->execute()->fetchField();
  return $results;
}

function master_ptl_trip_date_by_trip_id($trip_id, $rs_code) {
  $query = db_select('master_ptl_data', 'pd');
  $query->condition('ptl_job', $trip_id);
  $query->condition('rs_code', $rs_code);
  $query->fields('pd', array('created_time'));
  $results = $query->range(0, 1)->execute()->fetchField();
  return $results;
}

function get_distributor_id_using_rscode($rs_code) {
  $query = db_select('field_data_field_distributor', 'fd');
  $query->join('field_data_field_third_party_username', 'tpu', 'tpu.entity_id = fd.entity_id');
  $query->condition('tpu.field_third_party_username_value', $rs_code);
  $query->fields('fd', array('field_distributor_value', entity_id));
  $res = $query->execute()->fetchField();
  return $res;
}

function get_rsname_using_rscode($rs_code) {
  $query = db_select('field_data_field_name', 'fn');
  $query->join('field_data_field_third_party_username', 'tpu', 'tpu.entity_id = fn.entity_id');
  $query->condition('tpu.field_third_party_username_value', $rs_code);
  $query->fields('fn', array('field_name_value', entity_id));
  $res = $query->execute()->fetchField();
  return $res;
}

function ptl_no_of_bill_lines_by_trip_id($trip_id, $rs_code) {
  $query = db_select('ptl_data_configuration', 'pd');
  $query->condition('trip_id', $trip_id);
  $query->condition('rs_code', $rs_code);
  $query->condition('loose', 1, '>=');
  $query->addExpression('count(id)', 'no_of_id');
  $results = $query->execute()->fetchField();
  return $results;
}

function master_ptl_no_of_bill_lines_by_trip_id($trip_id, $rs_code) {
  $query = db_select('master_ptl_data', 'pd');
  $query->condition('ptl_job', $trip_id);
  $query->condition('rs_code', $rs_code);
  $query->condition('loose', 1, '>=');
  $query->addExpression('count(id)', 'no_of_id');
  $results = $query->execute()->fetchField();
  return $results;
}

/**
 * 
 * @param type $dispatch_data_nid
 * @return type
 */
function _get_van_loading_combination_by_trip($dispatch_data_nid) {
  $query = db_select('field_data_field_trip_id_reference', 'tr');
  $query->condition('tr.field_trip_id_reference_nid', "$dispatch_data_nid");

  $query->join('field_data_field_billing_loading_date', 'ld', 'ld.entity_id = tr.entity_id');
  $query->join('field_data_field_billing_van', 'bv', 'bv.entity_id = tr.entity_id');

  $query->addExpression("concat(bv.field_billing_van_value ,' / ', DATE_FORMAT(CONVERT_TZ(FROM_UNIXTIME(ld.field_billing_loading_date_value),'+00:00','+05:30'), '%d-%b-%y'))", 'vehicle_loading');

  $query->groupBy('bv.field_billing_van_value,ld.field_billing_loading_date_value');

  $query->condition('tr.bundle', "sales_register_data");

  $results = $query->execute()->fetchAll();

  foreach ($results as $key => $value) {
    $vehicle_loading = $vehicle_loading . ', ' . $value->vehicle_loading;
  }

  return ltrim($vehicle_loading, ',');
}

/**
 * 
 * @param type $ref_no
 * @return type
 */
function _get_bill_row_id_using_reference_no($ref_no) {
  $query = db_select('dispatch_planning_api_data', 'dp');
  $query->fields('dp', array('id'));
  $query->condition('dp.referenceNo', $ref_no);
  $res = $query->execute()->fetchField();
  return $res;
}

function _get_bill_row_id_manual_using_reference_no($ref_no) {
  $query = db_select('dispatch_planning_api_data', 'dp');
  $query->fields('dp', array('id'));
  $query->condition('dp.referenceNo', $ref_no);
  $query->condition('dp.updated_flag', 1, '!=');
  $res = $query->execute()->fetchField();
  return $res;
}

/**
 * 
 * @param type $string
 * @param type $trip_id
 */
function _get_all_tripsbill($trip_id, $string = '') {
  $result = array();

  $user_id = $GLOBALS['user']->uid;
  $rs_code = dispatch_planning_get_rscode_using_uid($user_id);

  if (!empty($trip_id) && !empty($string)) {
    $query = db_select('dispatch_planning_api_data', 'ad');
    $query->condition('ad.runsheet_number', $trip_id);
    $query->condition('ad.bill_number', '%' . db_like($string) . '%', 'LIKE');
    //not required delivery pending bills of that trip
    $query->condition('ad.delivery_pending_flag', 1, '!=');
    $query->condition('ad.hub', $rs_code);
    $query->fields('ad', array('bill_number'));
    $query->range(0, 15);
    $result = $query->execute()->fetchAllKeyed(0, 0);

//    $query = db_select('node', 'n');
//    $query->Join('field_data_field_trip_id_reference', 'ft', 'ft.entity_id = n.nid');
//    $query->Join('node', 'n1', 'n1.nid = ft.field_trip_id_reference_nid');
//    $query->condition('n.type', 'sales_register_data');
//    $query->condition('n1.title', $trip_id);
//    $query->condition('n.title', '%' . db_like($string) . '%', 'LIKE');
//    $query->fields('n', array('title'));
//    $query->range(0, 15);
//    $query->addTag('node_distributor_access');
//    $result = $query->execute()->fetchAllKeyed(0, 0);
  }

  drupal_json_output($result);
}

function _get_all_tripsbill_from_sales_register($trip_id, $string = '') {
  $result = array();

  $user_id = $GLOBALS['user']->uid;
  $rs_code = dispatch_planning_get_rscode_using_uid($user_id);

  if (!empty($trip_id) && !empty($string)) {
    $query = db_select('node', 'n');
    $query->Join('field_data_field_trip_id_reference', 'ft', 'ft.entity_id = n.nid');
    $query->Join('node', 'n1', 'n1.nid = ft.field_trip_id_reference_nid');
    $query->condition('n.type', 'sales_register_data');
    $query->condition('n1.title', $trip_id);
    $query->condition('n.title', '%' . db_like($string) . '%', 'LIKE');
    $query->fields('n', array('title'));
    $query->range(0, 15);
    $query->addTag('node_distributor_access');
    $result = $query->execute()->fetchAllKeyed(0, 0);
  }
  drupal_json_output($result);
}

function check_bill_status($trip_id) {
  global $user;
  $rs_code = dispatch_planning_get_rscode_using_uid($user->uid);
  $query = db_select('dispatch_planning_api_data', 'ad');
  $query->condition('ad.runsheet_number', $trip_id);
  $query->condition('ad.hub', $rs_code);
  $query->isNull('ad.res_status');
  $query->addExpression("GROUP_CONCAT(ad.bill_number ORDER BY ad.bill_number separator ', ' )", 'bill_number');
  $res = $query->execute()->fetchField();
  return $res;
}

function get_trip_exec_date_from_trip_id($trip_id) {
  $query = db_select('node', 'n');
  $query->condition('n.title', $trip_id, "=");
  $query->condition('n.status', 1);
  $query->addTag('node_distributor_access');
  $query->join('field_data_field_trip_executon_date', 'trip_exe', 'trip_exe.entity_id = n.nid');
  $query->fields('trip_exe', array('field_trip_executon_date_value'));
  $trip_id_result = $query->execute()->fetchAssoc();

  return $trip_id_result;
}

function get_full_return_data_from_trip_id($trip_id) {
  $user_id = $GLOBALS['user']->uid;
  $rs_code = dispatch_planning_get_rscode_using_uid($user_id);
  $query1 = db_select('dispatch_planning_api_data', 'ad');
  $query1->condition('ad.runsheet_number', $trip_id, "=");
  $query1->condition('ad.delivery_pending_flag', 1, "!=");
  $query1->condition('ad.res_status', 'undeliver', "=");
  $query1->condition('ad.hub', $rs_code, "=");
  $query1->addExpression("COUNT(DISTINCT ad.bill_number)", 'bill_number');
  $query1->addExpression("GROUP_CONCAT(DISTINCT ad.bill_number ORDER BY ad.bill_number separator ', ' )", 'bill_number');
  $query1->fields('ad', array('fieldExecutiveName'));
  $trip_id_result = $query1->execute()->fetchAssoc();
  return $trip_id_result;
}

function get_partial_return_data_from_trip_id($trip_id) {
  $user_id = $GLOBALS['user']->uid;
  $rs_code = dispatch_planning_get_rscode_using_uid($user_id);
  $query1 = db_select('dispatch_planning_api_data', 'ad');
  $query1->join('dispatch_planning_item_details', 'idt', 'ad.id =idt.trip_bill_reference');
  $query1->condition('idt.res_sku_reason', '', "!=");
  $query1->condition('ad.runsheet_number', $trip_id, "=");
  $query1->condition('ad.res_status', 'partial_deliver', "=");
  $query1->condition('ad.hub', $rs_code, "=");
  $query1->addExpression("COUNT(DISTINCT ad.bill_number)", 'bill_number');
  $query1->addExpression("GROUP_CONCAT(DISTINCT ad.bill_number ORDER BY ad.bill_number separator ', ' )", 'bill_number');
  $query1->fields('ad', array('fieldExecutiveName'));
  $trip_id_result = $query1->execute()->fetchAssoc();
  return $trip_id_result;
}

function get_partial_popup_return_data_from_trip_id($trip_id) {
  $user_id = $GLOBALS['user']->uid;
  $rs_code = dispatch_planning_get_rscode_using_uid($user_id);
  $query1 = db_select('dispatch_planning_api_data', 'ad');
  $query1->condition('ad.delivery_pending_flag', 1, "!=");
  $query1->join('dispatch_planning_item_details', 'idt', 'ad.id =idt.trip_bill_reference');
  $query1->condition('ad.runsheet_number', $trip_id, "=");

  // check if status is partial then sku reason cannot be empty or the status is undeliver
  $db_and1 = db_and();
  $db_and1->condition('idt.res_sku_reason', '', "!=");
  $db_and1->condition('ad.res_status', 'partial_deliver', "=");

  $db_and2 = db_and();
  $db_and2->condition('ad.res_status', 'undeliver', "=");

  $db_or = db_or();
  $db_or->condition($db_and1);
  $db_or->condition($db_and2);

  $query1->condition($db_or);

  $query1->condition('ad.hub', $rs_code, "=");
  $query1->addExpression("COUNT(DISTINCT ad.bill_number)", 'bill_number');
  $query1->addExpression("GROUP_CONCAT(DISTINCT ad.bill_number ORDER BY ad.bill_number separator ', ' )", 'bill_number');
  //$query1->fields('ad', array('fieldExecutiveName'));
  $trip_id_result = $query1->execute()->fetchAssoc();
  return $trip_id_result;
}

function get_delivery_summary_full_return_reason_header($trip_id) {
  global $user;
  $trip_id_result = array();
  $user_id = $user->uid;
  $distributor_id = change_feeds_import_get_distributor_id($user_id);
  if (!empty($trip_id)) {
    $rs_code = dispatch_planning_get_rscode_using_uid($user_id);
    $query = db_select('dispatch_planning_api_data', 'ad');
    $query->condition('ad.delivery_pending_flag', 1, "!=");
    $query->condition('ad.runsheet_number', $trip_id, "=");
    $query->condition('ad.res_status', 'undeliver', "=");
    $query->isNotNull('ad.res_reason_for_failure');
    $query->condition('ad.hub', $rs_code, "=");
    $query->condition('ad.distributor_id', $distributor_id, "=");
    $query->addExpression("COUNT(DISTINCT ad.bill_number)", 'bill_number');
    $query->addExpression("GROUP_CONCAT(DISTINCT ad.bill_number ORDER BY ad.bill_number separator ', ' )", 'bill_number');
    $trip_id_result = $query->execute()->fetchAssoc();
  }
  return $trip_id_result;
}

// Function to return VAN type of a trip
function get_van_type($trip_id) {
  if (!empty($trip_id)) {
    global $user;
    $user_id = $user->uid;
    $distributor_id = change_feeds_import_get_distributor_id($user_id);
    $node_obj = node_load_multiple(NULL, array('title' => $trip_id, 'type' => 'dispatch_data', 'uid' => $distributor_id));
    $trip_nid = key($node_obj);
    $node = $node_obj[$trip_nid];
    $selected_option = $node->field_is_party_pack[LANGUAGE_NONE][0]['value'];
    $field = field_info_field('field_is_party_pack');
    $allowed_values = list_allowed_values($field);
  }
  return $allowed_values[$selected_option];
}

function get_delivery_pending_data($trip_id) {
  $trip_id_result = array();
  if (!empty($trip_id)) {
    global $user;
    $user_id = $user->uid;
    $distributor_id = change_feeds_import_get_distributor_id($user_id);
    $query = db_select('dispatch_planning_api_data', 'ad');
    //$query->join('dispatch_planning_item_details', 'idt', 'ad.id =idt.trip_bill_reference');
    //$query->condition('idt.res_sku_reason','', "!=");
    $query->condition('ad.runsheet_number', $trip_id, "=");
    $query->condition('ad.delivery_pending_flag', 1);
    $query->condition('ad.distributor_id', $distributor_id, "=");
    $query->addExpression("COUNT(DISTINCT ad.bill_number)", 'bill_count');
    //$bill_count = $query->execute()->fetchField();
    $query->addExpression("GROUP_CONCAT(DISTINCT ad.bill_number ORDER BY ad.bill_number separator ', ' )", 'bill_number');
    $query->fields('ad', array('fieldExecutiveName'));
    $trip_id_result = $query->execute()->fetchAssoc();
  }
  return $trip_id_result;
}

// get delivery_pending data dispatch date and cashier name
function get_delivery_pending_header_data($trip_id) {
  $result = array();
  if (!empty($trip_id)) {
    global $user;
    $user_id = $user->uid;
    $distributor_id = change_feeds_import_get_distributor_id($user_id);
    $query = db_select('dispatch_planning_api_data', 'ad');
    $query->condition('ad.runsheet_number', $trip_id, "=");
    $query->condition('ad.delivery_pending_flag', 1);
    $query->condition('ad.distributor_id', $distributor_id, "=");
    $query->fields('ad', array('fieldExecutiveName', 'date'));
    $result = $query->execute()->fetchAssoc();
  }
  return $result;
}

function get_distrubutor_name_full_from_user_id($user_id) {
  $query = db_select('users', 'u');
  $query->innerjoin('field_data_field_distributor', 'd', 'd.entity_id = u.uid');
  $query->condition('d.entity_id', $user_id, '=');
  $query->fields('d', array('field_distributor_value'));
  $query->innerjoin('field_data_field_name', 'n', 'n.entity_id = d.field_distributor_value');
  $query->fields('n', array('field_name_value'));
  $result = $query->execute()->fetchAssoc();
  $name = $result['field_name_value'];
  return $name;
}

function _get_bank_names($string) {
  $bank_names = array();
  if (!empty($string)) {
    $query = db_select('node', 'n');
    $query->condition('n.type', 'bank_master');
    $query->condition('n.title', '%' . db_like($string) . '%', 'LIKE');
    $query->condition('n.status', 1); // publish
    $query->fields('n', array('title'));
    $bank_names = $query->execute()->fetchAllKeyed(0, 0);
  }
  print json_encode($bank_names);
  exit();
}

function get_cashier_name($trip_id) {
  global $user;
  $user_id = $user->uid;
  $distributor_id = change_feeds_import_get_distributor_id($user_id);
  $query1 = db_select('dispatch_planning_api_data', 'ad');
  $query1->condition('ad.runsheet_number', $trip_id, "=");
  $query1->condition('ad.distributor_id', $distributor_id, "=");
  $query1->fields('ad', array('fieldExecutiveName'));
  $cashier_name = $query1->execute()->fetchField();
  return $cashier_name;
}

/**
 * 
 * @param type $trip_id
 * @return type
 */
function get_tp_van_by_trip_id($trip_id) {
  $query = db_select('node', 'n');
  $query->condition('n.type', 'dispatch_data');
  $query->addTag('node_uid');
  $query->condition('n.title', $trip_id);
  $query->join('field_data_field_entered_prevan', 'ep', 'ep.entity_id = n.nid');
  $query->fields('ep', array('field_entered_prevan_value'));
  $results = $query->execute()->fetchField();
  return $results;
}

/**
 * Implementation of hook_views_query_alter
 * @param type $view
 * @param type $query
 */
function dispatch_planning_views_query_alter(&$view, &$query) {
  // remove 19800 condition which is default added by view
  if ($view->base_table == 'dispatch_planning_api_data') {
    foreach ($query->where[1]['conditions'] as $key => $val) {
      if ((strpos($val['field'], 'dispatch_planning_api_data.version_created_time') !== false) || (strpos($val['field'], 'dispatch_planning_item_details_dispatch_planning_api_data.claimed_gs_approve_date_time') !== false)) {
        $data = str_replace('+ 19800', '', $val['field']);
        $data = str_replace('%Y-%m-%d\T%H:%i:%s', '%Y-%m-%d', $data);
        $query->where[1]['conditions'][$key]['field'] = $data;
      }
    }
  }

  if ($view->name == 'bill_return_report' && $view->current_display == 'views_data_export_2') {
    global $user;
    $distributor_id = change_feeds_import_get_distributor_id($user->uid);
    $query = db_select('dispatch_planning_api_data', 'ad');
    $query->join('inventory_versioning_api_data', 'iad', 'iad.referenceNo = ad.referenceNo');
    $query->condition('iad.distributor_id', $distributor_id, '=');
    $query->condition('iad.version_flag', 1, '=');
    $query->addExpression('MAX(version_created_time)', 'version_created_time');
    $query->fields('iad', array('runsheet_number'));
    $query->groupBy('ad.runsheet_number');

    // Write the join conditions.
    $join = new views_join();
    $join->definition = array('table formula' => $query, 'left_field' => 'referenceNo', 'field' => 'referenceNo', 'left_table' => 'inventory_versioning_api_data');
    $join->left_table = 'inventory_versioning_api_data'; // or wathever table you want to join with
    $join->table = 'inventory_versioning_api_data';
    $join->field = 'referenceNo';
    $join->left_field = 'referenceNo'; // or wathever column you want to join with
    $join->type = 'LEFT'; // if you want another join type play with this value
    $join->extra = array(
      array('field' => 'distributor_id', 'left_field' => 'distributor_id'),
    );
  }

  if (($view->name == 'trip_bill_sku_return_report') || ($view->name == 'trip_bill_sku_return_report' && $view->current_display == 'views_data_export_1')) {
    $join = new views_join();
    //$join->definition = array('table formula' => $query1, 'left_field' => 'bill_number', 'field' => 'bill_number', 'left_table' => 'dispatch_planning_api_data');
    $join->table = 'custom_billing_data'; // or wathever table you want to join with
    $join->left_table = 'dispatch_planning_api_data';
    $join->field = 'bill_number';
    $join->left_field = 'bill_number'; // or wathever column you want to join with
    $join->type = 'LEFT'; // if you want another join type play with this value
    $join->extra = array(
      array('field' => 'distributor_id', 'left_field' => 'distributor_id'),
      array('field' => 'sku7_code', 'left_field' => 'sku_code', 'left_table' => 'dispatch_planning_item_details_dispatch_planning_api_data'),
    );
    $join->extra_type = 'AND';

    // Do the actual join
    $query->table_queue['custom_billing_data'] = array(
      'alias' => 'custom_billing_data', // I believe this is optional
      'table' => 'custom_billing_data',
      'relationship' => 'custom_billing_data',
      'join' => $join,
    );

    $query->add_where_expression(0, '((dispatch_planning_item_details_dispatch_planning_api_data.res_godown_short + dispatch_planning_item_details_dispatch_planning_api_data.claimed_godown_short + dispatch_planning_item_details_dispatch_planning_api_data.return_qty + dispatch_planning_item_details_dispatch_planning_api_data.res_cashier_short) <> 0) OR ((CASE WHEN(custom_billing_data.revised_host_quantity IS NULL) THEN ((0 - custom_billing_data.Sum_of_TOTAL_SALES_QTY) + (dispatch_planning_item_details_dispatch_planning_api_data.res_godown_short + dispatch_planning_item_details_dispatch_planning_api_data.claimed_godown_short + dispatch_planning_item_details_dispatch_planning_api_data.return_qty + dispatch_planning_item_details_dispatch_planning_api_data.res_cashier_short)) ELSE ((custom_billing_data.revised_host_quantity - custom_billing_data.Sum_of_TOTAL_SALES_QTY)+ (dispatch_planning_item_details_dispatch_planning_api_data.res_godown_short + dispatch_planning_item_details_dispatch_planning_api_data.claimed_godown_short + dispatch_planning_item_details_dispatch_planning_api_data.return_qty + dispatch_planning_item_details_dispatch_planning_api_data.res_cashier_short)) END) <> 0)');
  }

  if (($view->name == 'trip_bill_sku_return_report1') || ($view->name == 'trip_bill_sku_return_report1' && $view->current_display == 'views_data_export_1')) {

    // Join dispatch_planning_api_data and dispatch_qty_confirmation.
    $join = new views_join();
    $join->table = 'dispatch_planning_api_data'; // or wathever table you want to join with
    $join->left_table = 'dispatch_qty_confirmation';
    $join->field = 'bill_number';
    $join->left_field = 'bill_number'; // or wathever column you want to join with
    $join->type = 'LEFT'; // if you want another join type play with this value
    $join->extra = array(
      array('field' => 'distributor_id', 'left_field' => 'distributor_id'),
      array('field' => 'runsheet_number', 'left_field' => 'trip_id'),
    );
    $join->extra_type = 'AND';

    // Do the actual join
    $query->table_queue['api_data_qty_confirmation'] = array(
      'alias' => 'api_data_qty_confirmation', // I believe this is optional
      'table' => 'dispatch_planning_api_data',
      'relationship' => 'dispatch_planning_api_data',
      'join' => $join,
    );

    $query->add_where_expression(0, 'api_data_qty_confirmation.delivery_pending_flag = 0');

    $query->orderby[1]['field'] = "api_data_qty_confirmation.res_status";
    $query->orderby[1]['direction'] = "ASC";

    // Join dispatch_planning_api_data and dispatch_qty_confirmation and dispatch_planning_item_details.
    $join = new views_join();
    $join->table = 'dispatch_planning_item_details'; // or wathever table you want to join with
    $join->left_table = 'api_data_qty_confirmation';
    $join->field = 'trip_bill_reference';
    $join->left_field = 'id'; // or wathever column you want to join with
    $join->type = 'LEFT'; // if you want another join type play with this value
    $join->extra = array(
      array('field' => 'sku_code', 'left_field' => 'sku7_code', 'left_table' => 'custom_billing_data_dispatch_qty_confirmation'),
    );
    $join->extra_type = 'AND';

    // Do the actual join
    $query->table_queue['dispatch_planning_item_details'] = array(
      'alias' => 'dispatch_planning_item_details', // I believe this is optional
      'table' => 'dispatch_planning_api_data',
      'relationship' => 'dispatch_planning_api_data',
      'join' => $join,
    );

    $query->add_where_expression(0, '(((CASE WHEN dispatch_planning_item_details.res_godown_short IS NULL THEN 0 ELSE dispatch_planning_item_details.res_godown_short END) + (CASE WHEN dispatch_planning_item_details.claimed_godown_short IS NULL THEN 0 ELSE dispatch_planning_item_details.claimed_godown_short END) + (CASE WHEN dispatch_planning_item_details.return_qty IS NULL THEN 0 ELSE dispatch_planning_item_details.return_qty END) + (CASE WHEN dispatch_planning_item_details.res_godown_short IS NULL THEN 0 ELSE dispatch_planning_item_details.res_godown_short END)) <> 0) OR ((CASE WHEN(custom_billing_data_dispatch_qty_confirmation.revised_host_quantity IS NULL) THEN ((0 - dispatch_qty_confirmation.to_be_dispatch_qty) + ((CASE WHEN dispatch_planning_item_details.res_godown_short IS NULL THEN 0 ELSE dispatch_planning_item_details.res_godown_short END) + (CASE WHEN dispatch_planning_item_details.claimed_godown_short IS NULL THEN 0 ELSE dispatch_planning_item_details.claimed_godown_short END) + (CASE WHEN dispatch_planning_item_details.return_qty IS NULL THEN 0 ELSE dispatch_planning_item_details.return_qty END) + (CASE WHEN dispatch_planning_item_details.res_godown_short IS NULL THEN 0 ELSE dispatch_planning_item_details.res_godown_short END))) ELSE ((custom_billing_data_dispatch_qty_confirmation.revised_host_quantity - dispatch_qty_confirmation.to_be_dispatch_qty)+ ((CASE WHEN dispatch_planning_item_details.res_godown_short IS NULL THEN 0 ELSE dispatch_planning_item_details.res_godown_short END) + (CASE WHEN dispatch_planning_item_details.claimed_godown_short IS NULL THEN 0 ELSE dispatch_planning_item_details.claimed_godown_short END) + (CASE WHEN dispatch_planning_item_details.return_qty IS NULL THEN 0 ELSE dispatch_planning_item_details.return_qty END) + (CASE WHEN dispatch_planning_item_details.res_godown_short IS NULL THEN 0 ELSE dispatch_planning_item_details.res_godown_short END))) END) <> 0)');
  }

  if (($view->name == 'trip_bill_sku_return_report2') || ($view->name == 'trip_bill_sku_return_report2' && $view->current_display == 'views_data_export_1')) {

    // Join dispatch_planning_api_data and custom_billing_data
    $join = new views_join();
    $join->table = 'dispatch_planning_api_data'; // or wathever table you want to join with
    $join->left_table = 'custom_billing_data';
    $join->field = 'bill_number';
    $join->left_field = 'bill_number'; // or wathever column you want to join with
    $join->type = 'LEFT'; // if you want another join type play with this value
    $join->extra = array(
      array('field' => 'distributor_id', 'left_field' => 'distributor_id'),
      array('field' => 'runsheet_number', 'left_field' => 'title', 'left_table' => 'node_field_data_field_trip_id_reference'),
    );
    $join->extra_type = 'AND';

    // Do the actual join
    $query->table_queue['dispatch_planning_api_data'] = array(
      'alias' => 'dispatch_planning_api_data', // I believe this is optional
      'table' => 'dispatch_planning_api_data',
      'relationship' => 'dispatch_planning_api_data',
      'join' => $join,
    );

    $query->add_field('dispatch_planning_api_data', 'res_status', 'res_status');
    $query->add_field('dispatch_planning_api_data', 'res_money_collect2', 'res_money_collect2');
    $query->add_field('dispatch_planning_api_data', 'res_money_collect2_edit', 'res_money_collect2_edit');
    $query->add_field('dispatch_planning_api_data', 'res_signed_bill_delivery', 'res_signed_bill_delivery');
    $query->add_field('dispatch_planning_api_data', 'res_signed_bill_delivery_edit', 'res_signed_bill_delivery_edit');
    $query->add_field('dispatch_planning_api_data', 'res_signed_bill_partial', 'res_signed_bill_partial');
    $query->add_field('dispatch_planning_api_data', 'res_signed_bill_partial_edit', 'res_signed_bill_partial_edit');

    $query->add_where_expression(0, 'dispatch_planning_api_data.delivery_pending_flag = 0 OR dispatch_planning_api_data.delivery_pending_flag IS NULL');

    $query->orderby[1]['field'] = "dispatch_planning_api_data.res_status";
    $query->orderby[1]['direction'] = "ASC";

    // Join dispatch_planning_item_details and dispatch_planning_api_data
    $join = new views_join();
    $join->table = 'dispatch_planning_item_details'; // or wathever table you want to join with
    $join->left_table = 'dispatch_planning_api_data';
    $join->field = 'trip_bill_reference';
    $join->left_field = 'id'; // or wathever column you want to join with
    $join->type = 'LEFT'; // if you want another join type play with this value
    $join->extra = array(
      array('field' => 'sku_code', 'left_field' => 'sku7_code', 'left_table' => 'custom_billing_data'),
    );
    $join->extra_type = 'AND';

    // Do the actual join
    $query->table_queue['dispatch_planning_item_details'] = array(
      'alias' => 'dispatch_planning_item_details', // I believe this is optional
      'table' => 'dispatch_planning_item_details',
      'relationship' => 'dispatch_planning_item_details',
      'join' => $join,
    );

    $query->add_field('', 'res_godown_short', 'res_godown_short');
    $query->add_field('', 'claimed_godown_short', 'claimed_godown_short');
    $query->add_field('', 'return_qty', 'return_qty');
    $query->add_field('', 'res_cashier_short', 'res_cashier_short');

    $query->add_where_expression(0, '(((CASE WHEN dispatch_planning_item_details.res_godown_short IS NULL THEN 0 ELSE dispatch_planning_item_details.res_godown_short END) + (CASE WHEN dispatch_planning_item_details.claimed_godown_short IS NULL THEN 0 ELSE dispatch_planning_item_details.claimed_godown_short END) + (CASE WHEN dispatch_planning_item_details.return_qty IS NULL THEN 0 ELSE dispatch_planning_item_details.return_qty END) + (CASE WHEN dispatch_planning_item_details.res_godown_short IS NULL THEN 0 ELSE dispatch_planning_item_details.res_godown_short END)) <> 0) OR ((CASE WHEN(custom_billing_data.revised_host_quantity IS NULL) THEN ((0 - custom_billing_data.sum_of_total_sales_qty) + ((CASE WHEN dispatch_planning_item_details.res_godown_short IS NULL THEN 0 ELSE dispatch_planning_item_details.res_godown_short END) + (CASE WHEN dispatch_planning_item_details.claimed_godown_short IS NULL THEN 0 ELSE dispatch_planning_item_details.claimed_godown_short END) + (CASE WHEN dispatch_planning_item_details.return_qty IS NULL THEN 0 ELSE dispatch_planning_item_details.return_qty END) + (CASE WHEN dispatch_planning_item_details.res_godown_short IS NULL THEN 0 ELSE dispatch_planning_item_details.res_godown_short END))) ELSE ((custom_billing_data.revised_host_quantity - custom_billing_data.sum_of_total_sales_qty)+ ((CASE WHEN dispatch_planning_item_details.res_godown_short IS NULL THEN 0 ELSE dispatch_planning_item_details.res_godown_short END) + (CASE WHEN dispatch_planning_item_details.claimed_godown_short IS NULL THEN 0 ELSE dispatch_planning_item_details.claimed_godown_short END) + (CASE WHEN dispatch_planning_item_details.return_qty IS NULL THEN 0 ELSE dispatch_planning_item_details.return_qty END) + (CASE WHEN dispatch_planning_item_details.res_godown_short IS NULL THEN 0 ELSE dispatch_planning_item_details.res_godown_short END))) END) <> 0) AND dispatch_planning_item_details.trip_bill_reference IS NULL');
  }
}

// Get Trip Type.
function get_trip_type_by_trip_id($trip_id) {
  $query = db_select('dispatch_qty_confirmation', 'dqc');
  $query->condition('dqc.trip_id', $trip_id);
  $query->fields('dqc', array('type'));
  $results = $query->execute()->fetchField();
  return $results;
}

//get

function get_total_sales_qty_from_custom_billing($bill_number, $dis_id) {
  $query = db_select('custom_billing_data', 'bd');
  $query->addExpression('SUM(bd.Sum_of_TOTAL_SALES_QTY)', 'total_sales_qty');
  $query->condition('bd.distributor_id', $dis_id);
  $query->condition('bd.bill_number', $bill_number);
  $total_sales_qty = $query->execute()->fetchField();
  return $total_sales_qty;
}

function dispatch_planning_views_pre_render(&$view) {
  global $user;
  $user_id = $user->uid;
  $distributor_id = change_feeds_import_get_distributor_id($user_id);
  if (($view->name == 'drs_report2' && $view->current_display == 'drs_report2') || ($view->name == 'drs_report2' && $view->current_display == 'views_data_export_1')) {
    $result = $view->result;
    foreach ($result as $key => $val) {
      $bill_num = $val->node_title;
      $res = get_total_sales_qty_from_custom_billing($bill_num, $distributor_id);
      if (empty($res)) {
        unset($view->result[$key]);
      }
    }
  }
}

// SMS Preprocess.
//function sms_preprocess() {
//  //Send data which is created 1min befor, to avoid data loose of Bills. It might getting created Yet
//  $time = time() - 60 * 1;
//
//  $query = db_select('sms_preprocess', 'sp');
//  $query->fields('sp', array('trip_id', 'distributor_id'));
//  $query->orderBy('sp.created_date');
//  $query->condition('sp.flag', 0);
//  $query->condition('sp.created_date', $time, '<');
//  $query->range(0, 3);
//  $result = $query->execute()->fetchAll();
//}

function _update_sms_integration_api($node) {
  $distributor_id = $node->uid;
  $trip_id = $node->title;
  if (!empty($trip_id)) {
    $query = db_select('node', 'n');
    $query->condition('n.type', 'sales_register_data');
    $query->join('field_data_field_bill_value', 'bv', 'bv.entity_id = n.nid');
    $query->Join('field_data_field_trip_id_reference', 'ft', 'ft.entity_id = n.nid');
    $query->join('field_data_field_party_code_reference', 'pcr', 'pcr.entity_id = n.nid');
    $query->Join('node', 'n1', 'n1.nid = ft.field_trip_id_reference_nid');
    $query->condition('n1.type', 'dispatch_data');
    $query->join('field_data_field_cashier_name', 'cn', 'cn.entity_id = n1.nid');
    $query->join('field_data_field_sms_flag', 'sms_flag', 'sms_flag.entity_id = n1.nid');
    //add join with dispatch date field
    $query->leftjoin('field_data_field_dispatch_date', 'dispatch_date', 'dispatch_date.entity_id = n1.nid');
    $query->join('node', 'n2', 'n2.nid = pcr.field_party_code_reference_nid');
    $query->condition('n2.type', 'outlet_master');
    $query->leftjoin('field_data_field_hul_code', 'hc', 'hc.entity_id = n2.nid');
    $query->leftjoin('field_data_field_payment_terms', 'pt', 'pt.entity_id = n2.nid');
    $query->leftjoin('field_data_field_credit_days', 'cd', 'cd.entity_id = n2.nid');
    $query->leftjoin('field_data_field_resource_name', 'rn', 'rn.field_resource_name_value = cn.field_cashier_name_value');
    $query->leftjoin('field_data_field_contact_number', 'fcn', 'fcn.entity_id = rn.entity_id');
    $query->join('node', 'n3', 'n3.title = hc.field_hul_code_value');
    $query->condition('n3.type', 'hul_code_master');
    $query->leftjoin('field_data_field_hul_phone_no', 'hp', 'hp.entity_id = n3.nid');
    $query->leftjoin('field_data_field_sms_required', 'sms', 'sms.entity_id = n3.nid');
    $query->leftjoin('field_data_field_resource_sms_name', 'rsn', 'rn.entity_id = rsn.entity_id');
    $query->condition('n1.title', $trip_id);
    $query->condition('n1.uid', $distributor_id);
    $query->fields('n', array('title'));
    $query->fields('cn', array('field_cashier_name_value'));
    $query->fields('bv', array('field_bill_value_value'));
    $query->fields('pt', array('field_payment_terms_value'));
    $query->fields('cd', array('field_credit_days_value'));
    $query->fields('fcn', array('field_contact_number_value'));
    $query->fields('hp', array('field_hul_phone_no_value'));
    $query->fields('sms', array('field_sms_required_value'));
    $query->fields('sms_flag', array('field_sms_flag_value'));
    $query->fields('rsn', array('field_resource_sms_name_value'));
    $query->fields('dispatch_date', array('field_dispatch_date_value'));
    $query->fields('hc', array('field_hul_code_value'));
    $query->groupBy('n.title');
    $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

    $preprocess_update_flag = 0;
    $sms_api_url = variable_get('sms_api_url');
    $username = variable_get('username');
    $msg_token = variable_get('msg_token');
    $sender_id = variable_get('sender_id');

    foreach ($res as $key => $value) {
      $bill_number = $value['title'];
      $resource_sms_name = $value['field_resource_sms_name_value'];
      $bill_value = $value['field_bill_value_value'];
      $payment_terms = $value['field_payment_terms_value'];
      $credit_days = $value['field_credit_days_value'];
      $contact_number = $value['field_contact_number_value'];
      $mobile_no = $value['field_hul_phone_no_value'];
      $sms_required = $value['field_sms_required_value'];
      $trip_sms_flag = $value['field_sms_flag_value'];
      $dispatch_date = strtotime($value['field_dispatch_date_value']);
      $hul_code_value = $value['field_hul_code_value'];

      $message = urlencode("Dear Customer, HUL products with Inv. " . $bill_number . " (Rs." . $bill_value . ") is out for delivery by " . $resource_sms_name . " - " . $contact_number . "." . " Payment Terms " . $payment_terms . "-" . $credit_days . " Day(s)");
      if ($sms_required == 'yes' && $trip_sms_flag == 1) {
        $sql_ins_id = sms_integration_api_log($trip_id, $message, $mobile_no, $distributor_id, $dispatch_date, $bill_number, $hul_code_value);

        $order_api_url = $sms_api_url . '?username=' . $username . '&msg_token=' . $msg_token . '&sender_id=' . $sender_id . '&message=' . $message . '&mobile=' . $mobile_no;
        $options = array('method' => 'POST');
        $res_data = drupal_http_request($order_api_url, $options);
        $response_data = $res_data->data;
        $log_data = $response_data ? $response_data : $res_data;
        sms_integration_api_log_update($log_data, $sql_ins_id);

        // Update SMS flag = 1.
        if ((strpos($response_data, 'SUCCESS') !== false) && $trip_sms_flag == 1) {
          $preprocess_update_flag = 1;
        }
      }
    }
    if ($preprocess_update_flag == 1) {
      sms_preprocess_update($trip_id, $distributor_id);
      drupal_set_message(t('Message successfully sent for Trip ID: ' . $trip_id));
    }
    else {// Tried but not successfully message sent.
      db_update('sms_preprocess')
      ->fields(array(
      'flag' => 2,
      ))
      ->condition('trip_id', $trip_id)
      ->condition('distributor_id', $distributor_id)
      ->execute();
    }
  }
}

function sms_integration_api_log($trip_id, $message, $mobile_no, $distributor_id, $dispatch_date, $bill_number, $hul_code_value) {
  $sql_ins_id = db_insert('sms_integration_api_log')
    ->fields(array(
      'trip_id' => $trip_id,
      'message' => urldecode($message),
      'mobile_no' => $mobile_no,
      'request_time' => time(),
      'distributor_id' => $distributor_id,
      'dispatch_date' => $dispatch_date,
      'bill_number' => $bill_number,
      'hul_code' => $hul_code_value,
    ))
    ->execute();
  return $sql_ins_id;
}

function sms_integration_api_log_update($response_data, $sql_ins_id) {
  db_update('sms_integration_api_log')
    ->fields(array(
      'response_data' => $response_data,
    ))
    ->condition('id', $sql_ins_id, '=')
    ->execute();
}

function sms_preprocess_update($trip_id, $distributor_id) {
  db_update('sms_preprocess')
    ->fields(array(
      'flag' => 1,
    ))
    ->condition('trip_id', $trip_id)
    ->condition('distributor_id', $distributor_id)
    ->execute();
}

function sms_preprocess_flag($trip_id, $distributor_id) {
  $query = db_select('sms_preprocess', 'sp');
  $query->condition('sp.trip_id', $trip_id);
  $query->condition('sp.distributor_id', $distributor_id);
  $query->fields('sp', array('flag'));
  $res = $query->execute()->fetchField();

  return $res;
}

/**
 *
 * @param type $form
 * @param type $form_state
 * @return type
 * system setting form
 */
function sms_config_form($form, $form_state) {
  $form['sms_api_url'] = array(
    '#type' => 'textfield',
    '#title' => t('SMS API URL'),
    '#description' => t('SMS API URL'),
    '#default_value' => variable_get('sms_api_url', 'http://138.128.21.170/api/send_transactional_sms.php'),
    '#required' => TRUE,
  );
  $form['username'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#description' => t('Username'),
    '#default_value' => variable_get('username', 'u3804'),
    '#required' => TRUE,
  );
  $form['msg_token'] = array(
    '#type' => 'textfield',
    '#title' => t('Message Token'),
    '#description' => t('Message Token'),
    '#default_value' => variable_get('msg_token', '7njzlv'),
    '#required' => TRUE,
  );
  $form['sender_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Sender ID'),
    '#description' => t('Sender ID'),
    '#default_value' => variable_get('sender_id', 'LEANBX'),
    '#required' => TRUE,
  );
  return system_settings_form($form);
}

function message_re_triggered($title) {
  $sms = " ";
  $nid = get_nid_from_title($title, 'dispatch_data');
  $node = node_load($nid);
  $trip_id = $node->title;
  $distributor_id = $node->uid;
  $preprocess_flag = sms_preprocess_flag($trip_id, $distributor_id);
  $trip_exist = check_tripid_exist_in_farery_table($trip_id, $distributor_id);// if trip id exist return 0.
  if($preprocess_flag != 1 && $trip_exist == 0) {
    _update_sms_integration_api($node);
  }
  else if($trip_exist == 1) {
    $sms = 'Trip ID does not exist in Delivery App.';
  }
  else{
    $sms = 'Message already sent for Trip ID : '.$trip_id;
  } 
  return $sms;
}


function message_triggered_cron() {
  $time = time() - 60 * 1;

  $query = db_select('sms_preprocess', 'sms');
  $query->fields('sms', array('trip_id', 'distributor_id'));
  $query->orderBy('sms.created_date');
  $query->condition('sms.flag', 0);
  $query->condition('sms.created_date', $time, '<');
  $query->range(0, 10);
  $result = $query->execute()->fetchAll();

  foreach ($result as $val) {
    $trip_id = $val->trip_id;
    $distributor_id = $val->distributor_id;

    $query = db_select('node', 'n');
    $query->condition('n.title', $trip_id);
    $query->condition('n.type', 'dispatch_data');
    $query->condition('n.uid', $distributor_id);
    $query->fields('n', array('nid'));
    $nid = $query->execute()->fetchField();
    
    $node = node_load($nid);

    $trip_exist = check_tripid_exist_in_farery_table($trip_id, $distributor_id);// if trip id exist return 0.
    if($trip_exist == 0) {
      _update_sms_integration_api($node);
    }
  }
}

function bill_message_re_triggered($sql_ins_id) {
  //fetch with sql query by id from log table
  $query = db_select('sms_integration_api_log', 'sms');
  $query->fields('sms', array('message', 'mobile_no'));
  $query->condition('sms.id', $sql_ins_id);
  $res = $query->execute()->fetchAll();

  $message = urlencode($res[0]->message);
  $mobile_no = $res[0]->mobile_no;
  $sms_api_url = variable_get('sms_api_url');
  $username = variable_get('username');
  $msg_token = variable_get('msg_token');
  $sender_id = variable_get('sender_id');

  $order_api_url = $sms_api_url . '?username=' . $username . '&msg_token=' . $msg_token . '&sender_id=' . $sender_id . '&message=' . $message . '&mobile=' . $mobile_no;
  $options = array('method' => 'POST');
  $res_data = drupal_http_request($order_api_url, $options);
  $response_data = $res_data->data;
  $log_data = $response_data ? $response_data : $res_data;
  sms_integration_api_log_update($log_data, $sql_ins_id);

  if (strpos($response_data, 'SUCCESS') !== false) {
    drupal_set_message(t('Message successfully sent'));
  }
  else {
    drupal_set_message(t('Message not sent'));
  }

  return " ";
}
