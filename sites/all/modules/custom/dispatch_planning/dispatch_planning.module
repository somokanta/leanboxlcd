<?php

require_once DRUPAL_ROOT .  '/sites/all/modules/custom/reverse_geocode/directions-api-clients-route-optimization-master/php/SwaggerClient-php/autoload.php';

function dispatch_planning_menu() {
   
  $items['delivered-trip-data'] = array(
    'title' => 'Farey Delivered Trip',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_delivered_trip_data_callback'),
    'access arguments' => array('Ptl trip creation'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'dispatch_planning_farey.form.inc',
      // Page callback, etc. need to be added here.
  );
  $items['delivered-trip-data/export'] = array(
    'title' => 'Farey Delivered Trip',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_delivered_trip_data_download_callback'),
    'access arguments' => array('Ptl trip creation'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'dispatch_planning_farey.form.inc',
      // Page callback, etc. need to be added here.
  );
  
  $items['delivered-tripwise-vrs-data'] = array(
    'title' => 'Farey VRS data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_delivered_tripwise_vrs_data_callback'),
    'access arguments' => array('Ptl trip creation'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'dispatch_planning_farey_vrs.form.inc',
      // Page callback, etc. need to be added here.
  );

  $items['admin/dispatch-planning'] = array(
    'title' => 'Dispatch Planning',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dispatch_planning_form'),
    'access arguments' => array('dispatch planning screen'),
    'type' => MENU_NORMAL_ITEM,
      // Page callback, etc. need to be added here.
  );
  $items['admin/master-dispatch-planning'] = array(
    'title' => 'Master Trip Creation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('master_dispatch_planning_form'),
    'access arguments' => array('Ptl trip creation'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'master_dispatch_planning_form.inc',
      // Page callback, etc. need to be added here.
  );
  $items['admin/delete-master-dispatch-planning'] = array(
    'title' => 'Delete Master Trip Creation',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('delete_master_dispatch_planning_form'),
    'access arguments' => array('Ptl trip creation'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'master_dispatch_planning_form.inc',
      // Page callback, etc. need to be added here.
  );
  $items['admin/dispatch-planning/form'] = array(
    'title' => 'Dispatch Planning',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
      // Access callback, page callback, and theme callback will be inherited
      // from 'admin/config/system/foo', if not specified here to override.
  );
  $items['admin/dispatch-planning/delete'] = array(
    'title' => 'Delete trips',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('trip_delete_form'),
    'access arguments' => array('dispatch planning screen'),
    'weight' => 2,
      // Page callback and theme callback will be inherited from
      // 'admin/config/system/foo', if not specified here to override.
      // Need to add access callback or access arguments.
  );
  $items['admin/dispatch-planning/delivery-pending'] = array(
    'title' => 'Delivery Pending',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('delivery_pending_form'),
    'access arguments' => array('dispatch planning screen'),
    'file' => 'delivery_pending.form.inc',
    'weight' => 1,
      // Page callback and theme callback will be inherited from
      // 'admin/config/system/foo', if not specified here to override.
      // Need to add access callback or access arguments.
  );
  $items['admin/dispatch-planning/api-url'] = array(
    'title' => 'API URL',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('api_dispatch_uri_setting_form'),
    'access arguments' => array('dispatch planning api url'),
    'file' => 'api_dispatch_uri_setting_form.inc',
    'weight' => 3,
  );

  $items['modified-van-autocomplete-callback/%'] = array(
    'title' => 'Get All Modified Van',
    'page callback' => 'get_modified_van_from_loading_date',
    'access callback' => TRUE,
    'page arguments' => array(1),
  );
  $items['bill/autocomplete'] = array(
    'title' => 'bill_autocomplete',
    'page callback' => 'bill_autocomplete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['trip/autocomplete'] = array(
    'title' => 'trip_autocomplete',
    'page callback' => 'trip_autocomplete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['bill/pending/autocomplete'] = array(
    'title' => 'bill_autocomplete',
    'page callback' => 'bill_autocomplete',
    'page arguments' => array(4, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['trip/autocomplete'] = array(
    'title' => 'trip_id_autocomplete',
    'page callback' => 'trip_id_autocomplete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['vehicle/autocomplete'] = array(
    'title' => 'vehicle_names_autocomplete',
    'page callback' => 'vehicle_names_autocomplete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['hht_id/autocomplete'] = array(
    'title' => 'hht_id_autocomplete',
    'page callback' => 'hht_id_autocomplete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['cashier/autocomplete'] = array(
    'title' => 'cashier_names_autocomplete',
    'page callback' => 'cashier_names_autocomplete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
// $items['dispatch-planning-cron'] = array(
//    'title' => '',
//    'page callback' => 'dispatch_planning_cron_callback',
//    'access callback' => TRUE,
//    'type' => MENU_NORMAL_ITEM,
//  );
  $items['loose-picking-sheet'] = array(
    'title' => 'Loose PICKING SHEET',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ptl_loose_sheet_form'),
    'access arguments' => array('Distributor Upload File'),
    'type' => MENU_CALLBACK,
    'file' => 'ptl_dispatch_planning.inc',
  );
  $items['download-loose-picking/%'] = array(
    'title' => 'Download PTL Loose',
    'page callback' => 'download_ptl_loose_sheet',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'ptl_dispatch_planning.inc',
  );
  $items['cld-picking-sheet'] = array(
    'title' => 'CLD PICKING SHEET',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ptl_cld_sheet_form'),
    'access arguments' => array('Distributor Upload File'),
    'type' => MENU_CALLBACK,
    'file' => 'ptl_dispatch_planning.inc',
  );
  $items['download-cld-picking/%'] = array(
    'title' => 'CLD PICKING SHEET',
    'page callback' => 'download_ptl_cld_sheet',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'ptl_dispatch_planning.inc',
  );
  $items['delete-ptl-trip'] = array(
    'title' => 'Resent Trip To PTL',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('delete_fetch_data_ptl_trip_form'),
    'access arguments' => array('Ptl trip creation'),
    'type' => MENU_CALLBACK,
    'file' => 'ptl_dispatch_planning.inc',
  );
  $items['create-ptl-trip'] = array(
    'title' => 'Create Trip To PTL',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('create_fetch_data_ptl_trip_form'),
    'access arguments' => array('Ptl trip creation'),
    'type' => MENU_CALLBACK,
    'file' => 'ptl_dispatch_planning.inc',
  );
    $items['drs-box-id-sheet'] = array(
    'title' => 'DRS BOX ID',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('drs_box_id_sheet_form'),
    'access arguments' => array('Distributor Upload File'),
    'type' => MENU_CALLBACK,
    'file' => 'ptl_dispatch_planning.inc',
  );
  $items['download-drs-box-id/%'] = array(
    'title' => 'Download DRS BOX ID',
    'page callback' => 'download_drs_box_id_sheet',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'ptl_dispatch_planning.inc',
  );
// Master PTL
  $items['master-loose-picking-sheet'] = array(
    'title' => 'Master Loose PICKING SHEET',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('master_ptl_loose_sheet_form'),
    'access arguments' => array('Distributor Upload File'),
    'type' => MENU_CALLBACK,
    'file' => 'master_ptl_dispatch_planning.inc',
  );
  $items['download-master-loose-picking/%'] = array(
    'title' => 'Download Master PTL Loose',
    'page callback' => 'download_master_ptl_loose_sheet',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'master_ptl_dispatch_planning.inc',
  );
  $items['master-cld-picking-sheet'] = array(
    'title' => 'Master CLD PICKING SHEET',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('master_ptl_cld_sheet_form'),
    'access arguments' => array('Distributor Upload File'),
    'type' => MENU_CALLBACK,
    'file' => 'master_ptl_dispatch_planning.inc',
  );
  $items['download-master-cld-picking/%'] = array(
    'title' => 'CLD PICKING SHEET',
    'page callback' => 'download_master_ptl_cld_sheet',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'master_ptl_dispatch_planning.inc',
  );
  $items['delete-master-ptl-trip'] = array(
    'title' => 'Resent Master Trip To PTL',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('delete_fetch_data_master_ptl_trip_form'),
    'access arguments' => array('Ptl trip creation'),
    'type' => MENU_CALLBACK,
    'file' => 'master_ptl_dispatch_planning.inc',
  );
  $items['create-master-ptl-trip'] = array(
    'title' => 'Create Master Trip To PTL',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('create_fetch_data_master_ptl_trip_form'),
    'access arguments' => array('Ptl trip creation'),
    'type' => MENU_CALLBACK,
    'file' => 'master_ptl_dispatch_planning.inc',
  );
  return $items;
}

function dispatch_planning_permission() {

  return array(
    'dispatch planning screen' => array(
      'title' => t('dispatch planning screen'),
      'description' => t('View and operate the dispatch planning screen')
    ),
    'dispatch planning screen-rs-admin' => array(
      'title' => t('dispatch planning screen-rs-admin'),
      'description' => t('View and operate for only Rs-admin Role')
    ),
    'only-rs-admin-with-distributor' => array(
      'title' => t('only-rs-admin-with-distributor'),
      'description' => t('View data for only Rs-admin and Distributor Role')
    ),
    'only-rs-admin-with existing data' => array(
      'title' => t('only-rs-admin-with existing data'),
      'description' => t('only-rs-admin-with existing data')
    ),
    'dispatch planning api url' => array(
      'title' => t('dispatch planning api url'),
      'description' => t('dispatch planning api url'),
    ),
    'services_access_ptl_api' => array(
      'title' => t(''),
      'description' => t('PTL Api Access')
    ),
     'services_access_farey_api' => array(
      'title' => t('Farey Api Access'),
      'description' => t('Farey Api Access')
    ),
    'Ptl trip creation' => array(
      'title' => t('Ptl trip creation'),
      'description' => t('Ptl trip creation')
    ) 
  );
}

/**
 * 
 * @return array API for PTL data
 */
function dispatch_planning_services_resources() {
  $ptl_resource = array(
    '#api_version' => 3002,
  );
  $ptl_resource = array(
    'ptl-api-data' => array(
      'actions' => array(
         'dispatch-planning-api-data-fetch' => array(
          'help' => 'Get Farey Data',
          'callback' => 'fetch_dispatch_planning_api_data',
          'args' => array(
            array(
              'name' => 'data',
              'type' => 'array',
              'description' => 'Post data',
              'source' => 'data',
              'optional' => TRUE,
            ),
          ),
          'file' => array(
            'type' => 'inc',
            'module' => 'dispatch_planning',
            'name' => 'dispatch_planning_farey_api'
          ),
           'access arguments' => array('services_access_farey_api'),
        ),
        'ptl-api-data-fetch' => array(
          'help' => 'Get PTL Data',
          'callback' => 'fetch_ptl_data',
          'args' => array(
            array(
              'name' => 'rs_code',
              'type' => 'string',
              'description' => 'RS Code',
              'source' => array('data' => 'rs_code'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'api_time',
              'type' => 'string',
              'description' => 'Pass last fetch time',
              'source' => array('data' => 'api_time'),
              'optional' => FALSE,
            ),
          ),
          'file' => array(
            'type' => 'inc',
            'module' => 'dispatch_planning',
            'name' => 'ptl_dispatch_planning'
          ),
          'access arguments' => array('services_access_ptl_api'),
        ),
        'ptl-sku-ean-api' => array(
          'help' => 'Get SKU EAn and MRP Data',
          'callback' => 'fetch_sku_ean_mrp_data',
          'args' => array(
            array(
              'name' => 'rs_code',
              'type' => 'string',
              'description' => 'RS Code',
              'source' => array('data' => 'rs_code'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'api_time',
              'type' => 'string',
              'description' => 'Pass last fetch time',
              'source' => array('data' => 'api_time'),
              'optional' => FALSE,
            ),
          ),
          'file' => array(
            'type' => 'inc',
            'module' => 'dispatch_planning',
            'name' => 'ptl_dispatch_planning'
          ),
          'access arguments' => array('services_access_ptl_api'),
        ),
        'ptl-api-data-update' => array(
          'help' => 'Get PTL Data',
          'callback' => 'update_ptl_data',
          'args' => array(
//            array(
//              'name' => 'rs_code',
//              'type' => 'string',
//              'description' => 'RS Code',
//              'source' => array('data' => 'rs_code'),
//              'optional' => FALSE,
//            ),
            array(
              'name' => 'unique_id',
              'type' => 'string',
              'description' => 'Unique ID',
              'source' => array('data' => 'unique_id'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'update_time',
              'type' => 'string',
              'description' => 'Pass update time',
              'source' => array('data' => 'update_time'),
              'optional' => FALSE,
            ),
          ),
          'file' => array(
            'type' => 'inc',
            'module' => 'dispatch_planning',
            'name' => 'ptl_dispatch_planning'
          ),
          'access arguments' => array('services_access_ptl_api'),
        ),
        'ptl-api-put-qty' => array(
          'help' => 'Qty update PTL Data',
          'callback' => 'put_qty_ptl_data',
          'args' => array(
            array(
              'name' => 'id_qty',
              'type' => 'string',
              'description' => 'ID and Put QTY',
              'source' => array('data' => 'id_qty'),
              'optional' => FALSE,
            ),
          ),
          'file' => array(
            'type' => 'inc',
            'module' => 'dispatch_planning',
            'name' => 'ptl_dispatch_planning'
          ),
          'access arguments' => array('services_access_ptl_api'),
        ),
        'ptl-header-data-update' => array(
          'help' => 'Update PTL Header Data',
          'callback' => 'update_ptl_header_data',
          'args' => array(
            array(
              'name' => 'ptl_job',
              'type' => 'string',
              'description' => 'PTL JOB',
              'source' => array('data' => 'ptl_job'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'trip_id',
              'type' => 'string',
              'description' => 'Trip ID',
              'source' => array('data' => 'trip_id'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'rs_code',
              'type' => 'string',
              'description' => 'Rs Code',
              'source' => array('data' => 'rs_code'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'vehicle',
              'type' => 'string',
              'description' => 'Vehicle',
              'source' => array('data' => 'vehicle'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'bill_lines',
              'type' => 'string',
              'description' => 'Bill Lines',
              'source' => array('data' => 'bill_lines'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'total_qty',
              'type' => 'string',
              'description' => 'Totla QTY',
              'source' => array('data' => 'total_qty'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'operator_id',
              'type' => 'string',
              'description' => 'Operator ID',
              'source' => array('data' => 'operator_id'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'start_time',
              'type' => 'string',
              'description' => 'Start Date/Time',
              'source' => array('data' => 'start_time'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'end_time',
              'type' => 'string',
              'description' => 'End Date Time',
              'source' => array('data' => 'end_time'),
              'optional' => FALSE,
            ),
          ),
          'file' => array(
            'type' => 'inc',
            'module' => 'dispatch_planning',
            'name' => 'ptl_dispatch_planning'
          ),
          'access arguments' => array('services_access_ptl_api'),
        ),
//MASTER PTL
        'master-ptl-api-data-fetch' => array(
          'help' => 'Get Master PTL Data',
          'callback' => 'fetch_master_ptl_data',
          'args' => array(
            array(
              'name' => 'rs_code',
              'type' => 'string',
              'description' => 'RS Code',
              'source' => array('data' => 'rs_code'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'api_time',
              'type' => 'string',
              'description' => 'Pass last fetch time',
              'source' => array('data' => 'api_time'),
              'optional' => FALSE,
            ),
          ),
          'file' => array(
            'type' => 'inc',
            'module' => 'dispatch_planning',
            'name' => 'master_ptl_dispatch_planning'
          ),
          'access arguments' => array('services_access_ptl_api'),
        ),
        'master-ptl-api-data-update' => array(
          'help' => 'Update Master PTL Data',
          'callback' => 'update_master_ptl_data',
          'args' => array(
            array(
              'name' => 'unique_id',
              'type' => 'string',
              'description' => 'Unique ID',
              'source' => array('data' => 'unique_id'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'update_time',
              'type' => 'string',
              'description' => 'Pass update time',
              'source' => array('data' => 'update_time'),
              'optional' => FALSE,
            ),
          ),
          'file' => array(
            'type' => 'inc',
            'module' => 'dispatch_planning',
            'name' => 'master_ptl_dispatch_planning'
          ),
          'access arguments' => array('services_access_ptl_api'),
        ),
        'master-ptl-sku-ean-api' => array(
          'help' => 'Get SKU EAn and MRP Data',
          'callback' => 'fetch_master_ptl_sku_ean_mrp_data',
          'args' => array(
            array(
              'name' => 'rs_code',
              'type' => 'string',
              'description' => 'RS Code',
              'source' => array('data' => 'rs_code'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'api_time',
              'type' => 'string',
              'description' => 'Pass last fetch time',
              'source' => array('data' => 'api_time'),
              'optional' => FALSE,
            ),
          ),
          'file' => array(
            'type' => 'inc',
            'module' => 'dispatch_planning',
            'name' => 'master_ptl_dispatch_planning'
          ),
          'access arguments' => array('services_access_ptl_api'),
        ),
        'master-ptl-api-put-qty' => array(
          'help' => 'Qty update Master PTL Data',
          'callback' => 'put_qty_master_ptl_data',
          'args' => array(
            array(
              'name' => 'id_qty',
              'type' => 'string',
              'description' => 'ID and Put QTY',
              'source' => array('data' => 'id_qty'),
              'optional' => FALSE,
            ),
          ),
          'file' => array(
            'type' => 'inc',
            'module' => 'dispatch_planning',
            'name' => 'master_ptl_dispatch_planning'
          ),
          'access arguments' => array('services_access_ptl_api'),
        ),
        'master-ptl-header-data-update' => array(
          'help' => 'Update PTL Header Data',
          'callback' => 'update_master_ptl_header_data',
          'args' => array(
            array(
              'name' => 'ptl_job',
              'type' => 'string',
              'description' => 'PTL JOB',
              'source' => array('data' => 'ptl_job'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'trip_id',
              'type' => 'string',
              'description' => 'Trip ID',
              'source' => array('data' => 'trip_id'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'rs_code',
              'type' => 'string',
              'description' => 'Rs Code',
              'source' => array('data' => 'rs_code'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'vehicle',
              'type' => 'string',
              'description' => 'Vehicle',
              'source' => array('data' => 'vehicle'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'bill_lines',
              'type' => 'string',
              'description' => 'Bill Lines',
              'source' => array('data' => 'bill_lines'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'total_qty',
              'type' => 'string',
              'description' => 'Totla QTY',
              'source' => array('data' => 'total_qty'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'operator_id',
              'type' => 'string',
              'description' => 'Operator ID',
              'source' => array('data' => 'operator_id'),
              'optional' => FALSE,
            ),
                        array(
              'name' => 'start_time',
              'type' => 'string',
              'description' => 'Start Date/Time',
              'source' => array('data' => 'start_time'),
              'optional' => FALSE,
            ),
                        array(
              'name' => 'end_time',
              'type' => 'string',
              'description' => 'End Date Time',
              'source' => array('data' => 'end_time'),
              'optional' => FALSE,
            ),
          ),
          'file' => array(
            'type' => 'inc',
            'module' => 'dispatch_planning',
            'name' => 'master_ptl_dispatch_planning'
          ),
          'access arguments' => array('services_access_ptl_api'),
        ),        
      ),
    ),
  );
  return $ptl_resource;
}


/**
 * Implements of hook_views_api().
 */
function dispatch_planning_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'dispatch_planning') . '/views'
  );
}

/**
 * dispatch planning cron page callback function
 */
function dispatch_planning_cron_callback() {
  $query = db_select('dispatch_planning_api_log', 'a');
  $query->fields('a', array('request_data', 'id'));
  $query->condition('a.request_flag', 0);
  $query->condition('a.api_type', 'dispatch_planning');

  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  if (!empty($res)) {
    foreach ($res as $key => $val) {

// Write logic to hit API Here
      $json_api_data = $val['request_data'];
      $sql_ins_id = $val['id'];

      $request_headers = array('Content-Type' => 'application/json');
      $order_api_url = variable_get('dispatch_uri_settings');
      $options = array('headers' => $request_headers, 'method' => 'POST', 'data' => $json_api_data);
      $response = drupal_http_request($order_api_url, $options);

      $response_data = $response->data;
      if ($response_data) {
        $api_success = json_decode($response_data);
        $api_success = (isset($api_success->failCount) && $api_success->failCount == 0) ? 1 : 0;
        // create response log entry
        dispatch_planning_api_log_update($response_data, $sql_ins_id, $api_success);
      }
      else {
        //dpm($response);
      }
    }
  }
  return "1";
}

/**
 * @param type $form
 * @param type $form_state
 * @return string
 */
function dispatch_planning_form($form, &$form_state) {

  $form['#prefix'] = '<div id="itemlist-div">';
  $form['#suffix'] = '</div>';

  $form['#attached']['js'][] = drupal_get_path('module', 'dispatch_planning') . '/js/dispatch_planning_form.js';
  $form['#attached']['css'][] = drupal_get_path('module', 'dispatch_planning') . '/css/dispatch_planning.css';

  $form['loading_date'] = array(
    '#prefix' => '<div class="textfield-wrapper">',
    '#type' => 'date_popup',
    '#date_format' => 'm/d/y',
    '#title' => t('Loading date'),
    '#date_label_position' => '',
    //'#default_value' => empty($variables['from_date']) ? NULL : format_date($variables['from_date'], $type = 'custom', $format = 'Y-m-d H:i:s'),
    '#date_year_range' => '-20:+1',
    '#size' => 30,
    '#ajax' => array(
      'event' => 'change',
      'callback' => 'loading_date_ajax_callback',
      'wrapper' => 'van-wrapper',
    ),
    '#required' => TRUE,
  );

  $form['van'] = array(
    '#type' => 'select',
    '#title' => t('Van'),
    '#prefix' => '<div id="van-wrapper">',
    '#suffix' => '</div>',
    //'#autocomplete_path' => 'modified-van-autocomplete-callback',
    '#ajax' => array(
      'event' => 'change',
      'callback' => 'van_ajax_callback',
      'wrapper' => 'beat-wrapper',
    ),
    '#options' => array(),
    '#required' => TRUE,
    '#validated' => TRUE
  );
  $form['beat_name'] = array(
    '#type' => 'select',
    '#title' => t('Sales Beat'),
    '#prefix' => '<div id="beat-wrapper">',
    '#suffix' => '</div>',
    //'#autocomplete_path' => 'modified-van-autocomplete-callback',
    '#options' => array('' => 'All'),
  );
  if (isset($form_state['triggering_element']) && ($form_state['triggering_element']['#name'] == 'loading_date')) {
    if (!empty($form_state['values']['loading_date']) && is_string($form_state['values']['loading_date'])) {
      $form['van']['#options'] = get_modified_van_from_loading_date(strtotime($form_state['values']['loading_date']));
    }
  }

  if (isset($form_state['triggering_element']) && ($form_state['triggering_element']['#name'] == 'van')) {
    if (!empty($form_state['values']['van'])) {
      $form['beat_name']['#options'] = array('' => 'All') + get_beat_name_from_loading_date_and_van(strtotime($form_state['values']['loading_date']), $form_state['values']['van']);
    }
  }
  $form['van_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add Van'),
    '#ajax' => array(
      'wrapper' => 'itemlist-div',
      'callback' => 'custom_ajax_callback',
      'method' => 'replace',
      'effect' => 'fade',
    ),
    '#validate' => array('van_ajax_validate'),
    '#submit' => array('van_ajax_submit'),
    '#limit_validation_errors' => array(array('loading_date'), array('van'), array('beat_name')),
    '#suffix' => '</div>',
  );


  $form['divider1'] = array(
    '#markup' => '<div class="or"><span>OR</span></div>',
  );

  $form['bill_number'] = array(
    '#prefix' => '<div class="textfield-wrapper">',
    '#type' => 'textfield',
    '#title' => t('Bill number'),
    '#required' => TRUE,
    '#autocomplete_path' => 'bill/autocomplete'
  );

  $form['bill_number_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add Bill'),
    '#ajax' => array(
      'wrapper' => 'itemlist-div',
      'callback' => 'custom_ajax_callback',
      'method' => 'replace',
      'effect' => 'fade',
    ),
    '#submit' => array('bill_number_ajax_submit'),
    '#validate' => array('bill_number_ajax_validate'),
    '#limit_validation_errors' => array(array('bill_number')),
    '#suffix' => '</div>',
  );

//  $form['divider2'] = array(
//    '#markup' => '<div>----OR----</div>',
//  );
//
//  $form['trip_id'] = array(
//    '#type' => 'textfield',
//    '#title' => t('Trip id'),
//    '#required' => TRUE,
//    '#autocomplete_path' => 'trip/autocomplete'
//  );
//
//  $form['trip_id_submit'] = array(
//    '#type' => 'submit',
//    '#value' => t('Add Trip id'),
//    '#ajax' => array(
//      'wrapper' => 'itemlist-div',
//      'callback' => 'custom_ajax_callback',
//      'method' => 'replace',
//      'effect' => 'fade',
//    ),
//    '#submit' => array('trip_id_ajax_submit'),
//    '#validate' => array('trip_id_ajax_validate'),
//    '#limit_validation_errors' => array(array('trip_id')),
//  );


  if (!isset($form_state['dispatch_planning']['bills'])) {
    $form_state['dispatch_planning']['bills'] = array();
  }
  $options = $form_state['dispatch_planning']['bills'];

  $headers = array(
    'bill_number' => 'Bill Number',
    'party_name' => 'Party name',
    'bill_value' => 'Value',
    'van_loading_date' => 'Existing Van/Loading Date',
    //'sequence' => 'Delivery Sequence',
    //'trip_id' => 'Trip ID',
    'sales_beat' => 'Sales Beat'
  );


  foreach ($headers as $key => $value) {
    $sort_options[$key . ':asc'] = $value . ' - Asc';
    $sort_options[$key . ':desc'] = $value . ' - Desc';
  }


  $form['sort'] = array(
    '#type' => 'select',
    '#options' => $sort_options,
    '#ajax' => array(
      'wrapper' => 'itemlist-div',
      'callback' => 'custom_ajax_callback',
      'method' => 'replace',
      'effect' => 'fade',
    ),
    '#attributes' => array(
      'class' => array('sort-select', 'element-invisible'),
    ),
  );

  if (isset($form_state['triggering_element']) && ($form_state['triggering_element']['#name'] == 'sort')) {
    $active = explode(':', $form_state['values']['sort']);
    $form_state['dispatch_planning']['sort_field'] = $active[0];
    $form_state['dispatch_planning']['sort_order'] = $active[1];
  }

  if (isset($form_state['dispatch_planning']['sort_field'])) {
    $active_sort = $form_state['dispatch_planning']['sort_field'];
  }
  if (isset($form_state['dispatch_planning']['sort_order'])) {
    $active_order = $form_state['dispatch_planning']['sort_order'];
  }
  if ($active_order == 'asc') {
    $next_order = 'desc';
  }
  elseif ($active_order == 'desc') {
    $next_order = 'asc';
  }

  foreach ($headers as $k => $header) {
    $header_array[$k] = array(
      'data' => array(
        '#type' => 'link',
        '#title' => $header . (($active_sort == $k && $next_order) ? theme('tablesort_indicator', array('style' => $next_order)) : ''),
        '#href' => '',
        '#attributes' => array(
          'class' => ($active_sort == $k) ? array('active', 'header-link') : array('header-link'),
          'id' => $k,
          'data-sort' => ($active_sort == $k && $next_order) ? $next_order : '',
        ),
        '#options' => array(
          'html' => true,
        )
      ),
    );
  }

  if ($options) {
    if (isset($active_sort)) {
      $sort = ($active_sort == 'van_loading_date') ? 'van_loading_date_timestamp' : $active_sort;
      $options = _get_header_sort($options, $sort, $active_order);
    }

    $form['list_form_items'] = array(
      '#type' => 'tableselect',
      '#header' => $header_array,
      '#options' => $options,
      '#prefix' => '<div id="table-div">',
      '#suffix' => '</div>',
      '#empty' => t('No forms available.'),
      '#multiple' => TRUE,
    );

    $form['remove_selected'] = array(
      '#type' => 'submit',
      '#value' => t('Remove Checked items'),
      '#ajax' => array(
        'wrapper' => 'itemlist-div',
        'callback' => 'custom_ajax_callback',
        'method' => 'replace',
        'effect' => 'fade',
      ),
      '#submit' => array('remove_selected_ajax_submit'),
      '#limit_validation_errors' => array(array('list_form_items')),
    );

    $form['sequence'] = array('#type' => 'value');
    $form['header'] = array('#type' => 'value');

    $bill_count = count($options);
    $bill_value_sum = array_sum(array_map(
            function($item) {
          return $item['bill_value'];
        }, $options)
    );
    $form_state['dispatch_planning']['bill_value_sum'] = $bill_value_sum;

    $form['bill_summary'] = array(
      '#theme' => 'item_list',
      '#items' => array(
        'Bill Count : ' . $bill_count,
        'Bill Value : ' . $bill_value_sum,
      ),
    );

    $form['trip_execution_date'] = array(
      '#prefix' => '<div class="textfield-wrapper bottom-wrapper">',
      '#type' => 'date_popup',
      '#date_format' => 'm/d/y',
      '#title' => t('Trip Execution Date'),
      '#date_label_position' => '',
      '#date_year_range' => '-20:+1',
      '#size' => 30,
      '#required' => TRUE,
      '#ajax' => array(
        'event' => 'change',
        'callback' => 'trip_execution_date_ajax_callback',
        'wrapper' => 'hht-id-wrapper',
      ),
    );

    $form['hht_id'] = array(
      '#type' => 'textfield',
      '#title' => t('HHT ID'),
      '#required' => TRUE,
      '#prefix' => '<div id="hht-id-wrapper">',
      '#suffix' => '</div></div>',
      '#attributes' => array('readonly' => 'readonly'),
    );

    if (isset($form_state['triggering_element']) && ($form_state['triggering_element']['#name'] == 'trip_execution_date')) {

      if (!empty($form_state['values']['trip_execution_date']) && is_string($form_state['values']['trip_execution_date'])) {
        $date = strtotime($form_state['values']['trip_execution_date']);
        unset($form['hht_id']['#attributes']['readonly']);
        $form['hht_id']['#autocomplete_path'] = 'hht_id/autocomplete/' . $date;
      }
    }

    $form['vehicle_number'] = array(
      '#prefix' => '<div class="textfield-wrapper bottom-wrapper"><div id="vehicle-wrapper">',
      '#type' => 'textfield',
      '#title' => t('Vehicle Number'),
      '#autocomplete_path' => 'vehicle/autocomplete',
      '#suffix' => '</div>',
    );

    $form['cashier'] = array(
      '#prefix' => '<div id="cashier-wrapper">',
      '#type' => 'textfield',
      '#title' => t('Cashier name'),
      '#autocomplete_path' => 'cashier/autocomplete',
      '#suffix' => '</div></div>',
    );
    $form['skip_sequencing'] = array(
      '#type' => 'checkbox',
      '#title' => t('Check this to skip sequencing of bills'),
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Save',
      '#limit_validation_errors' => array(array('trip_execution_date'), array('hht_id'), array('vehicle_number'), array('cashier'), array('list_form_items'), array('skip_sequencing')),
      '#submit' => array('dispatch_planning_form_save_submit'),
      '#validate' => array('dispatch_planning_form_save_validate')
    );
  }
  return $form;
}

function trip_execution_date_ajax_callback($form, &$form_state) {
  return $form['hht_id'];
}

function loading_date_ajax_callback($form, &$form_state) {
  return $form['van'];
}

function van_ajax_callback($form, &$form_state) {
  return $form['beat_name'];
}

function custom_ajax_callback($form, &$form_state) {
  return $form;
}

function van_ajax_validate($form, &$form_state) {

  $van = $form_state['values']['van'];

  if (empty($van)) {
    form_set_error('van', 'Van number is required');
  }
}

function van_ajax_submit(&$form, &$form_state) {

  $van = $form_state['values']['van'];
  $loading_date = strtotime($form_state['values']['loading_date']);
  $beat_name = $form_state['values']['beat_name'];

  unset($form_state['input']['loading_date']);
  unset($form_state['input']['van']);
  $form['van']['#options'] = array();
  if (!empty($beat_name)) {
    $bills = get_bill_info(NULL, $van, $loading_date, $beat_name);
  }
  else {
    $bills = get_bill_info(NULL, $van, $loading_date);
  }
  $form_state['dispatch_planning']['bills'] += $bills;
  $form_state['rebuild'] = TRUE;
}

function bill_number_ajax_validate($form, &$form_state) {
  $bill_number = $form_state['values']['bill_number'];

  $query = db_select('node', 'n');
  $query->condition('n.title', $bill_number);
  $query->condition('n.type', 'sales_register_data');
  $query->fields('n', array('title'));
  $query->addTag('node_distributor_access');
  $result = $query->execute()->fetchField();

  if (empty($result)) {
    form_set_error('bill_number', 'Bill number does not exist');
  }
}

function bill_number_ajax_submit($form, &$form_state) {
  $bill_number = $form_state['values']['bill_number'];

  unset($form_state['input']['bill_number']);

  $bill_info = get_bill_info($bill_number);
  if (!empty($bill_info)) {
    $form_state['dispatch_planning']['bills'] += $bill_info;
  }

  $form_state['rebuild'] = TRUE;
}

//function trip_id_ajax_validate($form, &$form_state) {
//  $trip_id = $form_state['values']['trip_id'];
//
//  $query = db_select('node', 'n');
//  $query->condition('n.title', $trip_id);
//  $query->condition('n.type', 'dispatch_data');
//  $query->fields('n', array('title'));
//  $query->addTag('node_distributor_access');
//  $result = $query->execute()->fetchField();
//
//  if (empty($result)) {
//    form_set_error('trip_id', 'Trip ID does not exist');
//  }
//}
//
//function trip_id_ajax_submit($form, &$form_state) {
//  $trip_id = $form_state['values']['trip_id'];
//
//  unset($form_state['input']['trip_id']);
//
//  $bill_info = get_bill_info(NULL, NULL, NULL, $trip_id);
//  if (!empty($bill_info)) {
//    $form_state['dispatch_planning']['bills'] += $bill_info;
//  }
//
//  $form_state['rebuild'] = TRUE;
//}

function remove_selected_ajax_submit($form, &$form_state) {

  $checked = array_filter($form_state['values']['list_form_items']);

  if (!empty($checked)) {
    $form_state['dispatch_planning']['bills'] = array_diff_key($form_state['dispatch_planning']['bills'], array_flip($checked));
  }
  $form_state['rebuild'] = TRUE;
}

function dispatch_planning_form_save_validate($form, &$form_state) {
  require_once drupal_get_path('module', 'change_feeds_import') . '/form/upload_billing_data.inc';
  
  global $user;
  $user_id = $user->uid;
  $distributor_id = change_feeds_import_get_distributor_id($user_id);
  
  $rows = $form_state['values']['list_form_items'];
  $cashier = trim($form_state['values']['cashier']);
  $vehicle_number = trim($form_state['values']['vehicle_number']);
  $trip_execution_date = strtotime($form_state['values']['trip_execution_date']);
  $hht_id = trim($form_state['values']['hht_id']);
  
  $skip_sequencing = $form_state['values']['skip_sequencing'];
  
  $bill_nids = array_keys($rows);

  $today = strtotime(date('Y-m-d 00:00:00'));

  if ($trip_execution_date < $today) {
    form_set_error('trip_execution_date', 'Trip execution date cannot be a previous date');
  }
  if (!empty(array_filter($rows))) {
    form_set_error('list_form_items', 'Please uncheck all rows');
  }

  if ($hht_id && $trip_execution_date) {
    if (empty(validate_hht_id($trip_execution_date, $hht_id))) {
      form_set_error('hht_id', 'HHT id invalid or HHT id already exists for this date');
    }
  }

  if (!empty($cashier) && empty(validate_cashier($cashier))) {
    form_set_error('cashier', 'Please enter a valid cashier');
  }
  if (!empty($vehicle_number) && empty(validate_vehicle_number($vehicle_number))) {
    form_set_error('vehicle_number', 'Please enter a valid vehicle number');
  }
  
  ##############################################################################
  $query = db_select('node', 'n');
  $query->leftJoin('field_data_field_sales_party_code', 'spc', 'n.nid = spc.entity_id');

  $query->leftJoin('node', 'no', "no.title = spc.field_sales_party_code_value AND no.type = 'outlet_master' AND no.uid = $distributor_id");
  $query->leftJoin('field_data_field_revised_sequence', 'fs', 'fs.entity_id = no.nid');
  $query->leftJoin('field_data_field_area_hook', 'fa', 'fa.entity_id = no.nid');

  $query->leftJoin('field_data_field_hul_code', 'fh', 'fh.entity_id = no.nid');
  $query->leftJoin('node', 'hul', "fh.field_hul_code_value = hul.title AND hul.type = 'hul_code_master' AND hul.uid = $distributor_id");
  $query->leftJoin('field_data_field_hul_updated_lat', 'flat', 'flat.entity_id = hul.nid');
  $query->leftJoin('field_data_field_hul_updated_long', 'flong', 'flong.entity_id = hul.nid');

  $query->leftJoin('node', 'ndvp', 'ndvp.nid = fa.field_area_hook_nid');
  $query->leftJoin('field_data_field_dva_sales_day', 'da', 'da.entity_id = ndvp.nid');
  $query->leftJoin('field_data_field_dva_van_pl_group', 'fv', 'fv.entity_id = ndvp.nid');
  $query->leftJoin('field_data_field_dva_area_hook_group_name', 'gn', 'gn.entity_id = ndvp.nid');
  $query->addField('gn', 'field_dva_area_hook_group_name_value', 'area_hook_group_name');

  $query->addField('n', 'nid');
  $query->condition('n.uid', $distributor_id);
  $query->addField('n', 'title', 'bill_number');
  $query->condition('n.nid', $bill_nids, 'IN');

  $query->addField('no', 'title', 'party_code');
  $query->addField('fs', 'field_revised_sequence_value', 'sequence');
  $query->addField('fa', 'field_area_hook_nid', 'area_hook');
  
  $query->addField('flat', 'field_hul_updated_lat_value', 'lat');
  $query->addField('flong', 'field_hul_updated_long_value', 'lng');
  
  $query->orderBy('ISNULL(da.field_dva_sales_day_value)');
  $query->orderBy('da.field_dva_sales_day_value');
  $query->orderBy('ISNULL(fv.field_dva_van_pl_group_value)');
  $query->orderBy('fv.field_dva_van_pl_group_value');
  $query->orderBy('ISNULL(gn.field_dva_area_hook_group_name_value)');
  $query->orderBy('gn.field_dva_area_hook_group_name_value');
  $query->orderBy('ISNULL(fs.field_revised_sequence_value)');
  $query->orderBy('fs.field_revised_sequence_value');

  $res = $query->execute()->fetchAll();
    
  $bill_count = count($res);
  $sequence = $no_area = 0;
  
  $s = 1;
  foreach ($res as $val) {
    
    $manual_drs_sequence[$val->nid] = $s;
    $s++;
    
    if (!empty($val->lat) && !empty($val->lng)) {
      //$params['services'][] = array('id' => $val->nid, 'address' => array('location_id' => $val->nid, 'lon' => (double)$val->lng, 'lat' => (double)$val->lat));
      //NEW API ROUTIFIC
      $Locations['visits'][$val->nid]['location']['name'] = $val->nid;
      $Locations['visits'][$val->nid]['location']['lat'] = $val->lat;
      $Locations['visits'][$val->nid]['location']['lng'] = $val->lng;
      $Locations['visits'][$val->nid]['duration'] = 7; // 7 min stop on every outlet
    }

    if (is_null($val->sequence)) {
      $no_sequence = 1;
    }
    else{
      $sequence_array[$val->nid] = $val->sequence;
    }

    if (is_null($val->area_hook)) {
      $no_area = 1;
    }
    else {
      $area_hook[$val->area_hook] = $val->area_hook;
    }
    
    if (is_null($val->area_hook_group_name)) {
      $area_hook_group_name = 1;
    }
    else {
      $area_hook_group_name[$val->area_hook_group_name] = $val->area_hook_group_name;
    }
    
  }
  
  $form_state['dispatch_planning']['sequence_array'] = $sequence_array;

  $conf_nid = $form_state['leanbox_misc']['nid'] = check_node_title_exists($distributor_id, 'van_stop_master');
  if ($conf_nid) {
    $node = node_load($conf_nid);
    $origin_lat = $node->field_distributor_latitude[LANGUAGE_NONE][0]['value'];
    $origin_long = $node->field_distributor_longitude[LANGUAGE_NONE][0]['value'];
    //$enable_routing = $node->field_enable_routing[LANGUAGE_NONE][0]['value'];
    // Earlier it was on node field. now we are creating for centrally managed
    $enable_routing = check_dynamic_routing_configuration($distributor_id);
  }

  $bill_sequence_array = array();
  if(($no_area || $no_sequence || $area_hook_group_name || count($area_hook_group_name) > 1) && !$skip_sequencing && $origin_lat && $origin_long && $enable_routing){
        
    //$params['vehicles'][] = array('vehicle_id' => 'origin', 'start_address' => array('location_id' => 'origin', 'lon' => (double)$origin_long, 'lat' => (double)$origin_lat), 'return_to_depot' => true);
    //NEW API ROUTIFIC
    $Locations['fleet']['origin']['start_location'] = array(
      "id" => 'origin',
      "name" => 'origin',
      "lat" => $origin_lat, //'19.1817531000', //
      "lng" => $origin_long //'72.9972678000',// 
    );
    $Locations['fleet']['origin']['speed'] = '0.1'; // speed of the driver

    /*$post_result = graphhopper_postvrp_api($params);
    if ($post_result) {
      $job_id = $post_result->getJobId();
      if ($job_id) {

        for ($j = 0; $j < 10; $j++) {
          $solution = graphhopper_solution_api($job_id);
          if ($solution) {
            if ($solution->getStatus() == 'finished') {

              $routes = $solution->getSolution()->getRoutes();

              $data = $routes[0]->getActivities();

              $i = 1;
              foreach ($data as $key => $value) {
                if ($value->getType() == 'service') {
                  $bill_sequence_array[$i] = $value->getLocationId();
                  $i ++;
                }
              }
              break;
            }
          }
          sleep(0.5); // this should halt for 500 ms for every loop
        }
      }
    }*/
    //NEW API ROUTIFIC
    $Locations['options']['shortest_distance'] = true;
    $Locations['options']['polylines'] = true;
    //dpm($Locations);
    $Locations_data = json_encode($Locations);
    $authorization = 'bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI1ODgzOWY4ZjYyZmQyMzkzMGE4NjQwYjEiLCJpYXQiOjE1MDQ2Nzg4NTl9.AzJLVp6HDk6lbXCWxI1T8Y7US6R0panNjkY5B-pkdqg';
    $request_headers = array('Content-Type' => 'application/json', 'Authorization' => $authorization);
    $roitufic_api_url = variable_get('api_routific_url', 'https://api.routific.com/v1/vrp');
    $routific_options = array('headers' => $request_headers, 'method' => 'POST', 'data' => $Locations_data);

    $response_data = drupal_http_request($roitufic_api_url, $routific_options);
    dpm($response_data,'API RESPONSE');
    $response_data = json_decode($response_data->data);

    if ($response_data->num_unserved) {
      dpm($response_data->unserved,'unserved');
    }
    if ($response_data->status === 'success') {
      $response_array = $response_data->solution->origin;
      $i = 1;
      $form_state['dispatch_planning']['total_travel_time'] = $response_data->total_working_time; //total_travel_time
      $form_state['dispatch_planning']['total_distance'] = $response_data->total_distance;
      foreach ($response_array as $k => $v) {
        if ($v->location_name !== 'origin') {
          $bill_sequence_array[$i] = $v->location_name;
          $i++;
        }
      }
    }

    if (!empty($bill_sequence_array)) {
      $form_state['dispatch_planning']['bill_sequence_array'] = $bill_sequence_array;
    }
    else {
     // form_set_error('list_form_items', 'An error occured while generating sequence');
      form_set_error('list_form_items', 'API Error'.$response_data->error);
    }
  }
  $form_state['dispatch_planning']['manual_drs_sequence'] = $manual_drs_sequence;
  ##############################################################################
}

function dispatch_planning_form_save_submit($form, &$form_state) {
  $rows = $form_state['values']['list_form_items'];
  $cashier = trim($form_state['values']['cashier']);
  $vehicle_number = trim($form_state['values']['vehicle_number']);
  $trip_execution_date = strtotime($form_state['values']['trip_execution_date']);
  $hht_id = trim($form_state['values']['hht_id']);

  $dispatch_bill_count = count($rows);
  $bill_value_sum = $form_state['dispatch_planning']['bill_value_sum'];
  
  $bill_nids = array_keys($rows);
  
  global $user;
  $user_id = $user->uid;
  $distributor_id = change_feeds_import_get_distributor_id($user_id);

  if (isset($form_state['dispatch_planning']['bill_sequence_array']) && !empty($form_state['dispatch_planning']['bill_sequence_array'])) {
    $bill_sequence = $form_state['dispatch_planning']['bill_sequence_array'];
    $total_travel_time = $form_state['dispatch_planning']['total_travel_time'];
    $total_distance = $form_state['dispatch_planning']['total_distance'];
      
    $seq_flag = 1;
  }

  $txn = db_transaction();

  $query = db_select('trip_id_sequence', 'ts');
  $query->forUpdate();
  $query->addField('ts', 'next_id');
  $query->condition('ts.distributor_id', $distributor_id);
  $trip_id = $query->execute()->fetchField();


  if ($trip_id) {
    // Increment the next_value.
    db_update('trip_id_sequence')
        ->fields(array('next_id' => $trip_id + 1))
        ->condition('distributor_id', $distributor_id)
        ->execute();
  }
  else {
    $trip_id = 1;
    $insert = db_insert('trip_id_sequence')
        ->fields(array(
      'distributor_id' => $distributor_id,
      'next_id' => $trip_id + 1
    ));
    $insert->execute();
  }

  $node = new stdClass();
  $node->title = $trip_id;
  $node->type = "dispatch_data";
  node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
  $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
  $node->uid = $user->uid;
  $node->status = 1; //(1 or 0): published or not
  $node->comment = 0; // 0 = comments disabled, 1 = read only, 2 = read/write
  $node->field_bill_count[$node->language][0]['value'] = $dispatch_bill_count;
  $node->field_dispatch_bill_value[$node->language][0]['value'] = $bill_value_sum;
  $node->field_cashier_name[$node->language][0]['value'] = $cashier;
  $node->field_vehicle_no[$node->language][0]['value'] = $vehicle_number;
  $node->field_trip_id[$node->language][0]['value'] = $trip_id;
  $node->field_trip_creation_date[$node->language][0]['value'] = strtotime(date('Y/m/d 00:00:00'));
  $node->field_trip_executon_date[$node->language][0]['value'] = $trip_execution_date;
  $node->field_hht_id[$node->language][0]['nid'] = get_nid_from_hht_id($hht_id);
  
  if($seq_flag){
    $node->field_sequence_method[$node->language][0]['value'] = 1;
    $node->field_total_travel_time[$node->language][0]['value'] = round($total_travel_time/60 , 2);
    $node->field_total_distance[$node->language][0]['value'] = round($total_distance,4);
  }
  else{
    $node->field_sequence_method[$node->language][0]['value'] = 0;
  }

  $node = node_submit($node); // Prepare node for saving
  node_save($node);

  $nid = $node->nid;

  $bill_nids = array_keys($rows);
  
  $sequence_array = $form_state['dispatch_planning']['sequence_array'];
  $manual_drs_sequence = $form_state['dispatch_planning']['manual_drs_sequence'];
  if ($seq_flag) {
    foreach ($bill_sequence as $key => $value) {
      $node = node_load($value);

      $node->field_bill_sequence[LANGUAGE_NONE][0]['value'] = $key;
      $node->field_drs_sequence[LANGUAGE_NONE][0]['value'] = $key;
      if (isset($node->field_delivery_pending[LANGUAGE_NONE])) {
        $node->field_delivery_pending = array();
      }
      $node->field_trip_id_reference[LANGUAGE_NONE][0]['nid'] = $nid;
      node_save($node);
    }

    $diff = array_diff($bill_nids, $bill_sequence);
    if (!empty($diff)) {
      foreach ($diff as $value) {
        $node = node_load($value);

        $node->field_drs_sequence[LANGUAGE_NONE][0]['value'] = ++$key;

        if (isset($node->field_delivery_pending[LANGUAGE_NONE])) {
          $node->field_delivery_pending = array();
        }
        $node->field_trip_id_reference[LANGUAGE_NONE][0]['nid'] = $nid;
        node_save($node);
      }
    }
  }
  else {
    foreach ($bill_nids as $value) {
      $node = node_load($value);

      if (isset($sequence_array[$value]) && !empty($sequence_array[$value])) {
        $node->field_bill_sequence[LANGUAGE_NONE][0]['value'] = $sequence_array[$value];
      }
      $node->field_drs_sequence[LANGUAGE_NONE][0]['value'] = $manual_drs_sequence[$value];

      if (isset($node->field_delivery_pending[LANGUAGE_NONE])) {
        $node->field_delivery_pending = array();
      }
      $node->field_trip_id_reference[LANGUAGE_NONE][0]['nid'] = $nid;
      node_save($node);
    }
  }

  drupal_set_message('Successfully updated. Trip id ' . $trip_id);
}

function get_bill_info($bill_number, $van = NULL, $loading_date = NULL, $beat_name = NULL, $trip_id = NULL, $delivery_pending = NULL) {

  global $user;
  $user_id = $user->uid;
  $distributor_id = change_feeds_import_get_distributor_id($user_id);
  $query = db_select('node', 'n');
  $query->leftJoin('field_data_field_bill_value', 'bv', 'n.nid = bv.entity_id');
  $query->leftJoin('field_data_field_sales_party_code', 'spc', 'n.nid = spc.entity_id');
  $query->leftJoin('field_data_field_billing_loading_date', 'ld', 'n.nid = ld.entity_id');
  $query->leftJoin('field_data_field_billing_van', 'v', 'n.nid = v.entity_id');
  $query->leftJoin('field_data_field_delivery_pending', 'dp', 'n.nid = dp.entity_id');
  $query->leftJoin('field_data_field_trip_id_reference', 't', 'n.nid = t.entity_id');
  $query->leftJoin('node', 'nt', 'nt.nid = t.field_trip_id_reference_nid');

  $query->leftJoin('field_data_field_party_code', 'pc', 'pc.field_party_code_value = spc.field_sales_party_code_value');
 // $query->leftJoin('field_data_field_party_code', 'ppc', 'pc.field_party_code_value = ppc.field_party_code_value');
  $query->condition('pc.bundle', 'outlet_master');
  $query->join('node', 'oun', 'oun.nid = pc.entity_id');
  $query->condition('oun.uid', $distributor_id, '=');

  $query->leftJoin('field_data_field_party_name', 'pn', 'pn.entity_id = oun.nid');
  $query->leftJoin('field_data_field_beat_name', 'bn', 'bn.entity_id = oun.nid');


  $query->addField('n', 'nid', 'nid');
  $query->addField('n', 'title', 'bill_number');

  $query->addField('pn', 'field_party_name_value', 'party_name');
  $query->addField('bv', 'field_bill_value_value', 'bill_value');

  //$query->addField('nt', 'title', 'trip_id');

  //$query->addExpression("CONCAT_WS(' - ', field_billing_van_value, FROM_UNIXTIME(field_billing_loading_date_value, '%m/%d/%y'))", 'van_loading_date');
   $query->addExpression("CONCAT_WS(' - ', field_billing_van_value, DATE_FORMAT(CONVERT_TZ(FROM_UNIXTIME(field_billing_loading_date_value),'+00:00','+05:30'), '%m/%d/%y'))", 'van_loading_date');


  $query->addField('bn', 'field_beat_name_value', 'sales_beat');

  $db_or = db_or();
  $db_or->condition('pc.bundle', 'outlet_master');
  $db_or->isNull('pc.bundle');

  $query->condition($db_or);

  if (!is_null($bill_number)) {
    $query->condition('n.title', $bill_number);
  }
  if (!is_null($van)) {
    $query->condition('field_billing_van_value', $van);
  }
  if (!is_null($loading_date)) {
    $query->condition('field_billing_loading_date_value', $loading_date);
  }

  if (!is_null($trip_id)) {
    $query->condition('nt.title', $trip_id);
  }
  else {
    $query->addExpression("CONCAT_WS(' - ', field_billing_van_value, field_billing_loading_date_value)", 'van_loading_date_timestamp');
    
    if (!is_null($delivery_pending)) {
      $query->isNotNull('t.field_trip_id_reference_nid');
      $query->addField('dp', 'field_delivery_pending_value', 'field_delivery_pending_value');
    }
    else {
      $db_or2 = db_or();
      $db_or2->isNull('t.field_trip_id_reference_nid');
      $db_or2->condition('dp.field_delivery_pending_value', 1);
      $query->condition($db_or2);
    }
  }

  if (!is_null($beat_name)) {
    $query->condition('field_beat_name_value', $beat_name);
  }

  $query->condition('n.type', 'sales_register_data');
  $query->addTag('node_distributor_access');

  $res = $query->execute()->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_UNIQUE | PDO::FETCH_ASSOC);


//  foreach ($res as $key => $value) {
//    $res[$key]['sequence']['data'] = array(
//      '#type' => 'textfield',
//      '#title' => 'Sequence',
//      '#title_display' => 'invisible',
//      '#default_value' => '',
//      '#name' => "sequence[$key]",
//    );
//  }
  return $res;
}

function get_modified_van_from_loading_date($date, $string) {
  $result = array();
//  if (!empty($date) && !empty($string)) {
//    $query = db_select('field_data_field_billing_van', 'v');
//    $query->join('field_data_field_billing_loading_date', 'l', 'l.entity_id = v.entity_id');
//    $query->fields('v', array('field_billing_van_value'));
//    $query->condition('l.field_billing_loading_date_value', $date);
//    $query->condition('v.field_billing_van_value', db_like($string) . '%', 'LIKE');
//    $result = $query->execute()->fetchAllKeyed(0, 0);
//  }
//  drupal_json_output($result);
  if (!empty($date)) {
    $query = db_select('node', 'n');
    $query->join('field_data_field_billing_van', 'v', 'v.entity_id = n.nid');
    $query->join('field_data_field_billing_loading_date', 'l', 'l.entity_id = n.nid');
    $query->leftJoin('field_data_field_delivery_pending', 'dp', 'n.nid = dp.entity_id');
    $query->leftJoin('field_data_field_trip_id_reference', 'ft', 'ft.entity_id = n.nid');

    $query->fields('v', array('field_billing_van_value'));
    $query->condition('l.field_billing_loading_date_value', $date);
    $query->condition('n.type', 'sales_register_data');
    
    $db_or = db_or();
    $db_or->isNull('ft.field_trip_id_reference_nid');
    $db_or->condition('dp.field_delivery_pending_value', 1);
    $query->condition($db_or);

    $query->addTag('node_distributor_access');

    $result = $query->execute()->fetchAllKeyed(0, 0);
  }
  return $result;
}

function get_beat_name_from_loading_date_and_van($date, $van) {
  $result = array();
  if (!empty($date)) {

    global $user;
    $user_id = $user->uid;
    $distributor_id = change_feeds_import_get_distributor_id($user_id);
    $query = db_select('node', 'n');
    $query->join('field_data_field_billing_van', 'v', 'v.entity_id = n.nid');
    $query->join('field_data_field_billing_loading_date', 'l', 'l.entity_id = n.nid');
    $query->leftJoin('field_data_field_delivery_pending', 'dp', 'n.nid = dp.entity_id');
    $query->leftJoin('field_data_field_sales_party_code', 'fsp', 'fsp.entity_id = n.nid');
    $query->join('node', 'no', 'no.title = fsp.field_sales_party_code_value');
    $query->leftJoin('field_data_field_beat_name', 'fb', 'no.nid = fb.entity_id');
    $query->condition('no.uid', $distributor_id);
    $query->condition('no.type', 'outlet_master');

    $query->leftJoin('field_data_field_trip_id_reference', 'ft', 'ft.entity_id = n.nid');

    $query->addField('fb', 'field_beat_name_value');
    $query->condition('v.field_billing_van_value', $van);
    $query->condition('l.field_billing_loading_date_value', $date);
    $query->condition('n.type', 'sales_register_data');

    $db_or = db_or();
    $db_or->isNull('ft.field_trip_id_reference_nid');
    $db_or->condition('dp.field_delivery_pending_value', 1);
    $query->condition($db_or);

    $query->addTag('node_distributor_access');

    $result = $query->execute()->fetchAllKeyed(0, 0);
  }
  return $result;
}

function bill_autocomplete($string = '', $delivery_pending = NULL) {
  $result = array();

  if ($string) {
    $query = db_select('node', 'n');
    $query->join('field_data_field_billing_loading_date', 'ld', 'n.nid = ld.entity_id');
    $query->leftJoin('field_data_field_trip_id_reference', 'ft', 'ft.entity_id = n.nid');
    $query->leftJoin('field_data_field_delivery_pending', 'dp', 'n.nid = dp.entity_id');
    $query->condition('n.title', db_like($string) . '%', 'LIKE');
    $query->condition('n.type', 'sales_register_data');
    
    if (is_null($delivery_pending)) {
      $db_or = db_or();
      $db_or->isNull('ft.field_trip_id_reference_nid');
      $db_or->condition('dp.field_delivery_pending_value', 1);
      $query->condition($db_or);
    }
    else {
      $query->isNotNull('ft.field_trip_id_reference_nid');
    }
    
    $query->fields('n', array('title'));
    $query->range(0, 15);
    $query->addTag('node_distributor_access');
    $result = $query->execute()->fetchAllKeyed(0, 0);
  }

  drupal_json_output($result);
}

function trip_id_autocomplete($string = '') {
  $result = array();

  if ($string) {
    $query = db_select('node', 'n');
    $query->condition('n.title', db_like($string) . '%', 'LIKE');
    $query->condition('n.type', 'dispatch_data');
    $query->fields('n', array('title'));
    $query->range(0, 15);
    $query->addTag('node_distributor_access');
    $result = $query->execute()->fetchAllKeyed(0, 0);
  }

  drupal_json_output($result);
}

function _get_header_sort($array, $field_name, $order) {
  if ($order == 'asc') {
    uasort($array, function ($a, $b) use ($field_name) {
      if ($a[$field_name] == $b[$field_name]) {
        return 0;
      }
      return ($a[$field_name] < $b[$field_name]) ? -1 : 1;
    });
  }
  else {
    uasort($array, function ($a, $b) use ($field_name) {
      if ($a[$field_name] == $b[$field_name]) {
        return 0;
      }
      return ($a[$field_name] > $b[$field_name]) ? -1 : 1;
    });
  }
  return $array;
}

/**
 * implements hook_query_TAG_NAME_alter()
 * @param QueryAlterableInterface $query
 */
function dispatch_planning_query_node_distributor_access_alter(QueryAlterableInterface $query) {
  global $user;
  $user_id = $user->uid;
  $distributor_id = change_feeds_import_get_distributor_id($user_id);
  $tables = & $query->getTables();

  foreach ($tables as $alias => $table) {
    if ($table['table'] == 'node') {
      $nalias = $alias;
      break;
    }
  }
  $query->condition("$nalias.uid", $distributor_id);
}

function cashier_names_autocomplete($string = '') {
  $result = array();

  if ($string) {
    $query = db_select('node', 'n');
    $query->join('field_data_field_resource_type', 'rt', 'rt.entity_id = n.nid');
    $query->join('field_data_field_resource_name', 'rn', 'rn.entity_id = n.nid');
    $query->condition('field_resource_name_value', db_like($string) . '%', 'LIKE');
    $query->range(0, 15);

    $query->condition('field_resource_type_value', 'CASHIER');
    $query->fields('rn', array('field_resource_name_value'));
    $query->addTag('node_distributor_access');
    $result = $query->execute()->fetchAllKeyed(0, 0);
  }

  drupal_json_output($result);
}

function vehicle_names_autocomplete($string = '') {
  $result = array();

  if ($string) {
    $query = db_select('node', 'n');
    $query->condition('type', 'vehicle_master');
    $query->fields('n', array('title'));
    $query->condition('title', db_like($string) . '%', 'LIKE');
    $query->range(0, 15);
    $query->addTag('node_distributor_access');
    $result = $query->execute()->fetchAllKeyed(0, 0);
  }

  drupal_json_output($result);
}

function hht_id_autocomplete($date, $string) {
  $result = array();

//  if ($string) {
//    $query = db_select('node', 'n');
//    $query->condition('type', 'hht_master');
//    $query->fields('n', array('title'));
//    $query->condition('title', db_like($string) . '%', 'LIKE');
//
//    $query->range(0, 15);
//    $query->addTag('node_distributor_access');
//    $result = $query->execute()->fetchAllKeyed(0, 0);
//  }
//
//  if ($date) {
//    $query = db_select('node', 'n');
//    $query->condition('type', 'hht_master');
//    $query->fields('n', array('title'));
//    $query->leftJoin('field_data_field_hht_id', 'fh', 'fh.field_hht_id_nid = n.nid');
//    $query->leftJoin('field_data_field_trip_executon_date', 'fd', 'fh.entity_id = fd.entity_id');
//    $query->condition('field_trip_executon_date_value', $date);
//    $query->addTag('node_distributor_access');
//    $res = $query->execute()->fetchAllKeyed(0, 0);
//
//    $result = array_diff_key($result, $res);
//  }

  $query = db_select('node', 'n');
  $query->condition('n.type', 'hht_master');
  $query->fields('n', array('title'));
  $query->condition('n.title', db_like($string) . '%', 'LIKE');
//$query->addExpression("IF(SUM(field_trip_executon_date_value = '1488220200'), 'Yes', 'No')", 'hola');
//$query->addExpression("SUM(field_trip_executon_date_value = '1488220200')", 'aaa');

  $query->addExpression("MAX(IF((field_trip_executon_date_value = $date AND (nt.status = 1)), nt.title, 0))", 'trip_id');
  $query->leftJoin('field_data_field_hht_id', 'fh', 'fh.field_hht_id_nid = n.nid');
  $query->leftJoin('node', 'nt', 'nt.nid = fh.entity_id');

//  //Dont consider deleted trips
//  $db_or = db_or();
//  $db_or->isNull('nt.status');
//  $db_or->condition('nt.status', 0);
//  $query->condition($db_or);

  $query->leftJoin('field_data_field_trip_executon_date', 'fd', 'fh.entity_id = fd.entity_id');
  $query->groupBy('n.title');
  $query->addTag('node_distributor_access');
  $res = $query->execute()->fetchAll();

  $date_string = date('m/d/Y', $date);
  foreach ($res as $val) {
    if ($val->trip_id) {
      $result[$val->title] = "$val->title ($val->trip_id - $date_string)";
    }
    else {
      $result[$val->title] = $val->title;
    }
  }

  drupal_json_output($result);
}

function validate_hht_id($date, $hht_id) {

  $query = db_select('node', 'n');
  $query->condition('n.type', 'hht_master');

  $query->leftJoin('field_data_field_hht_id', 'fh', 'fh.field_hht_id_nid = n.nid');
  $query->leftJoin('field_data_field_trip_executon_date', 'fd', 'fh.entity_id = fd.entity_id');
  $query->leftJoin('node', 'nt', 'nt.nid = fh.entity_id');
  //$query->fields('fd', array('field_trip_executon_date_value'));
  
  $query->addExpression("IF((nt.status = 1), field_trip_executon_date_value, 0)", 'date');

//  //Dont consider deleted trips
//  $db_or = db_or();
//  $db_or->isNull('nt.status');
//  $db_or->condition('nt.status', 0);
//  $query->condition($db_or);
  
  $query->condition('n.title', $hht_id);
  $query->addTag('node_distributor_access');
  $result = $query->execute()->fetchAllKeyed(0, 0);

  if (empty($result) || isset($result[$date])) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

function get_nid_from_hht_id($hht_id) {

  $query = db_select('node', 'n');
  $query->fields('n', array('nid'));
  $query->condition('type', 'hht_master');
  $query->condition('title', $hht_id);
  $query->addTag('node_distributor_access');
  $result = $query->execute()->fetchField();

  return $result;
}

function validate_cashier($cashier) {
  $query = db_select('node', 'n');
  $query->join('field_data_field_resource_type', 'rt', 'rt.entity_id = n.nid');
  $query->join('field_data_field_resource_name', 'rn', 'rn.entity_id = n.nid');
  $query->condition('field_resource_name_value', $cashier);

  $query->condition('field_resource_type_value', 'CASHIER');
  $query->fields('rn', array('field_resource_name_value'));
  $query->addTag('node_distributor_access');
  $result = $query->execute()->fetchField();

  return $result;
}

function validate_vehicle_number($vehicle_number) {
  $query = db_select('node', 'n');
  $query->condition('type', 'vehicle_master');
  $query->fields('n', array('title'));
  $query->condition('title', $vehicle_number);
  $query->addTag('node_distributor_access');
  $result = $query->execute()->fetchField();

  return $result;
}

function trip_delete_form($form, &$form_state) {
  $form['#prefix'] = '<div id="itemlist-div">';
  $form['#suffix'] = '</div>';
  $form['trip_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Trip id'),
    '#required' => TRUE,
      //'#autocomplete_path' => 'trip/autocomplete'
  );

  $form['trip_id_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Show bills'),
    '#ajax' => array(
      'wrapper' => 'itemlist-div',
      'callback' => 'custom_ajax_callback',
      'method' => 'replace',
      'effect' => 'fade',
    ),
    '#submit' => array('trip_id_ajax_submit'),
    '#validate' => array('trip_id_ajax_validate'),
      //'#limit_validation_errors' => array(array('trip_id')),
  );

  $header_array = array(
    'bill_number' => 'Bill Number',
    'party_name' => 'Party name',
    'bill_value' => 'Value',
    'sales_beat' => 'Sales Beat',
    'van_loading_date' => 'Existing Van/Loading Date',
      //'sequence' => 'Delivery Sequence',
      //'trip_id' => 'Trip ID',
  );

  if (!isset($form_state['dispatch_planning']['bills'])) {
    $form_state['dispatch_planning']['bills'] = array();
  }
  $options = $form_state['dispatch_planning']['bills'];

  if ($options) {
    $form['list_form_items'] = array(
      '#theme' => 'table',
      '#header' => $header_array,
      '#rows' => $form_state['dispatch_planning']['bills'],
      '#prefix' => '<div id="table-div">',
      '#suffix' => '</div>',
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Delete trip',
      '#validate' => array('trip_id_ajax_validate'),
        //'#limit_validation_errors' => array(array('trip_execution_date'), array('hht_id'), array('vehicle_number'), array('cashier'), array('list_form_items')),
    );
  }
  else {
    if (isset($form_state['values']['trip_id'])) {
      $form['no_bills'] = array(
        '#markup' => '<p>No bills attached to the trip</p>',
      );

      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Delete trip',
        '#validate' => array('trip_id_ajax_validate'),
          //'#limit_validation_errors' => array(array('trip_execution_date'), array('hht_id'), array('vehicle_number'), array('cashier'), array('list_form_items')),
      );
    }
  }

  return $form;
}

function trip_id_ajax_validate($form, &$form_state) {
  $trip_id = $form_state['values']['trip_id'];

  $query = db_select('node', 'n');
  $query->leftJoin('field_data_field_dispatch_status', 'fs', 'fs.entity_id = n.nid');
  $db_or = db_or();
  $db_or->isNull('fs.field_dispatch_status_value');
  $db_or->condition('fs.field_dispatch_status_value', 0);
  $query->condition($db_or);
  $query->condition('n.title', $trip_id);
  $query->condition('n.type', 'dispatch_data');
  $query->fields('n', array('title'));
  $query->condition('status', 1);
  $query->addTag('node_distributor_access');
  $result = $query->execute()->fetchField();

  if (empty($result)) {
    form_set_error('trip_id', 'Trip ID does not exist or is already deleted or is already dispatched');
  }
}

function trip_id_ajax_submit($form, &$form_state) {
  $trip_id = $form_state['values']['trip_id'];

  //unset($form_state['input']['trip_id']);

  $bill_info = get_bill_info(NULL, NULL, NULL, NULL, $trip_id);

  if (!empty($bill_info)) {
    $form_state['dispatch_planning']['bills'] = $bill_info;
  }
  else {
    $form_state['dispatch_planning']['bills'] = array();
  }

  $form_state['rebuild'] = TRUE;
}

function trip_delete_form_submit($form, &$form_state) {
  $trip_id = $form_state['values']['trip_id'];

  $query = db_select('node', 'n');
  $query->condition('n.title', $trip_id);
  $query->condition('n.type', 'dispatch_data');
  $query->join('field_data_field_trip_id_reference', 'ft', 'ft.field_trip_id_reference_nid = n.nid');
  $query->leftjoin('field_data_field_dispatch_n_value', 'nv', 'nv.entity_id = ft.entity_id');
  $query->fields('n', array('nid'));
  $query->fields('ft', array('entity_id'));
  $query->addTag('node_distributor_access');
  $result = $query->execute()->fetchAll(PDO::FETCH_GROUP);

  $dispatch_nid = key($result);

  foreach ($result[$dispatch_nid] as $value) {

    $node = node_load($value->entity_id);

    if ($node) {
      $node->field_trip_id_reference = array();
      $node->field_bill_sequence = array();
      $node->field_drs_sequence = array();
      $node->field_dispatch_n_value = array();
      node_save($node);
    }
  }

  $dispatch_node = node_load($dispatch_nid);
  if ($dispatch_node) {
    $dispatch_node->status = 0;
    node_save($dispatch_node);
  }

  drupal_set_message('Successfully deleted');
}

function dispatch_planning_form_views_exposed_form_alter(&$form, &$form_state) {
  if ($form['#id'] == 'views-exposed-form-billing-report-page') {
    //Show Yes, No, and All for Trip id field in billing report
    $form['field_trip_id_reference_nid_op']['#options'] = array(
      'in' => 'All',
      'empty' => 'No',
      'not empty' => 'Yes',
    );

    $form['field_trip_id_reference_nid']['#access'] = FALSE;
  }
}

/**
 * 
 * @param type $value
 * @param type $node
 * @param type $trip_execution_date
 * @param type $hht_id
 * @param type $cashier
 * @param type $trip_id
 * @return array
 */
function dispatch_planning_sales_reg_api($node, $trip_execution_date, $vehicle_no, $cashier, $trip_id) {

  $api_data = array();
  // get billing data details
  $node_uid = $node->uid;
  $rs_code = dispatch_planning_get_rscode_using_uid($node_uid);
  $bill_number = $node->title;
  $vehicle = $node->field_billing_van[LANGUAGE_NONE][0]['value'];
  $bill_date = date('Y-m-d', $node->field_sr_bill_date[LANGUAGE_NONE][0]['value']);
  $bill_value = $node->field_bill_value[LANGUAGE_NONE][0]['value'];
  $party_code = $node->field_sales_party_code[LANGUAGE_NONE][0]['value'];
  $store_sequence = $node->field_drs_sequence[LANGUAGE_NONE][0]['value'];

  $billing_data_details = $billing_data_details_insert = dispatch_planning_get_billing_data($node_uid, $bill_number);
  $outlet_data_details = dispatch_planning_get_outlet_data($node_uid, $party_code);
  
  foreach ($billing_data_details as $key => $val) {
      unset($billing_data_details[$key]['og_Sum_of_NET_SALES_QTY']);
   }
   if (empty($outlet_data_details['field_hul_updated_lat_value'])) {
    $outlet_data_details['field_hul_updated_lat_value'] = 0;
  } 
  if (empty($outlet_data_details['field_hul_updated_long_value'])) {
    $outlet_data_details['field_hul_updated_long_value'] = 0;
  }
  $api_data['jobType'] = 'delivery1';  // Hardcoded as suggested by gaurav
  $reference_no = $trip_id . '_'. $rs_code . '_' . $bill_number;
  $api_data['referenceNo'] = $reference_no;
  $api_data['date'] = date('Y-m-d',$trip_execution_date);
  $api_data['city'] = 'ABC';
  $api_data['hub'] = $rs_code;
  //$api_data['hub'] = '100006'; // need to remove when moving to HUL
  $api_data['fieldExecutive'] = $rs_code . '_' . $cashier;
  $api_data['fieldExecutiveName'] = $cashier;

  $api_data['jobData']['vehicle'] = $vehicle_no;
  $api_data['jobData']['party_hll_code'] = $outlet_data_details['field_hul_code_value']; // hul code in outlet
  //$api_data['jobData']['lat_long'] = $outlet_data_details['field_hul_updated_lat_value'] . ',' . $outlet_data_details['field_hul_updated_long_value'];
  $api_data['jobData']['lat_long']['lat_longLatitude'] = $outlet_data_details['field_hul_updated_lat_value'];
  $api_data['jobData']['lat_long']['lat_longLongitude'] = $outlet_data_details['field_hul_updated_long_value'];
  $api_data['jobData']['bill_value'] = (int)$bill_value;
  $api_data['jobData']['item_details'] = $billing_data_details; // array
  $api_data['jobData']['bill_date'] = $bill_date;
  $api_data['jobData']['locality'] = 'ABCD_locality';  // Hardcoded as suggested by gaurav  
  $api_data['jobData']['store_sequence_no'] = $store_sequence;  // drs sequence
  $api_data['jobData']['party_name'] = $outlet_data_details['field_party_name_value']; // party name in outlet
  $api_data['jobData']['beat_name'] = $outlet_data_details['field_beat_name_value'];  // beat name in outlet
  $api_data['jobData']['party_code'] = $party_code;
  $api_data['jobData']['bill_number'] = $bill_number;
  $api_data['jobData']['runsheet_number'] = $trip_id;
  /**
   * Insert data into dispatch_planning_api_data table
   */
  $id = dispatch_planning_api_data($api_data);
  /**
   * Insert data into dispatch_planning_item_details table
   */
  dispatch_planning_item_details($billing_data_details_insert, $id);
  return $api_data;
}

/*
 * Insert data into dispatch_planning_api_data table
 */

function dispatch_planning_api_data($api_data) {
  if (!empty($api_data)) {
      $query = db_insert('dispatch_planning_api_data');
      $fields = array(
        'jobType' => $api_data['jobType'],
        'referenceNo' => $api_data['referenceNo'],
        'date' => $api_data['date'],
        'city' => $api_data['city'],
        'hub' => $api_data['hub'],
        'fieldExecutive' => $api_data['fieldExecutive'],
        'fieldExecutiveName' => $api_data['fieldExecutiveName'],
        'vehicle' => $api_data['jobData']['vehicle'],
        'party_hll_code' => $api_data['jobData']['party_hll_code'],
        'lat_longlatitude' => $api_data['jobData']['lat_long']['lat_longLatitude'],
        'lat_longlongitude' => $api_data['jobData']['lat_long']['lat_longLongitude'],
        'bill_value' => $api_data['jobData']['bill_value'],
        'bill_date' => $api_data['jobData']['bill_date'],
        'locality' => $api_data['jobData']['locality'],
        'store_sequence_no' =>$api_data['jobData']['store_sequence_no'],
        'party_name' => $api_data['jobData']['party_name'],
        'beat_name' => $api_data['jobData']['beat_name'],
        'party_code' => $api_data['jobData']['party_code'],
        'bill_number' => $api_data['jobData']['bill_number'],
        'runsheet_number' => $api_data['jobData']['runsheet_number'],
      );
      $query->fields($fields);
      $result_id = $query->execute();
      return $result_id;
  }
}

/**
   * Insert data into dispatch_planning_item_details table
*/
function dispatch_planning_item_details($billing_data_details, $id) {
  if (!empty($billing_data_details)) {
    foreach ($billing_data_details as $data) {
      $query = db_insert('dispatch_planning_item_details');
      $fields = array(
        'tur' => $data['tur'],
        'mrp' => $data['mrp'],
        'product_name' => $data['product_name'],
        'sum_net_sales_cases' => $data['sum_net_sales_cases'],
        'sum_net_sales_quantity' => $data['sum_net_sales_quantity'],
        'og_sum_net_sales_quantity' => $data['og_Sum_of_NET_SALES_QTY'],
        'sku_code' => $data['sku_code'],
        'sum_net_sales_kgs' => $data['sum_net_sales_kgs'],
        'sum_net_sales_value' => $data['sum_net_sales_value'],
        'sku_description' => $data['sku_description'],
        'trip_bill_reference' => $id,
      );
      $query->fields($fields);
      $result_id = $query->execute();
    }
  }
}

/**
 * 
 * @param type $node_uid
 * @param type $bill_number
 * @return array
 */
function dispatch_planning_get_billing_data($node_uid, $bill_number) {
  $query = db_select('custom_billing_data', 'bd');
  $query->fields('bd', array('tur', 'mrp', 'product_name'));
  $query->addfield('bd', 'Sum_of_NET_SALES_CASES', 'sum_net_sales_cases');
  $query->addfield('bd', 'Sum_of_TOTAL_SALES_QTY', 'sum_net_sales_quantity');
  $query->addfield('bd', 'sku7_code', 'sku_code');
  $query->addfield('bd', 'Sum_of_NET_SALES_KGS', 'sum_net_sales_kgs');
  $query->addfield('bd', 'Sum_of_NET_SALES_QTY', 'og_Sum_of_NET_SALES_QTY');
  // send per unit value
  $query->addExpression('ROUND(((Sum_of_NET_SALES_VALUE - ((Sum_of_OTHER_DISCOUNT + Sum_of_SCHEME_DISCOUNT)*(1 + (Sum_of_TAX_PERCENTAGE/100))))/Sum_of_TOTAL_SALES_QTY), 2)', 'sum_net_sales_value');
  $query->addfield('bd', 'product_name', 'sku_description');
  $query->orderBy('bd.product_name', 'DESC');
  $query->condition('bd.distributor_id', $node_uid);
  $query->condition('bd.bill_number', $bill_number);
  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  return $res;
}

/**
 * 
 * @param type $node_uid
 * @param type $party_code
 * @return array
 */
function dispatch_planning_get_outlet_data($node_uid, $party_code) {
  $query = db_select('node', 'n');
  $query->condition('n.type', 'outlet_master');
  $query->condition('n.uid', $node_uid);
  //$query->join('field_data_field_sales_party_code', 'pc', 'pc.field_sales_party_code_value = n.title');
  $query->leftjoin('field_data_field_hul_code', 'hc', 'hc.entity_id = n.nid');
  $query->leftjoin('field_data_field_party_name', 'pn', 'pn.entity_id = n.nid');
  $query->leftjoin('field_data_field_beat_name', 'bn', 'bn.entity_id = n.nid');
  $query->leftjoin('field_data_field_hul_updated_lat', 'hl', 'hl.entity_id = n.nid');
  $query->leftjoin('field_data_field_hul_updated_long', 'ul', 'ul.entity_id = n.nid');

  $query->fields('bn', array('field_beat_name_value'));
  $query->fields('pn', array('field_party_name_value'));
  $query->fields('hc', array('field_hul_code_value'));
  $query->fields('hl', array('field_hul_updated_lat_value'));
  $query->fields('ul', array('field_hul_updated_long_value'));

  $query->condition('n.type', 'outlet_master');
  $query->condition('n.title', $party_code);

  $res = $query->execute()->fetch(PDO::FETCH_ASSOC);
  return $res;
}

/**
 * 
 * @param type $node_uid
 * @return string
 */
function dispatch_planning_check_api_authentication($node_uid) {
  $query = db_select('field_data_field_dispatch_planing_api', 'dp');
  $query->fields('dp', array('entity_id'));
  $query->condition('dp.field_dispatch_planing_api_value', 1);
  $query->condition('dp.entity_id', $node_uid);
  $res = $query->execute()->fetchField();
  return $res;
}


/**
 * 
 * @param type $json_api_data
 */
function dispatch_planning_api_log($json_api_data, $trip_id, $api_type, $dis_id, $api_flag = 0) {
  $sql_ins_id = db_insert('dispatch_planning_api_log')
    ->fields(array(
      'trip_id' => $trip_id,
      'distributor_id' => $dis_id,
      'request_data' => $json_api_data,
      'api_type' => $api_type, // pass vraiable defined in oxigen wallet configuratation form
      'request_time' => time(),
      'api_success' => $api_flag,
    ))
    ->execute();
  return $sql_ins_id;
}

/**
 * 
 * @param $response_data (json_decode), $sql_ins_id (serial id)
 */
function dispatch_planning_api_log_update($response_data, $sql_ins_id, $api_success) {
  db_update('dispatch_planning_api_log')
    ->fields(array(
      'response_data' => $response_data,
      'api_success' => $api_success,
      'request_flag' => 1
    ))
    ->condition('id', $sql_ins_id, '=')
    ->execute();
}


/**
 * 
 * @param type $distributor_id
 * @return type bool false when configuration is not set
 */
function check_dynamic_routing_configuration($distributor_id) {
  $query = db_select('field_data_field_dynamic_routing_config', 'tp');
  $query->fields('tp', array('entity_id'));
  $query->condition('tp.field_dynamic_routing_config_value', 1);
  $query->condition('tp.entity_id', $distributor_id);
  $res = $query->execute()->fetchField();
  return $res;
}



/**
 * Implements hook_node_update
 * @param type $node
 */
function dispatch_planning_node_update($node) {
   if ($node->type == 'dispatch_data') {
      $original_pre_start = $node->original->field_dispatch_pre_start_time[LANGUAGE_NONE][0]['value'];
      $new_pre_start = $node->field_dispatch_pre_start_time[LANGUAGE_NONE][0]['value'];
      if ($original_pre_start != $new_pre_start) {
          drupal_register_shutdown_function('_update_dispatch_planning_api', $node);
      }
   }
}

/**
 * function to update dispatch_planning_api table 
 *   and call api using drupal_http_request
 * $node type dispatch_data
 * @param object $node
 */
function _update_dispatch_planning_api($node) {

   if (!empty($node)) {
      $dis_id = $node->uid;
      // get api data here
      $api_authentication_flag = dispatch_planning_check_api_authentication($dis_id);

      if (!empty($api_authentication_flag)) {
         // $node passed is of type sales_regiser_data
         $trip_dispatch_date = strtotime($node->field_dispatch_date['und'][0]['value']);
         $vehicle_no = $node->field_vehicle_no['und'][0]['value'];
        // $hht_id = get_hht_id_from_nid($hht_nid);
         $cashier = $node->field_cashier_name['und'][0]['value'];
         $trip_id = $node->title;
         $nid = $node->nid;
         $res = _dispatch_planning_get_all_sales_nid($nid);

         if (!empty($res)) {
            foreach ($res as $key => $val) {
               $sales_nid = $val['nid'];
               $sales_node = node_load($sales_nid);
               $api_data[] = dispatch_planning_sales_reg_api($sales_node, $trip_dispatch_date, $vehicle_no, $cashier, $trip_id);
            }
         }
         // call api here
         // Call Dispatch API Here
         if (!empty($api_data)) {
            $json_api_data = json_encode($api_data);
            // request log
            $api_type = 'dispatch_planning';
            $sql_ins_id = dispatch_planning_api_log($json_api_data, $trip_id, $api_type, $dis_id);


            $request_headers = array('Content-Type' => 'application/json');
            //$order_api_url = 'https://staging.fareye.co/api/v1/job?api_key=l1S6xa5mnxUXDuqv12q7lerLBL9l1ICq';
            $order_api_url = variable_get('dispatch_uri_settings', 'https://staging.fareye.co/api/v1/job?api_key=l1S6xa5mnxUXDuqv12q7lerLBL9l1ICq');
            $options = array('headers' => $request_headers, 'method' => 'POST', 'data' => $json_api_data);
            $response_data = drupal_http_request($order_api_url, $options);

            $response_data = $response_data->data;
            $api_success = json_decode($response_data);
            $api_success = ($api_success->failCount == 0) ? 1 : 0;
            // create response log entry
            dispatch_planning_api_log_update($response_data, $sql_ins_id, $api_success);
         }
      }
   }
}

/**
 * 
 * @param type $nid
 * @return type
 */
//function get_hht_id_from_nid($nid) {
//   $result = '';
//   if (!empty($nid)) {
//      $query = db_select('node', 'n');
//      $query->fields('n', array('title'));
//      $query->condition('n.nid', $nid);
//      $result = $query->execute()->fetchField();
//   }
//   return $result;
//}

/**
 * _dispatch_planning_get_all_sales_nid list using trip nid
 * @param type $nid
 * @return type
 */
function _dispatch_planning_get_all_sales_nid($nid) {
   $res = array();
   if (!empty($nid)) {
      $query = db_select('node', 'n');
      $query->condition('n.type', 'sales_register_data');
      $query->join('field_data_field_promised_date', 'pro_date', 'pro_date.entity_id = n.nid');
      $query->join('field_data_field_trip_id_reference', 'ti', 'ti.entity_id = n.nid');
      $query->join('field_data_field_drs_sequence', 'ds', 'ds.entity_id = n.nid');
      $query->orderBy('ds.field_drs_sequence_value', 'ASC');
      $query->condition('ti.field_trip_id_reference_nid', $nid);
      $query->fields('n', array('nid'));
      $query->fields('pro_date', array('field_promised_date_value'));
      $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
   }
   return $res;
}

/**
 * 
 * @param type $node_uid
 * @return string
 */
function ptl_check_api_authentication($node_uid) {
  $query = db_select('field_data_field_ptl_data_configuration', 'tp');
  $query->fields('tp', array('entity_id'));
  $query->condition('tp.field_ptl_data_configuration_value', 1);
  $query->condition('tp.entity_id', $node_uid);
  $res = $query->execute()->fetchField();
  return $res;
}

/**
 * 
 * @param type $uid
 * @return string
 */
function dispatch_planning_get_rscode_using_uid($uid) {
  $query = db_select('field_data_field_third_party_username', 'rs');
  $query->condition('rs.entity_id', $uid);
  $query->fields('rs', array('field_third_party_username_value'));
  $res = $query->execute()->fetchField();
  return $res;
}

/**
 * 
 * @param type $sku7_code
 * @param type $distributor_id
 * @return type qty for sku in one unit case
 */
function get_sku_unit_case($sku7_code, $distributor_id) {
  $query = db_select('field_data_field_unit_case_units_', 'fucu');
  $query->fields('fucu', array('field_unit_case_units__value'));
  $query->join('field_data_field_sku7_code', 'sc', 'sc.entity_id = fucu.entity_id');
  $query->join('node', 'n', 'n.nid = fucu.entity_id');
  $query->condition('n.type', 'sku7_code_master');
  $query->condition('sc.field_sku7_code_value', $sku7_code, '=');
  $query->condition('n.uid', $distributor_id, '=');
  $res = $query->execute()->fetchField();
  return $res;
}

/**
 * 
 * @param type $sku7_code
 * @param type $rs_code
 * @return ean
 */
function get_sku_ean($sku7_code, $rs_code) {
  $query = db_select('sku_ean_mrp', 'p');
  $query->fields('p', array('ean','ean1','ean2','ean3'));
  $query->condition('p.rs_code', $rs_code, '=');
  $query->condition('p.sku', $sku7_code, '=');
  $result = $query->execute()->fetchAll();
  return $result;
}


function ptl_loading_sheet_by_trip_id($trip_id,$rs_code) {
  $query = db_select('ptl_data_configuration', 'pd');
  $query->addExpression("concat(vehicle ,' / ', DATE_FORMAT(CONVERT_TZ(FROM_UNIXTIME(loading_date),'+00:00','+05:30'), '%d-%b-%y'))", 'vehicle_loading');
  $query->condition('trip_id', $trip_id);
  $query->condition('rs_code', $rs_code);
  $query->groupBy('vehicle,loading_date');
  $results = $query->execute()->fetchAll();

  foreach ($results as $key => $value) {
    $vehicle_loading = $vehicle_loading . ', ' . $value->vehicle_loading;
  }

  return ltrim($vehicle_loading, ',');
}

function master_ptl_trip_ids_by_trip_id($trip_id,$rs_code) {
  $query = db_select('master_ptl_data', 'pd');
  $query->addExpression("GROUP_CONCAT(DISTINCT(trip_id))", 'trip_ids');
  $query->condition('ptl_job', $trip_id);
  $query->condition('rs_code', $rs_code);
  $results = $query->execute()->fetchField();

  return $results;
}


function ptl_no_of_bills_by_trip_id($trip_id,$rs_code) {
  $query = db_select('ptl_data_configuration', 'pd');
  $query->condition('trip_id', $trip_id);
  $query->condition('rs_code', $rs_code);
  $query->addExpression('count(DISTINCT(bill_number))','bill_number');
  $results = $query->execute()->fetchField();
  return $results;
}

function ptl_trip_date_by_trip_id($trip_id,$rs_code) {
  $query = db_select('ptl_data_configuration', 'pd');
  $query->condition('trip_id', $trip_id);
  $query->condition('rs_code', $rs_code);
  $query->fields('pd',array('created_time'));
  $results = $query->range(0,1)->execute()->fetchField();
  return $results;
}

function master_ptl_trip_date_by_trip_id($trip_id,$rs_code) {
  $query = db_select('master_ptl_data', 'pd');
  $query->condition('ptl_job', $trip_id);
  $query->condition('rs_code', $rs_code);
  $query->fields('pd',array('created_time'));
  $results = $query->range(0,1)->execute()->fetchField();
  return $results;
}

function get_rsname_using_rscode($rs_code) {
  $query = db_select('field_data_field_name', 'fn');
  $query->join('field_data_field_third_party_username', 'tpu', 'tpu.entity_id = fn.entity_id');
  $query->condition('tpu.field_third_party_username_value', $rs_code);
  $query->fields('fn', array('field_name_value',entity_id));
  $res = $query->execute()->fetchField();  
  return $res;
}

function ptl_no_of_bill_lines_by_trip_id($trip_id,$rs_code){
  $query = db_select('ptl_data_configuration', 'pd');
  $query->condition('trip_id', $trip_id);
  $query->condition('rs_code', $rs_code);
  $query->condition('loose', 1, '>=');
  $query->addExpression('count(id)','no_of_id');
  $results = $query->execute()->fetchField();
  return $results;
}

function master_ptl_no_of_bill_lines_by_trip_id($trip_id,$rs_code){
  $query = db_select('master_ptl_data', 'pd');
  $query->condition('ptl_job', $trip_id);
  $query->condition('rs_code', $rs_code);
  $query->condition('loose', 1, '>=');
  $query->addExpression('count(id)','no_of_id');
  $results = $query->execute()->fetchField();
  return $results;
}