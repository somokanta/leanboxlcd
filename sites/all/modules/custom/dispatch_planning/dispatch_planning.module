<?php

require_once DRUPAL_ROOT .  '/sites/all/modules/custom/reverse_geocode/directions-api-clients-route-optimization-master/php/SwaggerClient-php/autoload.php';

function dispatch_planning_menu() {

  $items['admin/dispatch-planning'] = array(
    'title' => 'Dispatch Planning',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dispatch_planning_form'),
    'access arguments' => array('dispatch planning screen'),
    'type' => MENU_NORMAL_ITEM,
      // Page callback, etc. need to be added here.
  );
  $items['admin/dispatch-planning/form'] = array(
    'title' => 'Dispatch Planning',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
      // Access callback, page callback, and theme callback will be inherited
      // from 'admin/config/system/foo', if not specified here to override.
  );
  $items['admin/dispatch-planning/delete'] = array(
    'title' => 'Delete trips',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('trip_delete_form'),
    'access arguments' => array('dispatch planning screen'),
    'weight' => 2,
      // Page callback and theme callback will be inherited from
      // 'admin/config/system/foo', if not specified here to override.
      // Need to add access callback or access arguments.
  );
  $items['admin/dispatch-planning/delivery-pending'] = array(
    'title' => 'Delivery Pending',
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('delivery_pending_form'),
    'access arguments' => array('dispatch planning screen'),
    'file' => 'delivery_pending.form.inc',
    'weight' => 1,
      // Page callback and theme callback will be inherited from
      // 'admin/config/system/foo', if not specified here to override.
      // Need to add access callback or access arguments.
  );


  $items['modified-van-autocomplete-callback/%'] = array(
    'title' => 'Get All Modified Van',
    'page callback' => 'get_modified_van_from_loading_date',
    'access callback' => TRUE,
    'page arguments' => array(1),
  );
  $items['bill/autocomplete'] = array(
    'title' => 'bill_autocomplete',
    'page callback' => 'bill_autocomplete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['bill/pending/autocomplete'] = array(
    'title' => 'bill_autocomplete',
    'page callback' => 'bill_autocomplete',
    'page arguments' => array(4, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['trip/autocomplete'] = array(
    'title' => 'trip_id_autocomplete',
    'page callback' => 'trip_id_autocomplete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['vehicle/autocomplete'] = array(
    'title' => 'vehicle_names_autocomplete',
    'page callback' => 'vehicle_names_autocomplete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['hht_id/autocomplete'] = array(
    'title' => 'hht_id_autocomplete',
    'page callback' => 'hht_id_autocomplete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['cashier/autocomplete'] = array(
    'title' => 'cashier_names_autocomplete',
    'page callback' => 'cashier_names_autocomplete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );


  return $items;
}

function dispatch_planning_permission() {

  return array(
    'dispatch planning screen' => array(
      'title' => t('dispatch planning screen'),
      'description' => t('View and operate the dispatch planning screen')
    ),
  );
}

function dispatch_planning_form($form, &$form_state) {

  $form['#prefix'] = '<div id="itemlist-div">';
  $form['#suffix'] = '</div>';

  $form['#attached']['js'][] = drupal_get_path('module', 'dispatch_planning') . '/js/dispatch_planning_form.js';
  $form['#attached']['css'][] = drupal_get_path('module', 'dispatch_planning') . '/css/dispatch_planning.css';

  $form['loading_date'] = array(
    '#prefix' => '<div class="textfield-wrapper">',
    '#type' => 'date_popup',
    '#date_format' => 'm/d/y',
    '#title' => t('Loading date'),
    '#date_label_position' => '',
    //'#default_value' => empty($variables['from_date']) ? NULL : format_date($variables['from_date'], $type = 'custom', $format = 'Y-m-d H:i:s'),
    '#date_year_range' => '-200:+0',
    '#size' => 30,
    '#ajax' => array(
      'event' => 'change',
      'callback' => 'loading_date_ajax_callback',
      'wrapper' => 'van-wrapper',
    ),
    '#required' => TRUE,
  );

  $form['van'] = array(
    '#type' => 'select',
    '#title' => t('Van'),
    '#prefix' => '<div id="van-wrapper">',
    '#suffix' => '</div>',
    //'#autocomplete_path' => 'modified-van-autocomplete-callback',
    '#ajax' => array(
      'event' => 'change',
      'callback' => 'van_ajax_callback',
      'wrapper' => 'beat-wrapper',
    ),
    '#options' => array(),
    '#required' => TRUE,
    '#validated' => TRUE
  );
  $form['beat_name'] = array(
    '#type' => 'select',
    '#title' => t('Sales Beat'),
    '#prefix' => '<div id="beat-wrapper">',
    '#suffix' => '</div>',
    //'#autocomplete_path' => 'modified-van-autocomplete-callback',
    '#options' => array('' => 'All'),
  );
  if (isset($form_state['triggering_element']) && ($form_state['triggering_element']['#name'] == 'loading_date')) {
    if (!empty($form_state['values']['loading_date']) && is_string($form_state['values']['loading_date'])) {
      $form['van']['#options'] = get_modified_van_from_loading_date(strtotime($form_state['values']['loading_date']));
    }
  }

  if (isset($form_state['triggering_element']) && ($form_state['triggering_element']['#name'] == 'van')) {
    if (!empty($form_state['values']['van'])) {
      $form['beat_name']['#options'] = array('' => 'All') + get_beat_name_from_loading_date_and_van(strtotime($form_state['values']['loading_date']), $form_state['values']['van']);
    }
  }
  $form['van_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add Van'),
    '#ajax' => array(
      'wrapper' => 'itemlist-div',
      'callback' => 'custom_ajax_callback',
      'method' => 'replace',
      'effect' => 'fade',
    ),
    '#validate' => array('van_ajax_validate'),
    '#submit' => array('van_ajax_submit'),
    '#limit_validation_errors' => array(array('loading_date'), array('van'), array('beat_name')),
    '#suffix' => '</div>',
  );


  $form['divider1'] = array(
    '#markup' => '<div class="or"><span>OR</span></div>',
  );

  $form['bill_number'] = array(
    '#prefix' => '<div class="textfield-wrapper">',
    '#type' => 'textfield',
    '#title' => t('Bill number'),
    '#required' => TRUE,
    '#autocomplete_path' => 'bill/autocomplete'
  );

  $form['bill_number_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add Bill'),
    '#ajax' => array(
      'wrapper' => 'itemlist-div',
      'callback' => 'custom_ajax_callback',
      'method' => 'replace',
      'effect' => 'fade',
    ),
    '#submit' => array('bill_number_ajax_submit'),
    '#validate' => array('bill_number_ajax_validate'),
    '#limit_validation_errors' => array(array('bill_number')),
    '#suffix' => '</div>',
  );

//  $form['divider2'] = array(
//    '#markup' => '<div>----OR----</div>',
//  );
//
//  $form['trip_id'] = array(
//    '#type' => 'textfield',
//    '#title' => t('Trip id'),
//    '#required' => TRUE,
//    '#autocomplete_path' => 'trip/autocomplete'
//  );
//
//  $form['trip_id_submit'] = array(
//    '#type' => 'submit',
//    '#value' => t('Add Trip id'),
//    '#ajax' => array(
//      'wrapper' => 'itemlist-div',
//      'callback' => 'custom_ajax_callback',
//      'method' => 'replace',
//      'effect' => 'fade',
//    ),
//    '#submit' => array('trip_id_ajax_submit'),
//    '#validate' => array('trip_id_ajax_validate'),
//    '#limit_validation_errors' => array(array('trip_id')),
//  );


  if (!isset($form_state['dispatch_planning']['bills'])) {
    $form_state['dispatch_planning']['bills'] = array();
  }
  $options = $form_state['dispatch_planning']['bills'];

  $headers = array(
    'bill_number' => 'Bill Number',
    'party_name' => 'Party name',
    'bill_value' => 'Value',
    'van_loading_date' => 'Existing Van/Loading Date',
    //'sequence' => 'Delivery Sequence',
    //'trip_id' => 'Trip ID',
    'sales_beat' => 'Sales Beat'
  );


  foreach ($headers as $key => $value) {
    $sort_options[$key . ':asc'] = $value . ' - Asc';
    $sort_options[$key . ':desc'] = $value . ' - Desc';
  }


  $form['sort'] = array(
    '#type' => 'select',
    '#options' => $sort_options,
    '#ajax' => array(
      'wrapper' => 'itemlist-div',
      'callback' => 'custom_ajax_callback',
      'method' => 'replace',
      'effect' => 'fade',
    ),
    '#attributes' => array(
      'class' => array('sort-select', 'element-invisible'),
    ),
  );

  if (isset($form_state['triggering_element']) && ($form_state['triggering_element']['#name'] == 'sort')) {
    $active = explode(':', $form_state['values']['sort']);
    $form_state['dispatch_planning']['sort_field'] = $active[0];
    $form_state['dispatch_planning']['sort_order'] = $active[1];
  }

  if (isset($form_state['dispatch_planning']['sort_field'])) {
    $active_sort = $form_state['dispatch_planning']['sort_field'];
  }
  if (isset($form_state['dispatch_planning']['sort_order'])) {
    $active_order = $form_state['dispatch_planning']['sort_order'];
  }
  if ($active_order == 'asc') {
    $next_order = 'desc';
  }
  elseif ($active_order == 'desc') {
    $next_order = 'asc';
  }

  foreach ($headers as $k => $header) {
    $header_array[$k] = array(
      'data' => array(
        '#type' => 'link',
        '#title' => $header . (($active_sort == $k && $next_order) ? theme('tablesort_indicator', array('style' => $next_order)) : ''),
        '#href' => '',
        '#attributes' => array(
          'class' => ($active_sort == $k) ? array('active', 'header-link') : array('header-link'),
          'id' => $k,
          'data-sort' => ($active_sort == $k && $next_order) ? $next_order : '',
        ),
        '#options' => array(
          'html' => true,
        )
      ),
    );
  }

  if ($options) {
    if (isset($active_sort)) {
      $sort = ($active_sort == 'van_loading_date') ? 'van_loading_date_timestamp' : $active_sort;
      $options = _get_header_sort($options, $sort, $active_order);
    }

    $form['list_form_items'] = array(
      '#type' => 'tableselect',
      '#header' => $header_array,
      '#options' => $options,
      '#prefix' => '<div id="table-div">',
      '#suffix' => '</div>',
      '#empty' => t('No forms available.'),
      '#multiple' => TRUE,
    );

    $form['remove_selected'] = array(
      '#type' => 'submit',
      '#value' => t('Remove Checked items'),
      '#ajax' => array(
        'wrapper' => 'itemlist-div',
        'callback' => 'custom_ajax_callback',
        'method' => 'replace',
        'effect' => 'fade',
      ),
      '#submit' => array('remove_selected_ajax_submit'),
      '#limit_validation_errors' => array(array('list_form_items')),
    );

    $form['sequence'] = array('#type' => 'value');
    $form['header'] = array('#type' => 'value');

    $bill_count = count($options);
    $bill_value_sum = array_sum(array_map(
            function($item) {
          return $item['bill_value'];
        }, $options)
    );
    $form_state['dispatch_planning']['bill_value_sum'] = $bill_value_sum;

    $form['bill_summary'] = array(
      '#theme' => 'item_list',
      '#items' => array(
        'Bill Count : ' . $bill_count,
        'Bill Value : ' . $bill_value_sum,
      ),
    );

    $form['trip_execution_date'] = array(
      '#prefix' => '<div class="textfield-wrapper bottom-wrapper">',
      '#type' => 'date_popup',
      '#date_format' => 'm/d/y',
      '#title' => t('Trip Execution Date'),
      '#date_label_position' => '',
      '#date_year_range' => '-200:+0',
      '#size' => 30,
      '#required' => TRUE,
      '#ajax' => array(
        'event' => 'change',
        'callback' => 'trip_execution_date_ajax_callback',
        'wrapper' => 'hht-id-wrapper',
      ),
    );

    $form['hht_id'] = array(
      '#type' => 'textfield',
      '#title' => t('HHT ID'),
      '#required' => TRUE,
      '#prefix' => '<div id="hht-id-wrapper">',
      '#suffix' => '</div></div>',
      '#attributes' => array('readonly' => 'readonly'),
    );

    if (isset($form_state['triggering_element']) && ($form_state['triggering_element']['#name'] == 'trip_execution_date')) {

      if (!empty($form_state['values']['trip_execution_date']) && is_string($form_state['values']['trip_execution_date'])) {
        $date = strtotime($form_state['values']['trip_execution_date']);
        unset($form['hht_id']['#attributes']['readonly']);
        $form['hht_id']['#autocomplete_path'] = 'hht_id/autocomplete/' . $date;
      }
    }

    $form['vehicle_number'] = array(
      '#prefix' => '<div class="textfield-wrapper bottom-wrapper"><div id="vehicle-wrapper">',
      '#type' => 'textfield',
      '#title' => t('Vehicle Number'),
      '#autocomplete_path' => 'vehicle/autocomplete',
      '#suffix' => '</div>',
    );

    $form['cashier'] = array(
      '#prefix' => '<div id="cashier-wrapper">',
      '#type' => 'textfield',
      '#title' => t('Cashier name'),
      '#autocomplete_path' => 'cashier/autocomplete',
      '#suffix' => '</div></div>',
    );
    $form['skip_sequencing'] = array(
      '#type' => 'checkbox',
      '#title' => t('Check this to skip sequencing of bills'),
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Save',
      '#limit_validation_errors' => array(array('trip_execution_date'), array('hht_id'), array('vehicle_number'), array('cashier'), array('list_form_items'), array('skip_sequencing')),
      '#submit' => array('dispatch_planning_form_save_submit'),
      '#validate' => array('dispatch_planning_form_save_validate')
    );
  }
  return $form;
}

function trip_execution_date_ajax_callback($form, &$form_state) {
  return $form['hht_id'];
}

function loading_date_ajax_callback($form, &$form_state) {
  return $form['van'];
}

function van_ajax_callback($form, &$form_state) {
  return $form['beat_name'];
}

function custom_ajax_callback($form, &$form_state) {
  return $form;
}

function van_ajax_validate($form, &$form_state) {

  $van = $form_state['values']['van'];

  if (empty($van)) {
    form_set_error('van', 'Van number is required');
  }
}

function van_ajax_submit(&$form, &$form_state) {

  $van = $form_state['values']['van'];
  $loading_date = strtotime($form_state['values']['loading_date']);
  $beat_name = $form_state['values']['beat_name'];

  unset($form_state['input']['loading_date']);
  unset($form_state['input']['van']);
  $form['van']['#options'] = array();
  if (!empty($beat_name)) {
    $bills = get_bill_info(NULL, $van, $loading_date, $beat_name);
  }
  else {
    $bills = get_bill_info(NULL, $van, $loading_date);
  }
  $form_state['dispatch_planning']['bills'] += $bills;
  $form_state['rebuild'] = TRUE;
}

function bill_number_ajax_validate($form, &$form_state) {
  $bill_number = $form_state['values']['bill_number'];

  $query = db_select('node', 'n');
  $query->condition('n.title', $bill_number);
  $query->condition('n.type', 'sales_register_data');
  $query->fields('n', array('title'));
  $query->addTag('node_distributor_access');
  $result = $query->execute()->fetchField();

  if (empty($result)) {
    form_set_error('bill_number', 'Bill number does not exist');
  }
}

function bill_number_ajax_submit($form, &$form_state) {
  $bill_number = $form_state['values']['bill_number'];

  unset($form_state['input']['bill_number']);

  $bill_info = get_bill_info($bill_number);
  if (!empty($bill_info)) {
    $form_state['dispatch_planning']['bills'] += $bill_info;
  }

  $form_state['rebuild'] = TRUE;
}

//function trip_id_ajax_validate($form, &$form_state) {
//  $trip_id = $form_state['values']['trip_id'];
//
//  $query = db_select('node', 'n');
//  $query->condition('n.title', $trip_id);
//  $query->condition('n.type', 'dispatch_data');
//  $query->fields('n', array('title'));
//  $query->addTag('node_distributor_access');
//  $result = $query->execute()->fetchField();
//
//  if (empty($result)) {
//    form_set_error('trip_id', 'Trip ID does not exist');
//  }
//}
//
//function trip_id_ajax_submit($form, &$form_state) {
//  $trip_id = $form_state['values']['trip_id'];
//
//  unset($form_state['input']['trip_id']);
//
//  $bill_info = get_bill_info(NULL, NULL, NULL, $trip_id);
//  if (!empty($bill_info)) {
//    $form_state['dispatch_planning']['bills'] += $bill_info;
//  }
//
//  $form_state['rebuild'] = TRUE;
//}

function remove_selected_ajax_submit($form, &$form_state) {

  $checked = array_filter($form_state['values']['list_form_items']);

  if (!empty($checked)) {
    $form_state['dispatch_planning']['bills'] = array_diff_key($form_state['dispatch_planning']['bills'], array_flip($checked));
  }
  $form_state['rebuild'] = TRUE;
}

function dispatch_planning_form_save_validate($form, &$form_state) {
  require_once drupal_get_path('module', 'change_feeds_import') . '/form/upload_billing_data.inc';
  
  global $user;
  $user_id = $user->uid;
  $distributor_id = change_feeds_import_get_distributor_id($user_id);
  
  $rows = $form_state['values']['list_form_items'];
  $cashier = trim($form_state['values']['cashier']);
  $vehicle_number = trim($form_state['values']['vehicle_number']);
  $trip_execution_date = strtotime($form_state['values']['trip_execution_date']);
  $hht_id = trim($form_state['values']['hht_id']);
  
  $skip_sequencing = $form_state['values']['skip_sequencing'];
  
  $bill_nids = array_keys($rows);

  $today = strtotime(date('Y-m-d 00:00:00'));

  if ($trip_execution_date < $today) {
    form_set_error('trip_execution_date', 'Trip execution date cannot be a previous date');
  }
  if (!empty(array_filter($rows))) {
    form_set_error('list_form_items', 'Please uncheck all rows');
  }

  if ($hht_id && $trip_execution_date) {
    if (empty(validate_hht_id($trip_execution_date, $hht_id))) {
      form_set_error('hht_id', 'HHT id invalid or HHT id already exists for this date');
    }
  }

  if (!empty($cashier) && empty(validate_cashier($cashier))) {
    form_set_error('cashier', 'Please enter a valid cashier');
  }
  if (!empty($vehicle_number) && empty(validate_vehicle_number($vehicle_number))) {
    form_set_error('vehicle_number', 'Please enter a valid vehicle number');
  }
  
  ##############################################################################
  $query = db_select('node', 'n');
  $query->leftJoin('field_data_field_sales_party_code', 'spc', 'n.nid = spc.entity_id');

  $query->leftJoin('node', 'no', "no.title = spc.field_sales_party_code_value AND no.type = 'outlet_master' AND no.uid = $distributor_id");
  $query->leftJoin('field_data_field_revised_sequence', 'fs', 'fs.entity_id = no.nid');
  $query->leftJoin('field_data_field_area_hook', 'fa', 'fa.entity_id = no.nid');

  $query->leftJoin('field_data_field_hul_code', 'fh', 'fh.entity_id = no.nid');
  $query->leftJoin('node', 'hul', "fh.field_hul_code_value = hul.title AND hul.type = 'hul_code_master' AND hul.uid = $distributor_id");
  $query->leftJoin('field_data_field_hul_updated_lat', 'flat', 'flat.entity_id = hul.nid');
  $query->leftJoin('field_data_field_hul_updated_long', 'flong', 'flong.entity_id = hul.nid');

  $query->leftJoin('node', 'ndvp', 'ndvp.nid = fa.field_area_hook_nid');
  $query->leftJoin('field_data_field_dva_sales_day', 'da', 'da.entity_id = ndvp.nid');
  $query->leftJoin('field_data_field_dva_van_pl_group', 'fv', 'fv.entity_id = ndvp.nid');
  $query->leftJoin('field_data_field_dva_area_hook_group_name', 'gn', 'gn.entity_id = ndvp.nid');
  $query->addField('gn', 'field_dva_area_hook_group_name_value', 'area_hook_group_name');

  $query->addField('n', 'nid');
  $query->condition('n.uid', $distributor_id);
  $query->addField('n', 'title', 'bill_number');
  $query->condition('n.nid', $bill_nids, 'IN');

  $query->addField('no', 'title', 'party_code');
  $query->addField('fs', 'field_revised_sequence_value', 'sequence');
  $query->addField('fa', 'field_area_hook_nid', 'area_hook');
  
  $query->addField('flat', 'field_hul_updated_lat_value', 'lat');
  $query->addField('flong', 'field_hul_updated_long_value', 'lng');
  
  $query->orderBy('ISNULL(da.field_dva_sales_day_value)');
  $query->orderBy('da.field_dva_sales_day_value');
  $query->orderBy('ISNULL(fv.field_dva_van_pl_group_value)');
  $query->orderBy('fv.field_dva_van_pl_group_value');
  $query->orderBy('ISNULL(gn.field_dva_area_hook_group_name_value)');
  $query->orderBy('gn.field_dva_area_hook_group_name_value');
  $query->orderBy('ISNULL(fs.field_revised_sequence_value)');
  $query->orderBy('fs.field_revised_sequence_value');

  $res = $query->execute()->fetchAll();
    
  $bill_count = count($res);
  $sequence = $no_area = 0;
  
  $s = 1;
  foreach ($res as $val) {
    
    $manual_drs_sequence[$val->nid] = $s;
    $s++;
    
    if (!empty($val->lat) && !empty($val->lng)) {
      $params['services'][] = array('id' => $val->nid, 'address' => array('location_id' => $val->nid, 'lon' => (double)$val->lng, 'lat' => (double)$val->lat));
    }

    if (is_null($val->sequence)) {
      $no_sequence = 1;
    }
    else{
      $sequence_array[$val->nid] = $val->sequence;
    }

    if (is_null($val->area_hook)) {
      $no_area = 1;
    }
    else {
      $area_hook[$val->area_hook] = $val->area_hook;
    }
    
    if (is_null($val->area_hook_group_name)) {
      $area_hook_group_name = 1;
    }
    else {
      $area_hook_group_name[$val->area_hook_group_name] = $val->area_hook_group_name;
    }
    
  }
  
  $form_state['dispatch_planning']['sequence_array'] = $sequence_array;

  $conf_nid = $form_state['leanbox_misc']['nid'] = check_node_title_exists($distributor_id, 'van_stop_master');
  if ($conf_nid) {
    $node = node_load($conf_nid);
    $origin_lat = $node->field_distributor_latitude[LANGUAGE_NONE][0]['value'];
    $origin_long = $node->field_distributor_longitude[LANGUAGE_NONE][0]['value'];
    $enable_routing = $node->field_enable_routing[LANGUAGE_NONE][0]['value'];
  }

  $bill_sequence_array = array();
  if(($no_area || $no_sequence || $area_hook_group_name || count($area_hook_group_name) > 1) && !$skip_sequencing && $origin_lat && $origin_long && $enable_routing){
        
    $params['vehicles'][] = array('vehicle_id' => 'origin', 'start_address' => array('location_id' => 'origin', 'lon' => (double)$origin_long, 'lat' => (double)$origin_lat), 'return_to_depot' => true);
    $post_result = graphhopper_postvrp_api($params);
    if ($post_result) {
      $job_id = $post_result->getJobId();
      if ($job_id) {

        for ($j = 0; $j < 10; $j++) {
          $solution = graphhopper_solution_api($job_id);
          if ($solution) {
            if ($solution->getStatus() == 'finished') {

              $routes = $solution->getSolution()->getRoutes();

              $data = $routes[0]->getActivities();

              $i = 1;
              foreach ($data as $key => $value) {
                if ($value->getType() == 'service') {
                  $bill_sequence_array[$i] = $value->getLocationId();
                  $i ++;
                }
              }
              break;
            }
          }
          sleep(0.5); // this should halt for 500 ms for every loop
        }
      }
    }
    
    if (!empty($bill_sequence_array)) {
      $form_state['dispatch_planning']['bill_sequence_array'] = $bill_sequence_array;
    }
    else {
      form_set_error('list_form_items', 'An error occured while generating sequence');
    }
  }
  
  $form_state['dispatch_planning']['manual_drs_sequence'] = $manual_drs_sequence;
  ##############################################################################
}

function dispatch_planning_form_save_submit($form, &$form_state) {
  $rows = $form_state['values']['list_form_items'];
  $cashier = trim($form_state['values']['cashier']);
  $vehicle_number = trim($form_state['values']['vehicle_number']);
  $trip_execution_date = strtotime($form_state['values']['trip_execution_date']);
  $hht_id = trim($form_state['values']['hht_id']);

  $dispatch_bill_count = count($rows);
  $bill_value_sum = $form_state['dispatch_planning']['bill_value_sum'];

  $bill_nids = array_keys($rows);

  global $user;
  $user_id = $user->uid;
  $distributor_id = change_feeds_import_get_distributor_id($user_id);

  if (isset($form_state['dispatch_planning']['bill_sequence_array']) && !empty($form_state['dispatch_planning']['bill_sequence_array'])) {
    $bill_sequence = $form_state['dispatch_planning']['bill_sequence_array'];
    $seq_flag = 1;
  }

  $txn = db_transaction();

  $query = db_select('trip_id_sequence', 'ts');
  $query->forUpdate();
  $query->addField('ts', 'next_id');
  $query->condition('ts.distributor_id', $distributor_id);
  $trip_id = $query->execute()->fetchField();


  if ($trip_id) {
    // Increment the next_value.
    db_update('trip_id_sequence')
      ->fields(array('next_id' => $trip_id + 1))
      ->condition('distributor_id', $distributor_id)
      ->execute();
  }
  else {
    $trip_id = 1;
    $insert = db_insert('trip_id_sequence')
      ->fields(array(
      'distributor_id' => $distributor_id,
      'next_id' => $trip_id + 1
    ));
    $insert->execute();
  }

  $node = new stdClass();
  $node->title = $trip_id;
  $node->type = "dispatch_data";
  node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
  $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
  $node->uid = $user->uid;
  $node->status = 1; //(1 or 0): published or not
  $node->comment = 0; // 0 = comments disabled, 1 = read only, 2 = read/write
  $node->field_bill_count[$node->language][0]['value'] = $dispatch_bill_count;
  $node->field_dispatch_bill_value[$node->language][0]['value'] = $bill_value_sum;
  $node->field_cashier_name[$node->language][0]['value'] = $cashier;
  $node->field_vehicle_no[$node->language][0]['value'] = $vehicle_number;
  $node->field_trip_id[$node->language][0]['value'] = $trip_id;
  $node->field_trip_creation_date[$node->language][0]['value'] = strtotime(date('Y/m/d 00:00:00'));
  $node->field_trip_executon_date[$node->language][0]['value'] = $trip_execution_date;
  $node->field_hht_id[$node->language][0]['nid'] = get_nid_from_hht_id($hht_id);

  if ($seq_flag) {
    $node->field_sequence_method[$node->language][0]['value'] = 1;
  }
  else {
    $node->field_sequence_method[$node->language][0]['value'] = 0;
  }

  $node = node_submit($node); // Prepare node for saving
  node_save($node);

  $nid = $node->nid;

  $bill_nids = array_keys($rows);

  $sequence_array = $form_state['dispatch_planning']['sequence_array'];
  $manual_drs_sequence = $form_state['dispatch_planning']['manual_drs_sequence'];

  // Start Dispatch API here
  $api_data = array();

  if ($seq_flag) {

    foreach ($bill_sequence as $key => $value) {

      $node = node_load($value);

      $node->field_bill_sequence[LANGUAGE_NONE][0]['value'] = $key;
      $node->field_drs_sequence[LANGUAGE_NONE][0]['value'] = $key;

      if (isset($node->field_delivery_pending[LANGUAGE_NONE])) {
        $node->field_delivery_pending = array();
      }
      $node->field_trip_id_reference[LANGUAGE_NONE][0]['nid'] = $nid;
      node_save($node);

      // get api data here
     // $api_authentication_flag = dispatch_planning_check_api_authentication($node->uid);
     // if (!empty($api_authentication_flag)) {
        $api_data[] = dispatch_planning_sales_reg_api($value, $node, $trip_execution_date, $hht_id, $cashier, $trip_id);
    //  }
    }

    $diff = array_diff($bill_nids, $bill_sequence);
    if (!empty($diff)) {
      foreach ($diff as $value) {
        $node = node_load($value);

        $node->field_drs_sequence[LANGUAGE_NONE][0]['value'] = ++$key;

        if (isset($node->field_delivery_pending[LANGUAGE_NONE])) {
          $node->field_delivery_pending = array();
        }
        $node->field_trip_id_reference[LANGUAGE_NONE][0]['nid'] = $nid;
        node_save($node);

        // get api data here
       // $api_authentication_flag = dispatch_planning_check_api_authentication($node->uid);
       // if (!empty($api_authentication_flag)) {
          $api_data[] = dispatch_planning_sales_reg_api($value, $node, $trip_execution_date, $hht_id, $cashier, $trip_id);
       // }
      }
    }
  }
  else {
    foreach ($bill_nids as $value) {
      $node = node_load($value);


      if (isset($sequence_array[$value]) && !empty($sequence_array[$value])) {
        $node->field_bill_sequence[LANGUAGE_NONE][0]['value'] = $sequence_array[$value];
      }
      $node->field_drs_sequence[LANGUAGE_NONE][0]['value'] = $manual_drs_sequence[$value];

      if (isset($node->field_delivery_pending[LANGUAGE_NONE])) {
        $node->field_delivery_pending = array();
      }
      $node->field_trip_id_reference[LANGUAGE_NONE][0]['nid'] = $nid;
      node_save($node);

      // get api data here
     // $api_authentication_flag = dispatch_planning_check_api_authentication($node->uid);
     // if (!empty($api_authentication_flag)) {
        $api_data[] = dispatch_planning_sales_reg_api($value, $node, $trip_execution_date, $hht_id, $cashier, $trip_id);
     // }
    }
  }

  // Call Dispatch API Here
  if (!empty($api_data)) {

    $json_api_data = json_encode($api_data);
    // request log
    $api_type = 'dispatch_planning';
    $sql_ins_id = dispatch_planning_api_log($api_data, $trip_id, $api_type);

    $request_headers = array('Content-Type' => 'application/json');
    $order_api_url = 'https://staging.fareye.co/api/v1/job?api_key=l1S6xa5mnxUXDuqv12q7lerLBL9l1ICq';
    $options = array('headers' => $request_headers, 'method' => 'POST', 'data' => $json_api_data);
    $response_data = drupal_http_request($order_api_url, $options);

    // create response log entry
    dispatch_planning_api_log_update($response_data, $sql_ins_id);
  }

  drupal_set_message('Successfully updated. Trip id ' . $trip_id);
}

function get_bill_info($bill_number, $van = NULL, $loading_date = NULL, $beat_name = NULL, $trip_id = NULL, $delivery_pending = NULL) {

  global $user;
  $user_id = $user->uid;
  $distributor_id = change_feeds_import_get_distributor_id($user_id);
  $query = db_select('node', 'n');
  $query->leftJoin('field_data_field_bill_value', 'bv', 'n.nid = bv.entity_id');
  $query->leftJoin('field_data_field_sales_party_code', 'spc', 'n.nid = spc.entity_id');
  $query->leftJoin('field_data_field_billing_loading_date', 'ld', 'n.nid = ld.entity_id');
  $query->leftJoin('field_data_field_billing_van', 'v', 'n.nid = v.entity_id');
  $query->leftJoin('field_data_field_delivery_pending', 'dp', 'n.nid = dp.entity_id');
  $query->leftJoin('field_data_field_trip_id_reference', 't', 'n.nid = t.entity_id');
  $query->leftJoin('node', 'nt', 'nt.nid = t.field_trip_id_reference_nid');

  $query->leftJoin('field_data_field_party_code', 'pc', 'pc.field_party_code_value = spc.field_sales_party_code_value');
 // $query->leftJoin('field_data_field_party_code', 'ppc', 'pc.field_party_code_value = ppc.field_party_code_value');
  $query->condition('pc.bundle', 'outlet_master');
  $query->join('node', 'oun', 'oun.nid = pc.entity_id');
  $query->condition('oun.uid', $distributor_id, '=');

  $query->leftJoin('field_data_field_party_name', 'pn', 'pn.entity_id = oun.nid');
  $query->leftJoin('field_data_field_beat_name', 'bn', 'bn.entity_id = oun.nid');


  $query->addField('n', 'nid', 'nid');
  $query->addField('n', 'title', 'bill_number');

  $query->addField('pn', 'field_party_name_value', 'party_name');
  $query->addField('bv', 'field_bill_value_value', 'bill_value');

  //$query->addField('nt', 'title', 'trip_id');

  $query->addExpression("CONCAT_WS(' - ', field_billing_van_value, FROM_UNIXTIME(field_billing_loading_date_value, '%m/%d/%y'))", 'van_loading_date');


  $query->addField('bn', 'field_beat_name_value', 'sales_beat');

  $db_or = db_or();
  $db_or->condition('pc.bundle', 'outlet_master');
  $db_or->isNull('pc.bundle');

  $query->condition($db_or);

  if (!is_null($bill_number)) {
    $query->condition('n.title', $bill_number);
  }
  if (!is_null($van)) {
    $query->condition('field_billing_van_value', $van);
  }
  if (!is_null($loading_date)) {
    $query->condition('field_billing_loading_date_value', $loading_date);
  }

  if (!is_null($trip_id)) {
    $query->condition('nt.title', $trip_id);
  }
  else {
    $query->addExpression("CONCAT_WS(' - ', field_billing_van_value, field_billing_loading_date_value)", 'van_loading_date_timestamp');
    
    if (!is_null($delivery_pending)) {
      $query->isNotNull('t.field_trip_id_reference_nid');
      $query->addField('dp', 'field_delivery_pending_value', 'field_delivery_pending_value');
    }
    else {
      $db_or2 = db_or();
      $db_or2->isNull('t.field_trip_id_reference_nid');
      $db_or2->condition('dp.field_delivery_pending_value', 1);
      $query->condition($db_or2);
    }
  }

  if (!is_null($beat_name)) {
    $query->condition('field_beat_name_value', $beat_name);
  }

  $query->condition('n.type', 'sales_register_data');
  $query->addTag('node_distributor_access');

  $res = $query->execute()->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_UNIQUE | PDO::FETCH_ASSOC);


//  foreach ($res as $key => $value) {
//    $res[$key]['sequence']['data'] = array(
//      '#type' => 'textfield',
//      '#title' => 'Sequence',
//      '#title_display' => 'invisible',
//      '#default_value' => '',
//      '#name' => "sequence[$key]",
//    );
//  }
  return $res;
}

function get_modified_van_from_loading_date($date, $string) {
  $result = array();
//  if (!empty($date) && !empty($string)) {
//    $query = db_select('field_data_field_billing_van', 'v');
//    $query->join('field_data_field_billing_loading_date', 'l', 'l.entity_id = v.entity_id');
//    $query->fields('v', array('field_billing_van_value'));
//    $query->condition('l.field_billing_loading_date_value', $date);
//    $query->condition('v.field_billing_van_value', db_like($string) . '%', 'LIKE');
//    $result = $query->execute()->fetchAllKeyed(0, 0);
//  }
//  drupal_json_output($result);
  if (!empty($date)) {
    $query = db_select('node', 'n');
    $query->join('field_data_field_billing_van', 'v', 'v.entity_id = n.nid');
    $query->join('field_data_field_billing_loading_date', 'l', 'l.entity_id = n.nid');
    $query->leftJoin('field_data_field_delivery_pending', 'dp', 'n.nid = dp.entity_id');
    $query->leftJoin('field_data_field_trip_id_reference', 'ft', 'ft.entity_id = n.nid');

    $query->fields('v', array('field_billing_van_value'));
    $query->condition('l.field_billing_loading_date_value', $date);
    $query->condition('n.type', 'sales_register_data');
    
    $db_or = db_or();
    $db_or->isNull('ft.field_trip_id_reference_nid');
    $db_or->condition('dp.field_delivery_pending_value', 1);
    $query->condition($db_or);

    $query->addTag('node_distributor_access');

    $result = $query->execute()->fetchAllKeyed(0, 0);
  }
  return $result;
}

function get_beat_name_from_loading_date_and_van($date, $van) {
  $result = array();
  if (!empty($date)) {

    global $user;
    $user_id = $user->uid;
    $distributor_id = change_feeds_import_get_distributor_id($user_id);
    $query = db_select('node', 'n');
    $query->join('field_data_field_billing_van', 'v', 'v.entity_id = n.nid');
    $query->join('field_data_field_billing_loading_date', 'l', 'l.entity_id = n.nid');
    $query->leftJoin('field_data_field_delivery_pending', 'dp', 'n.nid = dp.entity_id');
    $query->leftJoin('field_data_field_sales_party_code', 'fsp', 'fsp.entity_id = n.nid');
    $query->join('node', 'no', 'no.title = fsp.field_sales_party_code_value');
    $query->leftJoin('field_data_field_beat_name', 'fb', 'no.nid = fb.entity_id');
    $query->condition('no.uid', $distributor_id);
    $query->condition('no.type', 'outlet_master');

    $query->leftJoin('field_data_field_trip_id_reference', 'ft', 'ft.entity_id = n.nid');

    $query->addField('fb', 'field_beat_name_value');
    $query->condition('v.field_billing_van_value', $van);
    $query->condition('l.field_billing_loading_date_value', $date);
    $query->condition('n.type', 'sales_register_data');

    $db_or = db_or();
    $db_or->isNull('ft.field_trip_id_reference_nid');
    $db_or->condition('dp.field_delivery_pending_value', 1);
    $query->condition($db_or);

    $query->addTag('node_distributor_access');

    $result = $query->execute()->fetchAllKeyed(0, 0);
  }
  return $result;
}

function bill_autocomplete($string = '', $delivery_pending = NULL) {
  $result = array();

  if ($string) {
    $query = db_select('node', 'n');
    $query->join('field_data_field_billing_loading_date', 'ld', 'n.nid = ld.entity_id');
    $query->leftJoin('field_data_field_trip_id_reference', 'ft', 'ft.entity_id = n.nid');
    $query->leftJoin('field_data_field_delivery_pending', 'dp', 'n.nid = dp.entity_id');
    $query->condition('n.title', db_like($string) . '%', 'LIKE');
    $query->condition('n.type', 'sales_register_data');
    
    if (is_null($delivery_pending)) {
      $db_or = db_or();
      $db_or->isNull('ft.field_trip_id_reference_nid');
      $db_or->condition('dp.field_delivery_pending_value', 1);
      $query->condition($db_or);
    }
    else {
      $query->isNotNull('ft.field_trip_id_reference_nid');
    }
    
    $query->fields('n', array('title'));
    $query->range(0, 15);
    $query->addTag('node_distributor_access');
    $result = $query->execute()->fetchAllKeyed(0, 0);
  }

  drupal_json_output($result);
}

function trip_id_autocomplete($string = '') {
  $result = array();

  if ($string) {
    $query = db_select('node', 'n');
    $query->condition('n.title', db_like($string) . '%', 'LIKE');
    $query->condition('n.type', 'dispatch_data');
    $query->fields('n', array('title'));
    $query->range(0, 15);
    $query->addTag('node_distributor_access');
    $result = $query->execute()->fetchAllKeyed(0, 0);
  }

  drupal_json_output($result);
}

function _get_header_sort($array, $field_name, $order) {
  if ($order == 'asc') {
    uasort($array, function ($a, $b) use ($field_name) {
      if ($a[$field_name] == $b[$field_name]) {
        return 0;
      }
      return ($a[$field_name] < $b[$field_name]) ? -1 : 1;
    });
  }
  else {
    uasort($array, function ($a, $b) use ($field_name) {
      if ($a[$field_name] == $b[$field_name]) {
        return 0;
      }
      return ($a[$field_name] > $b[$field_name]) ? -1 : 1;
    });
  }
  return $array;
}

/**
 * implements hook_query_TAG_NAME_alter()
 * @param QueryAlterableInterface $query
 */
function dispatch_planning_query_node_distributor_access_alter(QueryAlterableInterface $query) {
  global $user;
  $user_id = $user->uid;
  $distributor_id = change_feeds_import_get_distributor_id($user_id);
  $tables = & $query->getTables();

  foreach ($tables as $alias => $table) {
    if ($table['table'] == 'node') {
      $nalias = $alias;
      break;
    }
  }
  $query->condition("$nalias.uid", $distributor_id);
}

function cashier_names_autocomplete($string = '') {
  $result = array();

  if ($string) {
    $query = db_select('node', 'n');
    $query->join('field_data_field_resource_type', 'rt', 'rt.entity_id = n.nid');
    $query->join('field_data_field_resource_name', 'rn', 'rn.entity_id = n.nid');
    $query->condition('field_resource_name_value', db_like($string) . '%', 'LIKE');
    $query->range(0, 15);

    $query->condition('field_resource_type_value', 'CASHIER');
    $query->fields('rn', array('field_resource_name_value'));
    $query->addTag('node_distributor_access');
    $result = $query->execute()->fetchAllKeyed(0, 0);
  }

  drupal_json_output($result);
}

function vehicle_names_autocomplete($string = '') {
  $result = array();

  if ($string) {
    $query = db_select('node', 'n');
    $query->condition('type', 'vehicle_master');
    $query->fields('n', array('title'));
    $query->condition('title', db_like($string) . '%', 'LIKE');
    $query->range(0, 15);
    $query->addTag('node_distributor_access');
    $result = $query->execute()->fetchAllKeyed(0, 0);
  }

  drupal_json_output($result);
}

function hht_id_autocomplete($date, $string) {
  $result = array();

//  if ($string) {
//    $query = db_select('node', 'n');
//    $query->condition('type', 'hht_master');
//    $query->fields('n', array('title'));
//    $query->condition('title', db_like($string) . '%', 'LIKE');
//
//    $query->range(0, 15);
//    $query->addTag('node_distributor_access');
//    $result = $query->execute()->fetchAllKeyed(0, 0);
//  }
//
//  if ($date) {
//    $query = db_select('node', 'n');
//    $query->condition('type', 'hht_master');
//    $query->fields('n', array('title'));
//    $query->leftJoin('field_data_field_hht_id', 'fh', 'fh.field_hht_id_nid = n.nid');
//    $query->leftJoin('field_data_field_trip_executon_date', 'fd', 'fh.entity_id = fd.entity_id');
//    $query->condition('field_trip_executon_date_value', $date);
//    $query->addTag('node_distributor_access');
//    $res = $query->execute()->fetchAllKeyed(0, 0);
//
//    $result = array_diff_key($result, $res);
//  }

  $query = db_select('node', 'n');
  $query->condition('n.type', 'hht_master');
  $query->fields('n', array('title'));
  $query->condition('n.title', db_like($string) . '%', 'LIKE');
//$query->addExpression("IF(SUM(field_trip_executon_date_value = '1488220200'), 'Yes', 'No')", 'hola');
//$query->addExpression("SUM(field_trip_executon_date_value = '1488220200')", 'aaa');

  $query->addExpression("MAX(IF((field_trip_executon_date_value = $date AND (nt.status = 1)), nt.title, 0))", 'trip_id');
  $query->leftJoin('field_data_field_hht_id', 'fh', 'fh.field_hht_id_nid = n.nid');
  $query->leftJoin('node', 'nt', 'nt.nid = fh.entity_id');

//  //Dont consider deleted trips
//  $db_or = db_or();
//  $db_or->isNull('nt.status');
//  $db_or->condition('nt.status', 0);
//  $query->condition($db_or);

  $query->leftJoin('field_data_field_trip_executon_date', 'fd', 'fh.entity_id = fd.entity_id');
  $query->groupBy('n.title');
  $query->addTag('node_distributor_access');
  $res = $query->execute()->fetchAll();

  $date_string = date('m/d/Y', $date);
  foreach ($res as $val) {
    if ($val->trip_id) {
      $result[$val->title] = "$val->title ($val->trip_id - $date_string)";
    }
    else {
      $result[$val->title] = $val->title;
    }
  }

  drupal_json_output($result);
}

function validate_hht_id($date, $hht_id) {

  $query = db_select('node', 'n');
  $query->condition('n.type', 'hht_master');

  $query->leftJoin('field_data_field_hht_id', 'fh', 'fh.field_hht_id_nid = n.nid');
  $query->leftJoin('field_data_field_trip_executon_date', 'fd', 'fh.entity_id = fd.entity_id');
  $query->leftJoin('node', 'nt', 'nt.nid = fh.entity_id');
  //$query->fields('fd', array('field_trip_executon_date_value'));
  
  $query->addExpression("IF((nt.status = 1), field_trip_executon_date_value, 0)", 'date');

//  //Dont consider deleted trips
//  $db_or = db_or();
//  $db_or->isNull('nt.status');
//  $db_or->condition('nt.status', 0);
//  $query->condition($db_or);
  
  $query->condition('n.title', $hht_id);
  $query->addTag('node_distributor_access');
  $result = $query->execute()->fetchAllKeyed(0, 0);

  if (empty($result) || isset($result[$date])) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}

function get_nid_from_hht_id($hht_id) {

  $query = db_select('node', 'n');
  $query->fields('n', array('nid'));
  $query->condition('type', 'hht_master');
  $query->condition('title', $hht_id);
  $query->addTag('node_distributor_access');
  $result = $query->execute()->fetchField();

  return $result;
}

function validate_cashier($cashier) {
  $query = db_select('node', 'n');
  $query->join('field_data_field_resource_type', 'rt', 'rt.entity_id = n.nid');
  $query->join('field_data_field_resource_name', 'rn', 'rn.entity_id = n.nid');
  $query->condition('field_resource_name_value', $cashier);

  $query->condition('field_resource_type_value', 'CASHIER');
  $query->fields('rn', array('field_resource_name_value'));
  $query->addTag('node_distributor_access');
  $result = $query->execute()->fetchField();

  return $result;
}

function validate_vehicle_number($vehicle_number) {
  $query = db_select('node', 'n');
  $query->condition('type', 'vehicle_master');
  $query->fields('n', array('title'));
  $query->condition('title', $vehicle_number);
  $query->addTag('node_distributor_access');
  $result = $query->execute()->fetchField();

  return $result;
}

function trip_delete_form($form, &$form_state) {
  $form['#prefix'] = '<div id="itemlist-div">';
  $form['#suffix'] = '</div>';
  $form['trip_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Trip id'),
    '#required' => TRUE,
      //'#autocomplete_path' => 'trip/autocomplete'
  );

  $form['trip_id_submit'] = array(
    '#type' => 'submit',
    '#value' => t('Show bills'),
    '#ajax' => array(
      'wrapper' => 'itemlist-div',
      'callback' => 'custom_ajax_callback',
      'method' => 'replace',
      'effect' => 'fade',
    ),
    '#submit' => array('trip_id_ajax_submit'),
    '#validate' => array('trip_id_ajax_validate'),
      //'#limit_validation_errors' => array(array('trip_id')),
  );

  $header_array = array(
    'bill_number' => 'Bill Number',
    'party_name' => 'Party name',
    'bill_value' => 'Value',
    'sales_beat' => 'Sales Beat',
    'van_loading_date' => 'Existing Van/Loading Date',
      //'sequence' => 'Delivery Sequence',
      //'trip_id' => 'Trip ID',
  );

  if (!isset($form_state['dispatch_planning']['bills'])) {
    $form_state['dispatch_planning']['bills'] = array();
  }
  $options = $form_state['dispatch_planning']['bills'];

  if ($options) {
    $form['list_form_items'] = array(
      '#theme' => 'table',
      '#header' => $header_array,
      '#rows' => $form_state['dispatch_planning']['bills'],
      '#prefix' => '<div id="table-div">',
      '#suffix' => '</div>',
    );

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Delete trip',
      '#validate' => array('trip_id_ajax_validate'),
        //'#limit_validation_errors' => array(array('trip_execution_date'), array('hht_id'), array('vehicle_number'), array('cashier'), array('list_form_items')),
    );
  }
  else {
    if (isset($form_state['values']['trip_id'])) {
      $form['no_bills'] = array(
        '#markup' => '<p>No bills attached to the trip</p>',
      );

      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => 'Delete trip',
        '#validate' => array('trip_id_ajax_validate'),
          //'#limit_validation_errors' => array(array('trip_execution_date'), array('hht_id'), array('vehicle_number'), array('cashier'), array('list_form_items')),
      );
    }
  }

  return $form;
}

function trip_id_ajax_validate($form, &$form_state) {
  $trip_id = $form_state['values']['trip_id'];

  $query = db_select('node', 'n');
  $query->leftJoin('field_data_field_dispatch_status', 'fs', 'fs.entity_id = n.nid');
  $db_or = db_or();
  $db_or->isNull('fs.field_dispatch_status_value');
  $db_or->condition('fs.field_dispatch_status_value', 0);
  $query->condition($db_or);
  $query->condition('n.title', $trip_id);
  $query->condition('n.type', 'dispatch_data');
  $query->fields('n', array('title'));
  $query->condition('status', 1);
  $query->addTag('node_distributor_access');
  $result = $query->execute()->fetchField();

  if (empty($result)) {
    form_set_error('trip_id', 'Trip ID does not exist or is already deleted or is already dispatched');
  }
}

function trip_id_ajax_submit($form, &$form_state) {
  $trip_id = $form_state['values']['trip_id'];

  //unset($form_state['input']['trip_id']);

  $bill_info = get_bill_info(NULL, NULL, NULL, NULL, $trip_id);

  if (!empty($bill_info)) {
    $form_state['dispatch_planning']['bills'] = $bill_info;
  }
  else {
    $form_state['dispatch_planning']['bills'] = array();
  }

  $form_state['rebuild'] = TRUE;
}

function trip_delete_form_submit($form, &$form_state) {
  $trip_id = $form_state['values']['trip_id'];

  $query = db_select('node', 'n');
  $query->condition('n.title', $trip_id);
  $query->condition('n.type', 'dispatch_data');
  $query->join('field_data_field_trip_id_reference', 'ft', 'ft.field_trip_id_reference_nid = n.nid');
  $query->fields('n', array('nid'));
  $query->fields('ft', array('entity_id'));
  $query->addTag('node_distributor_access');
  $result = $query->execute()->fetchAll(PDO::FETCH_GROUP);

  $dispatch_nid = key($result);

  foreach ($result[$dispatch_nid] as $value) {

    $node = node_load($value->entity_id);

    if ($node) {
      $node->field_trip_id_reference = array();
      $node->field_bill_sequence = array();
      $node->field_drs_sequence = array();
      
      node_save($node);
    }
  }

  $dispatch_node = node_load($dispatch_nid);
  if ($dispatch_node) {
    $dispatch_node->status = 0;
    node_save($dispatch_node);
  }

  drupal_set_message('Successfully deleted');
}

function dispatch_planning_form_views_exposed_form_alter(&$form, &$form_state) {
  if ($form['#id'] == 'views-exposed-form-billing-report-page') {
    //Show Yes, No, and All for Trip id field in billing report
    $form['field_trip_id_reference_nid_op']['#options'] = array(
      'in' => 'All',
      'empty' => 'No',
      'not empty' => 'Yes',
    );

    $form['field_trip_id_reference_nid']['#access'] = FALSE;
  }
}

/**
 * 
 * @param type $value
 * @param type $node
 * @param type $trip_execution_date
 * @param type $hht_id
 * @param type $cashier
 * @param type $trip_id
 * @return array
 */
function dispatch_planning_sales_reg_api($value, $node, $trip_execution_date, $hht_id, $cashier, $trip_id) {

  $api_data = array();
  // get billing data details
  $node_uid = $node->uid;
  $bill_number = $node->title;
  $vehicle = $node->field_billing_van[LANGUAGE_NONE][0]['value'];
  $bill_date = $node->field_sr_bill_date[LANGUAGE_NONE][0]['value'];
  $bill_value = $node->field_bill_value[LANGUAGE_NONE][0]['value'];
  $party_code = $node->field_sales_party_code[LANGUAGE_NONE][0]['value'];
  $store_sequence = $node->field_drs_sequence[LANGUAGE_NONE][0]['value'];

  $billing_data_details = dispatch_planning_get_billing_data($node_uid, $bill_number);
  $outlet_data_details = dispatch_planning_get_outlet_data($node_uid, $party_code);

  $api_data[$value]['jobType'] = 'delivery1';  // Hardcoded as suggested by gaurav
  $reference_no = $node_uid . '_' . $bill_number;
  $api_data[$value]['referenceNo'] = $reference_no;
  $api_data[$value]['date'] = $trip_execution_date;
  $api_data[$value]['city'] = 'ABC';
  $api_data[$value]['hub'] = $node_uid;
  $api_data[$value]['fieldExecutive'] = $hht_id;
  $api_data[$value]['fieldExecutiveName'] = $cashier;

  $api_data[$value]['jobData']['vehicle'] = $vehicle;
  $api_data[$value]['jobData']['party_hll_code'] = $outlet_data_details['field_hul_code_value']; // hul code in outlet
  $api_data[$value]['jobData']['bill_value'] = $bill_value;
  $api_data[$value]['jobData']['item_details'] = $billing_data_details; // array
  $api_data[$value]['jobData']['bill_date'] = $bill_date;
  $api_data[$value]['jobData']['locality'] = 'ABCD_locality';  // Hardcoded as suggested by gaurav  
  $api_data[$value]['jobData']['store_sequence_no'] = $store_sequence;  // drs sequence
  $api_data[$value]['jobData']['party_name'] = $outlet_data_details['field_party_name_value']; // party name in outlet
  $api_data[$value]['jobData']['beat_name'] = $outlet_data_details['field_beat_name_value'];  // beat name in outlet
  $api_data[$value]['jobData']['party_code'] = $party_code;
  $api_data[$value]['jobData']['bill_number'] = $bill_number;
  $api_data[$value]['jobData']['runsheet_number'] = $trip_id;

  return $api_data;
}

/**
 * 
 * @param type $node_uid
 * @param type $bill_number
 * @return array
 */
function dispatch_planning_get_billing_data($node_uid, $bill_number) {
  $query = db_select('custom_billing_data', 'bd');
  $query->fields('bd', array('tur', 'mrp', 'product_name'));
  $query->addfield('bd', 'Sum_of_NET_SALES_CASES', 'sum_net_sales_cases');
  $query->addfield('bd', 'Sum_of_NET_SALES_QTY', 'sum_net_sales_quantity');
  $query->addfield('bd', 'sku7_code', 'sku_code');
  $query->addfield('bd', 'Sum_of_NET_SALES_KGS', 'sum_net_sales_kgs');
  $query->addfield('bd', 'Sum_of_NET_SALES_VALUE', 'sum_net_sales_value');

  $query->condition('bd.distributor_id', $node_uid);
  $query->condition('bd.bill_number', $bill_number);
  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  return $res;
}

/**
 * 
 * @param type $node_uid
 * @param type $party_code
 * @return array
 */
function dispatch_planning_get_outlet_data($node_uid, $party_code) {
  $query = db_select('node', 'n');
  $query->condition('n.type', 'outlet_master');
  $query->condition('n.uid', $node_uid);
  //$query->join('field_data_field_sales_party_code', 'pc', 'pc.field_sales_party_code_value = n.title');
  $query->join('field_data_field_hul_code', 'hc', 'hc.entity_id = n.nid');
  $query->join('field_data_field_party_name', 'pn', 'pn.entity_id = n.nid');
  $query->join('field_data_field_beat_name', 'bn', 'bn.entity_id = n.nid');

  $query->fields('bn', array('field_beat_name_value'));
  $query->fields('pn', array('field_party_name_value'));
  $query->fields('hc', array('field_hul_code_value'));

  $query->condition('n.type', 'outlet_master');
  $query->condition('n.title', $party_code);

  $res = $query->execute()->fetch(PDO::FETCH_ASSOC);
  return $res;
}

/**
 * 
 * @param type $node_uid
 * @return string
 */
function dispatch_planning_check_api_authentication($node_uid) {
  $query = db_select('field_data_field_dispatch_planing_api', 'dp');
  $query->fields('dp', array('entity_id'));
  $query->condition('dp.field_dispatch_planing_api_value', 1);
  $query->condition('dp.entity_id', $node_uid);
  $res = $query->execute()->fetchField();
  return $res;
}


/**
 * Implements of hook_views_api().
 */
function dispatch_planning_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'dispatch_planning') . '/views'
  );
}

/**
 * 
 * @param type $json_api_data
 */
function dispatch_planning_api_log($json_api_data, $trip_id, $api_type) {
  $sql_ins_id = db_insert('dispatch_planning_api_log')
    ->fields(array(
      'trip_id' => $trip_id,
      'request_data' => serialize($data),
      'api_type' => $api_type, // pass vraiable defined in oxigen wallet configuratation form
      'request_time' => time(),
    ))
    ->execute();
  return $sql_ins_id;
}

/**
 * 
 * @param type $json_api_data 
 */
function dispatch_planning_api_log_update($response_data, $sql_ins_id) {
  db_update('dispatch_planning_api_log')
    ->fields(array(
      'response_data' => serialize($response_data),
    ))
    ->condition('id', $sql_ins_id, '=')
    ->execute();
}
