<?php

/**
 * 
 * @return type
 */
function adhoc_task_menu() {
  $items['email/duplicate-data'] = array(
    'title' => 'Send Email Of Duplicate Data',
    'page callback' => 'send_email_duplicate_data',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['email/bill_date_miss_in_sales_register'] = array(
    'title' => 'Email For Billing Date missing in Sales register',
    'page callback' => 'bill_date_missing_in_sales_register',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['update-sales-register'] = array(
    'title' => 'update-sales-register',
    'page callback' => 'update_sales_register',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['update-sales-register-thankyou'] = array(
    'title' => 'Thankyou',
    'page callback' => 'update_sales_register_thankyou',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['email/weekly-billing-report'] = array(
    'title' => 'Day Wise Bill Count And Value',
    'page callback' => 'weekly_billing_report_callback',
    'access arguments' => array('weekly report permission'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['email/weekly-billing-report/report1'] = array(
      'title' => 'Day Wise Bill Count And Value',
      'description' => 'Report1 of the custom menu',
      'page callback' => 'weekly_billing_report_callback',
      'access arguments' => array('weekly report permission'),
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => 0,
  );
  
  $items['email/weekly-billing-report/report2'] = array(
      'title' => 'Day Wise Bill Count And Value(N+2)',
      'description' => 'Report2 of the custom menu',
      'page callback' => 'weekly_billing_report2_callback',
      'access arguments' => array('weekly report permission'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 1,
  );
  
  $items['email/weekly-billing-report/report3'] = array(
      'title' => 'Day Wise Bill Count And Value(N+3)',
      'description' => 'Report3 of the custom menu',
      'page callback' => 'weekly_billing_report3_callback',
      'access arguments' => array('weekly report permission'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 2,
  );
  
  $items['email/weekly-billing-report/export'] = array(
    'title' => 'Weekly Billing Report Export',
    'description' => 'Weekly Billing Report Export',
    'page callback' => 'weekly_billing_report_table_export',
    'access arguments' => array('Day Wise Bill Count And Value Download File'),
  );
  
  $items['email/weekly-billing-report/report2/export'] = array(
    'title' => 'Weekly Billing Report2 Export',
    'description' => 'Weekly Billing Report2 Export',
    'page callback' => 'weekly_billing_report2_table_export',
    'access arguments' => array('Day Wise Bill Count And Value Download File'),
  );
  
  $items['email/weekly-billing-report/report3/export'] = array(
    'title' => 'Weekly Billing Report3 Export',
    'description' => 'Weekly Billing Report3 Export',
    'page callback' => 'weekly_billing_report3_table_export',
    'access arguments' => array('Day Wise Bill Count And Value Download File'),
  );
    
  $items['central-impact-return-analys'] = array(
    'title' => 'Impact Return Analysis Count and Value (Central)',
    'page callback' => 'central_impact_return_analysis',
    'access arguments' => array('weekly report permission'),
    'type' => MENU_NORMAL_ITEM,
    'access callback' => true,
  );
  $items['central-impact-return-analys/export'] = array(
    'title' => 'Impact Return Analysis Count and Value (Central) Export',
    'description' => 'Impact Return Analysis Count and Value (Central) Export',
    'page callback' => 'central_impact_return_analysis_export',
    'access arguments' => array('Day Wise Bill Count And Value Download File'),
  );
  $items['email/impact_unprocessed'] = array(
    'title' => 'Send Email For Impact Unprocessed File',
    'page callback' => 'send_email_for_impact_unprocessed',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
    // Manually Create Billing Data
  $items['create-billing-data'] = array(
    'title' => 'Create Billing Data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('create_billing_form'),
    'access arguments' => array('Create Billing Data'),
    'type' => MENU_CALLBACK,
  );
  $items['email/zoho-fill'] = array(
    'title' => 'Send Email To Fill ZOHO',
    'page callback' => 'send_email_to_fill_zoho',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}
/**
 * Implement hook_permission
 */
function adhoc_task_permission() {
  return array(
    'weekly report permission' => array(
      'title' => 'Weekly report permission',
      'description' => 'weekly report permission'
    ),
    
    'Day Wise Bill Count And Value Download File' => array(
      'title' => 'Day wise bill count and value download file permission',
      'description' => 'Day wise bill count and value download file permission'
    ),
    
    'Create Billing Data' => array(
      'title' => t('Create Billing Data'),
      'description' => t('Create Billing Data')
    ),
  );
}

function update_sales_register_node_finished($success, $results, $operations) {
  drupal_set_message("Thankyou");
}

function update_sales_register_nodes(&$context) {

  if (!isset($context['sandbox']['progress'])) {

    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = 350099;
  }

    $start = $context['sandbox']['progress'];
    $query = db_select('node', 'n');
    $query->condition('n.type', 'sales_register_data');
    $query->leftjoin('field_data_field_dispatch_n_value', 'd_date', 'd_date.entity_id = n.nid');
    $query->isNull('d_date.field_dispatch_n_value_value');
    $query->join('field_data_field_trip_id_reference', 'ti', 'ti.entity_id = n.nid');
    $query->range($start, $start +100);
    $query->fields('n', array('nid'));
    $results = $query->execute()->fetchAllKeyed(0, 0);
    
    for ($i = $start; $i < $context['sandbox']['progress'] + 100 && $i < $context['sandbox']['max']; $i++) {

    foreach ($results as $key => $val) {
      $nid = $val;
      $node = node_load($nid);
      node_save($node);
    }
  }

  $context['sandbox']['progress'] = $i;
  if ($context['sandbox']['progress'] < $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
  else {
    $context['finished'] = 1;
  }
}

function update_sales_register_thankyou() {
  return "";
}

function update_sales_register() {
  $batch = array(
    'title' => t('Update Sales Register Nodes'),
    'operations' => array(
      array('update_sales_register_nodes', array()),
    ),
    'init_message' => t("Batch is starting."),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('Upload data processing has encountered an error.'),
    'finished' => 'update_sales_register_node_finished',
    'file' => drupal_get_path('module', 'adhoc_task'),
  );

  batch_set($batch);
  batch_process('/update-sales-register-thankyou');
}

/**
 * 
 * @return string
 */
function send_email_duplicate_data() {
  $end = time();
  $start = strtotime(date('Y-m-d', strtotime("-7 days")));

  $query = db_select('users', 'u');
  $query->fields('u', array('uid', 'name'));
  $users = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  foreach ($users as $key => $val) {
    $uid = $val['uid'];
    $name = $val['name'];
    $distributor_id = change_feeds_import_get_distributor_id($uid);
    $hul_username = change_feeds_import_get_hul_user_name($distributor_id);
    $query = db_select('custom_billing_data', 'cb');
    $query->condition('cb.distributor_id', $uid, '=');
    $query->condition('cb.created_date', array($start, $end), 'BETWEEN');
    $query->fields('cb', array('bill_number', 'sku7_code', 'id', 'distributor_id', 'created_date'));
    $results = $query->execute()->fetchAll();

    foreach ($results as $k => $value) {
      $bill = $value->bill_number;
      $sku = $value->sku7_code;
      $distributor_id = $value->distributor_id;
      $created_date = date('d/m/Y', $value->created_date);
      if (isset($res[$bill . "-" . $sku . "-" . $distributor_id])) {
        // $id[$bill . "-" . $sku . "-" . $distributor_id . "-" . $k] = $value->id;
        $count[$distributor_id . "-" . $hul_username . "-" . $created_date . "-" . $name][] = $value->id;
      }
      $res[$bill . "-" . $sku . "-" . $distributor_id] = array();
    }
  }

  foreach ($count as $key => $val) {
    $counts = count($val);
    $data = explode("-", $key);
    $rows[] = array($data[3], $data[0], $data[1], $data[2], $counts);
  }

  $header = array('Name', 'UID', 'RS Code', 'Date', 'Bill Count');
  if (empty($rows)) {
    $rows[] = array("<td colspan='4' style='text-align: center;'> There is No Duplicate Records Found</td>");
  }

  $html = "<h3>Duplicate Records Details</h3>";
  $html .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('border' => '1', 'cellpadding' => '5', 'cellspacing' => '0')));
  $params['subject'] = "Duplicate Record Details";
  $params['body'] = $html;
  $mail_to = "gaurav@leanbox.in,kusha@leanbox.in,deepak@leanbox.in";
  // $mail_to = "hplord12@gmail.com";
  $from = "MIS.HELPDESK@leanbox.in";
  drupal_mail('adhoc_task', 'duplicate_data', $mail_to, LANGUAGE_NONE, $params, $from);
}

/**
 * 
 * @param type $distributor_id
 * @return type
 */
function change_feeds_import_get_hul_user_name($distributor_id) {
  $query = db_select('users', 'u');
  $query->condition('u.uid', $distributor_id, '=');
  $query->join('field_data_field_third_party_username', 'pu', 'pu.entity_id = u.uid');
  $query->fields('pu', array('field_third_party_username_value'));
  $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  $hul_username = $result[0]['field_third_party_username_value'];
  return $hul_username;
}

/**
 * 
 * @param type $key
 * @param type $message
 * @param type $params
 */
function adhoc_task_mail($key, &$message, $params) {
  switch ($key) {
    case 'duplicate_data':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      break;
    case 'bill_date_missing':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      break;
    case 'weekly_billing_report':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
  }
}

/**
 * 
 * @return string
 */
function bill_date_missing_in_sales_register() {
  $end = time();
  $start = strtotime("-1 days midnight");
  ;
  /**
   * dpm(db_query("select count(DISTINCT(bill_number)) from custom_billing_data where created_date >'1502217000' ")->FetchAll());
    //209640
    $start = '1502217000';
    $end = time();
    $query = db_select('custom_billing_data', 'cb');
    $query->condition('cb.created_date', array($start, $end), 'BETWEEN');
    $query->addExpression('DISTINCT(bill_number)','bill_number');
    $results = $query->execute()->fetchAll();
    dpm($results);

   */
  $query = db_select('users', 'u');
  $query->fields('u', array('uid', 'name'));
  $users = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  foreach ($users as $key => $val) {
    $uid = $val['uid'];
    $name = $val['name'];
    $distributor_id = change_feeds_import_get_distributor_id($uid);
    $hul_username = change_feeds_import_get_hul_user_name($distributor_id);
    $query = db_select('custom_billing_data', 'cb');
    $query->condition('cb.distributor_id', $uid, '=');
    $query->condition('cb.created_date', array($start, $end), 'BETWEEN');
    $query->fields('cb', array('bill_number', 'sku7_code', 'id', 'distributor_id', 'created_date'));
    $results = $query->execute()->fetchAll();

    foreach ($results as $k => $value) {
      $bill = $value->bill_number;
      $sku = $value->sku7_code;
      $distributor_id = $value->distributor_id;
      $created_date = date('d/m/Y', $value->created_date);
      if (isset($res[$bill . "-" . $sku . "-" . $distributor_id])) {
        // $id[$bill . "-" . $sku . "-" . $distributor_id . "-" . $k] = $value->id;
        $count[$distributor_id . "-" . $hul_username . "-" . $created_date . "-" . $name][] = $value->id;
      }
      $res[$bill . "-" . $sku . "-" . $distributor_id] = array();
    }
  }

  foreach ($count as $key => $val) {
    $counts = count($val);
    $data = explode("-", $key);
    $rows[] = array($data[3], $data[0], $data[1], $data[2], $counts);
  }


  $header = array('RS Name', 'Bill Count in Customer Billing', 'Count in Sales Register Where Bill Date is Blank');
  if (empty($rows)) {
    $rows[] = array("<td colspan='4' style='text-align: center;'> There is No Duplicate Records Found</td>");
  }

  $html = "<h3>Billing Date is Missed in Sales Register</h3>";
  $html .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('border' => '1', 'cellpadding' => '3', 'cellspacing' => '0')));
  $params['subject'] = "Billing Date is missed in Sales Register";
  $params['body'] = $html;
  //$mail_to = "gaurav@leanbox.in,kusha@leanbox.in,deepak@leanbox.in";
  $mail_to = "abhishek.r@iksula.com";
  $from = "MIS.HELPDESK@leanbox.in";
  drupal_mail('adhoc_task', 'bill_date_missing', $mail_to, LANGUAGE_NONE, $params, $from);
}

/**
 *  callback for weekly report menu
 */
function weekly_report_form($form, &$form_state) {
  if (isset($_GET['from_date'])) {
    $from_date = $_GET['from_date'];
  }

  if (isset($_GET['to_date'])) {
    $to_date = $_GET['to_date'];
  }

  $form['from_date'] = array(
    '#type' => 'date_popup',
    '#title' => 'From date',
    '#description' => 'Select from date to generate report',
    '#require' => TRUE,
    '#date_label_position' => 'within',
    '#date_format' => 'Y-m-d',
    '#default_value' => $from_date,
  );
  $form['to_date'] = array(
    '#type' => 'date_popup',
    '#title' => 'To date',
    '#description' => 'Select to date to generate report',
    '#require' => TRUE,
    '#date_label_position' => 'within',
    '#date_format' => 'Y-m-d',
    '#default_value' => $to_date,
  );
//  $form['email_id'] = array (
//    '#type' => 'textfield',
//    '#title' => 'Enter email id to send report data',
//    '#description' => 'Enter email id eg: xyz@gmail.com',
//    '#default_value' => "sandip.auti@iksulaops.com",
//  );
  $form['save'] = array(
    '#type' => 'submit',
    '#value' => 'Save'
  );
  return $form;
}

/**
 * submit handler for weekly_report_form 
 */
function weekly_report_form_submit($form, &$form_state) {
  $from_date = $form_state['values']['from_date'];
  $to_date = $form_state['values']['to_date'];
  if (($form_state['values']["op"] == "Save") && (arg(1) == 'weekly-billing-report' && empty(arg(2)))) {
    drupal_goto('email/weekly-billing-report', array('query' => array('from_date' => $from_date, 'to_date' => $to_date)));
  }
  else if (($form_state['values']["op"] == "Save") && (arg(2) == 'report2')){
    drupal_goto('email/weekly-billing-report/report2', array('query' => array('from_date' => $from_date, 'to_date' => $to_date)));
  }
  else if (($form_state['values']["op"] == "Save") && (arg(2) == 'report3')){
    drupal_goto('email/weekly-billing-report/report3', array('query' => array('from_date' => $from_date, 'to_date' => $to_date)));
  }
  else if(($form_state['values']["op"] == "Save") && (arg(0) == 'central-impact-return-analys')){
    drupal_goto('central-impact-return-analys', array('query' => array('from_date' => $from_date, 'to_date' => $to_date)));
  }  
}
/**
 * Form validate
 */
function weekly_report_form_validate($form, &$form_state) {
  $from_date = $form_state['values']['from_date'];
  $to_date = $form_state['values']['to_date']; 
  $datediff = strtotime($to_date) - strtotime($from_date);
  $num_days = $datediff / (60 * 60 * 24);
  if ($num_days < 0) {
   form_set_error('form', 'Please select valid To and From date'); 
  }
  if ($num_days > 31) {
   form_set_error('form', 'Date range should not be greater than 31');  
  }
//  if(arg(2) == 'report2') {
//    drupal_goto('email/weekly-billing-report/report2', array('query' => array('from_date' => $from_date, 'to_date' => $to_date)));
//  }
//  else {
//    drupal_goto('email/weekly-billing-report', array('query' => array('from_date' => $from_date, 'to_date' => $to_date)));
//  }
}

function weekly_billing_report_table_export() {
  $file = "DayWiseBillCountAndValue.xls";
  $data = cache_get('email/weekly-billing-report'.session_id());
  if (empty($data)) {
    $table = weekly_billing_report_callback();
  }
  else {
    $table = $data->data;
  }
  header("Content-type: application/vnd.ms-excel");
  header("Content-Disposition: attachment; filename=$file");
  echo $table;
}

function weekly_billing_report2_table_export() {
  $file = "DayWiseBillCountAndValue2.xls";
  $data = cache_get('email/weekly-billing-report/report2'.session_id());
  if (empty($data)) {
    $table = weekly_billing_report2_callback();
  }
  else {
    $table = $data->data;
  }
  header("Content-type: application/vnd.ms-excel");
  header("Content-Disposition: attachment; filename=$file");
  echo $table;
}

function weekly_billing_report3_table_export() {
  $file = "DayWiseBillCountAndValue3.xls";
  $data = cache_get('email/weekly-billing-report/report3'.session_id());
  if (empty($data)) {
    $table = weekly_billing_report3_callback();
  }
  else {
    $table = $data->data;
  }
  header("Content-type: application/vnd.ms-excel");
  header("Content-Disposition: attachment; filename=$file");
  echo $table;
}

/**
 * Below code is for billing report
 * Page callback for weekly report
 */
function weekly_billing_report_callback() {
   if (isset($_GET['from_date'])) {
    $from_date = $_GET['from_date'];
  }
  if (isset($_GET['to_date'])) {
    $to_date = $_GET['to_date'];
  }
  if(!$from_date && !$to_date){
    return drupal_render(drupal_get_form('weekly_report_form'));
  }
  $datediff = strtotime($to_date) - strtotime($from_date);
  $num_days = $datediff / (60 * 60 * 24);
  $timestamp = strtotime($from_date);
  
  // Check the condition of filter doesn't print in xls.
  if(arg(2) != 'export'){
    $form = drupal_render(drupal_get_form('weekly_report_form'));
  }
  
  // Function to get user id of distributor
  $values = fetch_rs_field_data();
  
  $rid = get_role_by_name('RS Operator');
  $query = db_select('users', 'u');
  $query->fields('u', array('uid'));
  $query->innerJoin('users_roles', 'r', 'r.uid = u.uid');
  $query->innerjoin('field_data_field_distributor', 'd', 'd.entity_id = u.uid');
  $query->fields('d', array('field_distributor_value'));
  $query->join('field_data_field_name', 'nm', 'nm.entity_id = u.uid');
  $query->join('field_data_field_third_party_username', 'pu', 'pu.entity_id = u.uid');
  $query->fields('nm', array('field_name_value'));
  $query->fields('pu', array('field_third_party_username_value'));
  $query->condition('r.rid', $rid);
  $query->condition('u.uid', 1, '>');
  if (!empty($values)) {
    $query->condition('d.field_distributor_value', $values, 'IN');
  }
  $query->orderBy('u.name');
  $users = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  $bill_flag = 'count_bill';
  $flag_n_plus_two = FALSE;
  $flag_n_plus_three = FALSE;
  $html .= get_html_for_weekly_report($bill_flag, $flag_n_plus_two, $flag_n_plus_three, $users, $timestamp, $num_days);
  $bill_flag = 'count_bill_value';
  $flag_n_plus_two = FALSE;
  $flag_n_plus_three = FALSE;
  $html .= get_html_for_weekly_report($bill_flag, $flag_n_plus_two, $flag_n_plus_three, $users, $timestamp , $num_days);
  
  // To create the download link
  $data = array();
  $data['from_date'] = $from_date;
  $data['to_date'] = $to_date;
  
  //newly added, 2 lines
  cache_set('email/weekly-billing-report'.session_id(), $html, 'cache', time() + 60*10);
  $html .= l(t('XLS'), 'email/weekly-billing-report/export', array('query' => array($data)));

  $params['subject'] = "Day Wise Bill Count And Value";
  $params['body'] = $html;
  $mail_to = "sandip.auti11@gmail.com";
  $from = "MIS.HELPDESK@leanbox.in";
  //drupal_mail('adhoc_task', 'weekly_billing_report', $mail_to, LANGUAGE_NONE, $params, $from);
  
  return $form.$html;
}

/**
 * Below code is for billing report2
 * Page callback for weekly report tab2
 */
function weekly_billing_report2_callback() {
   if (isset($_GET['from_date'])) {
    $from_date = $_GET['from_date'];
  }
  if (isset($_GET['to_date'])) {
    $to_date = $_GET['to_date'];
  }
  if(!$from_date && !$to_date){
    return drupal_render(drupal_get_form('weekly_report_form'));
  }
  $datediff = strtotime($to_date) - strtotime($from_date);
  $num_days = $datediff / (60 * 60 * 24);
  $timestamp = strtotime($from_date);
  if(arg(3) != 'export'){
    $form = drupal_render(drupal_get_form('weekly_report_form'));
  }
  
  // Function to get user id of distributor
  $values = fetch_rs_field_data();
  
  $rid = get_role_by_name('RS Operator');
  $query = db_select('users', 'u');
  $query->fields('u', array('uid'));
  $query->innerJoin('users_roles', 'r', 'r.uid = u.uid');
  $query->innerjoin('field_data_field_distributor', 'd', 'd.entity_id = u.uid');
  $query->fields('d', array('field_distributor_value'));
  $query->join('field_data_field_name', 'nm', 'nm.entity_id = u.uid');
  $query->join('field_data_field_third_party_username', 'pu', 'pu.entity_id = u.uid');
  $query->fields('nm', array('field_name_value'));
  $query->fields('pu', array('field_third_party_username_value'));
  $query->condition('r.rid', $rid);
  $query->condition('u.uid', 1, '>');
  if (!empty($values)) {
    $query->condition('d.field_distributor_value', $values, 'IN');
  }
  $query->orderBy('u.name');
  $users = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  $bill_flag = 'count_bill_n+2';
  $flag_n_plus_two = TRUE;
  $flag_n_plus_three = FALSE;
  $html .= get_html_for_weekly_report($bill_flag, $flag_n_plus_two, $flag_n_plus_three, $users, $timestamp , $num_days);
  $bill_flag = 'count_value_n+2';
  $flag_n_plus_two = TRUE;
  $flag_n_plus_three = FALSE;
  $html .= get_html_for_weekly_report($bill_flag, $flag_n_plus_two, $flag_n_plus_three, $users, $timestamp , $num_days);
  
  // To create the download link
  $data = array();
  $data['from_date'] = $from_date;
  $data['to_date'] = $to_date;
  
  //newly added, 2 lines
  cache_set('email/weekly-billing-report/report2'.session_id(), $html, 'cache', time() + 60*10);
  $html .= l(t('XLS'), 'email/weekly-billing-report/report2/export', array('query' => array($data)));
  
  $params['subject'] = "Day Wise Bill Count And Value(N+2)";
  $params['body'] = $html;
  $mail_to = "sandip.auti11@gmail.com";
  $from = "MIS.HELPDESK@leanbox.in";
  //drupal_mail('adhoc_task', 'weekly_billing_report', $mail_to, LANGUAGE_NONE, $params, $from);
  return $form.$html;
}

/**
 * Below code is for billing report3
 * Page callback for weekly report tab3
 */
function weekly_billing_report3_callback() {
   if (isset($_GET['from_date'])) {
    $from_date = $_GET['from_date'];
  }
  if (isset($_GET['to_date'])) {
    $to_date = $_GET['to_date'];
  }
  if(!$from_date && !$to_date){
    return drupal_render(drupal_get_form('weekly_report_form'));
  }
  $datediff = strtotime($to_date) - strtotime($from_date);
  $num_days = $datediff / (60 * 60 * 24);
  $timestamp = strtotime($from_date);
  if(arg(3) != 'export'){
    $form = drupal_render(drupal_get_form('weekly_report_form'));
  }
  
  // Function to get user id of distributor
  $values = fetch_rs_field_data();
  
  $rid = get_role_by_name('RS Operator');
  $query = db_select('users', 'u');
  $query->fields('u', array('uid'));
  $query->innerJoin('users_roles', 'r', 'r.uid = u.uid');
  $query->innerjoin('field_data_field_distributor', 'd', 'd.entity_id = u.uid');
  $query->fields('d', array('field_distributor_value'));
  $query->join('field_data_field_name', 'nm', 'nm.entity_id = u.uid');
  $query->join('field_data_field_third_party_username', 'pu', 'pu.entity_id = u.uid');
  $query->fields('nm', array('field_name_value'));
  $query->fields('pu', array('field_third_party_username_value'));
  $query->condition('r.rid', $rid);
  $query->condition('u.uid', 1, '>');
  if (!empty($values)) {
    $query->condition('d.field_distributor_value', $values, 'IN');
  }
  $query->orderBy('u.name');
  $users = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  $bill_flag = 'count_bill_n+3';
  $flag_n_plus_two = FALSE;
  $flag_n_plus_three = TRUE;
  $html .= get_html_for_weekly_report($bill_flag, $flag_n_plus_two, $flag_n_plus_three, $users, $timestamp , $num_days);
  $bill_flag = 'count_value_n+3';
  $flag_n_plus_two = FALSE;
  $flag_n_plus_three = TRUE;
  $html .= get_html_for_weekly_report($bill_flag, $flag_n_plus_two, $flag_n_plus_three, $users, $timestamp , $num_days);
  
  // To create the download link
  $data = array();
  $data['from_date'] = $from_date;
  $data['to_date'] = $to_date;
  
  //newly added, 2 lines
  cache_set('email/weekly-billing-report/report3'.session_id(), $html, 'cache', time() + 60*10);
  $html .= l(t('XLS'), 'email/weekly-billing-report/report3/export', array('query' => array($data)));
  
  $params['subject'] = "Day Wise Bill Count And Value(N+3)";
  $params['body'] = $html;
  $mail_to = "sandip.auti11@gmail.com";
  $from = "MIS.HELPDESK@leanbox.in";
  //drupal_mail('adhoc_task', 'weekly_billing_report', $mail_to, LANGUAGE_NONE, $params, $from);
  return $form.$html;
}

/**
 * get html for weekly report
 */
function get_html_for_weekly_report($bill_flag, $flag_n_plus_two, $flag_n_plus_three, $users, $timestamp , $num_days) {
 if ($num_days < 0) {
   return; 
 }
 if($num_days >  31) {
   return; 
 }
  $timestamp = $timestamp;
  if ($bill_flag == 'count_bill') {
    $caption = 'Day Wise Bill Count';
  }
  else if ($bill_flag == 'count_bill_value') {
    $caption = 'Day Wise Bill Value';
  }
  else if ($bill_flag == 'count_bill_n+2') {
    $caption = 'Day Wise Bill Count(N+2)';
  }
  else if ($bill_flag == 'count_value_n+2'){
    $caption = 'Day Wise Bill Value(N+2)';
  }
  else if ($bill_flag == 'count_bill_n+3'){
    $caption = 'Day Wise Bill Count(N+3)';
  }
  else {
    $caption = 'Day Wise Bill Value(N+3)';
  }
  $html .= '<caption><h2> ' . $caption . '</h2></caption>';
  $header = get_weekly_data_header($timestamp, $num_days);
  foreach ($users as $key => $val) {
    $uid = $val['uid'];
    $distributor_id = $val['field_distributor_value'];
    $rs_code = $val['field_third_party_username_value'];
    $rs_name = $val['field_name_value'];
    //$hul_username = $val['field_third_party_username_value'] . ' : ' . $val['field_name_value'];
    $rows[] = get_weekly_report_data($timestamp, $distributor_id, $flag_n_plus_two, $flag_n_plus_three, $rs_code, $rs_name, $bill_flag, $num_days); 
  }
  $html .= theme('table', array('header' => $header, 'rows' => $rows, 'empty' => 'No Result Found', 'attributes' => array('width' => '100%')));
  
  return $html;
}

/**
 *  get weekly data header
 */
function get_weekly_data_header($timestamp,$num_days) {
  $html = array('RS Code','RS Name');
  for ($i = 0; $i <= $num_days; $i++) {
    $days = date('Y-m-d', $timestamp);
    $timestamp += 24 * 3600;
    $html[] .= $days;
  }
  return $html;
}

/**
 * Function to get weekly report data for today's date to 10 days before
 */
function get_weekly_report_data($timestamp, $distributor_id, $flag_n_plus_two, $flag_n_plus_three, $rs_code, $rs_name, $bill_flag, $num_days) {
  for ($i = 0; $i <= $num_days; $i++) {
    $query = db_select('node', 'n');
    $query->join('field_data_field_sr_bill_date', 'sr', 'sr.entity_id = n.nid');
    $query->join('field_data_field_bill_value', 'bv', 'bv.entity_id = n.nid');
    if ($flag_n_plus_two || $flag_n_plus_three) {
      $query->join('field_data_field_dispatch_n_value', 'di', 'di.entity_id = n.nid');
    }
    $query->condition('sr.field_sr_bill_date_value', $timestamp);
    $query->condition('n.uid', $distributor_id);
    $query->condition('n.type', 'sales_register_data');
    if ($flag_n_plus_two) {
      $query->condition('di.field_dispatch_n_value_value', 'N+2');
    }
    if ($flag_n_plus_three) {
      $query->condition('di.field_dispatch_n_value_value', 'N+3');
    }
    $query->addExpression('COUNT(sr.field_sr_bill_date_value)', 'count');
    $query->addExpression('SUM(bv.field_bill_value_value)', 'sum');
    $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    
    $result_arr[$rs_code.'|'.$rs_name][] = $res[0];
    
    $timestamp += 24 * 3600;
        
  }
  
  foreach ($result_arr as $k => $val) {  
    $row = explode("|", $k);
    foreach ($val as $value) {
      if ($bill_flag == 'count_bill' || $bill_flag == 'count_bill_n+2' || $bill_flag == 'count_bill_n+3') {
        $data = $value['count'];
      }
      else {
        if (!empty($value['sum'])) {
          $data = $value['sum'];
        }
        else {
          $data = 0;
        }
      }
    $row[] .= $data;  
    } 
  }
  
  return $row;
}


/**
 * Impact Return Analysis Count and Value (Central)
 */
function central_impact_return_analysis() {
  if (isset($_GET['from_date'])) {
    $from_date = $_GET['from_date'];
  }
  if (isset($_GET['to_date'])) {
    $to_date = $_GET['to_date'];
  }
  if (!$from_date && !$to_date) {
    return drupal_render(drupal_get_form('weekly_report_form'));
  }
  $datediff = strtotime($to_date) - strtotime($from_date);
  $num_days = $datediff / (60 * 60 * 24);
  $timestamp = strtotime($from_date);

  // Check the condition of filter doesn't print in xls.
  if (arg(1) != 'export') {
    $form = drupal_render(drupal_get_form('weekly_report_form'));
  }

  // Function to get user id of distributor
  $values = fetch_rs_field_data();

  $rid = get_role_by_name('RS Operator');
  $query = db_select('users', 'u');
  $query->fields('u', array('uid'));
  $query->innerJoin('users_roles', 'r', 'r.uid = u.uid');
  $query->innerjoin('field_data_field_distributor', 'd', 'd.entity_id = u.uid');
  $query->fields('d', array('field_distributor_value'));
  $query->join('field_data_field_name', 'nm', 'nm.entity_id = u.uid');
  $query->join('field_data_field_third_party_username', 'pu', 'pu.entity_id = u.uid');
  $query->fields('nm', array('field_name_value'));
  $query->fields('pu', array('field_third_party_username_value'));
  $query->condition('r.rid', $rid);
  $query->condition('u.uid', 1, '>');
  if (!empty($values)) {
    $query->condition('d.field_distributor_value', $values, 'IN');
  }
  $query->orderBy('u.name');
  $users = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  $bill_flag = 'count_bill';
  $html .= get_html_for_impact_return_report($bill_flag, $users, $timestamp, $num_days);
  $bill_flag = 'count_bill_value';
  $html .= get_html_for_impact_return_report($bill_flag, $users, $timestamp, $num_days);

  // To create the download link
  $data = array();
  $data['from_date'] = $from_date;
  $data['to_date'] = $to_date;
  
  //newly added, 2 lines
  cache_set('central-impact-return-analys'.session_id(), $html, 'cache', time() + 60*10);
  $html .= l(t('XLS'), 'central-impact-return-analys/export', array('query' => array($data))); 
  
  $params['subject'] = "Weekly Billing Report";
  $params['body'] = $html;
  $mail_to = "abhishek.r@iksula.com";
  $from = "MIS.HELPDESK@leanbox.in";
  //drupal_mail('adhoc_task', 'weekly_billing_report', $mail_to, LANGUAGE_NONE, $params, $from);

  return $form.$html;
}

function get_html_for_impact_return_report($bill_flag, $users, $timestamp, $num_days) {
  if ($num_days < 0) {
    return;
  }
  if ($num_days > 31) {
    return;
  }
  $timestamp = $timestamp;
  if ($bill_flag == 'count_bill') {
    $caption = 'No. of bills Processed in Impact ';
  }
  else if ($bill_flag == 'count_bill_value') {
    $caption = 'Value of bills Processed in Impact';
  }

  $html .= '<caption><h2> ' . $caption . '</h2></caption>';
  $header = get_weekly_data_header($timestamp, $num_days);
  foreach ($users as $key => $val) {
    $uid = $val['uid'];
    $distributor_id = $val['field_distributor_value'];
    $rs_code = $val['field_third_party_username_value'];
    $rs_name = $val['field_name_value'];
    //$hul_username = $val['field_third_party_username_value'] . ' : ' . $val['field_name_value'];
    $rows[] = get_impact_return_report_data($timestamp, $distributor_id, $rs_code, $rs_name, $bill_flag, $num_days);
  }
  $html .= theme('table', array('header' => $header, 'rows' => $rows, 'empty' => 'No Result Found', 'attributes' => array('width' => '100%')));

  return $html;
}

/**
 * Function to get weekly report data for today's date to 10 days before
 */
function get_impact_return_report_data($timestamp, $distributor_id, $rs_code, $rs_name, $bill_flag, $num_days) {
  for ($i = 0; $i <= $num_days; $i++) {
    $query = db_select('node', 'n');
    $query->join('field_data_field_mobile_bill_value', 'bv', 'bv.entity_id = n.nid');
    $query->join('field_data_field_mobile_bill_date', 'bd', 'bd.entity_id = n.nid');
    $query->condition('bd.field_mobile_bill_date_value', $timestamp);
    $query->condition('n.uid', $distributor_id);
    $query->condition('n.type', 'impact_cron_mobile_data');
    $query->addExpression('COUNT(n.title)', 'count');
    $query->addExpression('SUM(bv.field_mobile_bill_value_value)', 'sum');
    $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

    $result_arr[$rs_code . '|' . $rs_name][] = $res[0];

    $timestamp += 24 * 3600;
  }

  foreach ($result_arr as $k => $val) {  
    $row = explode("|", $k);
    foreach ($val as $value) {
      if ($bill_flag == 'count_bill') {
        $data = $value['count'];
      }
      else {
        if (!empty($value['sum'])) {
          $data = $value['sum'];
        }
        else {
          $data = 0;
        }
      }
    $row[] .= $data;  
    } 
  }

  return $row;
}

function central_impact_return_analysis_export() {
  $file = "centralImpactReport.xls";
  $data = cache_get('central-impact-return-analys' . session_id());
  if (empty($data)) {
    $table = central_impact_return_analysis();
  }
  else {
    $table = $data->data;
  }
  header("Content-type: application/vnd.ms-excel");
  header("Content-Disposition: attachment; filename=$file");
  echo $table;
}

/**
 * 
 * @param type $form
 * @param type $form_state
 * @return array
 */
function create_billing_form($form, &$form_state) {

  $form['#prefix'] = '<div id="itemlist-div">';
  $form['#suffix'] = '</div>';

  // selected date for deleting data of billing data by admin
  $form['to_date'] = array(
    '#type' => 'date_popup',
    '#date_format' => 'd-m-Y h:i A',
    '#required' => TRUE,
  );

  $form['check'] = array(
    '#type' => 'submit',
    '#value' => t('Check Records'),
    '#ajax' => array(
      'wrapper' => 'itemlist-div',
      'callback' => 'create_ajax_form_submit',
      'method' => 'replace',
      'effect' => 'fade',
    ),
    '#submit' => array('create_check_records_submit'),
  );
//$form_state['values']['op'] == 'RouteSavvy API'
  if (!empty($form_state['values']['billing_count'])) {
    $billing_count = $form_state['values']['billing_count'];
    if ($billing_count == "empty") {
      $msg = "There is no data to delete";
    }
    else {
      $msg = "Number of Record Going To Create = $billing_count";
      $form['sales_submit'] = array(
        '#type' => 'submit',
        '#value' => t('Create Dispatch'),
        '#submit' => array('create_sales_billing_form_submit'),
      );
      $form['picking_submit'] = array(
        '#type' => 'submit',
        '#value' => t('Create Picking'),
        '#submit' => array('create_picking_billing_form_submit'),
      );
      $form['van_cld_submit'] = array(
        '#type' => 'submit',
        '#value' => t('VAN CLD'),
        '#submit' => array('create_van_cld_billing_form_submit'),
      );
      $form['party_packing_submit'] = array(
        '#type' => 'submit',
        '#value' => t('Party Packing'),
        '#submit' => array('create_party_packing_billing_form_submit'),
      );
    }

    $form['data'] = array(
      '#type' => 'markup',
      '#markup' => $msg,
    );
  }



  return $form;
}

function create_ajax_form_submit($form, &$form_state) {
  return $form;
}

/**
 * 
 * @param type $form
 * @param type $form_state
 */
function create_check_records_submit($form, &$form_state) {
  $start_date = strtotime($form_state['values']['to_date']);
  $end_date = $start_date + 60;

  global $user;
  $user_id = $user->uid;
  $distributor_id = change_feeds_import_get_distributor_id($user_id);

  $pass = "";
  // get data from custom table for selected date and user (custom_billing_data).
  $billing_data = get_custom_data($pass, $start_date, $end_date, $distributor_id);
  if (!empty($billing_data)) {
    $billing_count = count($billing_data);
  }
  else {
    $billing_count = "empty";
  }
  $form_state['values']['billing_count'] = $billing_count;
  $form_state['rebuild'] = TRUE;
}

/**
 * 
 * @param type $form
 * @param type $form_state
 */
function create_picking_billing_form_submit($form, &$form_state) {

  $start_date = strtotime($form_state['values']['to_date']);
  $end_date = $start_date + 60;

  global $user;
  $user_id = $user->uid;
  $distributor_id = change_feeds_import_get_distributor_id($user_id);

  $query = db_select('custom_billing_data', 'cb');
  $query->join('field_data_field_sku7_code', 'gaisc', 'gaisc.field_sku7_code_value = cb.sku7_code');
  $query->condition('gaisc.bundle', 'sku7_code_master', '=');
  $query->join('node', 'nd', 'nd.nid = gaisc.entity_id');
  $query->condition('nd.uid', $distributor_id, '=');
//    $query->join('field_data_field_godown_area_id', 'gai', 'gaisc.entity_id = gai.entity_id');
//    $query->condition('gai.bundle', 'sku7_code_master', '=');
//    $query->join('field_data_field_pack_size', 'fps', 'fps.entity_id = gaisc.entity_id');
//    $query->condition('fps.bundle', 'sku7_code_master', '=');
  $query->join('field_data_field_unit_case_units_', 'fucu', 'fucu.entity_id = gaisc.entity_id');
  $query->condition('fucu.bundle', 'sku7_code_master', '=');
  $query->fields('cb', array('sku7_code'));
  $query->addField('cb', 'vehicle', 'field_vehicle_value');
  $query->addField('cb', 'loading_date', 'field_loading_date_value');
  $query->addField('cb', 'PRICELIST_GROUP', 'PRICELIST_GROUP');
  //$query->fields('gai', array('field_godown_area_id_value'));
  //$query->fields('fps', array('field_pack_size_value'));
  $query->fields('fucu', array('field_unit_case_units__value'));
  $query->addExpression('SUM(cb.Sum_of_TOTAL_SALES_QTY)', 'total_sales_qty');
  $query->addExpression('floor(SUM(cb.Sum_of_TOTAL_SALES_QTY) / field_unit_case_units__value)', 'cld');
  $query->addExpression('SUM(cb.Sum_of_TOTAL_SALES_QTY) - (field_unit_case_units__value * floor(SUM(cb.Sum_of_TOTAL_SALES_QTY) / field_unit_case_units__value))', 'eaches');

  $query->condition('cb.distributor_id', $distributor_id);
  //$query->condition('cb.id', $max_billing_id, '>');
  $query->condition('cb.created_date', array($start_date, $end_date), 'BETWEEN');

  $query->groupBy('field_vehicle_value,field_loading_date_value,sku7_code,PRICELIST_GROUP');
  $subquery = db_select($query, 'middle');
  $subquery->fields('middle');
  //$subquery->addExpression('COUNT(cld)', 'cld_lines');
  //$subquery->addExpression('COUNT(eaches)', 'eaches_lines');

  $subquery->addExpression('SUM(if(cld > 0, 1, 0))', 'cld_lines');
  $subquery->addExpression('SUM(if(eaches > 0, 1, 0))', 'eaches_lines');

  $subquery->addExpression('SUM(cld)', 'total_cld');
  $subquery->addExpression('SUM(eaches)', 'total_eaches');
  $subquery->groupBy('field_vehicle_value,field_loading_date_value,PRICELIST_GROUP');
  $data = $subquery->execute()->fetchAll();


  foreach ($data as $key => $value) {
    if ($value->total_cld > 0 || $value->total_eaches > 0) {
      $node = new stdClass();
      $node->title = $value->field_vehicle_value . format_date(time());
      $node->type = "picking";
      node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
      $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
      $node->uid = $user->uid;
      $node->status = 1; //(1 or 0): published or not
      $node->comment = 1; // 0 = comments disabled, 1 = read only, 2 = read/write

      $node->field_picking_van_id[$node->language][0]['value'] = $value->field_vehicle_value;
      $node->field_picking_loading_date[$node->language][0]['value'] = date("Y-m-d H:i:s", $value->field_loading_date_value);
      $node->field_picking_godown_area_id[$node->language][0]['value'] = $value->PRICELIST_GROUP;

      $node->field_pick_units[$node->language][0]['value'] = $value->total_eaches;
      $node->field_pick_clds[$node->language][0]['value'] = $value->total_cld;
      $node->field_distributor_uid['und'][0]['value'] = $distributor_id;
      $node_copy = clone $node;
      $node_copy->is_new = true;
      if ($value->total_eaches > 0) {
        $node->field_picking_picking_type[$node->language][0]['value'] = 'Loose';
        $node->field_pick_lines[$node->language][0]['value'] = $value->eaches_lines;
        $node->field_pick_clds[$node->language][0]['value'] = 0;
        node_save($node);
      }
      if ($value->total_cld > 0) {
        $node_copy->field_picking_picking_type[$node->language][0]['value'] = 'Bulk';
        $node_copy->field_pick_lines[$node->language][0]['value'] = $value->cld_lines;
        $node_copy->field_pick_units[$node->language][0]['value'] = 0;
        node_save($node_copy);
      }
    }
  }
  drupal_set_message('Picking Data Created Successfully');
}

function create_party_packing_billing_form_submit($form, &$form_state) {
  module_load_include('inc', 'change_feeds_import', 'form/create_content_on_confirm');
  $start_date = strtotime($form_state['values']['to_date']);
  $end_date = $start_date + 60;

  global $user;
  $user_id = $user->uid;
  $distributor_id = change_feeds_import_get_distributor_id($user_id);

  $billing_data_result = db_select('custom_billing_data', 'cb')
      ->condition('cb.distributor_id', $distributor_id, '=')
      ->condition('cb.created_date', array($start_date, $end_date), 'BETWEEN')
      ->fields('cb')
      ->execute()->fetchAll(PDO::FETCH_ASSOC);

  $party_packing_check = get_party_packing_from_party_code(NULL, $distributor_id);

  foreach ($billing_data_result as $key => $value) {
    $vehicle = $value['vehicle'];
    $loading_date = $value['loading_date'];
    $total_qty = $value['Sum_of_TOTAL_SALES_QTY'];
    $sku = $value['sku7_code'];
    $bill_number = $value['bill_number'];
    $pricelist_group = $value['PRICELIST_GROUP'];
    if (isset($res[$vehicle . "/" . $loading_date])) {
      $total_sku = $res[$vehicle . "/" . $loading_date]['sku_count'] ++;

      if ($pricelist_group == "PP") {
        $group++;
        if (($group / $res[$vehicle . "/" . $loading_date]['sku_count']) * 100 >= 90) {
          $group_party_packing = 1;
        }
        else {
          $group_party_packing = 0;
        }
      }
      if (isset($party_packing_check[$value['party_code']]) ? $party_packing_check[$value['party_code']] : 0 == 1) {
        $check++;
        if (($check / $res[$vehicle . "/" . $loading_date]['sku_count']) * 100 >= 90) {
          $party_packing = 1;
        }
        else {
          $party_packing = 0;
        }
      }

      $res[$vehicle . "/" . $loading_date]['total_count'] += $total_qty;
      $unique_sku_string = $vehicle . "" . $loading_date . "" . $sku;
      if (!in_array("$unique_sku_string", $temp_unique_sku_string)) {
        $res[$vehicle . "/" . $loading_date]['unique_count'] ++;
        $temp_unique_sku_string[] = $vehicle . "" . $loading_date . "" . $sku;
      }
    }
    else {
      $res[$vehicle . "/" . $loading_date] = array();
      $res[$vehicle . "/" . $loading_date]['sku_count'] = 1;
      $res[$vehicle . "/" . $loading_date]['total_count'] = $total_qty;
      $temp_unique_sku_string[] = $vehicle . "" . $loading_date . "" . $sku;
      $res[$vehicle . "/" . $loading_date]['unique_count'] = 1;
      if (isset($party_packing_check[$value['party_code']]) ? $party_packing_check[$value['party_code']] : 0 == 1) {
        $party_packing = 1;
        $check = 1;
      }
      else {
        $party_packing = 0;
      }

      if ($pricelist_group == "PP") {
        $group = 1;
        $group_party_packing = 1;
      }
      else {
        $group_party_packing = 0;
      }
    }

    $distint_sku_count = $res[$vehicle . "/" . $loading_date]['unique_count'];
    $sku_count = $res[$vehicle . "/" . $loading_date]['sku_count'];
    $total_qty_count = $res[$vehicle . "/" . $loading_date]['total_count'];

    $created_date = date("Y-m-d h:i:s", $value['date']);
    $party_packing_data[$vehicle . "/" . $loading_date]['VEHICLE'] = $vehicle;
    $party_packing_data[$vehicle . "/" . $loading_date]['LOADING_DATE'] = $loading_date;
    //$party_packing_data[$vehicle . "/" . $loading_date]['party_packing_date'] = $created_date;
    $party_packing_data[$vehicle . "/" . $loading_date]['loading_sheet_line'] = $distint_sku_count;
    $party_packing_data[$vehicle . "/" . $loading_date]['bill_lines'] = $sku_count;
    $party_packing_data[$vehicle . "/" . $loading_date]['each_units'] = $total_qty_count;
    $party_packing_data[$vehicle . "/" . $loading_date]['party_check'] = $party_packing;
    $party_packing_data[$vehicle . "/" . $loading_date]['party_pack'] = $group_party_packing;
  }

  foreach ($party_packing_data as $key => $val) {
    $party_packing_data_new[] = $val;
  }

  foreach ($party_packing_data_new as $key => $value) {
    $loading_date = date("Y-m-d", ($value['LOADING_DATE']));
    $node = new stdClass();
    $node->title = $value['VEHICLE'] . format_date(time());
    $node->type = "party_packing";
    node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
    $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
    $node->uid = $user->uid;
    $node->status = 1; //(1 or 0): published or not
    $node->comment = 1; // 0 = comments disabled, 1 = read only, 2 = read/write
    $node->field_party_packing_vehicle[$node->language][0]['value'] = $value['VEHICLE'];
    $node->field_party_packing_loading_date[$node->language][0]['value'] = $loading_date;
    //$node->field_party_packing_date[$node->language][0]['value'] = $value['party_packing_date'];
    $node->field_loading_sheet_line[$node->language][0]['value'] = $value['loading_sheet_line'];
    $node->field_bill_lines[$node->language][0]['value'] = $value['bill_lines'];
    $node->field_each_units[$node->language][0]['value'] = $value['each_units'];
    $node->field_distributor_uid['und'][0]['value'] = $distributor_id ? $distributor_id : 0;
    $node->field_party_packing_check['und'][0]['value'] = $value['party_check'];
    $node->field_party_packing_type['und'][0]['value'] = $value['party_pack'];
    $node = node_submit($node); // Prepare node for saving
    node_save($node);
  }
  drupal_set_message('Party Packing Data Created Successfully');
}

/**
 * 
 * User create sales data from billing upload
 */
function create_sales_billing_form_submit($form, &$form_state) {

  $start_date = strtotime($form_state['values']['to_date']);
  $end_date = $start_date + 60;

  global $user;
  $user_id = $user->uid;
  $distributor_id = change_feeds_import_get_distributor_id($user_id);
  
  $query = db_select('custom_billing_data', 'cb');

  $query->addField('cb', 'bill_number');
  $query->addField('cb', 'vehicle', 'vehicle');
  $query->addField('cb', 'loading_date', 'loading_date');
  $query->addField('cb', 'bill_date', 'bill_date');
  $query->addExpression('SUM(cb.Sum_of_NET_SALES_VALUE)', 'sum_net_sales_value');

  $query->condition('cb.distributor_id', $distributor_id);
  //$query->condition('cb.id', $max_billing_id, '>');
  $query->condition('cb.created_date', array($start_date, $end_date), 'BETWEEN');

  $query->groupBy('cb.bill_number');
  $results = $query->execute()->fetchAll();
  
  foreach ($results as $key => $value) {
    $nid = check_node_title_exists($value->bill_number, 'sales_register_data');
    $node = node_load($nid);
    if ($node) {
      $node->field_billing_van[LANGUAGE_NONE][0]['value'] = $value->vehicle;
      $node->field_billing_loading_date[LANGUAGE_NONE][0]['value'] = $value->loading_date;
      $node->field_sr_bill_date[LANGUAGE_NONE][0]['value'] = $value->bill_date;
      $node->field_bill_net_sales[LANGUAGE_NONE][0]['value'] = round($value->sum_net_sales_value, 2);
      // sum of net sales value from custom_billing_data to sales register
      node_save($node);
    }
  }
  
  drupal_set_message('Sales Register Data Created Successfully');
}

function send_email_for_impact_unprocessed() {
    $html = '<h2>Hi,</h2>
                 <h3>Below are the files which are present in Unprocess Directory.</h3>';
    
    $result = "";
    exec("sshpass -p 'Techub123#'  ssh -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no  sftpuser03@103.233.76.251 ls -l /unprocessed", $response);
    foreach ($response as $val) {

      if (strpos($val, 'TP2IMPACT_PARTYMASTER') !== false) {
        $result .= substr($val, - 67) . "\n";
      }
      else {
        $result .= substr($val, - 64) . "\n";
      }
    }
    
    $html .= "\n".$result;
    $params['subject'] = "IMPACT unprocessed File Details";
    $params['body'] = $html;
    $mail_to = variable_get('impact_unprocessed_to_email', 'abhishek.r@iksula.com');
    $from = variable_get('from_email', '');
    drupal_mail('adhoc_task', 'duplicate_data', $mail_to, LANGUAGE_NONE, $params, $from);
}

function create_van_cld_billing_form_submit($form, &$form_state) {

  $start_date = strtotime($form_state['values']['to_date']);
  $end_date = $start_date + 60;

  global $user;
  $user_id = $user->uid;
  $distributor_id = change_feeds_import_get_distributor_id($user_id);

  $query = db_select('custom_billing_data', 'cb');
  $query->join('field_data_field_sku7_code', 'gaisc', 'gaisc.field_sku7_code_value = cb.sku7_code');
  $query->condition('gaisc.bundle', 'sku7_code_master', '=');
  $query->join('node', 'nd', 'nd.nid = gaisc.entity_id');
  $query->condition('nd.uid', $distributor_id, '=');
  $query->join('field_data_field_unit_case_units_', 'fucu', 'fucu.entity_id = gaisc.entity_id');
  $query->condition('fucu.bundle', 'sku7_code_master', '=');
  $query->fields('cb', array('vehicle', 'loading_date', 'sku7_code', 'product_name', 'Sum_of_TOTAL_SALES_QTY', 'mrp', 'PRICELIST_GROUP'));
  $query->fields('fucu', array('field_unit_case_units__value'));
  $query->condition('cb.distributor_id', $distributor_id);
  //$query->condition('cb.id', $max_billing_id, '>');
  $query->condition('cb.created_date', array($start_date, $end_date), 'BETWEEN');
  $query->addExpression('floor(SUM(Sum_of_TOTAL_SALES_QTY) / field_unit_case_units__value)', 'cld');
  $query->addExpression('SUM(cb.Sum_of_TOTAL_SALES_QTY) - (field_unit_case_units__value * floor(SUM(Sum_of_TOTAL_SALES_QTY) / field_unit_case_units__value))', 'eaches');
  $query->groupBy('vehicle,loading_date,sku7_code');
  $query->havingCondition('cld', 0, '!=');
  $results = $query->execute()->fetchAll();
  
  foreach ($results as $key => $value) {
    $vehicle = $value->vehicle;
    $loading_date = $value->loading_date;
    $sku7_code = $value->sku7_code;
    $product_name = $value->product_name;
    $cld = $value->cld;
    $mrp = $value->mrp;
    $pricelist_group = $value->PRICELIST_GROUP;


    if ($cld != 0) {
      $stage_billing_data = db_insert('van_cld_data_table') // Table name no longer needs {}
          ->fields(array(
            'vehicle' => $vehicle,
            'loading_date' => $loading_date,
            'sku7_code' => $sku7_code,
            'product_name' => $product_name,
            'distributor_id' => $distributor_id,
            'cld' => $cld,
            'mrp' => $mrp,
            'pricelist_group' => $pricelist_group,
          ))
          ->execute();
    }
  }
  drupal_set_message('Van CLD Data Created Successfully');
}

/**
 * Fill zoho
 */
function send_email_to_fill_zoho() {
  if (date('N') < 6) {
    $html = '<h2>Hi Team,</h2>
                 <h3>This is a scheduled reminder to fill your Zoho timesheet.</h3> 
               <h4>Please ignore if you have filled it already.</h4>
               ZOHO URL: https://projects.zoho.com/portal/iksulapmt#allprojects
               JIRA URL: https://blisstering.atlassian.net/plugins/servlet/ac/is.origo.jira.tempo-plugin/tempo-my-work
               
*** This is an automatically generated email, please do not reply ***';
    $params['subject'] = "Bhai Pls Zoho Bhar De!!";
    $params['body'] = $html;
    $mail_to = variable_get('zoho_fill', "abhishek.r@iksula.com");
    $from = "zoho@salarydeduction.com";
    drupal_mail('adhoc_task', 'duplicate_data', $mail_to, LANGUAGE_NONE, $params, $from);
  }
}
