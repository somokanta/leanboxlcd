<?php

/**
 * Files containing list of custom blocks
 * having graph data integrated using google chart
 */

/**
 * Implements hook_menu
 */
function leanbox_dashboard_menu() {
  $items = array();
  
  $items['sales-return-data'] = array(
    'title' => 'Sales Return Data',
    'page callback' => 'sales_return_data_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['sales-delivery-table'] = array(
    'title' => 'Sales Delivery Report',
    'access arguments' => array('Distributor Upload File'),
    'page callback' => 'leanbox_dashboard_sales_delivery_table_callback',
  );
    
  $items['sales-delivery-table/export'] = array(
    'title' => 'Sales Delivery Report Export',
    'description' => 'Sales Delivery Report Export',
    'page callback' => 'leanbox_dashboard_sales_delivery_table_export',
    'access arguments' => array('Distributor Upload File'),
  );

  $items['dashboard'] = array(
    'page callback' => 'leanbox_dashboard_listing_page',
    'access arguments' => array('Distributor Upload File'),
    'type' => MENU_NORMAL_ITEM,
  );

  $categories = array(
    'Progress' => 'Current Day Progress',
    'Metrics' => 'Metrics',
    'Productivity' => 'Productivity',
    'ota' => 'Process-On-Time Adherence',
    //'Dispatch' => 'Dispatch',
  );

  $items['dashboard/Progress'] = array(
    'title' => 'Progress',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
    'access arguments' => array('Distributor Upload File'),
  );
  $items['Dispatch1'] = array(
    'page callback' => 'leanbox_dashboard_listing_page',
    'access arguments' => array('Distributor Upload File'),
    'type' => MENU_NORMAL_ITEM,
  );


  $d = 1;
  foreach ($categories as $k => $v) {
    $items['dashboard/' . $k] = array(
      'title' => $v,
      'access arguments' => array('Distributor Upload File'),
      'type' => MENU_LOCAL_TASK,
      'weight' => $d++,
    );
  }

  // Upload form for sales register data
  $items['area-hook-group/import'] = array(
    'title' => 'Area Hook Group',
    'description' => 'Import Area Hook Group',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('leanbox_dashboard_area_hook_group_form'),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'includes/leanbox_dashboard_areahookgroup.inc',
  );

  $items['area-hook-group-confirm/%'] = array(
    'title' => 'Area Hook Group Confirm Table',
    'description' => 'Area Hook Group Confirm Table',
    'page callback' => 'leanbox_dashboard_area_hook_group_confirm_content',
    'page arguments' => array(1),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'includes/leanbox_dashboard_areahookgroup.inc',
  );

  // when confirm is clicked
  $items['area-hook-group-confirm/create_content/%'] = array(
    'title' => 'Area Hook Group',
    'description' => 'Area Hook Group create Update node of Area Hook Group',
    'page callback' => 'leanbox_dashboard_area_hook_group_create_confirm_content',
    'page arguments' => array(2),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'includes/leanbox_dashboard_areahookgroup.inc',
  );

  // when discard is clicked
  $items['area-hook-group-discard/%'] = array(
    'title' => 'Area Hook Group delete',
    'description' => 'deletes area hook group data',
    'page callback' => 'leanbox_dashboard_area_hook_group_discard_data',
    'page arguments' => array(1),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'includes/leanbox_dashboard_areahookgroup.inc',
  );


  $items['area-hook-grouping'] = array(
    'title' => 'Area Hook Grouping',
    'page callback' => 'leanbox_dashboard_area_hook_grouping_callback',
    'access arguments' => array('Distributor Upload File'),
    'file path' => drupal_get_path('module', 'leanbox_dashboard'),
    'file' => '/includes/leanbox_dashboard_areahook.inc',
  );
  $items['area-hook-grouping-download'] = array(
    'title' => 'Area Hook Grouping Download',
    'page callback' => 'leanbox_dashboard_area_hook_grouping_download',
    'access arguments' => array('Distributor Upload File'),
    'file path' => drupal_get_path('module', 'leanbox_dashboard'),
    'file' => '/includes/leanbox_dashboard_areahook.inc',
  );
  $items['chart-daterange-filter'] = array(
    'title' => 'Party Packing',
    'page callback' => 'party_packing_filter_callback',
    'access arguments' => array('Distributor Upload File'),
  );
  $items['leanbox-chart-details/%'] = array(
    'title ' => '',
    'page callback' => 'leanbox_dashboard_chart_details_callback',
    'page arguments' => array(1),
    'access arguments' => array('Distributor Upload File'),
    'file path' => drupal_get_path('module', 'leanbox_dashboard'),
    'file' => '/includes/leanbox_dashboard_chart.inc',
  );

  return $items;
}

/**
 * Callback function for dashboard page
 * @return string
 */
function leanbox_dashboard_listing_page() {
  return '';
}

/**
 * 
 */
function party_packing_filter_callback() {
  module_load_include('inc', 'leanbox_dashboard', 'includes/leanbox_dashboard');
  $start_date = $end_date = '';
  $activity_type = $_POST['activity_type'];
  $ajax_type = '';

  if (isset($_POST['start_date'])) {
    $start_date = $_POST['start_date'];
  }
  if (isset($_POST['end_date'])) {
    $end_date = $_POST['end_date'];
  }

  switch ($activity_type) {
    case 'otif' :
      $activity_type = $_POST['url'];
      $output_data = leanbox_dashboard_gauge_chart_query_details($activity_type, $start_date, $end_date, FALSE);
      break;

    case 'party_packing_productivity' :
      $ajax_type = 'party_packing_ajax';
      $output_data = leanbox_dashboard_chart_query_details($activity_type, $start_date, $end_date, $ajax_type);
      break;

    case 'picking_productivity' :
      $ajax_type = 'picking_ajax';
      $output_data = leanbox_dashboard_chart_query_details($activity_type, $start_date, $end_date, $ajax_type);
      break;

    case 'bill_pendency' :
      $ajax_type = 'bill_pendency_ajax';
      $output_data = leanbox_dashboard_chart_query_details($activity_type, $start_date, $end_date, $ajax_type);
      break;

    case 'otif_trends' :
      $activity_type = 'otif_ajax';
      $output_data = leanbox_dashboard_otif_trends_chart_query_details($activity_type, $start_date, $end_date);
      break;

    default:
      $output_data = leanbox_dashboard_chart_query_details($activity_type, $start_date, $end_date, $ajax_type);
  }
  drupal_json_output($output_data);
}

/**
 * 
 */
function leanbox_dashboard_block_info() {
  $blocks['party_packing'] = array(
    'info' => t('Party Packing Chart'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['picking'] = array(
    'info' => t('Picking Loose Chart'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['picking_bulk'] = array(
    'info' => t('Picking Bulk Chart'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['unloading'] = array(
    'info' => t('Unloading Chart'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['delivery'] = array(
    'info' => t('Sales Delivery Chart'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['otif'] = array(
    'info' => t('Otif'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['party_packing_productivity'] = array(
    'info' => t('Party Packing Productivity'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['picking_productivity'] = array(
    'info' => t('Picking Productivity'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['bills_per_person'] = array(
    'info' => t('Bills Delivered Per Person'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['bills_per_van'] = array(
    'info' => t('Bills Delivered Per Van'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['pp_ota'] = array(
    'info' => t('PP On Time Adherence'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['picking_ota'] = array(
    'info' => t('Picking On Time Adherence'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['unloading_ota'] = array(
    'info' => t('Unloading On Time Adherence'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['dispatch_ota'] = array(
    'info' => t('Dispatch On Time Adherence'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['outlet_status'] = array(
    'info' => t('Outlet Status'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['bill_pendency'] = array(
    'info' => t('Bill Pendency'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['otif_trends'] = array(
    'info' => t('Otif Day Wise Trends'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['bills_per_van_trends'] = array(
    'info' => t('Bills Per Van Day Wise Trends'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['bills_per_person_trends'] = array(
    'info' => t('Bills Per Person Day Wise Trends'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['unloading_daywise_trends'] = array(
    'info' => t('Bills Unloading Day Wise Trends'),
    'cache' => DRUPAL_NO_CACHE,
  );
  $blocks['sales_delivery_table'] = array(
    'info' => t('Sales Delivery Table'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view
 * 
 */
function leanbox_dashboard_block_view($delta = '') {
  // Include leanbox_dashboard inc file
  module_load_include('inc', 'leanbox_dashboard', 'includes/leanbox_dashboard');
  $area_definition = array(
    'width' => 550,
    'height' => 300,
    'ch_left' => 50,
    'ch_top' => 50,
    'ch_width' => 450,
    'ch_height' => 200,
  );
  switch ($delta) {
    case 'party_packing':

      if (arg(1) == 'party_packing') {
        $area_definition = array(
          'width' => 700,
          'height' => 400,
          'ch_left' => 80,
          'ch_top' => 50,
          'ch_width' => 500,
          'ch_height' => 250,
        );
      }

      $loading_date = date('d-m-Y');
      $block['subject'] = "Party Packing Progress ($loading_date)";
      $data = leanbox_dashboard_chart_query_details('party_packing');
      $filter_form = drupal_render(drupal_get_form('leanbox_dashboard_chart_filter_partypack_form'));
      $block['content'] = array(
        '#markup' => theme('leanbox_dashboard', array('data' => $filter_form)),
        '#attached' => array(
          'js' => array(
            array(
              'type' => 'external',
              'data' => 'https://www.gstatic.com/charts/loader.js'
            ),
            drupal_get_path('module', 'leanbox_dashboard') . '/js/leanbox_dashboard_partypackingchart.js',
            array(
              'data' => array('leanbox_dashboard' => array('party_packing' => $data, 'area_definition' => $area_definition)),
              'type' => 'setting'
            ),
          ),
        ),
      );
      break;

    case 'picking':

      if (arg(1) == 'picking') {
        $area_definition = array(
          'width' => 700,
          'height' => 400,
          'ch_left' => 80,
          'ch_top' => 50,
          'ch_width' => 500,
          'ch_height' => 250,
        );
      }
      $loading_date = date('d-m-Y');
      $block['subject'] = "Loose Picking Progress ($loading_date)";
      $data = leanbox_dashboard_chart_query_details('picking');

      $filter_form = drupal_render(drupal_get_form('leanbox_dashboard_chart_filter_picking_form'));
      $block['content'] = array(
        '#markup' => theme('leanbox_dashboard', array('data' => $filter_form)),
        '#attached' => array(
          'js' => array(
            array(
              'type' => 'external',
              'data' => 'https://www.gstatic.com/charts/loader.js'
            ),
            drupal_get_path('module', 'leanbox_dashboard') . '/js/leanbox_dashboard_pickingchart.js',
            array(
              'data' => array('leanbox_dashboard' => array('picking' => $data, 'area_definition' => $area_definition)),
              'type' => 'setting'
            ),
          ),
        ),
      );
      break;

    case 'picking_bulk':

      if (arg(1) == 'picking_bulk') {
        $area_definition = array(
          'width' => 700,
          'height' => 400,
          'ch_left' => 80,
          'ch_top' => 50,
          'ch_width' => 500,
          'ch_height' => 250,
        );
      }
      $loading_date = date('d-m-Y');
      $block['subject'] = "Bulk Picking Progress ($loading_date)";
      $data = leanbox_dashboard_chart_query_details('picking_bulk');

      $filter_form = drupal_render(drupal_get_form('leanbox_dashboard_chart_filter_picking_bulk_form'));
      $block['content'] = array(
        '#markup' => theme('leanbox_dashboard', array('data' => $filter_form)),
        '#attached' => array(
          'js' => array(
            array(
              'type' => 'external',
              'data' => 'https://www.gstatic.com/charts/loader.js'
            ),
            drupal_get_path('module', 'leanbox_dashboard') . '/js/leanbox_dashboard_pickingbulkchart.js',
            array(
              'data' => array('leanbox_dashboard' => array('picking_bulk' => $data, 'area_definition' => $area_definition)),
              'type' => 'setting'
            ),
          ),
        ),
      );
      break;

    case 'unloading':

      if (arg(1) == 'unloading') {
        $area_definition = array(
          'width' => 700,
          'height' => 400,
          'ch_left' => 80,
          'ch_top' => 50,
          'ch_width' => 500,
          'ch_height' => 250,
        );
      }
      // $loading_date = date('d-m-Y');
      $block['subject'] = "Unloading Progress (% Invoices)";
      $data = leanbox_dashboard_chart_query_details('unloading');

      $filter_form = drupal_render(drupal_get_form('leanbox_dashboard_chart_filter_unloading_form'));
      $block['content'] = array(
        '#markup' => theme('leanbox_dashboard', array('data' => $filter_form)),
        '#attached' => array(
          'js' => array(
            array(
              'type' => 'external',
              'data' => 'https://www.gstatic.com/charts/loader.js'
            ),
            drupal_get_path('module', 'leanbox_dashboard') . '/js/leanbox_dashboard_unloading.js',
            array(
              'data' => array('leanbox_dashboard' => array('unloading' => $data, 'area_definition' => $area_definition)),
              'type' => 'setting'
            ),
          ),
        ),
      );
      break;

    case 'delivery':

      if (arg(1) == 'delivery') {
        $area_definition = array(
          'width' => 700,
          'height' => 400,
          'ch_left' => 80,
          'ch_top' => 50,
          'ch_width' => 500,
          'ch_height' => 250,
        );
      }
      $billing_date = strtotime(date('Y-m-d') . "- 7 days");
      $billing_date = date('d-m-Y', $billing_date);
      $block['subject'] = "Return Value % ($billing_date Billing)";
      $data = leanbox_dashboard_chart_query_details('delivery', $billing_date, $billing_date);

      $filter_form = drupal_render(drupal_get_form('leanbox_dashboard_chart_filter_delivery_form'));
      $block['content'] = array(
        '#markup' => theme('leanbox_dashboard', array('data' => $filter_form)),
        '#attached' => array(
          'js' => array(
            array(
              'type' => 'external',
              'data' => 'https://www.gstatic.com/charts/loader.js'
            ),
            drupal_get_path('module', 'leanbox_dashboard') . '/js/leanbox_dashboard_delivery.js',
            array(
              'data' => array('leanbox_dashboard' => array('delivery' => $data, 'area_definition' => $area_definition)),
              'type' => 'setting'
            ),
          ),
        ),
      );
      break;

    case 'party_packing_productivity':

      if (arg(1) == 'party_packing_productivity') {
        $area_definition = array(
          'width' => 700,
          'height' => 400,
          'ch_left' => 80,
          'ch_top' => 50,
          'ch_width' => 500,
          'ch_height' => 250,
        );
      }

      $loading_date = date('d-m-Y');
      $block['subject'] = "Party Packing Productivity ($loading_date Loading)";
      $data = leanbox_dashboard_chart_query_details('party_packing_productivity');
      $filter_form = drupal_render(drupal_get_form('leanbox_dashboard_chart_filter_partypack_productivity_form'));
      $block['content'] = array(
        '#markup' => theme('leanbox_dashboard', array('data' => $filter_form, 'otif_table' => $data['table'])),
        '#attached' => array(
          'js' => array(
            array(
              'type' => 'external',
              'data' => 'https://www.gstatic.com/charts/loader.js'
            ),
            drupal_get_path('module', 'leanbox_dashboard') . '/js/leanbox_dashboard_partypackingproductivitychart.js',
            array(
              'data' => array('leanbox_dashboard' => array('party_packing_productivity' => $data['output'], 'area_definition' => $area_definition)),
              'type' => 'setting'
            ),
          ),
        ),
      );
      break;

    case 'picking_productivity':

      if (arg(1) == 'picking_productivity') {
        $area_definition = array(
          'width' => 700,
          'height' => 400,
          'ch_left' => 80,
          'ch_top' => 50,
          'ch_width' => 500,
          'ch_height' => 250,
        );
      }

      $loading_date = date('d-m-Y');
      $block['subject'] = "Picking Productivity ($loading_date Loading)";
      $data = leanbox_dashboard_chart_query_details('picking_productivity');
      $filter_form = drupal_render(drupal_get_form('leanbox_dashboard_chart_filter_picking_productivity_form'));
      $block['content'] = array(
        '#markup' => theme('leanbox_dashboard', array('data' => $filter_form, 'otif_table' => $data['table'])),
        '#attached' => array(
          'js' => array(
            array(
              'type' => 'external',
              'data' => 'https://www.gstatic.com/charts/loader.js'
            ),
            drupal_get_path('module', 'leanbox_dashboard') . '/js/leanbox_dashboard_pickingproductivitychart.js',
            array(
              'data' => array('leanbox_dashboard' => array('picking_productivity' => $data['output'], 'area_definition' => $area_definition)),
              'type' => 'setting'
            ),
          ),
        ),
      );
      break;

    case 'bill_pendency':

      if (arg(1) == 'bill_pendency') {
        $area_definition = array(
          'width' => 700,
          'height' => 400,
          'ch_left' => 80,
          'ch_top' => 50,
          'ch_width' => 500,
          'ch_height' => 250,
        );
      }

      $loading_date = date('d-m-Y', strtotime("-1 days"));
      $block['subject'] = "Dispatch Pendency ($loading_date Billing)";
      $data = leanbox_dashboard_chart_query_details('bill_pendency', $loading_date, $loading_date);
      $filter_form = drupal_render(drupal_get_form('leanbox_dashboard_chart_filter_bill_pendency_form'));
      $block['content'] = array(
        '#markup' => theme('leanbox_dashboard', array('data' => $filter_form, 'otif_table' => $data['table'])),
        '#attached' => array(
          'js' => array(
            array(
              'type' => 'external',
              'data' => 'https://www.gstatic.com/charts/loader.js'
            ),
            drupal_get_path('module', 'leanbox_dashboard') . '/js/leanbox_dashboard_bill_pendencychart.js',
            array(
              'data' => array('leanbox_dashboard' => array('bill_pendency' => $data['output'], 'area_definition' => $area_definition)),
              'type' => 'setting'
            ),
          ),
        ),
      );
      break;

    case 'otif':

      $bill_date = leanbox_dashboard_get_default_pdd_date_for_chart();
      $bill_date = date('d-m-Y', $bill_date);
      $block['subject'] = "OTIF Dispatch Value ($bill_date Billing)";
      $data = leanbox_dashboard_gauge_chart_query_details('otif');

      $filter_form = drupal_render(drupal_get_form('leanbox_dashboard_chart_filter_otif_form'));
      $block['content'] = array(
        '#markup' => theme('leanbox_dashboard', array('data' => $filter_form, 'otif_table' => $data['table'],)),
        '#attached' => array(
          'js' => array(
            array(
              'type' => 'external',
              'data' => 'https://www.gstatic.com/charts/loader.js'
            ),
            drupal_get_path('module', 'leanbox_dashboard') . '/js/leanbox_dashboard_otifchart.js',
            array(
              'data' => array('leanbox_dashboard' => array('otif' => $data['output'],)),
              'type' => 'setting'
            ),
          ),
        ),
      );
      break;

    case 'otif_trends':

      $bill_date = leanbox_dashboard_get_default_pdd_date_for_chart();
      $bill_date = date('d-m-Y', $bill_date);
      $block['subject'] = "OTIF Dispatch Value Day Wise ($bill_date Billing)";
      $data = leanbox_dashboard_otif_trends_chart_query_details('otif_trends');

      $filter_form = drupal_render(drupal_get_form('leanbox_dashboard_chart_filter_otif_trends_form'));
      $block['content'] = array(
        '#markup' => theme('leanbox_dashboard', array('data' => $filter_form)),
        '#attached' => array(
          'js' => array(
            drupal_get_path('module', 'leanbox_dashboard') . '/js/leanbox_dashboard_otif_trends_chart.js',
            array(
              'data' => array('leanbox_dashboard' => array('otif_trends' => $data,)),
              'type' => 'setting'
            ),
          ),
        ),
      );
      break;

    case 'sales_delivery_table':

      $loading_date = date('d-m-Y');
      $block['subject'] = "Sales Delivery Table($loading_date Bill)";
      $data = leanbox_dashboard_chart_query_details('sales_delivery_table');

      $filter_form = drupal_render(drupal_get_form('leanbox_dashboard_chart_filter_sales_delivery_table_form'));
      $block['content'] = array(
        '#markup' => theme('leanbox_dashboard', array('data' => $filter_form)),
        '#attached' => array(
          'js' => array(
            drupal_get_path('module', 'leanbox_dashboard') . '/js/leanbox_dashboard_sales_delivery_table_chart.js',
            array(
              'data' => array('leanbox_dashboard' => array('sales_delivery_table' => $data,)),
              'type' => 'setting'
            ),
          ),
        ),
      );
      break;

    case 'bills_per_van_trends':

      $loading_date = date('d-m-Y');
      $block['subject'] = "Bills Per Van DayWise($loading_date Dispatch)";
      $data = leanbox_dashboard_chart_query_details('bills_per_van_trends');

      $filter_form = drupal_render(drupal_get_form('leanbox_dashboard_chart_filter_bills_per_van_trends_form'));
      $block['content'] = array(
        '#markup' => theme('leanbox_dashboard', array('data' => $filter_form)),
        '#attached' => array(
          'js' => array(
            drupal_get_path('module', 'leanbox_dashboard') . '/js/leanbox_dashboard_bills_per_van_trends_chart.js',
            array(
              'data' => array('leanbox_dashboard' => array('bills_per_van_trends' => $data,)),
              'type' => 'setting'
            ),
          ),
        ),
      );
      break;
    case 'bills_per_person_trends':

      $loading_date = date('d-m-Y');
      $block['subject'] = "Bills Per Person DayWise($loading_date Dispatch)";
      $data = leanbox_dashboard_chart_query_details('bills_per_person_trends');

      $filter_form = drupal_render(drupal_get_form('leanbox_dashboard_chart_filter_bills_per_person_trends_form'));
      $block['content'] = array(
        '#markup' => theme('leanbox_dashboard', array('data' => $filter_form)),
        '#attached' => array(
          'js' => array(
            drupal_get_path('module', 'leanbox_dashboard') . '/js/leanbox_dashboard_bills_per_person_trends_chart.js',
            array(
              'data' => array('leanbox_dashboard' => array('bills_per_person_trends' => $data,)),
              'type' => 'setting'
            ),
          ),
        ),
      );
      break;

    case 'bills_per_person':

      if (arg(1) == 'bills_per_person') {
        $area_definition = array(
          'width' => 700,
          'height' => 400,
          'ch_left' => 80,
          'ch_top' => 50,
          'ch_width' => 500,
          'ch_height' => 250,
        );
      }

      $loading_date = date('d-m-Y');
      $block['subject'] = "Bills Per Person ($loading_date Dispatch)";
      $data = leanbox_dashboard_chart_query_details('bills_per_person');
      $filter_form = drupal_render(drupal_get_form('leanbox_dashboard_chart_filter_billsperperson_form'));
      $block['content'] = array(
        '#markup' => theme('leanbox_dashboard', array('data' => $filter_form)),
        '#attached' => array(
          'js' => array(
            array(
              'type' => 'external',
              'data' => 'https://www.gstatic.com/charts/loader.js'
            ),
            drupal_get_path('module', 'leanbox_dashboard') . '/js/leanbox_dashboard_billsperpersonchart.js',
            array(
              'data' => array('leanbox_dashboard' => array('bills_per_person' => $data, 'area_definition' => $area_definition)),
              'type' => 'setting'
            ),
          ),
        ),
      );
      break;


    case 'bills_per_van':

      if (arg(1) == 'bills_per_van') {
        $area_definition = array(
          'width' => 700,
          'height' => 400,
          'ch_left' => 80,
          'ch_top' => 50,
          'ch_width' => 500,
          'ch_height' => 250,
        );
      }

      $loading_date = date('d-m-Y');
      $block['subject'] = "Bills Per Van ($loading_date Dispatch)";
      $data = leanbox_dashboard_chart_query_details('bills_per_van');
      $filter_form = drupal_render(drupal_get_form('leanbox_dashboard_chart_filter_billspervan_form'));
      $block['content'] = array(
        '#markup' => theme('leanbox_dashboard', array('data' => $filter_form)),
        '#attached' => array(
          'js' => array(
            array(
              'type' => 'external',
              'data' => 'https://www.gstatic.com/charts/loader.js'
            ),
            drupal_get_path('module', 'leanbox_dashboard') . '/js/leanbox_dashboard_billspervanchart.js',
            array(
              'data' => array('leanbox_dashboard' => array('bills_per_van' => $data, 'area_definition' => $area_definition)),
              'type' => 'setting'
            ),
          ),
        ),
      );
      break;

    case 'pp_ota':

      if (arg(1) == 'pp_ota') {
        $area_definition = array(
          'width' => 700,
          'height' => 400,
          'ch_left' => 80,
          'ch_top' => 50,
          'ch_width' => 500,
          'ch_height' => 250,
        );
      }

      $loading_date = date('d-m-Y');
      $dis_time = leanbox_dashboard_van_stop_master('field_pp_finish_time');
      $block['subject'] = "Party Packing OTA ($loading_date Loading) Target : $dis_time ";
      $data = leanbox_dashboard_chart_query_details('pp_ota');
      $filter_form = drupal_render(drupal_get_form('leanbox_dashboard_chart_filter_pp_ota_form'));
      $block['content'] = array(
        '#markup' => theme('leanbox_dashboard', array('data' => $filter_form)),
        '#attached' => array(
          'js' => array(
            array(
              'type' => 'external',
              'data' => 'https://www.gstatic.com/charts/loader.js'
            ),
            drupal_get_path('module', 'leanbox_dashboard') . '/js/leanbox_dashboard_pp_ota.js',
            array(
              'data' => array('leanbox_dashboard' => array('pp_ota' => $data, 'area_definition' => $area_definition)),
              'type' => 'setting'
            ),
          ),
        ),
      );
      break;

    case 'picking_ota':

      if (arg(1) == 'picking_ota') {
        $area_definition = array(
          'width' => 700,
          'height' => 400,
          'ch_left' => 80,
          'ch_top' => 50,
          'ch_width' => 500,
          'ch_height' => 250,
        );
      }

      $loading_date = date('d-m-Y');
      $dis_time = leanbox_dashboard_van_stop_master('field_picking_finish_time');
      $block['subject'] = "Picking OTA VAN Loose ($loading_date Loading) Target : $dis_time";
      $data = leanbox_dashboard_chart_query_details('picking_ota');
      $filter_form = drupal_render(drupal_get_form('leanbox_dashboard_chart_filter_picking_ota_form'));
      $block['content'] = array(
        '#markup' => theme('leanbox_dashboard', array('data' => $filter_form)),
        '#attached' => array(
          'js' => array(
            array(
              'type' => 'external',
              'data' => 'https://www.gstatic.com/charts/loader.js'
            ),
            drupal_get_path('module', 'leanbox_dashboard') . '/js/leanbox_dashboard_picking_ota.js',
            array(
              'data' => array('leanbox_dashboard' => array('picking_ota' => $data, 'area_definition' => $area_definition)),
              'type' => 'setting'
            ),
          ),
        ),
      );
      break;

    case 'unloading_ota':

      if (arg(1) == 'unloading_ota') {
        $area_definition = array(
          'width' => 700,
          'height' => 400,
          'ch_left' => 80,
          'ch_top' => 50,
          'ch_width' => 500,
          'ch_height' => 250,
        );
      }

      $loading_date = date('d-m-Y');
      $dis_time = leanbox_dashboard_van_stop_master('field_unloading_finish_time');
      $block['subject'] = "Unloading OTA ($loading_date EGIR) Target: $dis_time ";
      $data = leanbox_dashboard_chart_query_details('unloading_ota');
      $filter_form = drupal_render(drupal_get_form('leanbox_dashboard_chart_filter_unloading_ota_form'));
      $block['content'] = array(
        '#markup' => theme('leanbox_dashboard', array('data' => $filter_form)),
        '#attached' => array(
          'js' => array(
            array(
              'type' => 'external',
              'data' => 'https://www.gstatic.com/charts/loader.js'
            ),
            drupal_get_path('module', 'leanbox_dashboard') . '/js/leanbox_dashboard_unloading_ota.js',
            array(
              'data' => array('leanbox_dashboard' => array('unloading_ota' => $data, 'area_definition' => $area_definition)),
              'type' => 'setting'
            ),
          ),
        ),
      );
      break;

    case 'unloading_daywise_trends':

      $loading_date = date('d-m-Y');
      $block['subject'] = "Unloading DayWise($loading_date EGIR)";
      $data = leanbox_dashboard_chart_query_details('unloading_daywise_trends');

      $filter_form = drupal_render(drupal_get_form('leanbox_dashboard_chart_filter_unloading_daywise_trends_form'));
      $block['content'] = array(
        '#markup' => theme('leanbox_dashboard', array('data' => $filter_form)),
        '#attached' => array(
          'js' => array(
            drupal_get_path('module', 'leanbox_dashboard') . '/js/leanbox_dashboard_unloading_daywise_trends_chart.js',
            array(
              'data' => array('leanbox_dashboard' => array('unloading_daywise_trends' => $data,)),
              'type' => 'setting'
            ),
          ),
        ),
      );
      break;

    case 'dispatch_ota':

      if (arg(1) == 'dispatch_ota') {
        $area_definition = array(
          'width' => 700,
          'height' => 400,
          'ch_left' => 80,
          'ch_top' => 50,
          'ch_width' => 500,
          'ch_height' => 250,
        );
      }

      $bill_date = leanbox_dashboard_get_default_pdd_date_for_chart();
      $loading_date = date('d-m-Y', $bill_date);
      //$loading_date = date('d-m-Y') - "1 days";
      $dis_time = leanbox_dashboard_van_stop_master('field_otif_finish_time');
      $block['subject'] = "Dispatch OTA ($loading_date Billing) Target : $dis_time ";
      $data = leanbox_dashboard_chart_query_details('dispatch_ota');
      $filter_form = drupal_render(drupal_get_form('leanbox_dashboard_chart_filter_dispatch_ota_form'));
      $block['content'] = array(
        '#markup' => theme('leanbox_dashboard', array('data' => $filter_form)),
        '#attached' => array(
          'js' => array(
            array(
              'type' => 'external',
              'data' => 'https://www.gstatic.com/charts/loader.js'
            ),
            drupal_get_path('module', 'leanbox_dashboard') . '/js/leanbox_dashboard_dispatch_ota.js',
            array(
              'data' => array('leanbox_dashboard' => array('dispatch_ota' => $data, 'area_definition' => $area_definition)),
              'type' => 'setting'
            ),
          ),
        ),
      );
      break;

    case 'outlet_status':

      $loading_date = date('d-m-Y');
      $block['subject'] = "Outlet Status";
      $data = leanbox_dashboard_chart_query_details('outlet_status');
      $block['content'] = array(
        '#markup' => theme('leanbox_dashboard', array('data' => $data)),
      );
      break;
  }

  return $block;
}

/**
 * Implements hook_theme
 */
function leanbox_dashboard_theme() {
  return array(
    'leanbox_dashboard' => array(
      'template' => 'leanbox-dashboard',
      'variables' => array('data' => NULL, 'otif_table' => NULL),
    ),
  );
}

/**
 * Implements hook_preprocess_page
 * @param type $vars
 */
function leanbox_dashboard_preprocess_page(&$vars) {
  $arg = drupal_get_path_alias();
  if ($arg == 'dashboard') {
    drupal_add_js(drupal_get_path('module', 'leanbox_dashboard') . '/js/leanbox_dashboard.js');
  }
}

function leanbox_dashboard_get_areahookgroup_entity($title, $day_tid) {
  $query = db_select('node', 'n');
  $query->addTag('node_uid');
  $query->condition('n.type', 'area_hook_master');
  $query->join('field_data_field_area_hook_day', 'a', 'a.entity_id = n.nid');
  $query->leftjoin('field_data_field_area_hook_group', 'g', 'g.entity_id = n.nid');

  $query->condition('a.field_area_hook_day_tid', $day_tid);
  $query->condition('n.title', $title);
  $query->fields('g', array('field_area_hook_group_value'));
  $query->fields('n', array('nid'));
  $output = $query->execute()->fetch(PDO::FETCH_ASSOC); // list of all area hook
  return $output;
}

function leanbox_dashboard_target_value_using_voc_name($vname) {
  $uid = $GLOBALS['user']->uid;
  $distributor_id = change_feeds_import_get_distributor_id($uid);
  $query1 = db_select('node', 'n');
  $query1->leftjoin('field_data_field_dets_bulk', 'v', 'v.entity_id = n.nid');
  $query1->leftjoin('field_data_field_dets_loose', 'l', 'v.entity_id = n.nid');
  $query1->leftjoin('field_data_field_fnb_bulk', 'fv', 'fv.entity_id = n.nid');
  $query1->leftjoin('field_data_field_fnb_loose', 'fl', 'fl.entity_id = n.nid');
  $query1->leftjoin('field_data_field_non_pp', 'np', 'np.entity_id = n.nid');
  $query1->leftjoin('field_data_field_pp', 'pp', 'pp.entity_id = n.nid');
  $query1->leftjoin('field_data_field_pp_bulk', 'pb', 'pb.entity_id = n.nid');
  $query1->leftjoin('field_data_field_pp_loose', 'pl', 'pl.entity_id = n.nid');
  $query1->fields('v', array('field_dets_bulk_value'));
  $query1->fields('l', array('field_dets_loose_value'));
  $query1->fields('fv', array('field_fnb_bulk_value'));
  $query1->fields('fl', array('field_fnb_loose_value'));
  $query1->fields('np', array('field_non_pp_value'));
  $query1->fields('pp', array('field_pp_value'));
  $query1->fields('pb', array('field_pp_bulk_value'));
  $query1->fields('pl', array('field_pp_loose_value'));
  $query1->condition('n.uid', $distributor_id);
  $query1->condition('n.type', 'van_stop_master');
  $res = $query1->execute()->fetch(PDO::FETCH_ASSOC);

  $target['dets bulk'] = $res['field_dets_bulk_value'];
  $target['dets loose'] = $res['field_dets_loose_value'];
  $target['fnb bulk'] = $res['field_fnb_bulk_value'];
  $target['fnb loose'] = $res['field_fnb_loose_value'];
  $target['NON-PP'] = $res['field_non_pp_value'];
  $target['PP'] = $res['field_pp_value'];
  $target['pp bulk'] = $res['field_pp_bulk_value'];
  $target['pp loose'] = $res['field_pp_loose_value'];

  return $target;
}

/**
 * 
 * @param type $vname
 * @return array
 */
function leanbox_dashboard_all_value_using_voc_name($vname) {
  $query1 = db_select('taxonomy_term_data', 't');
  $query1->join('taxonomy_vocabulary', 'v', 'v.vid = t.vid');
  $query1->condition('v.name', $vname);
  $query1->fields('t', array('tid', 'name'));
  $target = $query1->execute()->fetchAllKeyed(0, 1);
  return $target;
}

/**
 * 
 * @param array $form
 * @param array $form_state
 * @return array
 */
function leanbox_dashboard_chart_filter_sales_delivery_report_form($form, &$form_state) {

  $bill_no = '';
  if (isset($_GET['bill_no']) && !empty($_GET['bill_no'])) {
    $bill_no = $_GET['bill_no'];
  }
  
  if (isset($_GET['delivered_amt'])) {
    $delivered_amt = $_GET['delivered_amt'];
  }
  else {
    $delivered_amt = 'all';
  }

  
  if (isset($_GET['start_date'])) {
    $start_date = $_GET['start_date'];
  }
  else {
    $start_date = date('Y-m-d');
  }

  if (isset($_GET['start_date'])) {
    $end_date = $_GET['start_date'];
  } 
  else {
    $end_date = date('Y-m-d');
  }
  
  $form['start_date'] = array(
    '#type' => 'date_popup',
    '#title' => t('Bill Date From'),
    '#date_format' => 'Y-m-d',
    '#default_value' => $start_date,
  );
  $form['end_date'] = array(
    '#type' => 'date_popup',
    '#title' => t('Bill Date To'),
    '#date_format' => 'Y-m-d',
    '#default_value' => $end_date,
  );
  $form['bill_no'] = array(
    '#type' => 'textfield',
    '#title' => t('Bill Number'),
    '#required' => FALSE,
    '#default_value' => $bill_no,
    '#size'=> 20,
  );
  $form['delivered_amt'] = array(
    '#type' => 'radios',
    '#title' => t('Delivered Amt'),
    '#required' => FALSE,
    '#options' => array('all' => 'All', 'na' => 'Bill Not Uploaded'),
    '#default_value' => $delivered_amt,
    '#size'=> 20,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Submit',
   // '#prefix' => '<div id ="sales-delivery-table-submit">',
   // '#suffix' => '</div>',
   // '#attributes' => array('class' => array('sales-delivery-table-submit')),
  );


//  $form['sales_delivery_table'] = array(
//    '#markup' => '<a href = "/leanbox-chart-details/sales_delivery_table" target = "_blank"><div id="sales_delivery_table_div"></div></a>',
//  );

  return $form;
}

/**
 * validate handler
 * @param array $form
 * @param array $form_state
 * @return array
 */
//function leanbox_dashboard_chart_filter_sales_delivery_report_form_validate($form, &$form_state) {
//  $start_date = $form_state['values']['start_date'];
//  $end_date = $form_state['values']['end_date'];
//  if (empty($start_date) || empty($end_date)) {
//    form_set_error('form', t('Kinldy Select Date Filter'));
//  }
//}

/**
 * submit handler
 * @param array $form
 * @param array $form_state
 * @return array
 */
function leanbox_dashboard_chart_filter_sales_delivery_report_form_submit($form, &$form_state) {
  $param['start_date'] = $form_state['values']['start_date'];
  $param['end_date'] = $form_state['values']['end_date'];
  $param['bill_no'] = $form_state['values']['bill_no'];
  $param['delivered_amt'] = $form_state['values']['delivered_amt'];

  drupal_goto('sales-delivery-table', array('query' => $param));
}

/*
 * List of all franchisee and sale report
 */

function leanbox_dashboard_sales_delivery_table_callback() {
  $output = leanbox_dashboard_sales_delivery_table();
  $output1 = $output['output'];
  $param = $_GET;
  unset($param['q']);
  if ($output['status']) {

    $data = array();
    if (isset($param['start_date'])) {
      $data['start_date'] = $param['start_date'];
    }

    if (isset($param['end_date'])) {
      $data['end_date'] = $param['end_date'];
    }

    if (isset($param['bill_no'])) {
      $data['bill_no'] = $param['bill_no'];
    }
    if (isset($param['delivered_amt'])) {
      $data['delivered_amt'] = $param['delivered_amt'];
    }
    $output1 .= l(t('XLS'), 'sales-delivery-table/export', array('query' => array($data)));
  }
  return $output1;
}

function leanbox_dashboard_sales_delivery_table_export() {
  $file = "SalesDelivery.xls";
  $table = leanbox_dashboard_sales_delivery_table(TRUE);
  header("Content-type: application/vnd.ms-excel");
  header("Content-Disposition: attachment; filename=$file");
  echo $table['output'];
}

function leanbox_dashboard_sales_delivery_table($export = FALSE) {
  global $user;
  // Store distributor id in author in each node
  $distributor_id = change_feeds_import_get_distributor_id($user->uid);

  // start date
  if (isset($_GET['start_date']) && !empty($_GET['start_date'])) {
    $start_date = strtotime($_GET['start_date']);
  }
  else if (isset($_GET['start_date']) && empty($_GET['start_date'])) {
    $start_date = '';
  }
  else {
     $start_date = strtotime(date("Y-m-d"));
  }
  
  // end date
  if (isset($_GET['end_date']) && !empty($_GET['end_date'])) {
    $end_date = strtotime($_GET['end_date']) + 86399;
  }
  else if (isset($_GET['end_date']) && empty($_GET['end_date'])) {
    $end_date = '';
  }
  else {
    $end_date = strtotime(date('Y-m-d')) + 86399;
  }
  
  
  if (isset($_GET['delivered_amt'])) {
    $delivered_amt = $_GET['delivered_amt'];
  }

  $bill_no = '';
  if (isset($_GET['bill_no'])) {
    $bill_no = $_GET['bill_no'];
  }

  $data = array();
  if ($export) {
    $query = db_select('custom_billing_data', 'bl');
  }
  else {
    $query = db_select('custom_billing_data', 'bl')->extend('pagerDefault')->limit(10);
  }
  $query->condition('bl.distributor_id', $distributor_id);
  $query->fields('bl', array('bill_number', 'bill_date', 'party_code'));

// sales register
  $query->join('node', 'n', 'bl.bill_number = n.title');
  $query->condition('n.type', 'sales_register_data');
  $query->condition('n.uid', $distributor_id);
  $query->join('field_data_field_sales_party_code', 'sp', 'sp.entity_id = n.nid');


// outlet_master
  $query->join('node', 'ot', 'ot.title = sp.field_sales_party_code_value');
  $query->condition('ot.type', 'outlet_master');
  $query->condition('ot.uid', $distributor_id);
  $query->join('field_data_field_channel', 'chan', 'chan.entity_id = ot.nid');
  $query->join('field_data_field_pl_group', 'plg', 'plg.entity_id = ot.nid');

  if (!empty($bill_no)) {
    $query->condition('bl.bill_number',$bill_no);
  }
  
  $query->addfield('chan', 'field_channel_value', 'channel');
  $query->addfield('plg', 'field_pl_group_value', 'pl_group');
  $query->addExpression('SUM(bl.Sum_of_NET_SALES_VALUE)', 'sales_value');
  $query->leftjoin('field_data_field_impact_delivery_date', 'idl', 'idl.entity_id =  n.nid');
  $query->addfield('idl', 'field_impact_delivery_date_value', 'impact_date');

  if (!empty($start_date) && !empty($end_date)) {
    $query->condition('bl.bill_date', array($start_date, $end_date), 'BETWEEN');
  }
  $query->leftjoin('field_data_field_sales_return_amt', 'r', 'r.entity_id = n.nid');
  $query->addfield('r', 'field_sales_return_amt_value', 'delivered_value');

  if ($delivered_amt == 'na') {
    $query->isNull('r.field_sales_return_amt_value');
  }
  $query->groupBy('bl.bill_number');

  $query->join('field_data_field_bill_value', 'bv', 'bv.entity_id = n.nid');
  $query->addfield('bv', 'field_bill_value_value', 'bill_value');
  $query->leftjoin('field_data_field_deliver_reason', 'dr', 'dr.entity_id = n.nid');
  // $query->addExpression('(bv.field_bill_value_value - r.field_sales_return_amt_value)', 'return_value');
  $query->addfield('dr', 'field_deliver_reason_tid', 'deliver_reason');

  $query->leftjoin('field_data_field_delivery_pending', 'dp', 'dp.entity_id =  n.nid');
  $query->addfield('dp', 'field_delivery_pending_value', 'delivery_pending');

  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);


  if (!empty($res)) {
    $header = array(
      array('data' => 'BILL NUMBER',),
      array('data' => 'BILL DATE',),
      array('data' => 'PARTY CODE',),
      array('data' => 'CHANNEL',),
      array('data' => 'PL GROUP',),
      array('data' => 'Sum of NET_SALES_VALUE'),
      array('data' => 'IMPACT DATE'),
      array('data' => 'SALES DELIVERED AMT',),
      array('data' => 'SALES RETURNED AMT',),
      array('data' => 'STATUS',),
      array('data' => 'REASON',),
      array('data' => 'DELIVERY PENDING',),
    );
    foreach ($res as $key => $val) {
      $data = array();
      $data['bill_no'] = $val['bill_number'];
      $data['bill_date'] = date('d-M-y', $val['bill_date']);
      $data['party_code'] = $val['party_code'];
      $data['channel'] = $val['channel'];
      $data['pl_group'] = $val['pl_group'];
      $data['sales_value'] = round($val['sales_value']);
      $data['impact_date'] = date('d-M-y', ($val['impact_date']));
      $data['delivered_value'] = is_null($val['delivered_value']) ? 'NA' : round($val['delivered_value']);

      if ($data['delivered_value'] === 'NA') {
        $data['return_value'] = 'NA';
      }
      else {
        $data['return_value'] = $data['sales_value'] - $data['delivered_value'];
      }


      $sales_ret = (($data['return_value'] / $data['sales_value'] ) * 100);
      $reason_tid = $val['deliver_reason'];
      if (!empty($reason_tid)) {
        $term = taxonomy_term_load($reason_tid);
        $name = $term->name;
      }
      else {
        $name = 'NA';
      }

      if (($sales_ret >= 99) && ($data['return_value'] !== 'NA')) {
        $data['status'] = 'Full RETURN';
      }
      else if (($sales_ret > 1 && $sales_ret < 99) && ($data['return_value'] !== 'NA')) {
        $data['status'] = 'PARTIAL RETURN';
      }
      else if (($sales_ret <= 1) && ($data['return_value'] !== 'NA')) {
        $data['status'] = 'FULL DELIVERED';
      }
      else {
        $data['status'] = 'Bill Not Uploaded';
      }

      // reason and delivery pending below
      $data['reason'] = $name;
      $data['delivery_pending'] = $val['delivery_pending'];
      $rows[] = $data;
    }
    if ($export) {
      $output = theme('table', array(
        'header' => $header,
        'rows' => $rows,
        'attributes' => array('width' => '100%')
      ));
    }
    else {
      // render form
      $output = drupal_render(drupal_get_form('leanbox_dashboard_chart_filter_sales_delivery_report_form'));
      $output .= theme('table', array(
        'header' => $header,
        'rows' => $rows,
        'attributes' => array('width' => '100%')
      ));
      $output .= theme('pager');
    }


    $output1['status'] = TRUE;
    $output1['output'] = $output;
  }
  else {
    // render form
    $output = drupal_render(drupal_get_form('leanbox_dashboard_chart_filter_sales_delivery_report_form'));
    $output .= 'No Result Found ';
    $output1['status'] = FALSE;
    $output1['output'] = $output;
  }
  return $output1;
}

function leanbox_dashboard_exposed_form_submit(&$form, &$form_state) { 
  if (isset($form_state['values']['field_dispatch_status_value']) && ($form_state['values']['field_dispatch_status_value'] == 'empty')) {
    $form_state['values']['field_dispatch_status_value_op'] = 'empty';
  }
  if (isset($form_state['values']['field__party_packingstatus_value']) && ($form_state['values']['field__party_packingstatus_value'] == 'empty')) {
    $form_state['values']['field__party_packingstatus_value_op'] = 'empty';
  } 
  if (isset($form_state['values']['field_picking_status_value']) && ($form_state['values']['field_picking_status_value'] == 'empty')) {
    $form_state['values']['field_picking_status_value_op'] = 'empty';
  }
  if (isset($form_state['values']['field_unloading_status_value']) && ($form_state['values']['field_unloading_status_value'] == 'empty')) {
    $form_state['values']['field_unloading_status_value_op'] = 'empty';
  }
}

/**
 * Implements hook_user_insert
 * @global type $user
 * @param type $edit
 * @param type $account
 * @param type $category
 */
function leanbox_dashboard_user_insert(&$edit, $account, $category) {
  global $user;
  $roles = $user->roles;
  if (in_array("hul_admin", $roles)) {
    $uid = $account->uid;
    $edit['field_distributor']['und'][0]['value'] = $uid;
  }
}

/**
 * Implements hook_user_presave
 * @global type $user
 * @param type $edit
 * @param type $account
 * @param type $category
 */
function leanbox_dashboard_user_presave(&$edit, $account, $category) {
  //dpm($account, 'acc');
  //dpm($edit, '$edit');
  $dis_id = $account->field_distributor['und'][0]['value'];
  $user_details = leanbox_dashboard_get_username_and_rs_code($dis_id);
  $edit['field_name']['und'][0]['value'] = $user_details['field_name_value'];
  $edit['field_third_party_username']['und'][0]['value'] = $user_details['field_third_party_username_value'];
}

/**
 * 
 * @return type
 */
function leanbox_dashboard_get_all_distributor() {
  $query = db_select('users', 'u');
  $query->join('users_roles', 'uro', 'uro.uid = u.uid');
  $query->join('role', 'ro', 'ro.rid = uro.rid');
  $query->fields('u', array('uid', 'name'));
  $query->condition('ro.name', 'RS Operator');
  $res = $query->execute()->fetchAllKeyed(0,1);
  return $res;
}

/**
 * 
 * @param type $dis_id
 * @return array
 */
function leanbox_dashboard_get_username_and_rs_code($dis_id) {
  $query = db_select('field_data_field_distributor', 'ds');
  $query->condition('ds.field_distributor_value', $dis_id);
  $query->join('field_data_field_name', 'na', 'na.entity_id = ds.entity_id');
  $query->join('field_data_field_third_party_username', 'rs', 'rs.entity_id = ds.entity_id');
  $query->fields('na', array('field_name_value'));
  $query->fields('rs', array('field_third_party_username_value'));
  $res = $query->execute()->fetch(PDO::FETCH_ASSOC);
  return $res;
}

/**
 * 
 * @param string $form
 * @param type $form_state
 * @param type $form_id
 */
function leanbox_dashboard_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  $roles = $user->roles;
  if ($form_id == 'user_register_form' || $form_id == 'user_profile_form') {
    if (in_array("hul_admin", $roles)) {

      $role_names = array('RS Operator', 'DFE', 'RS Admin');
      foreach ($form['account']['roles']['#options'] as $rid => $rname) {
        if (!in_array($rname, $role_names)) {
          unset($form['account']['roles']['#options'][$rid]);
        }
      }

      $form['field_distributor']['#states'] = array(
        'visible' =>
        array(
          array(
            ':input[name="roles[7]"]' => array('checked' => TRUE),
          ),
          array(
            ':input[name="roles[8]"]' => array('checked' => TRUE),
          )
        )
      );
      $form['field_distributor']['und'][0]['value']['#type'] = 'select';
      $form['field_distributor']['und'][0]['value']['#required'] = TRUE;
      // get all dis list
      $all_distributor_list = leanbox_dashboard_get_all_distributor();
      $all_distributor_list['none'] = 'NONE';
      $form['field_distributor']['und'][0]['value']['#options'] = $all_distributor_list;
      $user_id = $user->uid;
      $distributor_id = change_feeds_import_get_distributor_id($user_id);
      $form['field_distributor']['und'][0]['value']['#default_value'] = !empty($key = array_search($distributor_id, $all_distributor_list ))?  $key : 'none';
    }
  }

  if ($form_id = 'views_exposed_form') {
    
    // party packing
    if (isset($form['field__party_packingstatus_value'])) {
      $form['field__party_packingstatus_value']['#options']['empty'] = t('Empty');
    }
     if (isset($form['field__party_packingstatus_value_op'])) {
      $form['field__party_packingstatus_value_op']['#options'] = array('or' => 'Is One Of');
    }
    
    // dispatch
    if (isset($form['field_dispatch_status_value'])) {
      $form['field_dispatch_status_value']['#options']['empty'] = t('Empty');
    }
    if (isset($form['field_dispatch_status_value_op'])) {
      $form['field_dispatch_status_value_op']['#options'] = array('or' => 'Is One Of');
    }
    
    // picking
    if (isset($form['field_picking_status_value'])) {
      $form['field_picking_status_value']['#options']['empty'] = t('Empty');
    }
    if (isset($form['field_picking_status_value_op'])) {
      $form['field_picking_status_value_op']['#options'] = array('or' => 'Is One Of');
    }
    
    // EGIR or 
    if (isset($form['field_unloading_status_value'])) {
      $form['field_unloading_status_value']['#options']['empty'] = t('Empty');
    }
    if (isset($form['field_unloading_status_value_op'])) {
      $form['field_unloading_status_value_op']['#options'] = array('or' => 'Is One Of');
    }
    
    array_unshift($form['#submit'], 'leanbox_dashboard_exposed_form_submit');
  }

  if ($form_id == 'feeds_import_form' && $form['#importer_id'] == 'resource_master') {
    $list = '<Ol><b>RESOURCE TYPE</b>'
        . '<li>DISPATCH SUPERVISOR</li>'
        . '<li>CASHIER</li>'
        . '<li>PARTY PACKER NAME</li>'
        . '<li>PARTY PACKING SUPERVISOR</li>'
        . '<li>PICKER NAME</li>'
        . '<li>PICKING SUPERVISOR</li>'
        . '<li>UNLOADING SUPERVISOR</li></Ol>';
    $form['feeds']['FeedsCSVParser']['help'][] = array(
      '#markup' => $list,
    );
  }
}


function leanbox_dashboard_van_stop_master($field_name) {
    $query = db_select('node', 'n');
    $query->addTag('node_uid');
    $query->condition('n.type', 'van_stop_master');
    $query->join("field_data_". $field_name, 'pp', 'pp.entity_id = n.nid');
    $query->fields('pp', array($field_name. "_value"));
    $dis_time = $query->execute()->fetchField();
    return $dis_time;
}


/**
 * Menu Callback for sales-return-data
 * @return string
 */
function sales_return_data_callback() {
  $output = drupal_render(drupal_get_form('sales_return_data_table_form'));
 // if (isset($_GET['start_date']) && isset($_GET['end_date'])) {
    $output .= sales_return_data();
 // }
//  else {
//    $output .= '<b>Please Apply Date Filter to view result</b>';
//  }
  return $output;
}


function sales_return_data_table_form($form, &$form_state) {
  $form = array();
  $start_date = $end_date = '';
  if (isset($_GET['start_date'])) {
    $start_date = $_GET['start_date'];
  }
  else {
    $start_date = strtotime(date('Y-m-d') . "- 7 days");
    $start_date = date('Y-m-d', $start_date);
  }
  if (isset($_GET['end_date'])) {
    $end_date = $_GET['end_date'];
  }
  else {
    $end_date = strtotime(date('Y-m-d') . "- 7 days");
    $end_date = date('Y-m-d', $end_date);
  }

  $form['start_date'] = array(
    '#title' => 'From',
    '#type' => 'date_popup',
    '#date_format' => 'Y-m-d',
    '#date_year_range' => '-5:+0',
    '#default_value' => $start_date,
    '#required' => TRUE,
  );
  $form['end_date'] = array(
    '#title' => 'To',
    '#type' => 'date_popup',
    '#date_format' => 'Y-m-d',
    '#date_year_range' => '-5:+0',
    '#default_value' => $end_date,
    '#required' => TRUE,
  );

  $form['submit-value'] = array(
    '#type' => 'submit',
    '#value' => 'submit',
  );
  return $form;
}
/*
 * For Submit handler for Promotion Level 1
 */
function sales_return_data_table_form_submit($form, &$form_state) {
  $time = date('Y-m-d', time());
  $filters = '';
  if (isset($form_state['values']['start_date']) && $form_state['values']['start_date'] <= $time) {
    $filters['start_date'] = $form_state['values']['start_date'];
  }
  else {
    drupal_set_message("From date should not be greater than current date", 'error');
  }
  if (isset($form_state['values']['end_date'])&& $form_state['values']['end_date'] <= $time) {
    $filters['end_date'] = $form_state['values']['end_date'];
  }
  else {
    drupal_set_message("End date should not be greater than current date", 'error');
  }
  $date1 = date_create($filters['end_date']);
  $date2 = date_create($filters['start_date']);
  $diff = date_diff($date1, $date2);
  if ($diff->days > 31) {
    drupal_set_message("You Can Not Select the Date range of more than 1 month", 'error');
  }
  $url = $_GET['q'];
  drupal_goto($url, array('query' => $filters));
}



function sales_return_data() {
  $output = $start_date = $end_date = '';
  if (isset($_GET['start_date'])) {
    $start_date = strtotime($_GET['start_date']);
  }
  else {
    $start_date = strtotime(date('Y-m-d') . "- 7 days");
  }
  if (isset($_GET['end_date'])) {
    $end_date = strtotime($_GET['end_date']) + 86399; //+ 86399; //adding 23:59:59 hours to end date
  }
  else {
    $end_date = strtotime(date('Y-m-d') . "- 7 days");
  }
  
  $output .= change_feeds_import_get_return_query($start_date, $end_date, 'value');
  $output .= '</br></br></br>';
  $output .= change_feeds_import_get_return_query($start_date, $end_date, 'count');

  
  return $output;
}

function change_feeds_import_get_return_query($start_date, $end_date, $data) {
  global $user;
  // Store distributor id in author in each node
  $distributor_id = change_feeds_import_get_distributor_id($user->uid);

  // Calculate sum of bill from custom billing data without tax
  $query = db_select('custom_billing_data', 'bd');
  $query->condition('bd.distributor_id', $distributor_id);
  if (!empty($start_date) && !empty($end_date)) {
    $query->condition('bd.bill_date', array($start_date, $end_date), 'BETWEEN');
  }
  $query->join('node', 'n', 'bd.bill_number = n.title');
  $query->condition('n.type', 'sales_register_data');
  $query->condition('n.uid', $distributor_id);
  $query->leftjoin('field_data_field_sales_return_amt', 'r', 'r.entity_id = n.nid');

  if ($data == 'value') {
    $query->addExpression('SUM(bd.Sum_of_NET_SALES_VALUE)', 'sum');
  }
  else {
    $query->addExpression('COUNT(DISTINCT(bd.bill_number))', 'bill_number');
  }
  
  $res3 = $query->execute()->fetchField();
  $total_bill_value = round($res3);


  $subquery = db_select('custom_billing_data', 'bd');
  $subquery->condition('bd.distributor_id', $distributor_id);
  if (!empty($start_date) && !empty($end_date)) {
    $subquery->condition('bd.bill_date', array($start_date, $end_date), 'BETWEEN');
  }
  $subquery->groupBy('bd.bill_number');
  $subquery->addfield('bd', 'bill_number', 'bill_number');
  $subquery->addfield('bd', 'distributor_id', 'distributor_id');
  $subquery->addExpression('SUM(bd.Sum_of_NET_SALES_VALUE)', 'sales_value');

  $query = db_select('node', 'n');
  $query->condition('n.type', 'sales_register_data');
  $query->condition('n.uid', $distributor_id);
  $query->join($subquery, 'bd', 'n.title = bd.bill_number AND n.uid = bd.distributor_id');

  $query->join('field_data_field_sr_bill_date', 'i', 'i.entity_id = n.nid');
  $query->join('field_data_field_bill_value', 'b', 'b.entity_id = n.nid');
  $query->leftjoin('field_data_field_sales_return_amt', 'r', 'r.entity_id = n.nid');

  if ($data == 'value') {
    $query->addExpression('SUM(CASE WHEN  ((((bd.sales_value - r.field_sales_return_amt_value) / bd.sales_value ) * 100) >= 99) THEN (bd.sales_value - r.field_sales_return_amt_value) ELSE 0 END)', 'full_return');
    $query->addExpression('SUM(CASE WHEN  (((((bd.sales_value - r.field_sales_return_amt_value) / bd.sales_value ) * 100) < 99)  AND  ((((bd.sales_value - r.field_sales_return_amt_value) / bd.sales_value ) * 100) > 1) ) THEN (bd.sales_value - r.field_sales_return_amt_value) ELSE 0 END)', 'partial_return');
    $query->addExpression('SUM(CASE WHEN  (r.field_sales_return_amt_value IS NULL) THEN bd.sales_value ELSE 0 END)', 'null_value');

    //$query->addExpression('SUM(CASE WHEN  (((b.field_bill_value_value -  r.field_sales_return_amt_value) / b.field_bill_value_value ) <= 1) THEN (b.field_bill_value_value -  r.field_sales_return_amt_value) ELSE 0 END)', 'full_delivery');
  }
  else {
    $query->addExpression('SUM(CASE WHEN  ((((bd.sales_value - r.field_sales_return_amt_value) / bd.sales_value ) * 100) >= 99) THEN 1 ELSE 0 END)', 'full_return');
    $query->addExpression('SUM(CASE WHEN  (((((bd.sales_value - r.field_sales_return_amt_value) / bd.sales_value ) * 100) < 99)  AND  ((((bd.sales_value - r.field_sales_return_amt_value) / bd.sales_value ) * 100) > 1) ) THEN 1 ELSE 0 END)', 'partial_return');
    $query->addExpression('SUM(CASE WHEN  (r.field_sales_return_amt_value IS NULL) THEN 1 ELSE 0 END)', 'null_value');

    //$query->addExpression('SUM(CASE WHEN  (((b.field_bill_value_value -  r.field_sales_return_amt_value) / b.field_bill_value_value ) <= 1) THEN 1 ELSE 0 END)', 'full_delivery');
  }

  $query->join('field_data_field_sales_party_code', 'pc', 'pc.entity_id = n.nid');
  $query->join('node', 'oun', 'pc.field_sales_party_code_value = oun.title');
  $query->condition('oun.type', 'outlet_master');
  $query->condition('oun.uid', $distributor_id, '=');
  $query->join('field_data_field_channel', 'chan', 'chan.entity_id = oun.nid');
  $query->fields('chan', array('field_channel_value'));
  $query->groupBy('field_channel_value');
  //  $query->addField('bd', 'sales_value', 'sales_value');
  //  $res2 = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  $res2 = $query->execute()->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_ASSOC);
  
  if($data == 'value') {
    $header['value'] = 'VALUE WISE %';
  }
  else {
     $header['value'] = 'COUNT WISE %';
  }
  $header['full_return'] = 'FULL %';
  $header['partial_return'] = 'PARTIAL %';
  $header['na'] = 'Bills Not Uploaded %';
  $header['total'] = 'TOTAL (Full + Partial) %';
  
  
  $total_vert = array();
  foreach ($res2 as $channel => $info) {
    $row = array();

    $row[] = $channel;
    foreach ($info as $key1 => $val1) {
      $total_horz = 0;
      foreach ($val1 as $key2 => $val2) {
        // calculate total vertically
        $total_vert[$key2] += $val2;
        if (($key2 == 'full_return') || ($key2 == 'partial_return')) {
          // calculate total => full + partial
          $total_horz += $val2;
        }
        $row[] = round((($val2 / $total_bill_value) * 100), 2) . ' %';
      }
      $row[] = round((($total_horz / $total_bill_value) * 100), 2) . ' %';
      $total_vert['total_horz'] += $total_horz;
    }
    $rows[] = $row;
  }
  
  $row1[] = 'TOTAL';
  foreach ($total_vert as $total_val) {
    $row1[] = round((($total_val / $total_bill_value) * 100), 2) . ' %';
  }
  $rows[] = $row1;

  $output = theme('table', array(
    'header' => $header,
    'rows' => $rows,
    'attributes' => array('width' => '100%')
  ));
  return $output;
}

