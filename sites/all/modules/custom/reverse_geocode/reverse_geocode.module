<?php

/**
 * 
 * Implements hook_menu().
 */
function reverse_geocode_menu() {
//  $items['reverse-geocode'] = array(
//    'title' => 'reverse geocode',
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('reverse_geocode_form'),
//    'access callback' => TRUE,
//    'type' => MENU_NORMAL_ITEM,
//  );

  $items['address/confirm'] = array(
    'title' => 'Address Confirmation',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'show_locations',
    'access arguments' => array('address confirmation'),
      // Page callback, etc. need to be added here.
  );
// Make "Tab 1" the main tab on the "Foo settings" page
  $items['address/confirm/single'] = array(
    'title' => 'Single Address Confirmation',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  $items['address/confirm/multiple'] = array(
    'title' => 'Multiple Address Confirmation',
    'page callback' => 'show_locations',
    'access arguments' => array('address confirmation'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );


  $items['address/confirm/trip-wise'] = array(
    'title' => 'View Trip On Map',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'show_locations',
    'access arguments' => array('address confirmation'),
    //'page callback' => 'drupal_get_form',
    //'page arguments' => array('reverse_geocode_trip_wise_form'),
    'access arguments' => array('address confirmation'),
      // Page callback, etc. need to be added here.
  );

  $items['area-confirm'] = array(
    'title' => 'Area Hook Group Confirmation',
    'page callback' => 'show_area_locations',
    'access arguments' => array('address confirmation'),
    'type' => MENU_CALLBACK,
    'file' => 'address_confirm.inc'
  );

  $items['area-confirm-view'] = array(
    'title' => 'View Area Hook Group wise Original O/Ls Seq',
    'page callback' => 'show_area_locations',
    'access arguments' => array('address confirmation'),
    'type' => MENU_CALLBACK,
    'file' => 'address_confirm.inc'
  );


  $items['area-hook-confirm-view'] = array(
    'title' => 'Area Hook Group Wise Outlets',
    'page callback' => 'show_area_hook_wise_locations',
    'access arguments' => array('address confirmation'),
    'type' => MENU_CALLBACK,
    'file' => 'area_hook_view.inc'
  );

  $items['incremental-outlet'] = array(
    'title' => 'Incremental Outlet Addition',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('outlet_addition_form'),
    'access arguments' => array('address confirmation'),
    'type' => MENU_CALLBACK,
    'file' => 'outlet_addition.inc'
  );

  $items['revised-sequence-confirm'] = array(
    'title' => 'Revised Sequence Confirm',
    'page callback' => 'outlet_addition',
    'access arguments' => array('address confirmation'),
    'type' => MENU_CALLBACK,
    'file' => 'revised_sequence_confirm.inc'
  );

  $items['area-confirm-outlet-sequence'] = array(
    'title' => 'Original Outlet Sequencing-API',
    'page callback' => 'area_confirm_outlet_sequence',
    'access arguments' => array('address confirmation'),
    'type' => MENU_CALLBACK,
    'file' => 'area_confirm_outlet_sequence.inc'
  );
    
  $items['sales_person/autocomplete'] = array(
    'title' => 'Autocomplete for Sales Person',
    'page callback' => 'reverse_geocode_sales_person_autocomplete',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK
  );

//  $items['reverse-geocode/get'] = array(
//    'title' => 'reverse_geocode',
//    'page callback' => 'get_reverse_geocode_from_lat_long',
//    'access callback' => TRUE,
//    'type' => MENU_CALLBACK,
//  );

  $items['get/lat-lng'] = array(
    'title' => 'Get Lat Lng',
    'page callback' => 'get_lat_long_from_area_hook',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['get/address'] = array(
    'title' => 'Get Lat Lng',
    'page callback' => 'get_address_from_hul_node',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/maps'] = array(
    'title' => 'Setting Form Map APIs',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('reverse_geocode_map_configuration'),
    'access arguments' => array('administer map settings'),
  );

  $items['delivery-beat'] = array(
    'title' => 'Create Static delivery beats',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('delivery_beat_create_form'),
    // 'access arguments' => array('address confirmation'),
    'access arguments' => array('only-rs-admin-with existing data'),
    'file' => 'delivery_beat_form.inc'
  );
  //Deliver N Value -  CRON
  $items['cal-delivery-n-val'] = array(
    'title' => 'Update Delivery N Value By Cron',
    'page callback' => 'cal_delivery_n_val_by_cron',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function reverse_geocode_permission() {
  return array(
    'administer map settings' => array(
      'title' => t('administer map settings'),
      'description' => t('administer map settings')
    ),
    'address confirmation' => array(
      'title' => t('address confirmation'),
      'description' => t('address confirmation')
    ),
  );
}

function reverse_geocode_sales_person_autocomplete($string) {

  global $user;
  $user_id = $user->uid;
  $distributor_id = change_feeds_import_get_distributor_id($user_id);

  $matches = array();
  $query = db_select('node', 'n');
  $query->condition('n.type', 'outlet_master');
  $query->condition('n.uid', $distributor_id, '=');
  $query->leftjoin('field_data_field_sales_person', 'sp', 'sp.entity_id = n.nid');
  $query->condition('sp.field_sales_person_value', '%' . db_like($string) . '%', 'LIKE');
  $query->fields('sp', array('field_sales_person_value'));
  $query->execute();
  $res = $query->execute()->fetchAll();
  foreach ($res as $row) {
    $matches[$row->field_sales_person_value] = check_plain($row->field_sales_person_value);
  }
  // Return the result to the form in json
  drupal_json_output($matches);
}

function reverse_geocode_form($form, &$form_state) {
  $form['codes'] = array(
    '#type' => 'textarea',
    '#title' => t('Weekly Off'),
    '#required' => TRUE,
    '#description' => 'Enter comma separated days of the week (eg: "Monday, Tuesday")',
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('submit'),
  );

  return $form;
}

function reverse_geocode_form_submit($form, &$form_state) {
  $codes = explode("\r\n", $form_state['values']['codes']);


//  foreach ($codes as $code) {
//    $location = explode(',', $code);
//
//    $hul = $location[0];
//    $lat = $location[1];
//    $lng = $location[2];
//
//    $license_key = variable_get('mapmyindia_rest_key', 'z94i9hvuqcsz7amywt76aknw8dx9o15z');
//
//    $url = "https://apis.mapmyindia.com/advancedmaps/v1/$license_key/rev_geocode" . "?lng=$lng&lat=$lat";
//    $curl = curl_init();
//    curl_setopt($curl, CURLOPT_URL, $url);
//    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
//    curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 0);
//    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);
//    $result = curl_exec($curl);
//
//    $info = curl_getinfo($curl);
//
//// also get the error and response code
////$errors = curl_error($curl);
////echo $errors;
//    curl_close($curl);
//
//    $res = json_decode($result, 1);
//
//    if ($res['responseCode'] == 200) {
//      $csv_rows[] = array('hul' => $hul) + $res['results'][0];
//    }
//  }

  $header = array(
    'HUL',
    'houseNumber',
    'houseName',
    'poi',
    'poi_dist',
    'street',
    'street_dist',
    'subSubLocality',
    'subLocality',
    'locality',
    'village',
    'district',
    'subDistrict',
    'city',
    'state',
    'pincode',
    'lat',
    'lng',
    'formatted_address'
  );

  header('Content-Type: text/csv; charset=utf-8');
  header('Content-Disposition: attachment; filename=RG.csv');
  $fp = fopen('php://output', 'w');
  fputcsv($fp, $header);
//  foreach ($csv_rows as $k => $v) {
//    fputcsv($fp, $v);
//  }
  fclose($fp);
  exit;
}

function show_locations() {
  $url = arg(2);

  $license_key = variable_get('mapmyindia_map_key', '98thppnrdg3vpp7xupfg9eotrl2rliqu');
  $google_key = variable_get('google_places_key', 'AIzaSyCtEWjYMDT0sAoyyfdMEDI5QyoGY7aqHVw');
  drupal_add_js("https://apis.mapmyindia.com/advancedmaps/v1/$license_key/map_load?v=0.1", 'external');
  drupal_add_js("https://maps.googleapis.com/maps/api/js?key=$google_key&libraries=places", 'external');
  drupal_add_js(drupal_get_path('module', 'reverse_geocode') . '/js/selectable-row.js', 'file');
  drupal_add_js(drupal_get_path('module', 'reverse_geocode') . '/js/leaflet.smoothmarkerbouncing.js', 'file');

  drupal_add_js(drupal_get_path('module', 'reverse_geocode') . '/js/tooltipster.bundle.min.js', 'file');
  drupal_add_css(drupal_get_path('module', 'reverse_geocode') . '/css/tooltipster.bundle.min.css', 'file');

  if ($url == "multiple") {
    drupal_add_js(drupal_get_path('module', 'reverse_geocode') . '/js/multi-map.js', 'file');
    $type = "multi";
  }
  else if ($url == "trip-wise") {
    drupal_add_js(drupal_get_path('module', 'reverse_geocode') . '/js/multi-map.js', 'file');
    //drupal_add_css(drupal_get_path('module', 'reverse_geocode') . '/css/map.css');
  }
  else {
    drupal_add_js(drupal_get_path('module', 'reverse_geocode') . '/js/map.js', 'file');
    //drupal_add_css(drupal_get_path('module', 'reverse_geocode') . '/css/map.css');
    $type = "single";
  }

  if ($url == "trip-wise") {
    $form = drupal_render(drupal_get_form('reverse_geocode_trip_wise_form'));
  }
  else {
    $form = drupal_render(drupal_get_form('hul_code_form', $type));
  }

  $result['map-container'] = array(
    '#markup' => '<div id="map-container"></div>',
  );

  return $form . render($result);
}

function reverse_geocode_get_data_from_outlet_master($sales_day, $pl_group, $beat_name, $distributor_id) {

  $query = db_select('node', 'n');
  $query->condition('n.type', 'outlet_master');
  $query->condition('n.uid', $distributor_id, '=');
  if (!is_null($sales_day)) {
    $query->leftjoin('field_data_field_sales_day', 'sd', 'sd.entity_id = n.nid');
    $query->groupBy('field_sales_day_value');
    $query->fields('sd', array('field_sales_day_value'));
  }
  if (!is_null($pl_group)) {
    $query->leftjoin('field_data_field_pl_group', 'plg', 'plg.entity_id = n.nid');
    $query->groupBy('field_pl_group_value');
    $query->fields('plg', array('field_pl_group_value'));
  }
  if (!is_null($beat_name)) {
    $query->leftjoin('field_data_field_beat_name', 'bn', 'bn.entity_id = n.nid');
    $query->groupBy('field_beat_name_value');
    $query->fields('bn', array('field_beat_name_value'));
  }
  $res = $query->execute()->fetchallkeyed(0, 0);
  return $res;
}

function reverse_geocode_get_data_from_dropdown($pl_group, $distributor_id, $sales_day, $get) {
  $query = db_select('node', 'n');
  $query->condition('n.type', 'outlet_master');
  $query->condition('n.uid', $distributor_id, '=');
  if (!is_null($pl_group)) {
    $query->leftjoin('field_data_field_pl_group', 'plg', 'plg.entity_id = n.nid');
    $query->condition('plg.field_pl_group_value', $pl_group, '=');
  }
  if (!is_null($sales_day)) {
    $query->leftjoin('field_data_field_sales_day', 'sd', 'sd.entity_id = n.nid');
    $query->condition('sd.field_sales_day_value', $sales_day, '=');
  }
  if ($get == "get_sales_day") {
    $query->leftjoin('field_data_field_sales_day', 'sd', 'sd.entity_id = n.nid');
    $query->groupBy('field_sales_day_value');
    $query->fields('sd', array('field_sales_day_value'));
  }
  elseif ($get == "get_beat_name") {
    $query->leftjoin('field_data_field_beat_name', 'bn', 'bn.entity_id = n.nid');
    $query->groupBy('field_beat_name_value');
    $query->fields('bn', array('field_beat_name_value'));
  }
  $res = $query->execute()->fetchallkeyed(0, 0);
  return $res;
}

function pl_group_ajax_callback($form, &$form_state) {
  return $form;
}

function sales_day_ajax_callback($form, &$form_state) {
  return $form;
}

/*function hul_code_form($form, &$form_state, $type) {
  global $user;
  $user_id = $user->uid;
  $distributor_id = change_feeds_import_get_distributor_id($user_id);
  $form_state['type'] = $type;

  $form['#prefix'] = '<div id="address-selection-map">';
  $form['#suffix'] = '</div>';
   // $url_parms for sending default value to confirm address after outlet upload
  $url_parms =  drupal_get_query_parameters();
  $header_array = array(
    'sr_no' => array('data' => 'Sr No', 'class' => 'sr-cell'),
    'party_code' => array('data' => 'Party Code', 'class' => 'party-code-cell'),
    //'lat' => 'Latitude', 
    //'lng' => 'Longitude',
    'party_name' => array('data' => 'Party Name', 'class' => 'party-name-cell'),
    'status' => array('data' => 'Status', 'class' => 'status-cell'),
    //'address' => array('data' => 'Address', 'class' => array('cell-tooltip')),
    'details' => array('data' => '', 'class' => 'details-cell'),
  );
  // This for case insensitive Default value set for sales day and Beat name
  if(!(empty($url_parms['pl_group']))) { 
       $pl_group = $url_parms['pl_group'];
       $sales_day_values = reverse_geocode_get_data_from_dropdown($pl_group, $distributor_id, NULL, "get_sales_day");
       if (!empty($sales_day_values)) {
           foreach($sales_day_values as $key=>$value) {
               if (strcasecmp($value, $_GET['sales_day']) == 0) {
                   $_GET['sales_day'] = $value;
               }
           }
       }
  }
  if(!(empty($url_parms['pl_group'])) && !(empty($url_parms['sales_day']))) {
    $pl_group = $url_parms['pl_group'];
    $sales_day = $url_parms['sales_day'];
    $beat_name_options = reverse_geocode_get_data_from_dropdown($pl_group, $distributor_id, $sales_day, "get_beat_name");
    if (!empty($beat_name_options)) {
           foreach($beat_name_options as $key=>$value) {
               if (strcasecmp($value, $_GET['beat_name']) == 0) {
                   $_GET['beat_name'] = $value;
               }
           }
       }
  }
  
  $pl_group_data = reverse_geocode_get_data_from_outlet_master($sales_day = NULL, "pl_group", $beat_name = NULL, $distributor_id);
  $form['pl_group'] = array(
    '#type' => 'select',
    '#title' => t('Pl_Group'),
    '#options' => $pl_group_data,
    //'#default_value' => isset($form_state['values']['pl_group']) ? $form_state['values']['pl_group'] : NULL,
    '#default_value' => isset($_GET['pl_group']) ? $_GET['pl_group'] : NULL,  
    '#ajax' => array(
      'event' => 'change',
      'callback' => 'pl_group_ajax_callback',
      'wrapper' => 'address-selection-map',
    ),
    //"#empty_option" => t('- Select -'),
    '#required' => TRUE,
  );
  $sales_day_from_url = reverse_geocode_get_data_from_dropdown($pl_group, $distributor_id, NULL, "get_sales_day");
      // if (strcasecmp($var1, $var2) == 0) {
  $form['sales_day'] = array(
    '#type' => 'select',
    '#title' => t('Sales Day'),
//    '#prefix' => '<div id="address-selection-map">',
//    '#suffix' => '</div>',
    // '#default_value' => isset($form_state['values']['sales_day']) ? $form_state['values']['sales_day'] : NULL,
    '#options' => array(),
    '#default_value' => isset($_GET['sales_day']) ? $_GET['sales_day'] : NULL,  
    '#ajax' => array(
      'event' => 'change',
      'callback' => 'sales_day_ajax_callback',
      'wrapper' => 'address-selection-map',
    ),
    '#required' => TRUE,
  );
  $form['beat_name'] = array(
    '#type' => 'select',
    '#title' => t('Beat Name'),
//    '#prefix' => '<div id="address-selection-map">',
//    '#suffix' => '</div>',
    //  '#default_value' => isset($form_state['values']['beat_name']) ? $form_state['values']['beat_name'] : NULL,
    '#options' => array(),
    '#default_value' => isset($_GET['beat_name']) ? $_GET['beat_name'] : NULL,   
    "#empty_option" => t('- Select -'),
    '#validated' => TRUE,
    '#required' => TRUE,
  );
 
  if (!empty($form_state['values']['pl_group'])) {
    $pl_group = $form_state['values']['pl_group'];
    $form['sales_day']['#options'] = reverse_geocode_get_data_from_dropdown($pl_group, $distributor_id, NULL, "get_sales_day");
  }
  else if(!(empty($url_parms['pl_group']))) { 

       $pl_group = $url_parms['pl_group'];
       $form['sales_day']['#options'] = reverse_geocode_get_data_from_dropdown($pl_group, $distributor_id, NULL, "get_sales_day");

  }
  
  if (!empty($form_state['values']['pl_group']) && !empty($form_state['values']['sales_day'])) {
    $pl_group = $form_state['values']['pl_group'];
    $sales_day = $form_state['values']['sales_day'];
    $form['beat_name']['#options'] = reverse_geocode_get_data_from_dropdown($pl_group, $distributor_id, $sales_day, "get_beat_name");
  }
  elseif(!(empty($url_parms['pl_group'])) && !(empty($url_parms['sales_day']))) {
    $pl_group = $url_parms['pl_group'];
    $sales_day = $url_parms['sales_day'];
    $form['beat_name']['#options'] = reverse_geocode_get_data_from_dropdown($pl_group, $distributor_id, $sales_day, "get_beat_name");
  }

 if (!empty($form_state['values']['pl_group']) && !empty($form_state['values']['sales_day']) && empty($url_parms['pl_group'])) {
      
  }
  // Default button click
  else if (!empty($url_parms['pl_group']) && !empty($url_parms['sales_day']) && !empty($url_parms['beat_name']) ) {

       $form_state['values']['sales_day'] = $url_parms['sales_day'] ;
       $form_state['values']['pl_group'] = $url_parms['pl_group'];
       $form_state['values']['beat_name'] = $url_parms['beat_name'];
       $form_state['type'] = t('single');
       $form_state['default_data'] = 1;
       $form_state['values']['hul_status'] =  $url_parms['hul_status'];;
       $sales_day = $form_state['values']['sales_day'];
       party_filters_submit($form, $form_state);
  }

  // right now it is optional
  /* $form['sales_person'] = array(
    '#type' => 'textfield',
    '#title' => 'Sales Person',
    '#maxlength' => 128,
    '#autocomplete_path' => 'sales_person/autocomplete',
    );
   */

  /*if ($type == "single") {
    $hul_status = array(0 => "Non-Confirmed", 1 => "Confirmed");
    $form['hul_status'] = array(
      '#type' => 'select',
      '#title' => t('status'),
      '#options' => $hul_status,
      '#default_value' => isset($_GET['hul_status']) ? $_GET['hul_status'] : NULL,     
      "#empty_option" => t('- Select -'),
        //'#required' => TRUE,
    );
  }
  else {
    $form['dummy'] = array(
      "#markup" => '<div class="clearance"></div>',
        //'#required' => TRUE,
    );
  }


  $form['filter'] = array(
    '#type' => 'submit',
    '#value' => t('Filter'),
    '#ajax' => array(
      'wrapper' => 'address-selection-map',
      'callback' => 'map_ajax_callback1',
      'method' => 'replace',
      'effect' => 'fade',
    ),
    '#validate' => array('party_filter_validate'),
    '#submit' => array('party_filters_submit'),
    '#id' => 'filter',
    '#limit_validation_errors' => array(array('hul_status'), array('beat_name'), array('pl_group'), array('sales_day')),
  );

  if (!isset($form_state['reverse_geocode']['rows'])) {
    $form_state['reverse_geocode']['rows'] = array();
  }
  $options = $form_state['reverse_geocode']['rows'];
  if ($options) {

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Confirm Address'),
      '#submit' => array('update_lat_lng_submit'),
      '#ajax' => array(
        'wrapper' => 'address-selection-map',
        'callback' => 'map_ajax_callback1',
        'method' => 'replace',
        'effect' => 'fade',
      ),
      '#states' => array(
        'visible' => array(
          ':input[name^="list_form_items"]' => array('checked' => TRUE),
        ),
      ),
      '#id' => 'confirm-add',
    );
    if ($type == "single") {
      $multiple = FALSE;
      $class = array('selectable-row', 'table-radio');
    }
    else {
      $multiple = TRUE;
      $class = array('selectable-row', 'table-checkbox');
    }
    $form['list_form_items'] = array(
      '#type' => 'tableselect',
      '#header' => $header_array,
      '#options' => $options,
      '#prefix' => '<div id="table-div">',
      '#suffix' => '</div>',
      '#empty' => t('No forms available.'),
      '#multiple' => $multiple,
      '#attributes' => array('class' => $class),
      '#default_value' => NULL,
    );

    $form['lat'] = array(
      '#type' => 'hidden',
    );
    $form['lng'] = array(
      '#type' => 'hidden',
    );
  }
  return $form;
}
*/
function hul_code_form($form, &$form_state, $type) {
  global $user;
  $user_id = $user->uid;
  $logged_in_distributor_id = change_feeds_import_get_distributor_id($user_id);
  $form_state['type'] = $type;

  $form['#prefix'] = '<div id="address-selection-map">';
  $form['#suffix'] = '</div>';
   // $url_parms for sending default value to confirm address after outlet upload
  $url_parms =  drupal_get_query_parameters();
  $distributor_id = $url_parms['distributor_id']?$url_parms['distributor_id']:$logged_in_distributor_id;
  $header_array = array(
    'sr_no' => array('data' => 'Sr No', 'class' => 'sr-cell'),
    'party_code' => array('data' => 'Party Code', 'class' => 'party-code-cell'),
    //'lat' => 'Latitude', 
    //'lng' => 'Longitude',
    'party_name' => array('data' => 'Party Name', 'class' => 'party-name-cell'),
    'status' => array('data' => 'Status', 'class' => 'status-cell'),
    //'address' => array('data' => 'Address', 'class' => array('cell-tooltip')),
    'details' => array('data' => '', 'class' => 'details-cell'),
  );
  // This for case insensitive Default value set for sales day and Beat name
  if(!(empty($url_parms['pl_group']))) { 
       $pl_group = $url_parms['pl_group'];
       $sales_day_values = reverse_geocode_get_data_from_dropdown($pl_group, $distributor_id, NULL, "get_sales_day");
       if (!empty($sales_day_values)) {
           foreach($sales_day_values as $key=>$value) {
               if (strcasecmp($value, $_GET['sales_day']) == 0) {
                   $_GET['sales_day'] = $value;
               }
           }
       }
  }
  if(!(empty($url_parms['pl_group'])) && !(empty($url_parms['sales_day']))) {
    $pl_group = $url_parms['pl_group'];
    $sales_day = $url_parms['sales_day'];
    $beat_name_options = reverse_geocode_get_data_from_dropdown($pl_group, $distributor_id, $sales_day, "get_beat_name");
    if (!empty($beat_name_options)) {
           foreach($beat_name_options as $key=>$value) {
               if (strcasecmp($value, $_GET['beat_name']) == 0) {
                   $_GET['beat_name'] = $value;
               }
           }
       }
  }
   // Central Distributor Logged IN
  if (in_array("administrator", $user->roles) || in_array("central_distributor", $user->roles)) {
    $distributor_id_from_url =$url_parms['distributor_id'];
     $distributor_ids = get_distributor_ids();
    unset($distributor_ids[$distributor_id]);
    $child_distributors = get_child_distributor_rsname($logged_in_distributor_id);
    $distributor_ids = array('' => 'Select') + $child_distributors;
    $form['central_outer'] = array(
      '#type' => 'markup',
      '#prefix' => '<div style="color:red"><h3>Note: Select any one  Distributor</h3></div>',  
    );
    $form['distributor_id'] = array(
      '#title' => t('Select Distributor Name'),
      '#type' => 'select',
      '#options' => $distributor_ids,
      '#default_value'=>$distributor_id_from_url,
      '#required' => TRUE,
      '#prefix' => '<div style="width:100%;margin-bottom:10px;clear:both;float:left;">',
      '#suffix' => '</div>',
      '#ajax' => array(
      'event' => 'change',
      'callback' => 'pl_group_ajax_callback',
      'wrapper' => 'address-selection-map',
    ),
    );
    $distributor_id = $form_state['input']['distributor_id']?$form_state['input']['distributor_id']:$distributor_id_from_url;
  }
  // Child distributor logged in
  else {
    $form['central_outer'] = array(
      '#type' => 'markup',
      '#prefix' => '<div style="color:red"></div>',
    );

    $form['distributor_id'] = array(
      '#type' => 'hidden',
      '#prefix' => '<div style="width:100%;margin-bottom:10px;clear:both;float:left;">',
      '#suffix' => '</div>',
      '#value' => $distributor_id,
    );
  }

  $pl_group_data = reverse_geocode_get_data_from_outlet_master($sales_day = NULL, "pl_group", $beat_name = NULL, $distributor_id);
  $form['pl_group'] = array(
    '#type' => 'select',
    '#title' => t('Pl_Group'),
    '#options' => $pl_group_data,
    //'#default_value' => isset($form_state['values']['pl_group']) ? $form_state['values']['pl_group'] : NULL,
    '#default_value' => isset($_GET['pl_group']) ? $_GET['pl_group'] : NULL,  
    '#ajax' => array(
      'event' => 'change',
      'callback' => 'pl_group_ajax_callback',
      'wrapper' => 'address-selection-map',
    ),
    //"#empty_option" => t('- Select -'),
    '#required' => TRUE,
  );
  $sales_day_from_url = reverse_geocode_get_data_from_dropdown($pl_group, $distributor_id, NULL, "get_sales_day");
      // if (strcasecmp($var1, $var2) == 0) {
  $form['sales_day'] = array(
    '#type' => 'select',
    '#title' => t('Sales Day'),
//    '#prefix' => '<div id="address-selection-map">',
//    '#suffix' => '</div>',
    // '#default_value' => isset($form_state['values']['sales_day']) ? $form_state['values']['sales_day'] : NULL,
    '#options' => array(),
    '#default_value' => isset($_GET['sales_day']) ? $_GET['sales_day'] : NULL,  
    '#ajax' => array(
      'event' => 'change',
      'callback' => 'sales_day_ajax_callback',
      'wrapper' => 'address-selection-map',
    ),
    '#required' => TRUE,
  );
  $form['beat_name'] = array(
    '#type' => 'select',
    '#title' => t('Beat Name'),
//    '#prefix' => '<div id="address-selection-map">',
//    '#suffix' => '</div>',
    //  '#default_value' => isset($form_state['values']['beat_name']) ? $form_state['values']['beat_name'] : NULL,
    '#options' => array(),
    '#default_value' => isset($_GET['beat_name']) ? $_GET['beat_name'] : NULL,   
    "#empty_option" => t('- Select -'),
    '#validated' => TRUE,
    '#required' => TRUE,
  );
  if (!empty($form_state['values']['distributor_id'])) {
    $distributor_id = $form_state['values']['distributor_id'];
  }
 
  if (!empty($form_state['values']['pl_group'])) {
    $pl_group = $form_state['values']['pl_group'];
    $form['sales_day']['#options'] = reverse_geocode_get_data_from_dropdown($pl_group, $distributor_id, NULL, "get_sales_day");
  }
  else if(!(empty($url_parms['pl_group']))) { 

       $pl_group = $url_parms['pl_group'];
       $form['sales_day']['#options'] = reverse_geocode_get_data_from_dropdown($pl_group, $distributor_id, NULL, "get_sales_day");

  }
  
  if (!empty($form_state['values']['pl_group']) && !empty($form_state['values']['sales_day'])) {
    $pl_group = $form_state['values']['pl_group'];
    $sales_day = $form_state['values']['sales_day'];
    $form['beat_name']['#options'] = reverse_geocode_get_data_from_dropdown($pl_group, $distributor_id, $sales_day, "get_beat_name");
  }
  elseif(!(empty($url_parms['pl_group'])) && !(empty($url_parms['sales_day']))) {
    $pl_group = $url_parms['pl_group'];
    $sales_day = $url_parms['sales_day'];
    $form['beat_name']['#options'] = reverse_geocode_get_data_from_dropdown($pl_group, $distributor_id, $sales_day, "get_beat_name");
  }

 if (!empty($form_state['values']['pl_group']) && !empty($form_state['values']['sales_day']) && empty($url_parms['pl_group'])) {
      
  }
  // Default button click
  else if (!empty($url_parms['pl_group']) && !empty($url_parms['sales_day']) && !empty($url_parms['beat_name']) ) {

       $form_state['values']['sales_day'] = $url_parms['sales_day'] ;
       $form_state['values']['pl_group'] = $url_parms['pl_group'];
       $form_state['values']['beat_name'] = $url_parms['beat_name'];
       $form_state['values']['distributor_id'] = $url_parms['distributor_id'];
       $form_state['type'] = t('single');
       $form_state['default_data'] = 1;
       $form_state['values']['hul_status'] =  $url_parms['hul_status'];;
       $sales_day = $form_state['values']['sales_day'];
       party_filters_submit($form, $form_state);
  }

  // right now it is optional
  /* $form['sales_person'] = array(
    '#type' => 'textfield',
    '#title' => 'Sales Person',
    '#maxlength' => 128,
    '#autocomplete_path' => 'sales_person/autocomplete',
    );
   */

  if ($type == "single") {
    $hul_status = array(0 => "Non-Confirmed", 1 => "Confirmed");
    $form['hul_status'] = array(
      '#type' => 'select',
      '#title' => t('status'),
      '#options' => $hul_status,
      '#default_value' => isset($_GET['hul_status']) ? $_GET['hul_status'] : NULL,     
      "#empty_option" => t('- Select -'),
        //'#required' => TRUE,
    );
  }
  else {
    $form['dummy'] = array(
      "#markup" => '<div class="clearance"></div>',
        //'#required' => TRUE,
    );
  }


  $form['filter'] = array(
    '#type' => 'submit',
    '#value' => t('Filter'),
    '#ajax' => array(
      'wrapper' => 'address-selection-map',
      'callback' => 'map_ajax_callback1',
      'method' => 'replace',
      'effect' => 'fade',
    ),
    '#validate' => array('party_filter_validate'),
    '#submit' => array('party_filters_submit'),
    '#id' => 'filter',
    '#limit_validation_errors' => array(array('hul_status'), array('beat_name'), array('pl_group'), array('sales_day')),
  );

  if (!isset($form_state['reverse_geocode']['rows'])) {
    $form_state['reverse_geocode']['rows'] = array();
  }
  $options = $form_state['reverse_geocode']['rows'];
  if ($options) {

    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Confirm Address'),
      '#submit' => array('update_lat_lng_submit'),
      '#ajax' => array(
        'wrapper' => 'address-selection-map',
        'callback' => 'map_ajax_callback1',
        'method' => 'replace',
        'effect' => 'fade',
      ),
      '#states' => array(
        'visible' => array(
          ':input[name^="list_form_items"]' => array('checked' => TRUE),
        ),
      ),
      '#id' => 'confirm-add',
    );
    if ($type == "single") {
      $multiple = FALSE;
      $class = array('selectable-row', 'table-radio');
    }
    else {
      $multiple = TRUE;
      $class = array('selectable-row', 'table-checkbox');
    }
    $form['list_form_items'] = array(
      '#type' => 'tableselect',
      '#header' => $header_array,
      '#options' => $options,
      '#prefix' => '<div id="table-div">',
      '#suffix' => '</div>',
      '#empty' => t('No forms available.'),
      '#multiple' => $multiple,
      '#attributes' => array('class' => $class),
      '#default_value' => NULL,
    );

    $form['lat'] = array(
      '#type' => 'hidden',
    );
    $form['lng'] = array(
      '#type' => 'hidden',
    );
  }
  return $form;
}
function reverse_geocode_trip_wise_form($form, &$form_state) {

  $header_array = array(
    'sr_no' => array('data' => 'Sr No', 'class' => 'sr-cell'),
    'party_code' => array('data' => 'Party Code', 'class' => 'party-code-cell'),
    'party_name' => array('data' => 'Party Name', 'class' => 'party-name-cell'),
    'seq' => array('data' => 'Seq', 'class' => 'seq-cell'),
    'details' => array('data' => '', 'class' => 'details-cell'),
  );

  $form['#prefix'] = '<div id="address-selection-map">';
  $form['#suffix'] = '</div>';

  $form['trip_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Trip Id'),
    '#required' => TRUE,
  );


  $form['filter'] = array(
    '#type' => 'submit',
    '#value' => t('Filter'),
    '#ajax' => array(
      'wrapper' => 'address-selection-map',
      'callback' => 'map_ajax_callback1',
      'method' => 'replace',
      'effect' => 'fade',
    ),
    '#validate' => array('trip_filter_validate'),
    '#submit' => array('trip_filters_submit'),
    '#id' => 'filter',
  );


  if (!isset($form_state['reverse_geocode']['rows'])) {
    $form_state['reverse_geocode']['rows'] = array();
  }
  $options = $form_state['reverse_geocode']['rows'];
  if ($options) {

    $multiple = TRUE;
    $class = array('selectable-row', 'table-checkbox');
    
    $form['list_form_items'] = array(
      '#type' => 'tableselect',
      '#header' => $header_array,
      '#options' => $options,
      '#prefix' => '<div id="table-div">',
      '#suffix' => '</div>',
      '#empty' => t('No forms available.'),
      '#multiple' => $multiple,
      '#attributes' => array('class' => $class),
      '#default_value' => NULL,
    );

    $form['lat'] = array(
      '#type' => 'hidden',
    );
    $form['lng'] = array(
      '#type' => 'hidden',
    );


//    $form['submit'] = array(
//      '#type' => 'submit',
//      '#value' => t('Confirm Address'),
//      '#submit' => array('trip_wise_form_submit'),
//      '#ajax' => array(
//        'wrapper' => 'address-selection-map',
//        'callback' => 'map_ajax_callback',
//        'method' => 'replace',
//        'effect' => 'fade',
//      ),
//      '#states' => array(
//        'visible' => array(
//          ':input[name^="list_form_items"]' => array('checked' => TRUE),
//        ),
//      ),
//      '#id' => 'confirm-add',
//    );
  }



  return $form;
}


function trip_filter_validate($form, &$form_state) {
  $trip_id = $form_state['values']['trip_id'];
  if (empty($trip_id)) {
    form_set_error('trip_id', 'Trip Id is required');
  }
  $data = reverse_geocode_get_data_trip_wise($trip_id);
  if (empty($data)) {
    $message = "No Results Found";
    unset($form_state['complete form']['list_form_items']);
    unset($form_state['complete form']['submit']);
    form_set_error('trip_id_msg', $message);
  }
  else {
    $form_state['values']['trip_data'] = $data;
  }
}

function trip_filters_submit($form, &$form_state) {
  unset($form_state['input']['list_form_items']);
  $trip_id = $form_state['values']['trip_id'];
  $data = $form_state['values']['trip_data'];
  foreach ($data as $key => $val) {
    $lat = $val['field_hul_lat_value'];
    $lng = $val['field_hul_long_value'];
    $hul_nid = $val['nid'];
    $street = $val['field_original_address_sub_premise'];
    $locality = $val['field_original_address_locality'];
    $sublocality = $val['field_original_address_dependent_locality'];
    $poi = $val['field_original_address_data'];

    if (!empty($lat) && !empty($lng)) {
      if (empty($street) && empty($locality) && empty($sublocality) && empty($poi)) {
        $result = reverse_geocode_results($lat, $lng, 'trip_filters_submit');
        $decoded_data = json_decode($result);
        $decoded_result = $decoded_data->results;
        $decoded_city = $decoded_result[0]->city;
        $decoded_district = $decoded_result[0]->district;
        $decoded_state = $decoded_result[0]->state;
        $decoded_pin = $decoded_result[0]->pincode;
        $decoded_street = $decoded_result[0]->street;
        $decoded_house_name = $decoded_result[0]->houseName;
        $decoded_locality = $decoded_result[0]->locality;
        $decoded_sublocality = $decoded_result[0]->subLocality;
        $decoded_poi = $decoded_result[0]->poi;
        $decoded_village = $decoded_result[0]->village;
        $decoded_formatted_address = $decoded_result[0]->formatted_address;
        $node = node_load($hul_nid);
        $node->field_original_address['und'][0]['administrative_area'] = $decoded_state;
        $node->field_original_address['und'][0]['sub_administrative_area'] = $decoded_city;
        $node->field_original_address['und'][0]['locality'] = $decoded_locality;
        $node->field_original_address['und'][0]['dependent_locality'] = $decoded_sublocality;
        $node->field_original_address['und'][0]['postal_code'] = $decoded_pin;
        $node->field_original_address['und'][0]['thoroughfare'] = $decoded_formatted_address;
        $node->field_original_address['und'][0]['premise'] = $decoded_district;
        $node->field_original_address['und'][0]['sub_premise'] = $decoded_street;
        $node->field_original_address['und'][0]['organisation_name'] = $decoded_house_name;
        $node->field_original_address['und'][0]['name_line'] = $decoded_village;
        $node->field_original_address['und'][0]['country'] = "IN";
        $node->field_original_address['und'][0]['data'] = $decoded_poi;
        node_save($node);
      }
    }

 //   $header = array('Attributes', 'Original', 'New');
    foreach ($data as $key => $val) {
      $party_code = $val['field_party_code_value'];
      $lat = $val['field_hul_updated_lat_value'];
      $long = $val['field_hul_updated_long_value'];

      $old_lat = $val['field_hul_lat_value'];
      $old_long = $val['field_hul_long_value'];

      $party_name = $val['field_party_name_value'];
      $sequence = (int) ($val['field_bill_sequence_value']);
      if ($sequence == "0" || empty($sequence)) {
        $seq = "NA";
      }
      else {
        $seq = "";
      }
      
      $sr_no = (int)($val['field_drs_sequence_value']);


      $old_city = $val['field_original_address_sub_administrative_area'];
      $old_district = $val['field_original_address_premise'];
      $old_state = $val['field_original_address_administrative_area'];
      $old_pin = $val['field_original_address_postal_code'];
      $old_street = $val['field_original_address_sub_premise'];
      $old_house_name = $val['field_original_address_organisation_name'];
      $old_locality = $val['field_original_address_locality'];
      $old_sublocality = $val['field_original_address_dependent_locality'];
      $old_poi = $val['field_original_address_data'];
      $old_village = $val['field_original_address_name_line'];
      $old_formatted_address = $val['field_original_address_thoroughfare'];

      $new_city = $val['field_updated_address_sub_administrative_area'];
      $new_district = $val['field_updated_address_premise'];
      $new_state = $val['field_updated_address_administrative_area'];
      $new_pin = $val['field_updated_address_postal_code'];
      $new_street = $val['field_updated_address_sub_premise'];
      $new_house_name = $val['field_updated_address_organisation_name'];
      $new_locality = $val['field_updated_address_locality'];
      $new_sublocality = $val['field_updated_address_dependent_locality'];
      $new_poi = $val['field_updated_address_data'];
      $new_village = $val['field_updated_address_name_line'];
      $new_formatted_address = $val['field_updated_address_thoroughfare'];


/*      $rows = array();

      $rows[] = array('Locality', $old_locality, $new_locality);
      $rows[] = array('Sub Locality', $old_sublocality, $new_sublocality);
      $rows[] = array('Street', $old_street, $new_street);
      $rows[] = array('POI', $old_poi, $new_poi);


      $lat_long = !empty($lat) ? $lat . ' / ' . $long : '';
      $rows[] = array('Lat/Long', $old_lat_long, $lat_long);
*/
      //$address = theme('table', array('header' => $header, 'rows' => $rows, 'sticky' => FALSE));

      $old_lat_long = !empty($old_lat) ? $old_lat . ',' . $old_long : '';
      $marker_tooltip = '<div class="cell-address cell-hide"><table>'
          . '<tr><td style="white-space:nowrap;color:#222">Party code</td><td>' . $party_code . '</td></tr>'
          . '<tr><td style="white-space:nowrap;color:#222">Party Name</td><td>' . $party_name . '</td></tr>'
          . '<tr><td style="white-space:nowrap;color:#222">Locality</td><td>' . $old_locality . '</td></tr>'
          . '<tr><td style="white-space:nowrap;color:#222">Sub Locality</td><td>' . $old_sublocality . '</td></tr>'
          . '<tr><td style="white-space:nowrap;color:#222">Street</td><td>' . $old_street . '</td></tr>'
          . '<tr><td style="white-space:nowrap;color:#222">POI</td><td>' . $old_poi . '</td></tr>'
          . '<tr><td style="white-space:nowrap;color:#222">Lat/Long</td><td>' . $old_lat_long . '</td></tr>'
          . '</table></div>';
      
      $options[$party_code] = array(
        'sr_no' => array('data' => $sr_no, 'class' => 'sr-cell'),
        'party_code' => array('data' => $party_code, 'class' => 'party-code-cell'),
        'party_name' => array('data' => '<div class="party-name-data">' . $party_name . '</div>', 'class' => 'party-name-cell'),
        'seq' => array('data' => $seq, 'class' => 'seq-cell'),
        '#attributes' => array('data-lat' => $lat, 'data-lng' => $long, 'data-sr' => $sr_no),
        'details' => array('data' => array('#markup' => '<a class="cell-details" style="display:none;">On Map</a>' . $marker_tooltip)),
      );
    }

    $form_state['reverse_geocode']['rows'] = $options;
    $form_state['rebuild'] = TRUE;
  }
}

/*
function trip_wise_form_submit($form, &$form_state) {
  $party_code = $form_state['values']['list_form_items'];
  $lat = $form_state['values']['lat'];
  $lng = $form_state['values']['lng'];
  //Get Related party codes to this selected party code
  $result = reverse_geocode_get_hul_code_from_party_code($party_code);

  $hul_code = key($result);
  //Update the address attributes in the database
  foreach ($result[$hul_code] as $val) {
    $party_codes[] = $val->title;
  }
  $attributes = reverse_geocode_update_hul_lat_lng($hul_code, $lat, $lng);
  if (!empty($attributes)) {

    foreach ($party_codes as $party_code) {

      if (isset($form_state['reverse_geocode']['rows'][$party_code])) {
        $form_state['reverse_geocode']['rows'][$party_code]['#attributes'] = array('data-lat' => $lat, 'data-lng' => $lng);
        $rows = $form_state['reverse_geocode']['rows'][$party_code]['details']['data']['#rows'];
        $rows[0][2] = $attributes['locality'];
        $rows[1][2] = $attributes['subLocality'];
        $rows[2][2] = $attributes['street'];
        $rows[3][2] = $attributes['poi'];
        $rows[4][2] = $lat . ' / ' . $lng;

        $form_state['reverse_geocode']['rows'][$party_code]['details']['data']['#rows'] = $rows;
      }
    }
    drupal_set_message('Successfully updated');
  }
  else {
    drupal_set_message('Error occured while updating', 'error');
  }


  $form_state['rebuild'] = TRUE;
}
*/
function map_ajax_callback1($form, &$form_state) {

  $commands[] = ajax_command_replace('#address-selection-map', render($form));
  $commands[] = array
    (
    // The command will be used in our JavaScript file (see next section)
    'command' => 'filter_clicked',
      // We pass the value that the user selected in the select element to our
      // JavaScript function:
      //'selectedValue' => 123,
  );
  $commands[] = ajax_command_prepend('#address-selection-map', theme('status_messages'));
  // And finally, we will return all of our commands to the system to be executed:
  return array('#type' => 'ajax', '#commands' => $commands);
}

function map_ajax_callback($form, &$form_state) {

  $commands[] = ajax_command_replace('#address-selection-map', render($form));

  $commands[] = array
    (
    // The command will be used in our JavaScript file (see next section)
    'command' => 'confirm_clicked',
      // We pass the value that the user selected in the select element to our
      // JavaScript function:
      //'selectedValue' => 123,
  );

  // And finally, we will return all of our commands to the system to be executed:
  return array('#type' => 'ajax', '#commands' => $commands);
}

function party_filter_validate(&$form, &$form_state) {
  $van = $form_state['values']['beat_name'];
  if (empty($van)) {
    form_set_error('beat_name', 'Beat Name is required');
  }
  $sales_day = $form_state['values']['sales_day'];
  $pl_group = $form_state['values']['pl_group'];
  $sales_person = $form_state['values']['sales_person'];
  $hul_status = $form_state['values']['hul_status'];
  $beat_name = $form_state['values']['beat_name'];
  $type = $form_state['type'];
  $distributor_id = $form_state['values']['distributor_id'];
  $data = reverse_geocode_get_data_hul_code_wise($sales_day, $pl_group, $sales_person, $hul_status, $beat_name, $type,$distributor_id);
  if (empty($data)) {
    $message = "No Results Found";
    unset($form_state['complete form']['list_form_items']);
    unset($form_state['complete form']['submit']);

    form_set_error('sales_day', $message);
  }
  else {
    $form_state['values']['hul_code_data'] = $data;
  }
}

function reverse_geocode_get_data_hul_code_wise($sales_day, $pl_group, $sales_person, $hul_status, $beat_name, $type,$distributor_id) {

  $query = db_select('node', 'n');
  $query->condition('n.type', 'outlet_master');
  $query->condition('n.uid', $distributor_id, '=');

  if (!is_null($sales_person)) {
    $query->join('field_data_field_sales_person', 'sp', 'sp.entity_id = n.nid');
    $query->condition('sp.field_sales_person_value', $sales_person, '=');
    $query->fields('sp', array('field_sales_person_value'));
  }
  $query->join('field_data_field_sales_day', 'sd', 'sd.entity_id = n.nid');
  $query->condition('sd.field_sales_day_value', $sales_day, '=');
  $query->fields('sd', array('field_sales_day_value'));
  $query->join('field_data_field_pl_group', 'plg', 'plg.entity_id = n.nid');
  $query->condition('plg.field_pl_group_value', $pl_group, '=');
  $query->fields('plg', array('field_pl_group_value'));
  $query->join('field_data_field_party_name', 'pn', 'pn.entity_id = n.nid');
  $query->fields('pn', array('field_party_name_value'));
  $query->join('field_data_field_party_code', 'pc', 'pc.entity_id = n.nid');
  $query->fields('pc', array('field_party_code_value'));
  $query->join('field_data_field_beat_name', 'bn', 'bn.entity_id = n.nid');
  $query->condition('bn.field_beat_name_value', $beat_name, '=');
  $query->fields('bn', array('field_beat_name_value'));
  $query->fields('n', array('nid'));
  $query->join('field_data_field_hul_code', 'hc', 'hc.entity_id = n.nid');
  $query->fields('hc', array('field_hul_code_value'));
  $query->join('node', 'hul', 'hc.field_hul_code_value = hul.title');
  $query->condition('hul.type', 'hul_code_master');
  $query->condition('hul.uid', $distributor_id, '=');
  $query->leftJoin('field_data_field_hul_status', 'hul_st', 'hul_st.entity_id = hul.nid');

  $query->leftJoin('field_data_field_hul_updated_lat', 'hul_lat_u', 'hul_lat_u.entity_id = hul.nid');
  $query->fields('hul_lat_u', array('field_hul_updated_lat_value'));
  $query->leftJoin('field_data_field_hul_updated_long', 'hul_long_u', 'hul_long_u.entity_id = hul.nid');
  $query->fields('hul_long_u', array('field_hul_updated_long_value'));
  $query->leftJoin('field_data_field_hul_lat', 'hul_lat', 'hul_lat.entity_id = hul.nid');
  $query->fields('hul_lat', array('field_hul_lat_value'));
  $query->leftJoin('field_data_field_hul_long', 'hul_long', 'hul_long.entity_id = hul.nid');
  $query->fields('hul_long', array('field_hul_long_value'));
  if ($type == "single") {
    if ($hul_status === '0' || $hul_status === '1') {
      $query->condition('hul_st.field_hul_status_value', $hul_status, '=');
    }
  }
  else {

    //Show results having lat/lng
    $query->isNotNull('hul_lat.field_hul_lat_value');
    $query->isNotNull('hul_long.field_hul_long_value');
    $query->condition('hul_st.field_hul_status_value', 0, '=');

    //Order results on basis of Lat/lng
    $query->orderBy('hul_lat.field_hul_lat_value', 'asc');
    $query->orderBy('hul_long.field_hul_long_value', 'asc');
  }

  $query->fields('hul_st', array('field_hul_status_value'));
  $query->leftjoin('field_data_field_original_address', 'od', 'od.entity_id = hul.nid');
  $query->fields('od');
  $query->leftjoin('field_data_field_updated_address', 'new', 'new.entity_id = hul.nid');
  $query->fields('new');
  $query->fields('hul', array('nid'));
  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  return $res;
}

function party_filters_submit(&$form, &$form_state) {
  unset($form_state['input']['list_form_items']);

  $sales_day = $form_state['values']['sales_day'];
  $pl_group = $form_state['values']['pl_group'];
  $sales_person = $form_state['values']['sales_person'];
  $beat_name = $form_state['values']['beat_name'];
  $hul_status = $form_state['values']['hul_status'];
  // $data = $form_state['values']['hul_code_data'];
  $type = $form_state['type'];
  $distributor_id = $form_state['input']['distributor_id']?$form_state['input']['distributor_id']:$form_state['values']['distributor_id'];

  $data = reverse_geocode_get_data_hul_code_wise($sales_day, $pl_group, $sales_person, $hul_status, $beat_name, $type,$distributor_id);
  foreach ($data as $key => $val) {
    $lat = $val['field_hul_lat_value'];
    $lng = $val['field_hul_long_value'];
    $hul_nid = $val['hul_nid'];


    $street = $val['field_original_address_sub_premise'];
    $locality = $val['field_original_address_locality'];
    $sublocality = $val['field_original_address_dependent_locality'];
    $poi = $val['field_original_address_data'];

    if (!empty($lat) && !empty($lng)) {
      if (empty($street) && empty($locality) && empty($sublocality) && empty($poi)) {
        $result = reverse_geocode_results($lat, $lng, 'party_filters_submit');
        $decoded_data = json_decode($result);
        $decoded_result = $decoded_data->results;
        $decoded_city = $decoded_result[0]->city;
        $decoded_district = $decoded_result[0]->district;
        $decoded_state = $decoded_result[0]->state;
        $decoded_pin = $decoded_result[0]->pincode;
        $decoded_street = $decoded_result[0]->street;
        $decoded_house_name = $decoded_result[0]->houseName;
        $decoded_locality = $decoded_result[0]->locality;
        $decoded_sublocality = $decoded_result[0]->subLocality;
        $decoded_poi = $decoded_result[0]->poi;
        $decoded_village = $decoded_result[0]->village;
        $decoded_formatted_address = $decoded_result[0]->formatted_address;

        $node = node_load($hul_nid);
        $node->field_original_address['und'][0]['administrative_area'] = $decoded_state;
        $node->field_original_address['und'][0]['sub_administrative_area'] = $decoded_city;
        $node->field_original_address['und'][0]['locality'] = $decoded_locality;
        $node->field_original_address['und'][0]['dependent_locality'] = $decoded_sublocality;
        $node->field_original_address['und'][0]['postal_code'] = $decoded_pin;
        $node->field_original_address['und'][0]['thoroughfare'] = $decoded_formatted_address;
        $node->field_original_address['und'][0]['premise'] = $decoded_district;
        $node->field_original_address['und'][0]['sub_premise'] = $decoded_street;
        $node->field_original_address['und'][0]['organisation_name'] = $decoded_house_name;
        $node->field_original_address['und'][0]['name_line'] = $decoded_village;
        $node->field_original_address['und'][0]['country'] = "IN";
        $node->field_original_address['und'][0]['data'] = $decoded_poi;
        node_save($node);
      }
    }
  }

  $data = reverse_geocode_get_data_hul_code_wise($sales_day, $pl_group, $sales_person, $hul_status, $beat_name, $type,$distributor_id);
  $header = array('Attributes', 'Original', 'New');
  foreach ($data as $key => $val) {
    $party_code = $val['field_party_code_value'];
    $lat = $val['field_hul_updated_lat_value'];
    $long = $val['field_hul_updated_long_value'];

    $old_lat = $val['field_hul_lat_value'];
    $old_long = $val['field_hul_long_value'];

    $beat_name = $val['field_beat_name_value'];
    $party_name = $val['field_party_name_value'];
    $hul_status = $val['field_hul_status_value'];
    if ($hul_status == "0") {
      $hul_status = "Non-Confirmed";
    }
    elseif ($hul_status == "1") {
      $hul_status = "Confirmed";
    }

    $old_city = $val['field_original_address_sub_administrative_area'];
    $old_district = $val['field_original_address_premise'];
    $old_state = $val['field_original_address_administrative_area'];
    $old_pin = $val['field_original_address_postal_code'];
    $old_street = $val['field_original_address_sub_premise'];
    $old_house_name = $val['field_original_address_organisation_name'];
    $old_locality = $val['field_original_address_locality'];
    $old_sublocality = $val['field_original_address_dependent_locality'];
    $old_poi = $val['field_original_address_data'];
    $old_village = $val['field_original_address_name_line'];
    $old_formatted_address = $val['field_original_address_thoroughfare'];

    $new_city = $val['field_updated_address_sub_administrative_area'];
    $new_district = $val['field_updated_address_premise'];
    $new_state = $val['field_updated_address_administrative_area'];
    $new_pin = $val['field_updated_address_postal_code'];
    $new_street = $val['field_updated_address_sub_premise'];
    $new_house_name = $val['field_updated_address_organisation_name'];
    $new_locality = $val['field_updated_address_locality'];
    $new_sublocality = $val['field_updated_address_dependent_locality'];
    $new_poi = $val['field_updated_address_data'];
    $new_village = $val['field_updated_address_name_line'];
    $new_formatted_address = $val['field_updated_address_thoroughfare'];


    $rows = array();

    $rows[] = array('Locality', $old_locality, $new_locality);
    $rows[] = array('Sub Locality', $old_sublocality, $new_sublocality);
    $rows[] = array('Street', $old_street, $new_street);
    $rows[] = array('POI', $old_poi, $new_poi);


    $old_lat_long = !empty($old_lat) ? $old_lat . ',' . $old_long : '';
    $lat_long = !empty($lat) ? $lat . ' / ' . $long : '';
    $rows[] = array('Lat/Long', $old_lat_long, $lat_long);

    //$address = theme('table', array('header' => $header, 'rows' => $rows, 'sticky' => FALSE));

    $options[$party_code] = array(
      'sr_no' => array('data' => $key + 1, 'class' => 'sr-cell'),
      'party_code' => array('data' => $party_code, 'class' => 'party-code-cell'),
      //'lat' => $lat,
      //'lng' => $long,
      'party_name' => array('data' => '<div class="party-name-data">' . $party_name . '</div>', 'class' => 'party-name-cell'),
      '#attributes' => array('data-lat' => $lat, 'data-lng' => $long, 'data-sr' => $key + 1),
      'status' => array('data' => $hul_status, 'class' => 'status-cell'),
      //'details' => array('data' => '<a class="cell-details">Details</a>' . $address),
      'details' => array('data' => array('#theme' => 'table', '#header' => $header, '#rows' => $rows, '#sticky' => FALSE, '#prefix' => '<a class="cell-details">Details</a>', '#attributes' => array('class' => array('cell-hide'))), 'class' => 'details-cell'),
    );
    if ($type == 'multi') {
      $marker_tooltip = '<div class="cell-address cell-hide"><table>'
          . '<tr><td style="white-space:nowrap;color:#222">Party code</td><td>' . $party_code . '</td></tr>'
          . '<tr><td style="white-space:nowrap;color:#222">Party Name</td><td>' . $party_name . '</td></tr>'
          . '<tr><td style="white-space:nowrap;color:#222">Locality</td><td>' . $old_locality . '</td></tr>'
          . '<tr><td style="white-space:nowrap;color:#222">Sub Locality</td><td>' . $old_sublocality . '</td></tr>'
          . '<tr><td style="white-space:nowrap;color:#222">Street</td><td>' . $old_street . '</td></tr>'
          . '<tr><td style="white-space:nowrap;color:#222">POI</td><td>' . $old_poi . '</td></tr>'
          . '<tr><td style="white-space:nowrap;color:#222">Lat/Long</td><td>' . $old_lat_long . '</td></tr>'
          . '</table></div>';
      $options[$party_code]['details'] = array('data' => array('#markup' => '<a class="cell-details" style="display:none;">On Map</a>' . $marker_tooltip));
    }
  }

  $url_parms =  drupal_get_query_parameters();
  
  $form_state['reverse_geocode']['rows'] = $options;
  if (empty($url_parms['distributor_id'])) {
      $form_state['rebuild'] = TRUE;
  }

}

//function get_reverse_geocode_from_lat_long() {
//  $lat = $_GET['lat'];
//  $lng = $_GET['lng'];
////  $ result = reverse_geocode_results($lat, $lng);
//  echo $result;
//}

function get_lat_long_from_area_hook() {
  $area_hook = $_GET['area_hook'];
  $sales_day = $_GET['sales_day'];
  $van_pl_group = $_GET['van_pl_group'];
  $result = lat_lng_results($area_hook, $sales_day, $van_pl_group);
  echo $result;
}

function get_address_from_hul_node() {
  $nid = $_GET['nid'];
  $result = address_results($nid);
  echo $result;
}

function address_results($nid) {
  global $user;
  $user_id = $user->uid;
  $distributor_id = change_feeds_import_get_distributor_id($user_id);
  $query = db_select('node', 'n');
  $query->condition('n.type', 'hul_code_master');
  $query->condition('n.nid', $nid, '=');
  $query->addTag('node_uid');
  $query->Join('field_data_field_hul_updated_lat', 'hul_lat_u', 'hul_lat_u.entity_id = n.nid');
  $query->fields('hul_lat_u', array('field_hul_updated_lat_value'));
  $query->Join('field_data_field_hul_updated_long', 'hul_long_u', 'hul_long_u.entity_id = n.nid');
  $query->fields('hul_long_u', array('field_hul_updated_long_value'));
  $query->join('field_data_field_updated_address', 'new', 'new.entity_id = n.nid');
  $query->fields('new');
  $query->orderBy('hul_lat_u.field_hul_updated_lat_value', 'asc');
  $query->orderBy('hul_long_u.field_hul_updated_long_value', 'asc');

  $query->join('field_data_field_hul_code', 'hc', 'hc.field_hul_code_value = n.title');
  $query->join('node', 'ouln', 'ouln.nid = hc.entity_id');
  $query->condition('ouln.uid', $distributor_id, '=');
  $query->fields('ouln', array('title'));
  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);


  foreach ($res as $key => $val) {
    $lat = $val['field_hul_updated_lat_value'];
    $long = $val['field_hul_updated_long_value'];
    $party_code = $val['title'];

    $new_city = $val['field_updated_address_sub_administrative_area'];
    $new_street = $val['field_updated_address_sub_premise'];
    $new_locality = $val['field_updated_address_locality'];
    $new_sublocality = $val['field_updated_address_dependent_locality'];
    $new_poi = $val['field_updated_address_data'];
    $new_lat_long = !empty($lat) ? $lat . ',' . $long : '';

    $marker_tooltip = '<div class="cell-address cell-hide"><table>'
        . '<tr><td style="white-space:nowrap;color:#222">Party code</td><td>' . $party_code . '</td></tr>'
        . '<tr><td style="white-space:nowrap;color:#222">Locality</td><td>' . $new_locality . '</td></tr>'
        . '<tr><td style="white-space:nowrap;color:#222">Sub Locality</td><td>' . $new_sublocality . '</td></tr>'
        . '<tr><td style="white-space:nowrap;color:#222">Street</td><td>' . $new_street . '</td></tr>'
        . '<tr><td style="white-space:nowrap;color:#222">POI</td><td>' . $new_poi . '</td></tr>'
        . '<tr><td style="white-space:nowrap;color:#222">Lat/Long</td><td>' . $new_lat_long . '</td></tr>'
        . '</table></div>';
  }

  return $marker_tooltip;
}

function lat_lng_results($area_hook, $sales_day, $van_pl_group) {
  global $user;
  $user_id = $user->uid;
  $distributor_id = change_feeds_import_get_distributor_id($user_id);
  $query = db_select('node', 'n');
  $query->condition('n.type', 'outlet_master');
  $query->addTag('node_uid');
  if (!empty($area_hook)) {
    $query->join('field_data_field_outlet_area_hook', 'oah', 'oah.entity_id = n.nid');
    $query->condition('oah.field_outlet_area_hook_value', $area_hook, '=');
  }
  if (!empty($sales_day)) {
    $query->join('field_data_field_sales_day', 'sd', 'sd.entity_id = n.nid');
    $query->condition('sd.field_sales_day_value', $sales_day, '=');
    $query->fields('sd', array('field_sales_day_value'));
  }
  if (!empty($van_pl_group)) {
    $query->join('field_data_field_channel', 'ch', 'ch.entity_id = n.nid');
    $query->condition('ch.bundle', 'outlet_master');
    $query->join('field_data_field_pl_group', 'pl', 'pl.entity_id = n.nid');
    $query->condition('pl.bundle', 'outlet_master');
    $query->join('field_data_field_channel', 'ppmch', 'ch.field_channel_value = ppmch.field_channel_value');
    $query->condition('ppmch.bundle', 'party_pack_master');
    $query->join('node', 'ppn', 'ppn.nid = ppmch.entity_id');
    $query->condition('ppn.uid', $distributor_id, '=');
    $query->join('field_data_field_pl_group', 'ppmpl', 'pl.field_pl_group_value = ppmpl.field_pl_group_value and ppmch.entity_id = ppmpl.entity_id');
    $query->condition('ppmch.bundle', 'party_pack_master');
    $query->join('field_data_field_van_pl_group', 'vplgp', 'ppn.nid = vplgp.entity_id');
    $query->condition('vplgp.field_van_pl_group_value', $van_pl_group, '=');
  }
  $query->join('field_data_field_hul_code', 'hc', 'hc.entity_id = n.nid');
  $query->join('node', 'hul', 'hc.field_hul_code_value = hul.title');
  $query->condition('hul.uid', $distributor_id, '=');
  $query->condition('hul.type', 'hul_code_master');

  $query->Join('field_data_field_hul_updated_lat', 'hul_lat_u', 'hul_lat_u.entity_id = hul.nid');
  $query->fields('hul_lat_u', array('field_hul_updated_lat_value'));
  $query->Join('field_data_field_hul_updated_long', 'hul_long_u', 'hul_long_u.entity_id = hul.nid');
  $query->fields('hul_long_u', array('field_hul_updated_long_value'));
  //$query->join('field_data_field_updated_address', 'new', 'new.entity_id = hul.nid');
  $query->orderBy('hul_lat_u.field_hul_updated_lat_value', 'asc');
  $query->orderBy('hul_long_u.field_hul_updated_long_value', 'asc');
  $query->fields('hul', array('nid'));
  $query->groupBy('hul.nid');
  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  array_unshift($res, "");
  unset($res[0]);
  echo json_encode($res);
}

function reverse_geocode_results($lat, $lng, $page_name ='default') {
  $license_key = variable_get('mapmyindia_rest_key', 'z94i9hvuqcsz7amywt76aknw8dx9o15z');

  $url = "https://apis.mapmyindia.com/advancedmaps/v1/$license_key/rev_geocode" . "?lng=$lng&lat=$lat";
//  if(trim($lng, 0) == 1.11 || trim($lat, 0) == 1.11) {
  if((explode('.', $lng)[0]) <= 1 || (explode('.', $lat)[0]) <= 1) {
     $result = ''; 
  }
  else {
  $curl = curl_init();
  curl_setopt($curl, CURLOPT_URL, $url);
  curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
  curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 0);
  curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0);
  $result = curl_exec($curl);

  $info = curl_getinfo($curl);

// also get the error and response code
//$errors = curl_error($curl);
//echo $errors;
  curl_close($curl);
  }
  db_insert('map_my_india_api_log')
     ->fields(array(
        'reference_number' => $page_name,
        'request_data' => $url,
        'request_time' => time(),
        'response_data' => $result,
     ))
     ->execute();

  return $result;
}

function update_lat_lng_submit(&$form, &$form_state) {
  $party_code = $form_state['values']['list_form_items'];
  $lat = $form_state['values']['lat'];
  $lng = $form_state['values']['lng'];
  $type = $form_state['type'];
  $distributor_id = $form_state['values']['distributor_id'];
  if ($type == "single") {
    //Get Related party codes to this selected party code
    $result = reverse_geocode_get_hul_code_from_party_code($party_code,$distributor_id);

    $hul_code = key($result);
    //Update the address attributes in the database
    foreach ($result[$hul_code] as $val) {
      $party_codes[] = $val->title;
    }
 
    $attributes = reverse_geocode_update_hul_lat_lng($hul_code, $lat, $lng,$distributor_id);
    if (!empty($attributes)) {

      foreach ($party_codes as $party_code) {

        if (isset($form_state['reverse_geocode']['rows'][$party_code])) {
          //$form_state['reverse_geocode']['rows'][$party_code]['lat'] = $lat;
          //$form_state['reverse_geocode']['rows'][$party_code]['lng'] = $lng;
          $form_state['reverse_geocode']['rows'][$party_code]['status'] = 'Confirmed';
          $form_state['reverse_geocode']['rows'][$party_code]['#attributes'] = array('data-lat' => $lat, 'data-lng' => $lng);

          $rows = $form_state['reverse_geocode']['rows'][$party_code]['details']['data']['#rows'];

          $rows[0][2] = $attributes['locality'];
          $rows[1][2] = $attributes['subLocality'];
          $rows[2][2] = $attributes['street'];
          $rows[3][2] = $attributes['poi'];
          $rows[4][2] = $lat . ' / ' . $lng;

          $form_state['reverse_geocode']['rows'][$party_code]['details']['data']['#rows'] = $rows;
        }
      }
      drupal_set_message('Successfully updated');
    }
    else {
      drupal_set_message('Error occured while updating', 'error');
    }
  }
  else {

    foreach ($party_code as $code) {
      $result = reverse_geocode_get_hul_code_from_party_code($code,$distributor_id);
      $hul_code = key($result);
      reverse_geocode_update_hul_status($hul_code,$distributor_id);

      if (isset($form_state['reverse_geocode']['rows'][$code])) {
        unset($form_state['reverse_geocode']['rows'][$code]);
      }
    }

    $i = 0;
    foreach ($form_state['reverse_geocode']['rows'] as $key => &$value) {
      $value['sr_no'] = $value['#attributes']['data-sr'] = ++$i;
    }
    drupal_set_message('Successfully updated');
  }
  $form_state['rebuild'] = TRUE;
}

function reverse_geocode_update_hul_status($hul_code,$distributor_id) {
  module_load_include('inc', 'change_feeds_import', 'form/upload_billing_data');
  $nid = check_node_title_exists($hul_code, 'hul_code_master',FALSE,$distributor_id);

  if ($nid) {
    $node = node_load($nid);
    $node->field_hul_status['und'][0]['value'] = 1;
    $node->field_updated_address = $node->field_original_address;
    node_save($node);
  }
}

function reverse_geocode_get_hul_code_from_party_code($party_code,$distributor_id) {
  //global $user;
  //$user_id = $user->uid;
  //$distributor_id = change_feeds_import_get_distributor_id($user_id);

  $query = db_select('node', 'n');
  $query->join('field_data_field_hul_code', 'fh', 'fh.entity_id = n.nid');

  $query->join('field_data_field_hul_code', 'fh2', 'fh.field_hul_code_value = fh2.field_hul_code_value');
  $query->condition('n.title', $party_code);
  $query->condition('n.type', 'outlet_master');
  $query->condition('n.uid', $distributor_id);
  $query->condition('n2.uid', $distributor_id);

  $query->join('node', 'n2', 'fh2.entity_id = n2.nid');
  $query->fields('fh2', array('field_hul_code_value'));
  $query->fields('n2', array('title'));

  $res = $query->execute()->fetchAll(PDO::FETCH_GROUP);

  return $res;
}

function reverse_geocode_update_hul_lat_lng($hul_code, $lat, $lng,$distributor_id) {
  module_load_include('inc', 'change_feeds_import', 'form/upload_billing_data');
  $nid = check_node_title_exists($hul_code, 'hul_code_master',FALSE,$distributor_id);
  if ($nid) {

    try {
      //Call Reverse Geo code API to get details
      $json_response = reverse_geocode_results($lat, $lng, 'reverse_geocode_update_hul_lat_lng');
      $node = node_load($nid);
      $node->field_hul_updated_lat[LANGUAGE_NONE][0]['value'] = $lat;
      $node->field_hul_updated_long[LANGUAGE_NONE][0]['value'] = $lng;
      $node->field_hul_status[LANGUAGE_NONE][0]['value'] = 1;

      $response = json_decode($json_response, TRUE);

      $attributes = $response['results'][0];

      $node->field_updated_address[LANGUAGE_NONE][0] = array(
        'country' => 'IN',
        'administrative_area' => $attributes['state'],
        'sub_administrative_area' => $attributes['city'],
        'locality' => $attributes['locality'],
        'dependent_locality' => $attributes['subLocality'],
        'postal_code' => $attributes['pincode'],
        'thoroughfare' => $attributes['formatted_address'],
        'premise' => $attributes['district'],
        'sub_premise' => $attributes['street'],
        'organisation_name' => $attributes['houseName'],
        'name_line' => $attributes['village'],
        'first_name' => '',
        'last_name' => '',
        'data' => $attributes['poi'],
      );
      node_save($node);
    }
    catch (Exception $exc) {
      return array();
    }
  }

  return $attributes;
}

/**
 * Implements hook_node_presave()
 */
function reverse_geocode_node_presave($node) {
  global $user;
  $user_id = $user->uid;
  $distributor_id = change_feeds_import_get_distributor_id($user_id);
   
  // store reference for party code from outlet master type if node created.
  if ($node->type == 'sales_register_data') {
      if (empty($node->field_bill_net_sales['und'][0]['value'])) {
         $distributor_id = $node->uid;
         $bill_number = $node->title;
         $query = db_select('custom_billing_data', 'cb');
         $query->addExpression('SUM(cb.Sum_of_NET_SALES_VALUE)', 'sum_net_sales_value');
         $query->condition('cb.distributor_id', $distributor_id);
         $query->condition('cb.bill_number', $bill_number, '=');
         $sum_net_sales_value = $query->execute()->fetchField();
         if (!empty($sum_net_sales_value)) {
            $node->field_bill_net_sales['und'][0]['value'] = round($sum_net_sales_value, 2);
         }
      }

      if (!empty($node->field_bill_net_sales['und'][0]['value'])) {
         // code for updating Pdd value on updating bill Date
         $original_bill_value = $node->original->field_bill_value[LANGUAGE_NONE][0]['value'];
         $sales_bill_value = $node->field_bill_value[LANGUAGE_NONE][0]['value'];
         if ($original_bill_value != $sales_bill_value) {
            $sum_of_net_sales_value = $node->field_bill_net_sales['und'][0]['value'];
            $pod_value = (($sum_of_net_sales_value - $sales_bill_value) / $sum_of_net_sales_value) * 100;
            $node_uid = $node->uid;

            // fetch pod threshold for distributor
            $user_pod_value = _get_pod_threshold_value($node_uid);

            // check if $pod_value is greater than or not $user_pod_value
            $dispatch_date = '';
            $trip_id = $node->field_trip_id_reference[LANGUAGE_NONE][0]['nid'];
            if(!empty($trip_id)){
              $dispatch_date = check_dispatch_date($trip_id);
            }
            if (!empty($user_pod_value) && empty($dispatch_date)) {
               if ($pod_value >= $user_pod_value) {
                  $node->field_pod_flag[LANGUAGE_NONE][0]['value'] = 1;
                  // make the call type 'highly discounted'
                  $node->field_call_type['und'][0]['value'] = 'hd';
               }
            }
         }
      }

      if(!empty($node->field_sales_party_code['und'][0]['value']) && empty($node->field_party_code_reference['und'][0]['nid'])) {
        // write a logic here to fetch same distributors party code reference 
        // and store here in node
        
        $party_code = $node->field_sales_party_code['und'][0]['value'];
        $node_author = $node->uid;
        $query = db_select('node', 'n');
        $query->fields('n', array('nid'));
        $query->condition('n.type', 'outlet_master');
        $query->join('field_data_field_party_code', 'p', 'p.entity_id = n.nid');
        $query->condition('field_party_code_value', $party_code);
        $query->condition('n.uid', $node_author);
        $outlet_nid = $query->execute()->fetchField();
        if (!empty($outlet_nid)) {
          $node->field_party_code_reference['und'][0]['nid'] = $outlet_nid;
        }     
     }
  } 
  if ($node->type == 'hul_code_master') {
    $og_hul_lat = $node->original->field_hul_lat['und'][0]['value'];
    $og_hul_long = $node->original->field_hul_long['und'][0]['value'];

    $new_hul_lat = $node->field_hul_lat['und'][0]['value'];
    $new_hul_long = $node->field_hul_long['und'][0]['value'];

    if ($node->is_new) {
      $node->field_hul_status['und'][0]['value'] = 0;
    }
    if (empty($node->field_hul_updated_lat['und'][0]['value']) && empty($node->field_hul_updated_long['und'][0]['value'])) {
      if (isset($node->field_hul_lat['und']) && isset($node->field_hul_long['und'])) {
        $node->field_hul_updated_lat['und'][0]['value'] = $node->field_hul_lat['und'][0]['value'];
        $node->field_hul_updated_long['und'][0]['value'] = $node->field_hul_long['und'][0]['value'];
      }
    }

    if (!empty($og_hul_lat) && !empty($og_hul_long)) {
      if (($new_hul_lat != $og_hul_lat) || ($new_hul_long != $og_hul_long)) {
        $street = $node->field_original_address['und'][0]['sub_premise'];
        $locality = $node->field_original_address['und'][0]['locality'];
        $sublocality = $node->field_original_address['und'][0]['dependent_locality'];
        $poi = $node->field_original_address['und'][0]['data'];


        if (!empty($street) || !empty($locality) || !empty($sublocality) || !empty($poi)) {
          $result = reverse_geocode_results($new_hul_lat, $new_hul_long, 'reverse_geocode_node_presave');
          $decoded_data = json_decode($result);
          $decoded_result = $decoded_data->results;

          $decoded_city = $decoded_result[0]->city;
          $decoded_district = $decoded_result[0]->district;
          $decoded_state = $decoded_result[0]->state;
          $decoded_pin = $decoded_result[0]->pincode;
          $decoded_street = $decoded_result[0]->street;
          $decoded_house_name = $decoded_result[0]->houseName;
          $decoded_locality = $decoded_result[0]->locality;
          $decoded_sublocality = $decoded_result[0]->subLocality;
          $decoded_poi = $decoded_result[0]->poi;
          $decoded_village = $decoded_result[0]->village;
          $decoded_formatted_address = $decoded_result[0]->formatted_address;

          $node->field_original_address['und'][0]['administrative_area'] = $decoded_state;
          $node->field_original_address['und'][0]['sub_administrative_area'] = $decoded_city;
          $node->field_original_address['und'][0]['locality'] = $decoded_locality;
          $node->field_original_address['und'][0]['dependent_locality'] = $decoded_sublocality;
          $node->field_original_address['und'][0]['postal_code'] = $decoded_pin;
          $node->field_original_address['und'][0]['thoroughfare'] = $decoded_formatted_address;
          $node->field_original_address['und'][0]['premise'] = $decoded_district;
          $node->field_original_address['und'][0]['sub_premise'] = $decoded_street;
          $node->field_original_address['und'][0]['organisation_name'] = $decoded_house_name;
          $node->field_original_address['und'][0]['name_line'] = $decoded_village;
          $node->field_original_address['und'][0]['data'] = $decoded_poi;

          $hul_status = $node->field_hul_status['und'][0]['value'];
          if ($hul_status == 0) {
            $node->field_updated_address['und'][0]['administrative_area'] = $decoded_state;
            $node->field_updated_address['und'][0]['sub_administrative_area'] = $decoded_city;
            $node->field_updated_address['und'][0]['locality'] = $decoded_locality;
            $node->field_updated_address['und'][0]['dependent_locality'] = $decoded_sublocality;
            $node->field_updated_address['und'][0]['postal_code'] = $decoded_pin;
            $node->field_updated_address['und'][0]['thoroughfare'] = $decoded_formatted_address;
            $node->field_updated_address['und'][0]['premise'] = $decoded_district;
            $node->field_updated_address['und'][0]['sub_premise'] = $decoded_street;
            $node->field_updated_address['und'][0]['organisation_name'] = $decoded_house_name;
            $node->field_updated_address['und'][0]['name_line'] = $decoded_village;
            $node->field_updated_address['und'][0]['data'] = $decoded_poi;

            $node->field_hul_updated_lat['und'][0]['value'] = $node->field_hul_lat['und'][0]['value'];
            $node->field_hul_updated_long['und'][0]['value'] = $node->field_hul_long['und'][0]['value'];
          }
        }
        else {
          if ($node->field_hul_status['und'][0]['value'] == 0) {
            $node->field_hul_updated_lat['und'][0]['value'] = $node->field_hul_lat['und'][0]['value'];
            $node->field_hul_updated_long['und'][0]['value'] = $node->field_hul_long['und'][0]['value'];
          }
        }
      }
    }
  }
   else if (($node->type == 'sales_register_data') && !($node->is_new)) {
      // code for One Time Updating Dispatch N Value
      $distributor_id = $node->uid;
      $dispatch_value = $node->field_dispatch_n_value[LANGUAGE_NONE][0]['value'];
      $delivered_value = trim($node->field_deliver_n_value[LANGUAGE_NONE][0]['value']);
      $bill_number = $node->title;
      $updated_pdd = $node->field_promised_date[LANGUAGE_NONE][0]['value'];
      $trip_nid = $node->field_trip_id_reference[LANGUAGE_NONE][0]['nid'];
     
         $query = db_select('node', 'n');
         $query->condition('n.type', 'dispatch_data');
         $query->join('field_data_field_dispatch_date', 'disp_date', 'disp_date.entity_id = n.nid');
         $query->condition('n.nid', $trip_nid);
         $query->fields('n', array('title'));
         $query->fields('disp_date', array('field_dispatch_date_value'));
         $disp_date_res = $query->execute()->fetchAllKeyed(0, 1);
         if (!empty($disp_date_res)) {
           $trip_number = key($disp_date_res);
           $disp_date = $disp_date_res[$trip_number];
         }
      
      if (empty($dispatch_value)) {
       
         if (!empty($disp_date)) {
            $dispatch_date = strtotime($disp_date);
            if ($dispatch_date <= $updated_pdd) {
               $n_value = "N+1";
            }
            elseif (($dispatch_date > $updated_pdd) && ( ($dispatch_date - $updated_pdd) <= 86400)) {
               $n_value = "N+2";
            }
            elseif (($dispatch_date > $updated_pdd) && ( ($dispatch_date - $updated_pdd) <= (86400*2))) {
               $n_value = "N+3";
            }
            elseif (($dispatch_date > $updated_pdd) && ( ($dispatch_date - $updated_pdd) > (86400*2))) {
               $n_value = "N+4";
            }
            $node->field_dispatch_n_value[LANGUAGE_NONE][0]['value'] = $n_value;
         }
      } 
      if (empty($delivered_value)) {
        //Code for updating deliver N value       
         $query = db_select('dispatch_planning_api_data', 'ad');
         $query->condition('ad.bill_number', $bill_number);
         $query->condition('ad.runsheet_number', $trip_number);
         $query->condition('ad.distributor_id', $distributor_id);
         $query->fields('ad', array('delivered_date'));
         $del_date = $query->execute()->fetchField();
         if (!empty($del_date)) {
            $del_date = strtotime(date('Y-m-d',$del_date));  
            if ($del_date <= $updated_pdd) {
               $n_value = "N+1";
            }
            elseif (($del_date > $updated_pdd) && ( ($del_date - $updated_pdd) <= 86400)) {
               $n_value = "N+2";
            }
            elseif (($del_date > $updated_pdd) && ( ($del_date - $updated_pdd) <= (86400*2))) {
               $n_value = "N+3";
            }
            elseif (($del_date > $updated_pdd) && ( ($del_date - $updated_pdd) > (86400*2))) {
               $n_value = "N+4";
            }
            $node->field_deliver_n_value[LANGUAGE_NONE][0]['value'] = $n_value;
         }
      }
      
      // code for updating Pdd value on updating bill Date
      $original_bill_date = $node->original->field_sr_bill_date[LANGUAGE_NONE][0]['value'];
      $updated_bill_date = $node->field_sr_bill_date[LANGUAGE_NONE][0]['value'];
      if ($original_bill_date !== $updated_bill_date) {
         module_load_include('inc', 'change_feeds_import', 'form/sales_register_data');
         $pdd = get_promised_delivery_date($updated_bill_date,$distributor_id);
         $node->field_promised_date[LANGUAGE_NONE][0]['value'] = $pdd;
         //bod
         $bod = get_bod_date($updated_bill_date,$distributor_id);
         $party_code_nid = $node->field_party_code_reference['und'][0]['nid'];
         $node->field_bod_date[LANGUAGE_NONE][0]['value'] = $bod;
         $node->field_bod_flag[LANGUAGE_NONE][0]['value'] = get_bod_flag($bod,$party_code_nid);
      }
      // code for updating dispatch N value on updating pdd
      $original_pdd = $node->original->field_promised_date[LANGUAGE_NONE][0]['value'];
      $updated_pdd = $node->field_promised_date[LANGUAGE_NONE][0]['value'];
      $trip_nid = $node->field_trip_id_reference[LANGUAGE_NONE][0]['nid'];
      if ($original_pdd !== $updated_pdd) {
         $query = db_select('node', 'n');
         $query->condition('n.type', 'dispatch_data');
         $query->join('field_data_field_dispatch_date', 'disp_date', 'disp_date.entity_id = n.nid');
         $query->condition('n.nid', $trip_nid);
         $query->fields('disp_date', array('field_dispatch_date_value'));
         $disp_date = $query->execute()->fetchField();
         if (!empty($disp_date)) {
            $dispatch_date = strtotime($disp_date);
            if ($dispatch_date <= $updated_pdd) {
               $n_value = "N+1";
            }
            elseif (($dispatch_date > $updated_pdd) && ( ($dispatch_date - $updated_pdd) <= 86400)) {
               $n_value = "N+2";
            }
            elseif (($dispatch_date > $updated_pdd) && ( ($dispatch_date - $updated_pdd) <= (86400*2))) {
               $n_value = "N+3";
            }
            elseif (($dispatch_date > $updated_pdd) && ( ($dispatch_date - $updated_pdd) > (86400*2))) {
               $n_value = "N+4";
            }
            $node->field_dispatch_n_value[LANGUAGE_NONE][0]['value'] = $n_value;
         }
         //Code for updating deliver N value       
         $query = db_select('dispatch_planning_api_data', 'ad');
         $query->condition('ad.bill_number', $bill_number);
         $query->condition('ad.runsheet_number', $trip_number);
         $query->condition('ad.distributor_id', $distributor_id);
         $query->fields('ad', array('delivered_date'));
         $del_date = $query->execute()->fetchField();
         if (!empty($del_date)) {
           $del_date = strtotime(date('Y-m-d',$del_date));
            if ($del_date <= $updated_pdd) {
               $n_value = "N+1";
            }
            elseif (($del_date > $updated_pdd) && ( ($del_date - $updated_pdd) <= 86400)) {
               $n_value = "N+2";
            }
            elseif (($del_date > $updated_pdd) && ( ($del_date - $updated_pdd) <= (86400*2))) {
               $n_value = "N+3";
            }
            elseif (($del_date > $updated_pdd) && ( ($del_date - $updated_pdd) > (86400*2))) {
               $n_value = "N+4";
            }
            $node->field_deliver_n_value[LANGUAGE_NONE][0]['value'] = $n_value;
         }
      }
   }
   elseif ($node->type == 'outlet_master') {
    module_load_include('inc', 'change_feeds_import', 'form/outlet_area_hook');

    $original_day = strtolower($node->original->field_sales_day[LANGUAGE_NONE][0]['value']);
    $updated_day = strtolower($node->field_sales_day[LANGUAGE_NONE][0]['value']);

    $original_area_hook = strtolower($node->original->field_outlet_area_hook[LANGUAGE_NONE][0]['value']);
    $updated_area_hook = strtolower($node->field_outlet_area_hook[LANGUAGE_NONE][0]['value']);

    $original_channel = strtolower($node->original->field_channel[LANGUAGE_NONE][0]['value']);
    $updated_channel = strtolower($node->field_channel[LANGUAGE_NONE][0]['value']);

    $original_pl_group = strtolower($node->original->field_pl_group[LANGUAGE_NONE][0]['value']);
    $updated_pl_group = strtolower($node->field_pl_group[LANGUAGE_NONE][0]['value']);


    if (!empty($original_day) && !empty($original_channel) && !empty($original_pl_group)) {

      if ($original_day !== $updated_day || $original_area_hook !== $updated_area_hook || $original_channel !== $updated_channel || $original_pl_group !== $updated_pl_group) {
        $channel = $node->field_channel['und'][0]['value'];
        $pl_group = $node->field_pl_group['und'][0]['value'];

        $query = db_select('node', 'n');
        $query->addTag('node_uid');
        $query->join('field_data_field_channel', 'ppmch', 'ppmch.entity_id = n.nid');
        $query->join('field_data_field_pl_group', 'ppmpl', 'ppmpl.entity_id = n.nid');
        $query->join('field_data_field_van_pl_group', 'ppplg', 'n.nid = ppplg.entity_id');
        $query->condition('n.type', 'party_pack_master');
        $query->condition('ppmch.field_channel_value', $channel);
        $query->condition('ppmpl.field_pl_group_value', $pl_group);
        $query->fields('ppplg', array('field_van_pl_group_value'));
        $van_pl_grp = $query->execute()->fetchField();
        $day_van_area_nid = get_nid_from_master_using_sales_day_van_grp_area_hook($updated_day, $van_pl_grp, $updated_area_hook);
         
        // remove nid
        $node->field_area_hook = array();
        // empty status
        $node->field_area_hook_group_hul[LANGUAGE_NONE][0]['value'] = 0;
        // empty beat code
        $node->field_static_delivery_beat_code = array();
        $node->field_sequence = array();
        $node->field_revised_sequence = array();
        $node->field_revised_sequence_status[LANGUAGE_NONE][0]['value'] = 0;
        
        if ($day_van_area_nid) {
          $node->field_area_hook[LANGUAGE_NONE][0]['nid'] = $day_van_area_nid;
        }

      } 
    }
    // Van Planning related Change. Store party pack master Nid
    if (empty($node->field_pp_master_reference[LANGUAGE_NONE][0]['nid'])) {
      global $user;
      if (in_array('leanbox', $user->roles)) {
        $channel = $node->field_channel['und'][0]['value'];
        $pl_group = $node->field_pl_group['und'][0]['value'];

        $query = db_select('node', 'n');
        $query->addTag('node_uid');
        $query->join('field_data_field_channel', 'ppmch', 'ppmch.entity_id = n.nid');
        $query->join('field_data_field_pl_group', 'ppmpl', 'ppmpl.entity_id = n.nid');
        $query->condition('n.type', 'party_pack_master');
        $query->condition('ppmch.field_channel_value', $channel);
        $query->condition('ppmpl.field_pl_group_value', $pl_group);
        //$query->join('field_data_field_pp_sales_day', 'psd', 'psd.entity_id = n.nid');
        //$query->condition('psd.field_pp_sales_day_value', $updated_day);
        $query->fields('n', array('nid'));
        $party_pack_master_nid = $query->execute()->fetchField();

        if (!empty($party_pack_master_nid)) {
          $node->field_pp_master_reference[LANGUAGE_NONE][0]['nid'] = $party_pack_master_nid;
        }
      }
    }
    
    // code for Updating hul_code_reference field in outlet master type
      $hul_code_data = $node->field_hul_code[LANGUAGE_NONE][0]['value'];
      $hul_ref_field = $node->field_hul_code_reference[LANGUAGE_NONE][0]['nid'];
      if (($node->original->field_hul_code[LANGUAGE_NONE][0]['value'] != $hul_code_data)|| empty($hul_ref_field)) {
         if (!empty($hul_code_data)) {
            $query = db_select('node', 'n');
            $query->condition('n.type', 'hul_code_master');
            $query->condition('n.title', $hul_code_data);
            $query->fields('n', array('nid'));
            $hul_nid = $query->execute()->fetchField();
            if (!empty($hul_nid)) {
               $node->field_hul_code_reference[LANGUAGE_NONE][0]['nid'] = $hul_nid;
            }else{
             unset($node->field_hul_code_reference[LANGUAGE_NONE]);
            }
         }else{
             unset($node->field_hul_code_reference[LANGUAGE_NONE]);
         }
      }
   }
   else if ($node->type == 'dispatch_data') {
      
      if (empty($node->field_dispatch_pre_start_time[LANGUAGE_NONE][0]['value']) && !empty($node->field_dispatch_start_time[LANGUAGE_NONE][0]['value'])) {
         // this for non leanbox role user.
         // they do not have in progress status.
         // their tasks are directly completed 
         $node->field_dispatch_pre_start_time[LANGUAGE_NONE][0]['value'] = $node->field_dispatch_start_time[LANGUAGE_NONE][0]['value'];
      }
      
      if (!empty($node->field_dispatch_date[LANGUAGE_NONE][0]['value']) && !empty($node->field_dispatch_start_time[LANGUAGE_NONE][0]['value'])) {
         $node->field_dispatch_status[LANGUAGE_NONE][0]['value'] = 1; // 1 is completed
      }
      // this for leanbox role user
      if (!empty($node->field_dispatch_date[LANGUAGE_NONE][0]['value']) && !empty($node->field_dispatch_pre_start_time[LANGUAGE_NONE][0]['value']) && empty($node->field_dispatch_start_time[LANGUAGE_NONE][0]['value'])) {
         $node->field_dispatch_status[LANGUAGE_NONE][0]['value'] = 2; // 2 is in process
      }
      $creation_date = $node->field_trip_creation_date[LANGUAGE_NONE][0]['value'];
      $execution_date = $node->field_trip_executon_date[LANGUAGE_NONE][0]['value'];

      if (preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/", $creation_date)) {
         $node->field_trip_creation_date[LANGUAGE_NONE][0]['value'] = strtotime($creation_date);
      }
      if (preg_match("/^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$/", $execution_date)) {
         $node->field_trip_executon_date[LANGUAGE_NONE][0]['value'] = strtotime($execution_date);
      }

    if ($node->original->field_dispatch_date[LANGUAGE_NONE][0]['value'] != $node->field_dispatch_date[LANGUAGE_NONE][0]['value']) {
         // commented below line because we have IN Process also in dispatch_data
         //$node->field_dispatch_status[LANGUAGE_NONE][0]['value'] = 1;
         $nid = $node->nid;
         $dispatch_date = strtotime($node->field_dispatch_date[LANGUAGE_NONE][0]['value']);
         
         $res = _dispatch_planning_get_all_sales_nid($nid);
         if (!empty($res)) {
            foreach ($res as $key => $val) {
               $promised_date = $val['field_promised_date_value'];
               $nid = $val['nid'];
               if ($dispatch_date <= $promised_date) {
                  $n_value = "N+1";
               }
               elseif (($dispatch_date > $promised_date) && ( ($dispatch_date - $promised_date) <= 86400)) {
                  $n_value = "N+2";
               }
               elseif (($dispatch_date > $promised_date) && ( ($dispatch_date - $promised_date) <= (86400*2))) {
                  $n_value = "N+3";
               }
               elseif (($dispatch_date > $promised_date) && ( ($dispatch_date - $promised_date) > (86400*2))) {
                  $n_value = "N+4";
               }

               $sales_node = node_load($nid);
               $sales_node->field_dispatch_n_value[LANGUAGE_NONE][0]['value'] = $n_value;
               node_save($sales_node);
            }
         }
      }
      /*
      //for testing
      if (empty($node->field_net_sales_bill_value[LANGUAGE_NONE][0]['value'])){
        $nid = $node->nid;
        $res = _dispatch_planning_get_all_sales_nid($nid);
        if (!empty($res)) {
            foreach ($res as $key => $val) {
               $nid = $val['nid'];
               $sales_node = node_load($nid);
               $net_sales_val += $sales_node->field_bill_net_sales[LANGUAGE_NONE][0]['value'];
            }
            $node->field_net_sales_bill_value[LANGUAGE_NONE][0]['value'] = $net_sales_val;
         }
      }//testing end
      */
   }

//  else if ($node->type == 'party_pack_master') {
//    module_load_include('inc', 'change_feeds_import', 'form/outlet_area_hook');
//    $original_van = ($node->original->field_van_pl_group[LANGUAGE_NONE][0]['value']);
//    $updated_van = ($node->field_van_pl_group[LANGUAGE_NONE][0]['value']);
//
//    if (!empty($original_van)) {
//      if ($original_van !== $updated_van) {
//        $channel = $node->field_channel[LANGUAGE_NONE][0]['value'];
//        $pl_group = $node->field_pl_group[LANGUAGE_NONE][0]['value'];
//
//        $query = db_select('node', 'n');
//        $query->addTag('node_uid');
//        $query->join('field_data_field_channel', 'ppmch', 'ppmch.entity_id = n.nid');
//        $query->join('field_data_field_pl_group', 'ppmpl', 'ppmpl.entity_id = n.nid');
//        $query->condition('n.type', 'outlet_master');
//        $query->condition('ppmch.field_channel_value', $channel);
//        $query->condition('ppmpl.field_pl_group_value', $pl_group);
//        $query->fields('n', array('nid'));
//        $data = $query->execute()->fetchAllKeyed();
//
//        foreach ($data as $nid) {
//          $node1 = node_load($nid);
//          $sales_day = $node1->field_sales_day[LANGUAGE_NONE][0]['value'];
//          $area_hook = $node1->field_outlet_area_hook[LANGUAGE_NONE][0]['value'];
//
//          $day_van_area_nid = get_nid_from_master_using_sales_day_van_grp_area_hook($sales_day, $updated_van, $area_hook);
//
//          // remove nid
//          $node1->field_area_hook = array();
//          // empty status
//          $node1->field_area_hook_group_hul[LANGUAGE_NONE][0]['value'] = 0;
//          // empty beat code
//          $node1->field_static_delivery_beat_code = array();
//          $node1->field_sequence = array();
//          $node1->field_revised_sequence = array();
//          $node1->field_revised_sequence_status[LANGUAGE_NONE][0]['value'] = 0;
//
//          if ($day_van_area_nid) {
//            $node1->field_area_hook[LANGUAGE_NONE][0]['nid'] = $day_van_area_nid;
//          }
//          node_save($node1);
//        }
//      }
//    }
//  }
}

function graphhopper_postvrp_api($params) {
  $key = variable_get('graphhopper_api_key', '6c0a903a-4698-42cd-aac0-52d6f5c7ee0a');

  Swagger\Client\Configuration::getDefaultConfiguration()->setApiKey('key', $key);

// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed
// Swagger\Client\Configuration::getDefaultConfiguration()->setApiKeyPrefix('key', 'Bearer');

  $api_instance = new Swagger\Client\graphhopper\VrpApi();

  $body = new \Swagger\Client\Model\Request($params); // \Swagger\Client\Model\Request | Request object that contains the problem to be solved

  try {
    $result = $api_instance->postVrp($key, $body);
  }
  catch (Exception $e) {
    watchdog('graphhopper_error', 'Exception when calling VrpApi->postVrp: ' . $e->getMessage());
  }
  return $result;
}

function graphhopper_solution_api($job_id) {
  $key = variable_get('graphhopper_api_key', '6c0a903a-4698-42cd-aac0-52d6f5c7ee0a');

  Swagger\Client\Configuration::getDefaultConfiguration()->setApiKey('key', $key);

// Uncomment below to setup prefix (e.g. Bearer) for API key, if needed
// Swagger\Client\Configuration::getDefaultConfiguration()->setApiKeyPrefix('key', 'Bearer');

  $api_instance = new Swagger\Client\graphhopper\SolutionApi();

  try {
    $result = $api_instance->getSolution($key, $job_id);
  }
  catch (Exception $e) {
    watchdog('graphhopper_error', 'Exception when calling SolutionApi->getSolution: ' . $e->getMessage());
  }

  return $result;
}

/**
 * Implements hook_node_access().
 */
function reverse_geocode_node_access($node, $op, $account) {
  $type = is_string($node) ? $node : $node->type;

  $user_id = $account->uid;
  $distributor_id = change_feeds_import_get_distributor_id($user_id);

  if (in_array($type, node_permissions_get_configured_types())) {
    if ($op == 'create' && user_access('create ' . $type . ' content', $account)) {
      return NODE_ACCESS_ALLOW;
    }

    if ($op == 'update') {
      if (user_access('edit any ' . $type . ' content', $account) || (user_access('edit own ' . $type . ' content', $account) && ($distributor_id == $node->uid))) {
        return NODE_ACCESS_ALLOW;
      }
    }

    if ($op == 'delete') {
      if (user_access('delete any ' . $type . ' content', $account) || (user_access('delete own ' . $type . ' content', $account) && ($distributor_id == $node->uid))) {
        return NODE_ACCESS_ALLOW;
      }
    }
  }

  return NODE_ACCESS_IGNORE;
}

function reverse_geocode_get_data_trip_wise($trip_id) {
  //global $user;
  //$user_id = $user->uid;
  $distributor_id = get_distributorid_of_trip($trip_id);

  $query = db_select('node', 'n');
  $query->condition('n.type', 'sales_register_data');
  $query->condition('n.uid',$distributor_id);
  $query->join('field_data_field_drs_sequence', 'drs_se', 'drs_se.entity_id = n.nid');
  $query->leftjoin('field_data_field_bill_sequence', 'drs_bse', 'drs_bse.entity_id = n.nid');

  $query->join('field_data_field_trip_id_reference', 'tr', 'tr.entity_id = n.nid');
  $query->Join('node', 'nt', 'nt.nid = tr.field_trip_id_reference_nid');
  $query->condition('nt.title', $trip_id);
  $query->condition('nt.uid', $distributor_id, '=');

  $query->join('field_data_field_sales_party_code', 'spc', 'spc.entity_id = n.nid');
  $query->condition('spc.bundle', 'sales_register_data');
  $query->join('node', 'nd', 'nd.title = spc.field_sales_party_code_value');
  $query->condition('nd.type', 'outlet_master', '=');
  $query->condition('nd.uid', $distributor_id, '=');

  $query->join('field_data_field_party_code', 'pc', 'pc.entity_id = nd.nid');
  $query->join('field_data_field_party_name', 'pn', 'pn.entity_id = nd.nid');

  $query->join('field_data_field_hul_code', 'hc', 'hc.entity_id = nd.nid');
  $query->join('node', 'hul', 'hc.field_hul_code_value = hul.title');
  $query->condition('hul.type', 'hul_code_master');
  $query->condition('hul.uid', $distributor_id, '=');

  $query->leftJoin('field_data_field_hul_updated_lat', 'hul_lat_u', 'hul_lat_u.entity_id = hul.nid');
  $query->leftJoin('field_data_field_hul_updated_long', 'hul_long_u', 'hul_long_u.entity_id = hul.nid');

  $query->leftJoin('field_data_field_hul_lat', 'hul_lat', 'hul_lat.entity_id = hul.nid');
  $query->leftJoin('field_data_field_hul_long', 'hul_long', 'hul_long.entity_id = hul.nid');

  $query->leftjoin('field_data_field_original_address', 'od', 'od.entity_id = hul.nid');
  $query->leftjoin('field_data_field_updated_address', 'new', 'new.entity_id = hul.nid');

  $query->orderBy('drs_se.field_drs_sequence_value', 'asc');

  $query->fields('drs_se', array('field_drs_sequence_value'));
  $query->fields('drs_bse', array('field_bill_sequence_value'));
  $query->fields('pc', array('field_party_code_value'));
  $query->fields('pn', array('field_party_name_value'));
  $query->fields('hul_lat_u', array('field_hul_updated_lat_value'));
  $query->fields('hul_long_u', array('field_hul_updated_long_value'));
  $query->fields('hul_lat', array('field_hul_lat_value'));
  $query->fields('hul_long', array('field_hul_long_value'));
  $query->fields('od');
  $query->fields('new');
  $query->fields('hul', array('nid'));
  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  return $res;
}

/**
 * Calculate delivery n val: URL Hit by cron
 */
function cal_delivery_n_val_by_cron() {
  $distributor_id = _DISTRIBUTOR_ID;
  $distributor_ids = get_distributor_ids();
  /* original
  //$status = array('deliver', 'partial_deliver');
  $query = db_select('dispatch_planning_api_data', 'ad')
    ->fields('ad', array('bill_number'))
    ->condition('ad.distributor_id', $distributor_id)
    ->condition('ad.delivered_date', '0')
    ->isNotNull('ad.res_status')
    ->condition('ad.res_status', '', '!=')
    ->condition('updated_time', '0', '!=');
  $res = $query->execute()->fetchAllKeyed(0, 0);
  watchdog('cal_delivery_n_val_by_cron', '<pre>' . print_r($res, TRUE) . '</pre>');
  
  if (!empty($res)) {
    db_update('dispatch_planning_api_data')
      ->expression('delivered_date', "CASE WHEN res_updated_time !=0 THEN res_updated_time  ELSE updated_time END")
      ->condition('distributor_id', $distributor_id)
      ->condition('delivered_date', '0')
       ->isNotNull('res_status')
       ->condition('res_status', '', '!=')
        ->condition('updated_time', '0', '!=')
      ->execute();

    foreach ($res as $bill_number) {
      $nid = check_node_title_exists_for_update($bill_number, $distributor_id);
      $node = node_load($nid);
      node_save($node);
    }
  }
   * 
   */
  $query = db_select('dispatch_planning_api_data', 'ad');
  $query->fields('ad', array('id', 'bill_number'));
  $query->addExpression("CASE WHEN res_updated_time !=0 THEN res_updated_time  ELSE updated_time END", 'derived_delivered_date');
  $query->condition('ad.distributor_id', $distributor_id);
  $query->condition('ad.delivered_date', '0');
  $query->isNotNull('ad.res_status');
  $query->condition('ad.res_status', '', '!=');
  $query->condition('updated_time', '0', '!=');
  $res = $query->execute()->fetchAll();

  watchdog('cal_delivery_n_val_by_cron', '<pre>' . print_r($res, TRUE) . '</pre>');


  foreach ($res as $val) {
    $del_date = $val->derived_delivered_date;

    $nid = check_node_title_exists_for_update($val->bill_number, $distributor_id);
    $node = node_load($nid);
    //logic
    $updated_pdd = $node->field_promised_date[LANGUAGE_NONE][0]['value'];

    if (!empty($del_date)) {
      $del_date = strtotime(date('Y-m-d', $del_date));
      if ($del_date <= $updated_pdd) {
        $n_value = "N+1";
      }
      elseif (($del_date > $updated_pdd) && ( ($del_date - $updated_pdd) <= 86400)) {
        $n_value = "N+2";
      }
      elseif (($del_date > $updated_pdd) && ( ($del_date - $updated_pdd) <= (86400*2))) {
        $n_value = "N+3";
      }
      elseif (($del_date > $updated_pdd) && ( ($del_date - $updated_pdd) > (86400*2))) {
        $n_value = "N+4";
      }
      $node->field_deliver_n_value[LANGUAGE_NONE][0]['value'] = $n_value;

      //logic end
      node_save($node);

      // After node save update fareye table
      db_update('dispatch_planning_api_data')
        ->expression('delivered_date', "CASE WHEN res_updated_time !=0 THEN res_updated_time  ELSE updated_time END")
        ->condition('id', $val->id)
        ->execute();
    }
  }

}
