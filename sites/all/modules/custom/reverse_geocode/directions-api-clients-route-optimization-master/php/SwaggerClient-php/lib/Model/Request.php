<?php
/**
 * Request
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Route Optimization API
 *
 * Our Route Optimization API solves the so called vehicle routing problem fast. It calculates an optimal tour for a set of vehicles, services and constraints
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Request Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Request implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Request';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'vehicles' => '\Swagger\Client\Model\Vehicle[]',
        'vehicle_types' => '\Swagger\Client\Model\VehicleType[]',
        'services' => '\Swagger\Client\Model\Service[]',
        'shipments' => '\Swagger\Client\Model\Shipment[]',
        'relations' => '\Swagger\Client\Model\Relation[]',
        'algorithm' => '\Swagger\Client\Model\Algorithm',
        'objectives' => '\Swagger\Client\Model\Objective[]',
        'cost_matrices' => '\Swagger\Client\Model\CostMatrix[]'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'vehicles' => 'vehicles',
        'vehicle_types' => 'vehicle_types',
        'services' => 'services',
        'shipments' => 'shipments',
        'relations' => 'relations',
        'algorithm' => 'algorithm',
        'objectives' => 'objectives',
        'cost_matrices' => 'cost_matrices'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'vehicles' => 'setVehicles',
        'vehicle_types' => 'setVehicleTypes',
        'services' => 'setServices',
        'shipments' => 'setShipments',
        'relations' => 'setRelations',
        'algorithm' => 'setAlgorithm',
        'objectives' => 'setObjectives',
        'cost_matrices' => 'setCostMatrices'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'vehicles' => 'getVehicles',
        'vehicle_types' => 'getVehicleTypes',
        'services' => 'getServices',
        'shipments' => 'getShipments',
        'relations' => 'getRelations',
        'algorithm' => 'getAlgorithm',
        'objectives' => 'getObjectives',
        'cost_matrices' => 'getCostMatrices'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['vehicles'] = isset($data['vehicles']) ? $data['vehicles'] : null;
        $this->container['vehicle_types'] = isset($data['vehicle_types']) ? $data['vehicle_types'] : null;
        $this->container['services'] = isset($data['services']) ? $data['services'] : null;
        $this->container['shipments'] = isset($data['shipments']) ? $data['shipments'] : null;
        $this->container['relations'] = isset($data['relations']) ? $data['relations'] : null;
        $this->container['algorithm'] = isset($data['algorithm']) ? $data['algorithm'] : null;
        $this->container['objectives'] = isset($data['objectives']) ? $data['objectives'] : null;
        $this->container['cost_matrices'] = isset($data['cost_matrices']) ? $data['cost_matrices'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets vehicles
     * @return \Swagger\Client\Model\Vehicle[]
     */
    public function getVehicles()
    {
        return $this->container['vehicles'];
    }

    /**
     * Sets vehicles
     * @param \Swagger\Client\Model\Vehicle[] $vehicles An array of vehicles that can be employed
     * @return $this
     */
    public function setVehicles($vehicles)
    {
        $this->container['vehicles'] = $vehicles;

        return $this;
    }

    /**
     * Gets vehicle_types
     * @return \Swagger\Client\Model\VehicleType[]
     */
    public function getVehicleTypes()
    {
        return $this->container['vehicle_types'];
    }

    /**
     * Sets vehicle_types
     * @param \Swagger\Client\Model\VehicleType[] $vehicle_types An array of vehicle types
     * @return $this
     */
    public function setVehicleTypes($vehicle_types)
    {
        $this->container['vehicle_types'] = $vehicle_types;

        return $this;
    }

    /**
     * Gets services
     * @return \Swagger\Client\Model\Service[]
     */
    public function getServices()
    {
        return $this->container['services'];
    }

    /**
     * Sets services
     * @param \Swagger\Client\Model\Service[] $services An array of services
     * @return $this
     */
    public function setServices($services)
    {
        $this->container['services'] = $services;

        return $this;
    }

    /**
     * Gets shipments
     * @return \Swagger\Client\Model\Shipment[]
     */
    public function getShipments()
    {
        return $this->container['shipments'];
    }

    /**
     * Sets shipments
     * @param \Swagger\Client\Model\Shipment[] $shipments An array of shipments
     * @return $this
     */
    public function setShipments($shipments)
    {
        $this->container['shipments'] = $shipments;

        return $this;
    }

    /**
     * Gets relations
     * @return \Swagger\Client\Model\Relation[]
     */
    public function getRelations()
    {
        return $this->container['relations'];
    }

    /**
     * Sets relations
     * @param \Swagger\Client\Model\Relation[] $relations An array of relations
     * @return $this
     */
    public function setRelations($relations)
    {
        $this->container['relations'] = $relations;

        return $this;
    }

    /**
     * Gets algorithm
     * @return \Swagger\Client\Model\Algorithm
     */
    public function getAlgorithm()
    {
        return $this->container['algorithm'];
    }

    /**
     * Sets algorithm
     * @param \Swagger\Client\Model\Algorithm $algorithm
     * @return $this
     */
    public function setAlgorithm($algorithm)
    {
        $this->container['algorithm'] = $algorithm;

        return $this;
    }

    /**
     * Gets objectives
     * @return \Swagger\Client\Model\Objective[]
     */
    public function getObjectives()
    {
        return $this->container['objectives'];
    }

    /**
     * Sets objectives
     * @param \Swagger\Client\Model\Objective[] $objectives An array of objectives
     * @return $this
     */
    public function setObjectives($objectives)
    {
        $this->container['objectives'] = $objectives;

        return $this;
    }

    /**
     * Gets cost_matrices
     * @return \Swagger\Client\Model\CostMatrix[]
     */
    public function getCostMatrices()
    {
        return $this->container['cost_matrices'];
    }

    /**
     * Sets cost_matrices
     * @param \Swagger\Client\Model\CostMatrix[] $cost_matrices An array of cost matrices
     * @return $this
     */
    public function setCostMatrices($cost_matrices)
    {
        $this->container['cost_matrices'] = $cost_matrices;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}

