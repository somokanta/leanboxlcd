<?php
/**
 * VehicleType
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Route Optimization API
 *
 * Our Route Optimization API solves the so called vehicle routing problem fast. It calculates an optimal tour for a set of vehicles, services and constraints
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * VehicleType Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class VehicleType implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'VehicleType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type_id' => 'string',
        'profile' => 'string',
        'capacity' => 'int[]',
        'speed_factor' => 'double',
        'service_time_factor' => 'double'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'type_id' => 'type_id',
        'profile' => 'profile',
        'capacity' => 'capacity',
        'speed_factor' => 'speed_factor',
        'service_time_factor' => 'service_time_factor'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'type_id' => 'setTypeId',
        'profile' => 'setProfile',
        'capacity' => 'setCapacity',
        'speed_factor' => 'setSpeedFactor',
        'service_time_factor' => 'setServiceTimeFactor'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'type_id' => 'getTypeId',
        'profile' => 'getProfile',
        'capacity' => 'getCapacity',
        'speed_factor' => 'getSpeedFactor',
        'service_time_factor' => 'getServiceTimeFactor'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const PROFILE_CAR = 'car';
    const PROFILE_BIKE = 'bike';
    const PROFILE_FOOT = 'foot';
    const PROFILE_MTB = 'mtb';
    const PROFILE_MOTORCYCLE = 'motorcycle';
    const PROFILE_RACINGBIKE = 'racingbike';
    const PROFILE_TRUCK = 'truck';
    const PROFILE_SMALL_TRUCK = 'small_truck';
    const PROFILE_BUS = 'bus';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getProfileAllowableValues()
    {
        return [
            self::PROFILE_CAR,
            self::PROFILE_BIKE,
            self::PROFILE_FOOT,
            self::PROFILE_MTB,
            self::PROFILE_MOTORCYCLE,
            self::PROFILE_RACINGBIKE,
            self::PROFILE_TRUCK,
            self::PROFILE_SMALL_TRUCK,
            self::PROFILE_BUS,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type_id'] = isset($data['type_id']) ? $data['type_id'] : null;
        $this->container['profile'] = isset($data['profile']) ? $data['profile'] : null;
        $this->container['capacity'] = isset($data['capacity']) ? $data['capacity'] : null;
        $this->container['speed_factor'] = isset($data['speed_factor']) ? $data['speed_factor'] : null;
        $this->container['service_time_factor'] = isset($data['service_time_factor']) ? $data['service_time_factor'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        $allowed_values = ["car", "bike", "foot", "mtb", "motorcycle", "racingbike", "truck", "small_truck", "bus"];
        if (!in_array($this->container['profile'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'profile', must be one of #{allowed_values}.";
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        $allowed_values = ["car", "bike", "foot", "mtb", "motorcycle", "racingbike", "truck", "small_truck", "bus"];
        if (!in_array($this->container['profile'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets type_id
     * @return string
     */
    public function getTypeId()
    {
        return $this->container['type_id'];
    }

    /**
     * Sets type_id
     * @param string $type_id Unique identifier for the vehicle type
     * @return $this
     */
    public function setTypeId($type_id)
    {
        $this->container['type_id'] = $type_id;

        return $this;
    }

    /**
     * Gets profile
     * @return string
     */
    public function getProfile()
    {
        return $this->container['profile'];
    }

    /**
     * Sets profile
     * @param string $profile Profile of vehicle type
     * @return $this
     */
    public function setProfile($profile)
    {
        $allowed_values = array('car', 'bike', 'foot', 'mtb', 'motorcycle', 'racingbike', 'truck', 'small_truck', 'bus');
        if (!is_null($profile) && (!in_array($profile, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'profile', must be one of 'car', 'bike', 'foot', 'mtb', 'motorcycle', 'racingbike', 'truck', 'small_truck', 'bus'");
        }
        $this->container['profile'] = $profile;

        return $this;
    }

    /**
     * Gets capacity
     * @return int[]
     */
    public function getCapacity()
    {
        return $this->container['capacity'];
    }

    /**
     * Sets capacity
     * @param int[] $capacity array of capacity dimensions
     * @return $this
     */
    public function setCapacity($capacity)
    {
        $this->container['capacity'] = $capacity;

        return $this;
    }

    /**
     * Gets speed_factor
     * @return double
     */
    public function getSpeedFactor()
    {
        return $this->container['speed_factor'];
    }

    /**
     * Sets speed_factor
     * @param double $speed_factor speed_factor of vehicle type
     * @return $this
     */
    public function setSpeedFactor($speed_factor)
    {
        $this->container['speed_factor'] = $speed_factor;

        return $this;
    }

    /**
     * Gets service_time_factor
     * @return double
     */
    public function getServiceTimeFactor()
    {
        return $this->container['service_time_factor'];
    }

    /**
     * Sets service_time_factor
     * @param double $service_time_factor service time factor of vehicle type
     * @return $this
     */
    public function setServiceTimeFactor($service_time_factor)
    {
        $this->container['service_time_factor'] = $service_time_factor;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}

