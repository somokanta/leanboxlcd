<?php
/**
 * Solution
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Route Optimization API
 *
 * Our Route Optimization API solves the so called vehicle routing problem fast. It calculates an optimal tour for a set of vehicles, services and constraints
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Solution Class Doc Comment
 *
 * @category    Class */
/**
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Solution implements ArrayAccess
{
    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Solution';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'costs' => 'int',
        'distance' => 'int',
        'time' => 'int',
        'transport_time' => 'int',
        'max_operation_time' => 'int',
        'waiting_time' => 'int',
        'no_vehicles' => 'int',
        'no_unassigned' => 'int',
        'routes' => '\Swagger\Client\Model\Route[]',
        'unassigned' => '\Swagger\Client\Model\SolutionUnassigned'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'costs' => 'costs',
        'distance' => 'distance',
        'time' => 'time',
        'transport_time' => 'transport_time',
        'max_operation_time' => 'max_operation_time',
        'waiting_time' => 'waiting_time',
        'no_vehicles' => 'no_vehicles',
        'no_unassigned' => 'no_unassigned',
        'routes' => 'routes',
        'unassigned' => 'unassigned'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'costs' => 'setCosts',
        'distance' => 'setDistance',
        'time' => 'setTime',
        'transport_time' => 'setTransportTime',
        'max_operation_time' => 'setMaxOperationTime',
        'waiting_time' => 'setWaitingTime',
        'no_vehicles' => 'setNoVehicles',
        'no_unassigned' => 'setNoUnassigned',
        'routes' => 'setRoutes',
        'unassigned' => 'setUnassigned'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'costs' => 'getCosts',
        'distance' => 'getDistance',
        'time' => 'getTime',
        'transport_time' => 'getTransportTime',
        'max_operation_time' => 'getMaxOperationTime',
        'waiting_time' => 'getWaitingTime',
        'no_vehicles' => 'getNoVehicles',
        'no_unassigned' => 'getNoUnassigned',
        'routes' => 'getRoutes',
        'unassigned' => 'getUnassigned'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['costs'] = isset($data['costs']) ? $data['costs'] : null;
        $this->container['distance'] = isset($data['distance']) ? $data['distance'] : null;
        $this->container['time'] = isset($data['time']) ? $data['time'] : null;
        $this->container['transport_time'] = isset($data['transport_time']) ? $data['transport_time'] : null;
        $this->container['max_operation_time'] = isset($data['max_operation_time']) ? $data['max_operation_time'] : null;
        $this->container['waiting_time'] = isset($data['waiting_time']) ? $data['waiting_time'] : null;
        $this->container['no_vehicles'] = isset($data['no_vehicles']) ? $data['no_vehicles'] : null;
        $this->container['no_unassigned'] = isset($data['no_unassigned']) ? $data['no_unassigned'] : null;
        $this->container['routes'] = isset($data['routes']) ? $data['routes'] : null;
        $this->container['unassigned'] = isset($data['unassigned']) ? $data['unassigned'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets costs
     * @return int
     */
    public function getCosts()
    {
        return $this->container['costs'];
    }

    /**
     * Sets costs
     * @param int $costs overall costs of solution
     * @return $this
     */
    public function setCosts($costs)
    {
        $this->container['costs'] = $costs;

        return $this;
    }

    /**
     * Gets distance
     * @return int
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     * @param int $distance overall travel distance in meters
     * @return $this
     */
    public function setDistance($distance)
    {
        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets time
     * @return int
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     * @param int $time overall transport time in ms
     * @return $this
     */
    public function setTime($time)
    {
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets transport_time
     * @return int
     */
    public function getTransportTime()
    {
        return $this->container['transport_time'];
    }

    /**
     * Sets transport_time
     * @param int $transport_time overall transport time in ms
     * @return $this
     */
    public function setTransportTime($transport_time)
    {
        $this->container['transport_time'] = $transport_time;

        return $this;
    }

    /**
     * Gets max_operation_time
     * @return int
     */
    public function getMaxOperationTime()
    {
        return $this->container['max_operation_time'];
    }

    /**
     * Sets max_operation_time
     * @param int $max_operation_time operation time of the longest route in ms
     * @return $this
     */
    public function setMaxOperationTime($max_operation_time)
    {
        $this->container['max_operation_time'] = $max_operation_time;

        return $this;
    }

    /**
     * Gets waiting_time
     * @return int
     */
    public function getWaitingTime()
    {
        return $this->container['waiting_time'];
    }

    /**
     * Sets waiting_time
     * @param int $waiting_time total waiting time in ms
     * @return $this
     */
    public function setWaitingTime($waiting_time)
    {
        $this->container['waiting_time'] = $waiting_time;

        return $this;
    }

    /**
     * Gets no_vehicles
     * @return int
     */
    public function getNoVehicles()
    {
        return $this->container['no_vehicles'];
    }

    /**
     * Sets no_vehicles
     * @param int $no_vehicles number of employed vehicles
     * @return $this
     */
    public function setNoVehicles($no_vehicles)
    {
        $this->container['no_vehicles'] = $no_vehicles;

        return $this;
    }

    /**
     * Gets no_unassigned
     * @return int
     */
    public function getNoUnassigned()
    {
        return $this->container['no_unassigned'];
    }

    /**
     * Sets no_unassigned
     * @param int $no_unassigned number of jobs that could not be assigned to final solution
     * @return $this
     */
    public function setNoUnassigned($no_unassigned)
    {
        $this->container['no_unassigned'] = $no_unassigned;

        return $this;
    }

    /**
     * Gets routes
     * @return \Swagger\Client\Model\Route[]
     */
    public function getRoutes()
    {
        return $this->container['routes'];
    }

    /**
     * Sets routes
     * @param \Swagger\Client\Model\Route[] $routes An array of routes
     * @return $this
     */
    public function setRoutes($routes)
    {
        $this->container['routes'] = $routes;

        return $this;
    }

    /**
     * Gets unassigned
     * @return \Swagger\Client\Model\SolutionUnassigned
     */
    public function getUnassigned()
    {
        return $this->container['unassigned'];
    }

    /**
     * Sets unassigned
     * @param \Swagger\Client\Model\SolutionUnassigned $unassigned
     * @return $this
     */
    public function setUnassigned($unassigned)
    {
        $this->container['unassigned'] = $unassigned;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}

