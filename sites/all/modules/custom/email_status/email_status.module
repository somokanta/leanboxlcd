<?php

define('_DISTRIBUTOR_ID', 23466);

/**
 * Implments hook_menu
 *
 */
function email_status_menu() {
  $items['email/daily-data'] = array(
    'title' => 'Send Email Of Daily Data',
    //'page callback' => 'send_email_daily_data',
    'page callback' => 'send_email_pl_group_emailer',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['email-productivity-data'] = array(
    'title' => 'Send Email Of Productivity Data',
    'page callback' => 'send_party_packingand_picking_productivity_emailer',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['email-loading-productivity'] = array(
    'title' => 'Send Email Of Loading Productivity Data',
    'page callback' => 'send_loading_productivity_emailer',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['email/pending-ofd-salesbeatwise'] = array(
    'title' => 'Send Email Of Pending OFD Sales Beat Wise',
    'page callback' => 'send_email_pending_ofd_salesbeatwise_data',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['email/daily-data-pl'] = array(
    'title' => 'Send Email Of Daily Data',
    'page callback' => 'send_email_daily_cron_pl_data',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['email/ofd-report'] = array(
    'title' => 'Send Email Of OFD Report',
    'page callback' => 'send_email_ofd_report',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  
  $items['email/monthly-trip-summary'] = array(
    'title' => 'Send Email Of Monthly Trip Summary',
    'page callback' => 'send_email_monthly_trip_summary',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/email_status_automailer.inc',
  );
  
  $items['email/exception-mis'] = array(
    'title' => 'Send Email Of Exception MIS',
    'page callback' => 'send_email_exception_mis',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/email_status_automailer.inc',
  );

  // setting form for Email sender and reciever 
  $items['admin/config/email-conf'] = array(
    'title' => 'Setting Form For Send Email',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('email_status_email_form'),
    'access callback' => 'check_if_fr_role_user_admin',
  );
  return $items;
}

// setting form for email of daily status
function email_status_email_form($form, $form_state) {

  // PL Group Wise Bill Pendency
  $form['pl_grp_wise_to_email'] = array(
    '#type' => 'textarea',
    '#title' => t('Receiver'),
    '#description' => t('PL Group Wise Bill Pendency'),
    '#default_value' => variable_get('pl_grp_wise_to_email', ''),
    '#required' => TRUE,
    '#size' => 60,
    '#maxlength' => 2048,
  );

  // Productivity Progress Status
  $form['productivity_status_to_email'] = array(
    '#type' => 'textarea',
    '#title' => t('Receiver'),
    '#description' => t('Productivity Progress Status'),
    '#default_value' => variable_get('productivity_status_to_email', ''),
    '#required' => TRUE,
    '#size' => 60,
    '#maxlength' => 2048,
  );
  
  // Loading Productivity Progress Status
  $form['loading_productivity_status_to_email'] = array(
    '#type' => 'textarea',
    '#title' => t('Receiver'),
    '#description' => t('Loading Productivity Progress Status'),
    '#default_value' => variable_get('loading_productivity_status_to_email', ''),
    '#required' => TRUE,
    '#size' => 60,
    '#maxlength' => 2048,
  );

  // Pending OFD Sales Beat Wise
  $form['ofd_salesbeatwise_to_email'] = array(
    '#type' => 'textarea',
    '#title' => t('Receiver'),
    '#description' => t('Pending OFD Sales Beat Wise'),
    '#default_value' => variable_get('ofd_salesbeatwise_to_email', ''),
    '#required' => TRUE,
    '#size' => 60,
    '#maxlength' => 2048,
  );

  // PL GROUP Wise OTIF
  $form['pl_grp_otif_to_email'] = array(
    '#type' => 'textarea',
    '#title' => t('Receiver'),
    '#description' => t('PL GROUP Wise OTIF'),
    '#default_value' => variable_get('pl_grp_otif_to_email', ''),
    '#required' => TRUE,
    '#size' => 60,
    '#maxlength' => 2048,
  );

  // OFD Report
  $form['ofd_to_email'] = array(
    '#type' => 'textarea',
    '#title' => t('Receiver'),
    '#description' => t('OFD Report'),
    '#default_value' => variable_get('ofd_to_email', ''),
    '#required' => TRUE,
    '#size' => 60,
    '#maxlength' => 2048,
  );

  // Payment Collection Status
  $form['collection_status_to_email'] = array(
    '#type' => 'textarea',
    '#title' => t('Receiver'),
    '#description' => t('Payment Collection Status'),
    '#default_value' => variable_get('collection_status_to_email', ''),
    '#required' => TRUE,
    '#size' => 60,
    '#maxlength' => 2048,
  );
  
  // Monthly Trip Summary
  $form['monthly_trip_summary_to_email'] = array(
    '#type' => 'textarea',
    '#title' => t('Receiver'),
    '#description' => t('Monthly Trip Summary'),
    '#default_value' => variable_get('monthly_trip_summary_to_email', ''),
    '#required' => TRUE,
    '#size' => 60,
    '#maxlength' => 2048,
  );
  
  // Exception MIS
  $form['exception_mis_to_email'] = array(
    '#type' => 'textarea',
    '#title' => t('Receiver'),
    '#description' => t('Exception MIS'),
    '#default_value' => variable_get('exception_mis_to_email', ''),
    '#required' => TRUE,
    '#size' => 60,
    '#maxlength' => 2048,
  );

  // From Email
  $form['from_email'] = array(
    '#type' => 'textarea',
    '#title' => t('Sender'),
    '#default_value' => variable_get('from_email', ''),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/*
 * Function to send auto mailer of OFD Report.
 */

function send_email_ofd_report() {
  $distributor_id = _DISTRIBUTOR_ID;
  $distributor_name = change_feeds_import_get_distributor_name($distributor_id);
  // Today's Date
  $todays_date = date('d-M-Y');

  $view_name = "ofd_mailer";
  $arg1 = date("mdY");
  $results = views_get_view_result($view_name, 'page', $arg1);
  $encoded_data = json_encode($results);
  $data = json_decode($encoded_data);

  $rows = array();
  $total_bill_count = 0;
  $total_dispatch_bill_value = 0;
  $total_dispatch_loader_team_count = 0;
  $counter = 1;
  $table_style = 'border: 1px solid #000;';
  $header = array('Sr. No.', 'Trip Creation Date', 'Trip Execution Date', 'Trip ID', 'HHT ID', 'Bill Count', 'Dispatch Bill Value', 'Dispatch Supervisor', 'Cashier Name', 'Vehicle No', 'Dispatch Loader Team Count', 'Dispatch Date', 'Dispatch Start Time', 'Dispatch End Time', 'Sequence Method');
  foreach ($data as $result) {
    $trip_creation_date = $result->_field_data->nid->entity->field_trip_creation_date->und[0]->value;
    $row1['data'] = date('d-M-y', $trip_creation_date);
    $row1['style'] = $table_style;
    $trip_execution_date = $result->_field_data->nid->entity->field_trip_executon_date->und[0]->value;
    $row2['data'] = date('d-M-y', $trip_execution_date);
    $row2['style'] = $table_style;
    $row3['data'] = $result->_field_data->nid->entity->field_trip_id->und[0]->value;
    $row3['style'] = $table_style;
    $hht_id = $result->_field_data->nid->entity->field_hht_id->und[0]->nid;
    $query = db_select('node', 'n');
    $query->fields('n', array('title'));
    $query->condition('n.nid', $hht_id, '=');
    $hht_id_title = $query->execute()->fetchfield();
    $row4['data'] = $hht_id_title;
    $row4['style'] = $table_style;
    $row5['data'] = $result->_field_data->nid->entity->field_bill_count->und[0]->value;
    $row5['style'] = $table_style;
    $row6['data'] = $result->_field_data->nid->entity->field_dispatch_bill_value->und[0]->value;
    $row6['style'] = $table_style;
    $row7['data'] = $result->_field_data->nid->entity->field_dispatch_supervisor->und[0]->value;
    $row7['style'] = $table_style;
    $row8['data'] = $result->_field_data->nid->entity->field_cashier_name->und[0]->value;
    $row8['style'] = $table_style;
    $row9['data'] = $result->_field_data->nid->entity->field_vehicle_no->und[0]->value;
    $row9['style'] = $table_style;
    $row10['data'] = $result->_field_data->nid->entity->field_dispatch_loader_team_count->und[0]->value;
    $row10['style'] = $table_style;
    $dispatch_date = strtotime($result->_field_data->nid->entity->field_dispatch_date->und[0]->value);
    $row11['data'] = date('d-M-y', $dispatch_date);
    $row11['style'] = $table_style;
    $row12['data'] = $result->_field_data->nid->entity->field_dispatch_pre_start_time->und[0]->value;
    $row12['style'] = $table_style;
    $row13['data'] = $result->_field_data->nid->entity->field_dispatch_start_time->und[0]->value;
    $row13['style'] = $table_style;
    if ($result->_field_data->nid->entity->field_sequence_method->und[0]->value == 1) {
      $seq_method = 'API';
    }
    elseif ($result->_field_data->nid->entity->field_sequence_method->und[0]->value == 0) {
      $seq_method = 'MANUAL';
    }
    else {
      $seq_method = '';
    }
    $row14['data'] = $seq_method;
    $row14['style'] = $table_style;

    $total_bill_count += $row5['data'];
    $total_dispatch_bill_value += $row6['data'];
    $total_dispatch_loader_team_count += $row10['data'];
    $row0['data'] = $counter++;
    $row0['style'] = $table_style;

    $rows[] = array($row0, $row1, $row2, $row3, $row4, $row5, $row6, $row7, $row8, $row9, $row10, $row11, $row12, $row13, $row14);
  }
  $rows[] = array('SUM', '', '', '', '', $total_bill_count, $total_dispatch_bill_value, '', '', '', $total_dispatch_loader_team_count, '', '', '', '');


  $ofd_html = "<h3>Dispatch Date : " . $todays_date . " (Today)</h3>";
  $ofd_html .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('border' => '1', 'cellpadding' => '5', 'cellspacing' => '0')));

  $view_name2 = "ofd_mailer2";
  $results = views_get_view_result($view_name2, 'page');
  $encoded_data = json_encode($results);
  $data = json_decode($encoded_data);

  $rows = array();
  $total_bill_count = 0;
  $total_dispatch_bill_value = 0;
  $counter = 1;
  $table_style = 'border: 1px solid #000;';
  $header = array('Sr. No.', 'Trip Creation Date', 'Trip Execution Date', 'Trip ID', 'HHT ID', 'Bill Count', 'Dispatch Bill Value', 'Dispatch Supervisor', 'Cashier Name', 'Vehicle No', 'Dispatch Loader Team Count', 'Dispatch Date', 'Dispatch Start Time', 'Sequence Method');
  foreach ($data as $result) {
    $trip_creation_date = $result->_field_data->nid->entity->field_trip_creation_date->und[0]->value;
    $row1['data'] = date('d-M-y', $trip_creation_date);
    $row1['style'] = $table_style;
    $trip_execution_date = $result->_field_data->nid->entity->field_trip_executon_date->und[0]->value;
    $row2['data'] = date('d-M-y', $trip_execution_date);
    $row2['style'] = $table_style;
    $row3['data'] = $result->_field_data->nid->entity->field_trip_id->und[0]->value;
    $row3['style'] = $table_style;
    $hht_id = $result->_field_data->nid->entity->field_hht_id->und[0]->nid;
    $query = db_select('node', 'n');
    $query->fields('n', array('title'));
    $query->condition('n.nid', $hht_id, '=');
    $hht_id_title = $query->execute()->fetchfield();
    $row4['data'] = $hht_id_title;
    $row4['style'] = $table_style;
    $row5['data'] = $result->_field_data->nid->entity->field_bill_count->und[0]->value;
    $row5['style'] = $table_style;
    $row6['data'] = $result->_field_data->nid->entity->field_dispatch_bill_value->und[0]->value;
    $row6['style'] = $table_style;
    $row7['data'] = $result->_field_data->nid->entity->field_dispatch_supervisor->und[0]->value;
    $row7['style'] = $table_style;
    $row8['data'] = $result->_field_data->nid->entity->field_cashier_name->und[0]->value;
    $row8['style'] = $table_style;
    $row9['data'] = $result->_field_data->nid->entity->field_vehicle_no->und[0]->value;
    $row9['style'] = $table_style;
    $row10['data'] = $result->_field_data->nid->entity->field_dispatch_loader_team_count->und[0]->value;
    $row10['style'] = $table_style;
    $row11['data'] = $result->_field_data->nid->entity->field_dispatch_date->und[0]->value;
    $row11['style'] = $table_style;
    $row12['data'] = $result->_field_data->nid->entity->field_dispatch_start_time->und[0]->value;
    $row12['style'] = $table_style;
    if ($result->_field_data->nid->entity->field_sequence_method->und[0]->value == 1) {
      $seq_method = 'API';
    }
    elseif ($result->_field_data->nid->entity->field_sequence_method->und[0]->value == 0) {
      $seq_method = 'MANUAL';
    }
    else {
      $seq_method = '';
    }
    $row13['data'] = $seq_method;
    $row13['style'] = $table_style;

    $total_bill_count += $row5['data'];
    $total_dispatch_bill_value += $row6['data'];
    $row0['data'] = $counter++;
    $row0['style'] = $table_style;

    $rows[] = array($row0, $row1, $row2, $row3, $row4, $row5, $row6, $row7, $row8, $row9, $row10, $row11, $row12, $row13);
  }
  $rows[] = array('SUM', '', '', '', '', $total_bill_count, $total_dispatch_bill_value, '', '', '', '', '', '', '');


  $ofd_html2 = "<h3>Pending Van Till : " . $todays_date . " (Today)</h3>";
  $ofd_html2 .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('border' => '1', 'cellpadding' => '5', 'cellspacing' => '0')));

  $params['subject'] = "OFD - $distributor_name";
  $params['body'] = $ofd_html . "<br>" . $ofd_html2;
  $mail_to = variable_get('ofd_to_email');
  $from = variable_get('from_email');
  drupal_mail('email_status', 'ofd_report', $mail_to, LANGUAGE_NONE, $params, $from);
}

function send_email_daily_data() {
  //global $user;
  //$user_id = $user->uid;
  //$distributor_id = change_feeds_import_get_distributor_id($user_id);
  $distributor_id = _DISTRIBUTOR_ID;
  $distributor_name = change_feeds_import_get_distributor_name($distributor_id);

  $todays_date_date = date('Y-m-d 00:00:00');
  // $todays_date_date = "2017-03-17 00:00:00"; 
  $party_packing = get_todays_party_packing_created_data($todays_date_date, $distributor_id);
  $picking = get_todays_picking_created_data($todays_date_date, $distributor_id);
  $egir = get_todays_unloading_created_data($todays_date_date, $distributor_id);

  $non_pp_count = $party_packing['non_pp'];
  if (empty($non_pp_count)) {
    $non_pp_count = 0;
  }
  $non_pp_completed_count = $party_packing['non_pp_completed'];
  if (empty($non_pp_completed_count)) {
    $non_pp_completed_count = 0;
  }
  $non_pp_process_count = $party_packing['non_pp_process'];
  if (empty($non_pp_process_count)) {
    $non_pp_process_count = 0;
  }
  $non_pp_pending_count = $party_packing['non_pp_pending'];
  if (empty($non_pp_pending_count)) {
    $non_pp_pending_count = 0;
  }

  $pp_count = $party_packing['pp'];
  if (empty($pp_count)) {
    $pp_count = 0;
  }
  $pp_completed_count = $party_packing['pp_completed'];
  if (empty($pp_completed_count)) {
    $pp_completed_count = 0;
  }

  $pp_process_count = $party_packing['pp_process'];
  if (empty($pp_process_count)) {
    $pp_process_count = 0;
  }
  $pp_pending_count = $party_packing['pp_pending'];
  if (empty($pp_pending_count)) {
    $pp_pending_count = 0;
  }

  $non_pp_percentage = round(($non_pp_completed_count / $non_pp_count) * 100);
  $non_pp_process_percentage = round(($non_pp_process_count / $non_pp_count) * 100);
  $non_pp_pending_percentage = round(($non_pp_pending_count / $non_pp_count) * 100);

  $pp_percentage = round(($pp_completed_count / $pp_count) * 100);
  $pp_process_percentage = round(($pp_process_count / $pp_count) * 100);
  $pp_pending_percentage = round(($pp_pending_count / $pp_count) * 100);


  $total_party_packing_count = ($non_pp_count + $pp_count);
  $total_completed_party_packing_count = ($non_pp_completed_count + $pp_completed_count);
  $total_result_perc = round(($total_completed_party_packing_count / $total_party_packing_count) * 100);
  $total_process_party_packing_count = ($non_pp_process_count + $pp_process_count);
  $total_process_result_perc = round(($total_process_party_packing_count / $total_party_packing_count) * 100);
  $total_pending_party_packing_count = ($non_pp_pending_count + $pp_pending_count);
  $total_pending_result_perc = round(($total_pending_party_packing_count / $total_party_packing_count) * 100);


  $party_packing_html = "<h3>Party Packing Status</h3><h4>PARTY PACKING CHECK : YES</h4><table border='1' cellpadding='5' cellspacing='0'  style='color:#000; font-size: 13px;font-family: arial' ><th>Party Packing</th><th>Created</th><th>Count Completed</th><th>Count In Progress</th><th>Count Pending </th><th>% Completion</th><th>%  In Progress</th><th>% Pending</th>
<tr>
<td>NON-PP</td>
<td>$non_pp_count</td>
<td>$non_pp_completed_count</td>
<td>$non_pp_process_count</td>
<td>$non_pp_pending_count</td>
<td>$non_pp_percentage %</td>
<td>$non_pp_process_percentage %</td>
<td>$non_pp_pending_percentage %</td>
</tr>
<tr>
<td>PP</td>
<td>$pp_count</td>
<td>$pp_completed_count</td>
<td>$pp_process_count</td>
<td>$pp_pending_count</td>
<td>$pp_percentage %</td>
<td>$pp_process_percentage %</td>
<td>$pp_pending_percentage %</td>
</tr>
<tr>
<td>Total Result</td>
<td>$total_party_packing_count</td>
<td>$total_completed_party_packing_count</td>
<td>$total_process_party_packing_count</td>
<td>$total_pending_party_packing_count</td>
<td>$total_result_perc %</td>
<td>$total_process_result_perc %</td>
<td>$total_pending_result_perc %</td>
</tr>
</table>";


  $picking_html = "<h3>Picking Status</h3><table border='1' cellpadding='5' cellspacing='0'  style='color:#000;font-size: 13px; font-family: arial'><th>Godown Area Id</th><th>Picking Type</th><th>Created</th><th>Count Completed</th><th>Count In Progress </th><th>Count Pending</th><th>% Completion</th><th>%  In Progress</th><th>% Pending </th>";


  foreach ($picking as $key => $value) {
    $picking_loose = $value['picking_loose'];
    if (empty($picking_loose)) {
      $picking_loose = 0;
    }
    $picking_loose_comleted = $value['picking_loose_comleted'];
    if (empty($picking_loose_comleted)) {
      $picking_loose_comleted = 0;
    }
    $picking_loose_process = $value['picking_loose_process'];
    if (empty($picking_loose_process)) {
      $picking_loose_process = 0;
    }
    $picking_loose_pending = $value['picking_loose_pending'];
    if (empty($picking_loose_pending)) {
      $picking_loose_pending = 0;
    }
    $loose_percentage = round(($picking_loose_comleted / $picking_loose) * 100);
    $loose_process_percentage = round(($picking_loose_process / $picking_loose) * 100);
    $loose_pending_percentage = round(($picking_loose_pending / $picking_loose) * 100);

    $picking_Bulk = $value['picking_Bulk'];
    if (empty($picking_Bulk)) {
      $picking_Bulk = 0;
    }
    $picking_bulk_comleted = $value['picking_bulk_comleted'];
    if (empty($picking_bulk_comleted)) {
      $picking_bulk_comleted = 0;
    }

    $picking_bulk_process = $value['picking_bulk_process'];
    if (empty($picking_bulk_process)) {
      $picking_bulk_process = 0;
    }
    $picking_bulk_pending = $value['picking_bulk_pending'];
    if (empty($picking_bulk_pending)) {
      $picking_bulk_pending = 0;
    }

    $bulk_percentage = round(($picking_bulk_comleted / $picking_Bulk) * 100);
    $bulk_process_percentage = round(($picking_bulk_process / $picking_Bulk) * 100);
    $bulk_pending_percentage = round(($picking_bulk_pending / $picking_Bulk) * 100);


    $picking_html .="<tr>
<td>$key</td>
<td><table ><tr>Bulk</tr><td>Loose</td></table></td>
<td><table><tr>$picking_Bulk</tr><td>$picking_loose</td></table></td>
<td><table><tr>$picking_bulk_comleted</tr><td>$picking_loose_comleted</td></table></td>
<td><table><tr>$picking_bulk_process</tr><td>$picking_loose_process</td></table></td>
<td><table><tr>$picking_bulk_pending</tr><td>$picking_loose_pending</td></table></td>
<td><table><tr>$bulk_percentage %</tr><td>$loose_percentage %</td></table></td>
<td><table><tr>$bulk_process_percentage %</tr><td>$loose_process_percentage %</td></table></td>
<td><table><tr>$bulk_pending_percentage %</tr><td>$loose_pending_percentage %</td></table></td>
</tr>
";
  }

  if (empty($picking)) {
    $picking_html .= "<tr><td colspan='9' style='text-align: center;'> There is No Picking Created for today's Date</td></tr>";
  }
  $picking_html .= "</table>";


  $egir_count = $egir['egir_count'];
  $egir_comleted = $egir['egir_completed'];
  $egir_in_process = $egir['egir_in_process'];
  $egir_pending = $egir['egir_pending'];

  if (empty($egir_pending)) {
    $egir_pending = 0;
  }
  if (empty($egir_in_process)) {
    $egir_in_process = 0;
  }
  if (empty($egir_comleted)) {
    $egir_comleted = 0;
  }
  $egir_percentage = round(($egir_comleted / $egir_count) * 100);
  $egir_process_percentage = round(($egir_in_process / $egir_count) * 100);
  $egir_pending_percentage = round(($egir_pending / $egir_count) * 100);

  $egir_html = "<h3>Unloading Status</h3><table border='1' cellpadding='5' cellspacing='0'  style='color:#000; font-size: 13px;font-family: arial'><th>Count of Invoice</th><th>Count Completed Invoice</th><th>Count In Progress</th><th>Count Pending</th><th>% Completion</th><th>%  In Progress </th><th>% Pending </th>
<tr>
<td>$egir_count</td>
<td>$egir_comleted</td>
<td>$egir_in_process</td>
<td>$egir_pending</td>
<td>$egir_percentage %</td>
<td>$egir_process_percentage %</td>
<td>$egir_pending_percentage %</td>
</tr>
</table>";

  $params['subject'] = "Operations Progress Status - $distributor_name";
  $params['body'] = $egir_html . "<br>" . $party_packing_html . "<br>" . $picking_html;

//  $mail_to = "dhirendra.mishra@iksula.com";
//  $mail_to = "abhishek.r@iksula.com";
//  $mail_to = "shruti.a@iksulaops.com";
  //$mail_to = variable_get('to_email');
  //$from = "MIS.HELPDESK@leanbox.in";
  //$from = variable_get('from_email');
  //$rr = drupal_mail('email_status', 'daily_data', $mail_to, LANGUAGE_NONE, $params, $from);
  //send_email_productivity_emailer($todays_date_date, $distributor_name, $distributor_id);
  //send_email_pl_group_emailer($distributor_name, $distributor_id);
  //send_email_channel_emailer($distributor_name, $distributor_id);
}

function send_email_daily_cron_pl_data() {
  $distributor_id = _DISTRIBUTOR_ID;
  $distributor_name = change_feeds_import_get_distributor_name($distributor_id);

  send_email_cron_pl_emailer($distributor_name, $distributor_id);
}

function send_email_channel_emailer($distributor_name, $distributor_id = 60) {
//  global $user;
//  $user_id = $user->uid;
//  $distributor_id = change_feeds_import_get_distributor_id($user_id);
//  $distributor_id = 60;

  $todays_date_date = date('Y-m-d');
  //$todays_date_date = "2017-03-20";
  // $todays_date_date = "2017-03-17 00:00:00";
  $todays_date_date_timestamp = strtotime(date($todays_date_date));
  $current_day = date("d", $todays_date_date_timestamp);
  $yesterday = strtotime('-1 day', strtotime($todays_date_date));
  $yesterday_date = date('d-M-Y', strtotime("-1 days"));
  $day_before_yesterday = strtotime('-2 day', strtotime($todays_date_date));
  $day_before_yesterday_date = date('d-M-Y', strtotime("-2 days"));
  $twoday_before_yesterday = strtotime('-3 day', strtotime($todays_date_date));
  $twoday_before_yesterday_date = date('d-M-Y', strtotime("-3 days"));

  if ($current_day == 22) {
    $this_month = date("m", $todays_date_date_timestamp);
    $this_date = $yesterday;
  }
  elseif ($current_day <= 21) {
    $old_date = strtotime('-1 month', strtotime($todays_date_date));
    $last_month = date("m", $old_date);
    $this_date = strtotime(date("Y-$last_month-21"));
  }
  else {
    $this_month = date("m", $todays_date_date_timestamp);
    $this_date = strtotime(date("Y-$this_month-21"));
  }

  $twoday_before_yesterday_html = "<h3>Billing Date : " . $twoday_before_yesterday_date . " (Two Days Before Yesterday)</h3>";
  $twoday_before_yesterday_data = get_twoday_before_yesterday_data_channel($twoday_before_yesterday, $twoday_before_yesterday, $distributor_id);
  if ($twoday_before_yesterday_data == "No Result Found") {
    $header = get_header_of_chhanel(TRUE);
    $twoday_before_yesterday_rows[] = array("<td colspan='10' style='text-align: center;'> There is No Activity</td>");
    $twoday_before_yesterday_html .= theme('table', array('header' => $header, 'rows' => $twoday_before_yesterday_rows, 'attributes' => array('border' => '1', 'cellpadding' => '5', 'cellspacing' => '0')));
  }
  else {
    $twoday_before_yesterday_html .= $twoday_before_yesterday_data;
  }

  $day_before_yesterday_html = "<h3>Billing Date : " . $day_before_yesterday_date . " (One Day Before Yesterday)</h3>";
  $day_before_yesterday_data = get_day_before_yesterday_data_channel($day_before_yesterday, $day_before_yesterday, $distributor_id);
  if ($day_before_yesterday_data == "No Result Found") {
    $header = get_header_of_chhanel(TRUE);
    $day_before_yesterday_rows[] = array("<td colspan='10' style='text-align: center;'> There is No Activity</td>");
    $day_before_yesterday_html .= theme('table', array('header' => $header, 'rows' => $day_before_yesterday_rows, 'attributes' => array('border' => '1', 'cellpadding' => '5', 'cellspacing' => '0')));
  }
  else {
    $day_before_yesterday_html .= $day_before_yesterday_data;
  }

  $yesterday_html = "<h3>Billing Date : " . $yesterday_date . " (Yesterday)</h3>";
  $yesterday_data = get_yesterday_data_channel($yesterday, $yesterday, $distributor_id);
  if ($yesterday_data == "No Result Found") {
    $header = get_header_of_chhanel(TRUE);
    $yesterday_rows[] = array("<td colspan='10' style='text-align: center;'> There is No Activity</td>");
    $yesterday_html .= theme('table', array('header' => $header, 'rows' => $yesterday_rows, 'attributes' => array('border' => '1', 'cellpadding' => '5', 'cellspacing' => '0')));
  }
  else {
    $yesterday_html .= $yesterday_data;
  }

  $mtd_html = "<h3>MTD Wise: " . $yesterday_date . " (Yesterday)</h3>";
  $mtd_data .= get_mtd_data_channel($this_date, $yesterday, $distributor_id);
  if ($mtd_data == "No Result Found") {
    $header = get_header_of_chhanel(TRUE);
    $mtd_rows[] = array("<td colspan='10' style='text-align: center;'> There is No Activity</td>");
    $mtd_html .= theme('table', array('header' => $header, 'rows' => $mtd_rows, 'attributes' => array('border' => '1', 'cellpadding' => '5', 'cellspacing' => '0')));
  }
  else {
    $mtd_html .= $mtd_data;
  }

  $mtd_one_day_before_html = "<h3>MTD Wise: " . $day_before_yesterday_date . " (One Day Before Yesterday)</h3>";
  $mtd_one_day_before_data .= get_one_day_before_mtd_data_channel($this_date, $day_before_yesterday, $distributor_id);
  if ($mtd_one_day_before_data == "No Result Found") {
    $header = get_header_of_chhanel(TRUE);
    $mtd_one_day_before_rows[] = array("<td colspan='10' style='text-align: center;'> There is No Activity</td>");
    $mtd_one_day_before_html .= theme('table', array('header' => $header, 'rows' => $mtd_one_day_before_rows, 'attributes' => array('border' => '1', 'cellpadding' => '5', 'cellspacing' => '0')));
  }
  else {
    $mtd_one_day_before_html .= $mtd_one_day_before_data;
  }

  $mtd_two_day_before_html = "<h3>MTD Wise: " . $twoday_before_yesterday_date . " (Two Day Before Yesterday)</h3>";
  $mtd_two_day_before_data .= get_two_day_before_mtd_data_channel($this_date, $twoday_before_yesterday, $distributor_id);
  if ($mtd_two_day_before_data == "No Result Found") {
    $header = get_header_of_chhanel(TRUE);
    $mtd_two_day_before_rows[] = array("<td colspan='10' style='text-align: center;'> There is No Activity</td>");
    $mtd_two_day_before_html .= theme('table', array('header' => $header, 'rows' => $mtd_two_day_before_rows, 'attributes' => array('border' => '1', 'cellpadding' => '5', 'cellspacing' => '0')));
  }
  else {
    $mtd_two_day_before_html .= $mtd_two_day_before_data;
  }

  $params['subject'] = "Channel Wise OTIF - $distributor_name";
  $params['body'] = $yesterday_html . "<br>" . $day_before_yesterday_html . "<br>" . $twoday_before_yesterday_html . "<br>" . $mtd_html . "<br>" . $mtd_one_day_before_html . "<br>" . $mtd_two_day_before_html;
  // $mail_to = variable_get('to_email');
//  $mail_to = "dhirendra.mishra@iksula.com";
//  $mail_to = "abhishek.r@iksula.com";
//  $mail_to = "shruti.a@iksulaops.com";
  //$from = "MIS.HELPDESK@leanbox.in";
  //$from = variable_get('from_email');
  //drupal_mail('email_status', 'channel_status', $mail_to, LANGUAGE_NONE, $params, $from);
}

/**
 * 
 * @param type $distributor_name
 * @param type $distributor_id
 */
function send_email_cron_pl_emailer($distributor_name, $distributor_id = 60) {

  $todays_date_date = date('Y-m-d');
  $todays_date_date_timestamp = strtotime(date($todays_date_date));
  $current_day = date("d", $todays_date_date_timestamp);
  $yesterday = strtotime('-1 day', strtotime($todays_date_date));
  $yesterday_date = date('d-M-Y', strtotime("-1 days"));
  $day_before_yesterday = strtotime('-2 day', strtotime($todays_date_date));
  $day_before_yesterday_date = date('d-M-Y', strtotime("-2 days"));
  $twoday_before_yesterday = strtotime('-3 day', strtotime($todays_date_date));
  $twoday_before_yesterday_date = date('d-M-Y', strtotime("-3 days"));

  if ($current_day == 22) {
    $this_month = date("m", $todays_date_date_timestamp);
    $this_date = $yesterday;
  }
  elseif ($current_day <= 21) {
    $old_date = strtotime('-1 month', strtotime($todays_date_date));
    $last_month = date("m", $old_date);
    if($last_month == 12) {
      $last_year = date("Y",strtotime("-1 year"));
      $this_date = strtotime(date("$last_year-$last_month-21"));
    }
    else {
      $this_date = strtotime(date("Y-$last_month-21"));
    } 
  }
  else {
    $this_month = date("m", $todays_date_date_timestamp);
    $this_date = strtotime(date("Y-$this_month-21"));
  }

  $twoday_before_yesterday_html = "<h3>Billing Date : " . $twoday_before_yesterday_date . " (Two Days Before Yesterday)</h3>";
  $twoday_before_yesterday_data = get_cron_common_data_for_pl_datewise($twoday_before_yesterday, $twoday_before_yesterday, $distributor_id);
  if ($twoday_before_yesterday_data == "No Result Found") {
    $header = get_header_of_chhanel(TRUE, TRUE);
    $twoday_before_yesterday_rows[] = array("<td colspan='10' style='text-align: center;'> There is No Activity</td>");
    $twoday_before_yesterday_html .= theme('table', array('header' => $header, 'rows' => $twoday_before_yesterday_rows, 'attributes' => array('border' => '1', 'cellpadding' => '5', 'cellspacing' => '0')));
  }
  else {
    $twoday_before_yesterday_html .= $twoday_before_yesterday_data;
  }

  $day_before_yesterday_html = "<h3>Billing Date : " . $day_before_yesterday_date . " (One Day Before Yesterday)</h3>";
  $day_before_yesterday_data = get_cron_common_data_for_pl_datewise($day_before_yesterday, $day_before_yesterday, $distributor_id);
  if ($day_before_yesterday_data == "No Result Found") {
    $header = get_header_of_chhanel(TRUE, TRUE);
    $day_before_yesterday_rows[] = array("<td colspan='10' style='text-align: center;'> There is No Activity</td>");
    $day_before_yesterday_html .= theme('table', array('header' => $header, 'rows' => $day_before_yesterday_rows, 'attributes' => array('border' => '1', 'cellpadding' => '5', 'cellspacing' => '0')));
  }
  else {
    $day_before_yesterday_html .= $day_before_yesterday_data;
  }

  $yesterday_html = "<h3>Billing Date : " . $yesterday_date . " (Yesterday)</h3>";
  $yesterday_data = get_cron_common_data_for_pl_datewise($yesterday, $yesterday, $distributor_id);
  if ($yesterday_data == "No Result Found") {
    $header = get_header_of_chhanel(TRUE, TRUE);
    $yesterday_rows[] = array("<td colspan='10' style='text-align: center;'> There is No Activity</td>");
    $yesterday_html .= theme('table', array('header' => $header, 'rows' => $yesterday_rows, 'attributes' => array('border' => '1', 'cellpadding' => '5', 'cellspacing' => '0')));
  }
  else {
    $yesterday_html .= $yesterday_data;
  }

  $mtd_html = "<h3>MTD Wise: " . $yesterday_date . " (Yesterday)</h3>";
  $mtd_data .= get_cron_common_data_for_pl_datewise($this_date, $yesterday, $distributor_id);
  if ($mtd_data == "No Result Found") {
    $header = get_header_of_chhanel(TRUE, TRUE);
    $mtd_rows[] = array("<td colspan='10' style='text-align: center;'> There is No Activity</td>");
    $mtd_html .= theme('table', array('header' => $header, 'rows' => $mtd_rows, 'attributes' => array('border' => '1', 'cellpadding' => '5', 'cellspacing' => '0')));
  }
  else {
    $mtd_html .= $mtd_data;
  }

  $mtd_one_day_before_html = "<h3>MTD Wise: " . $day_before_yesterday_date . " (One Day Before Yesterday)</h3>";
  $mtd_one_day_before_data .= get_cron_common_data_for_pl_datewise($this_date, $day_before_yesterday, $distributor_id);
  if ($mtd_one_day_before_data == "No Result Found") {
    $header = get_header_of_chhanel(TRUE, TRUE);
    $mtd_one_day_before_rows[] = array("<td colspan='10' style='text-align: center;'> There is No Activity</td>");
    $mtd_one_day_before_html .= theme('table', array('header' => $header, 'rows' => $mtd_one_day_before_rows, 'attributes' => array('border' => '1', 'cellpadding' => '5', 'cellspacing' => '0')));
  }
  else {
    $mtd_one_day_before_html .= $mtd_one_day_before_data;
  }

  $mtd_two_day_before_html = "<h3>MTD Wise: " . $twoday_before_yesterday_date . " (Two Day Before Yesterday)</h3>";
  $mtd_two_day_before_data .= get_cron_common_data_for_pl_datewise($this_date, $twoday_before_yesterday, $distributor_id);
  if ($mtd_two_day_before_data == "No Result Found") {
    $header = get_header_of_chhanel(TRUE, TRUE);
    $mtd_two_day_before_rows[] = array("<td colspan='10' style='text-align: center;'> There is No Activity</td>");
    $mtd_two_day_before_html .= theme('table', array('header' => $header, 'rows' => $mtd_two_day_before_rows, 'attributes' => array('border' => '1', 'cellpadding' => '5', 'cellspacing' => '0')));
  }
  else {
    $mtd_two_day_before_html .= $mtd_two_day_before_data;
  }

  $params['subject'] = "PL GROUP Wise OTIF - $distributor_name";
  $params['body'] = $yesterday_html . "<br>" . $day_before_yesterday_html . "<br>" . $twoday_before_yesterday_html . "<br>" . $mtd_html . "<br>" . $mtd_one_day_before_html . "<br>" . $mtd_two_day_before_html;
  $mail_to = variable_get('pl_grp_otif_to_email');
  $from = variable_get('from_email');
  drupal_mail('email_status', 'channel_status', $mail_to, LANGUAGE_NONE, $params, $from);
}

function send_email_pl_group_emailer() {
  $distributor_id = _DISTRIBUTOR_ID;
  $distributor_name = change_feeds_import_get_distributor_name($distributor_id);

  $todays_date_date = date('Y-m-d');
  //$todays_date_date = "2017-03-20";
  // $todays_date_date = "2017-03-17 00:00:00";
  $todays_date_date_timestamp = strtotime(date($todays_date_date));
  $current_day = date("d", $todays_date_date_timestamp);
  $yesterday = strtotime('-1 day', strtotime($todays_date_date));
  $yesterday_date = date('d-M-Y', strtotime("-1 days"));
  $day_before_yesterday = strtotime('-2 day', strtotime($todays_date_date));
  $day_before_yesterday_date = date('d-M-Y', strtotime("-2 days"));
  $twoday_before_yesterday = strtotime('-3 day', strtotime($todays_date_date));
  $twoday_before_yesterday_date = date('d-M-Y', strtotime("-3 days"));
  $twelveday_before_today = strtotime('-12 day', strtotime(date('Y-m-d')));

  if ($current_day == 22) {
    $this_month = date("m", $todays_date_date_timestamp);
    $this_date = $yesterday;
  }
  elseif ($current_day <= 21) {
    $old_date = strtotime('-1 month', strtotime($todays_date_date));
    $last_month = date("m", $old_date);
    $this_date = strtotime(date("Y-$last_month-21"));
  }
  else {
    $this_month = date("m", $todays_date_date_timestamp);
    $this_date = strtotime(date("Y-$this_month-21"));
  }

//  $twoday_before_yesterday_html = "<h3>Billing Date : " . $twoday_before_yesterday_date ." (Two Days Before Yesterday)</h3>";
//  $twoday_before_yesterday_data = get_twoday_before_yesterday_data_pl_groupwise($twoday_before_yesterday, $twoday_before_yesterday, $distributor_id);
//  if ($twoday_before_yesterday_data == "No Result Found") {
//    $header = get_header_of_pl_group();
//    $twoday_before_yesterday_rows[] = array("<td colspan='10' style='text-align: center;'> There is No Activity</td>");
//    $twoday_before_yesterday_html .= theme('table', array('header' => $header, 'rows' => $twoday_before_yesterday_rows, 'attributes' => array('border' => '1', 'cellpadding' => '5', 'cellspacing' => '0')));
//  }
//  else {
//    $twoday_before_yesterday_html .= $twoday_before_yesterday_data;
//  }
//  
//  $day_before_yesterday_html = "<h3>Billing Date : " . $day_before_yesterday_date ." (One Day Before Yesterday)</h3>";
//  $day_before_yesterday_data = get_day_before_yesterday_data_pl_groupwise($day_before_yesterday, $day_before_yesterday, $distributor_id);
//  if ($day_before_yesterday_data == "No Result Found") {
//    $header = get_header_of_pl_group();
//    $day_before_yesterday_rows[] = array("<td colspan='10' style='text-align: center;'> There is No Activity</td>");
//    $day_before_yesterday_html .= theme('table', array('header' => $header, 'rows' => $day_before_yesterday_rows, 'attributes' => array('border' => '1', 'cellpadding' => '5', 'cellspacing' => '0')));
//  }
//  else {
//    $day_before_yesterday_html .= $day_before_yesterday_data;
//  }
//  
//  $yesterday_html = "<h3>Billing Date : " . $yesterday_date ." (Yesterday)</h3>";
//  $yesterday_data = get_yesterday_data_pl_groupwise($yesterday, $yesterday, $distributor_id);
//  if ($yesterday_data == "No Result Found") {
//    $header = get_header_of_pl_group();
//    $yesterday_rows[] = array("<td colspan='10' style='text-align: center;'> There is No Activity</td>");
//    $yesterday_html .= theme('table', array('header' => $header, 'rows' => $yesterday_rows, 'attributes' => array('border' => '1', 'cellpadding' => '5', 'cellspacing' => '0')));
//  }
//  else {
//    $yesterday_html .= $yesterday_data;
//  }

  $mtd_html = "<h3>Last 10 Days Pending Bills Summary till yesterday (" . $yesterday_date . ")</h3>";
  $mtd_data .= get_pending_bills_pl_group_datewise($twelveday_before_today, $yesterday, $distributor_id);
  if ($mtd_data == "No Result Found") {
    //$header = get_header_of_pl_group();
    $header = array('PL Group', 'Bill Count', 'Bill Value', 'Dispatch Count', 'Dispatch Value', 'Pending Bill', 'Pending Bill Value');
    $mtd_rows[] = array("<td colspan='10' style='text-align: center;'> There is No Activity</td>");
    $mtd_html .= theme('table', array('header' => $header, 'rows' => $mtd_rows, 'attributes' => array('border' => '1', 'cellpadding' => '5', 'cellspacing' => '0')));
  }
  else {
    $mtd_html .= $mtd_data;
  }

  $mtd_pending_bill_count_html = "<h3>Last 10 Days Pending Bills Count by Billing Date</h3>";
  $mtd_type = 'bill_count';
  $mtd_pending_bill_count_data .= get_mtd_data_pending_bills_count_value_pl_groupwise($distributor_id, $mtd_type);
  if ($mtd_pending_bill_count_data == "No Result Found") {
    $header = array('PL Group', date('dS M', strtotime('-1 day')), date('dS M', strtotime('-2 days')), date('dS M', strtotime('-3 days')), date('dS M', strtotime('-4 days')), '>4 Days', 'Total Bills');
    $mtd_pending_bill_count_rows[] = array("<td colspan='10' style='text-align: center;'> There is No Activity</td>");
    $mtd_pending_bill_count_html .= theme('table', array('header' => $header, 'rows' => $mtd_pending_bill_count_rows, 'attributes' => array('border' => '1', 'cellpadding' => '5', 'cellspacing' => '0')));
  }
  else {
    $mtd_pending_bill_count_html .= $mtd_pending_bill_count_data;
  }

  $mtd_pending_bill_value_html = "<h3>Last 10 Days Pending Bills Value by Billing Date</h3>";
  $mtd_type = 'bill_value';
  $mtd_pending_bill_value_data .= get_mtd_data_pending_bills_count_value_pl_groupwise($distributor_id, $mtd_type);
  if ($mtd_pending_bill_value_data == "No Result Found") {
    $header = array('PL Group', date('dS M', strtotime('-1 day')), date('dS M', strtotime('-2 days')), date('dS M', strtotime('-3 days')), date('dS M', strtotime('-4 days')), '>4 Days', 'Total Bill Value');
    $mtd_pending_bill_value_rows[] = array("<td colspan='10' style='text-align: center;'> There is No Activity</td>");
    $mtd_pending_bill_value_html .= theme('table', array('header' => $header, 'rows' => $mtd_pending_bill_value_rows, 'attributes' => array('border' => '1', 'cellpadding' => '5', 'cellspacing' => '0')));
  }
  else {
    $mtd_pending_bill_value_html .= $mtd_pending_bill_value_data;
  }

//  $mtd_one_day_before_html = "<h3>MTD Wise: ". $day_before_yesterday_date ." (One Day Before Yesterday)</h3>";
//  $mtd_one_day_before_data .= get_one_day_before_mtd_data_pl_groupwise($this_date, $day_before_yesterday, $distributor_id);
//  if ($mtd_one_day_before_data == "No Result Found") {
//    $header = get_header_of_pl_group();
//    $mtd_one_day_before_rows[] = array("<td colspan='10' style='text-align: center;'> There is No Activity</td>");
//    $mtd_one_day_before_html .= theme('table', array('header' => $header, 'rows' => $mtd_one_day_before_rows, 'attributes' => array('border' => '1', 'cellpadding' => '5', 'cellspacing' => '0')));
//  }
//  else {
//    $mtd_one_day_before_html .= $mtd_one_day_before_data;
//  }
//  
//  $mtd_two_day_before_html = "<h3>MTD Wise: ". $twoday_before_yesterday_date ." (Two Day Before Yesterday)</h3>";
//  $mtd_two_day_before_data .= get_two_day_before_mtd_data_pl_groupwise($this_date, $twoday_before_yesterday, $distributor_id);
//  if ($mtd_two_day_before_data == "No Result Found") {
//    $header = get_header_of_pl_group();
//    $mtd_two_day_before_rows[] = array("<td colspan='10' style='text-align: center;'> There is No Activity</td>");
//    $mtd_two_day_before_html .= theme('table', array('header' => $header, 'rows' => $mtd_two_day_before_rows, 'attributes' => array('border' => '1', 'cellpadding' => '5', 'cellspacing' => '0')));
//  }
//  else {
//    $mtd_two_day_before_html .= $mtd_two_day_before_data;
//  }

  $params['subject'] = "PL Group Wise Bill Pendency-$distributor_name";
  //$params['body'] = $yesterday_html . "<br>" . $day_before_yesterday_html . "<br>" . $twoday_before_yesterday_html . "<br>" . $mtd_html . "<br>" . $mtd_one_day_before_html . "<br>" . $mtd_two_day_before_html;
  $params['body'] = $mtd_html . "<br>" . $mtd_pending_bill_count_html . "<br>" . $mtd_pending_bill_value_html;
  $mail_to = variable_get('pl_grp_wise_to_email');
  $from = variable_get('from_email');
  drupal_mail('email_status', 'pl_group_status', $mail_to, LANGUAGE_NONE, $params, $from);
}

function send_email_productivity_emailer($todays_date_date, $distributor_name, $end_date = FALSE, $chart = FALSE, $type = '', $distributor_id = 60) {
  $target_data = leanbox_dashboard_target_value_using_voc_name('productivity target');

  if (( $chart == TRUE && $type == 'party_packing' ) || ( $chart == FALSE )) {
    $party_packing = get_productivity_data_for_party_packing($todays_date_date, $end_date, $distributor_id);
    $party_pack_superwise_html = "<h3>Party Packing Supervisorwise (status:Completed)</h3><table class = 'pp-superwise-table' border='1' cellpadding='5' cellspacing='0'  style='color:#000; font-size: 13px;font-family: arial'>"
      . "<th>Party Packing Type</th>"
      . "<th>Party Packing Supervisor</th>"
      . "<th>Sum - Bill Line</th>"
      . "<th>Sum - Total Time</th>"
      . "<th>Productivity</th>";

    foreach ($party_packing as $key => $value) {

      if ($key !== "total") {
        if ($key == 1) {
          $first_row = "PP";
        }if ($key == 0) {
          $first_row = "NON-PP";
        }
        $party_pack_superwise_html .="<tr>
    <td>$first_row</td>";
        $super_wise_counter = 0;
        foreach ($value as $k => $v) {
          if (is_array($v)) {
            $counts++;
          }
        }
        $superwise_count = $counts;
        foreach ($value as $k => $val) {
          if (($k == "total_non_pp_bill_lines") || ($k == "total_non_pp_total_time" ) || ($k == "total_pp_bill_lines") || ($k == "total_pp_total_time" )) {
            // do nothing
          }
          else {
            $super_wise_counter ++;
            $super_visor = $k;
            $time = $val['supervisor_non_pp_time'];
            if (empty($time)) {
              $time = $val['supervisor_pp_time'];
            }
            $bill_lines = $val['supervisor_non_pp_bill_lines'];
            if (empty($bill_lines)) {
              $bill_lines = $val['supervisor_pp_bill_lines'];
            }
            $percentage = ($bill_lines / $time);
            $percentage = number_format((float) $percentage, 2, '.', '');
            $party_pack_superwise_html .="<td><table class = 'pp-sp'><td><tr>$super_visor</tr></td></table></td>";
            $party_pack_superwise_html .="<td><table class = 'pp-bill'><td><tr>$bill_lines</tr></td></table></td>";
            $party_pack_superwise_html .="<td><table class = 'pp-time'><td><tr>$time</tr></td></table></td>";
            if ($super_wise_counter == $superwise_count) {
              $party_pack_superwise_html .="<td><table class = 'pp-count'><td><tr>$percentage</tr></td></table></td>";
            }
            else {
              $party_pack_superwise_html .="<td><table class = 'pp-count'><td><tr>$percentage</tr></td></table></td><tr></tr><td></td>";
            }

            $label = $ke . ' ' . $k;
            $label_key = strtolower($label);
            $picking_godown_wise_html .="<td><table class = 'pp-count'><td><tr> $target_data[$label_key]</tr></td></table></td><tr></tr><td></td>";


            $total_timing += $time;
            $total_bill_lines += $bill_lines;
          }
        }
        $total_percentage = ($total_bill_lines / $total_timing);
        $total_percentage = number_format((float) $total_percentage, 2, '.', '');
        $all_total_timing += $total_timing;
        $all_total_loding_lines += $total_bill_lines;
        $party_pack_superwise_html .="<tr>
<td>$first_row Result</td>
<td></td>
<td><table class = 'pp-total-bill'><td><tr>$total_bill_lines</tr></td></table></td>
<td><table class = 'pp-total-time'><td><tr>$total_timing</tr></td></table></td>
<td><table class = 'pp-total-percent'><td><tr>$total_percentage</tr></td></table></td>
</tr><td></td>";
        unset($total_timing);
        unset($total_bill_lines);
        unset($total_percentage);
        unset($counts);
      }
    }
    $all_godown_total_perc = ($all_total_loding_lines / $all_total_timing);
    $all_godown_total_perc = number_format((float) $all_godown_total_perc, 2, '.', '');
    if (empty($all_total_loding_lines) && empty($all_total_timing)) {
      $party_pack_superwise_html .= "<tr><td colspan='5' style='text-align: center;'> There is No Activity for today's Date</td></tr>";
    }
    $party_pack_superwise_html .= "</table>";
    $total_non_time = $party_packing['total']['non_time'];
    $total_non_bill = $party_packing['total']['non_pp_bill_lines'];
    $total_non_perc = ($total_non_bill / $total_non_time);
    $total_non_perc = number_format((float) $total_non_perc, 2, '.', '');
    $total_pp_time = $party_packing['total']['pp_time'];
    $total_pp_bill = $party_packing['total']['pp_bill_lines'];
    $total_pp_perc = ($total_pp_bill / $total_pp_time);
    $total_pp_perc = number_format((float) $total_pp_perc, 2, '.', '');
    $total_bills = ($total_non_bill + $total_pp_bill);
    $total_time = ($total_non_time + $total_pp_time);
    $total_perc = ($total_bills / $total_time);
    $total_perc = number_format((float) $total_perc, 2, '.', '');
    $party_pack_type_wsie_html = "<h3>Party Packing Typewise</h3><table class = 'pp-typewise' border='1' cellpadding='5' cellspacing='0'  style='color:#000;font-size: 13px; font-family: arial'>"
      . "<th>Party Packing Type</th>"
      . "<th>Sum - Bill Line</th>"
      . "<th>Sum - Total Time</th>"
      . "<th>Productivity</th>"
      . "<th>Target</th>";


    if (empty($total_bills) && empty($total_time)) {
      $party_pack_type_wsie_html .= "<tr><td colspan='5' style='text-align: center;'> There is No Activity for today's Date</td></tr></table>";
    }
    else {
      $non_pp_target = $target_data['NON-PP'];
      $pp_target = $target_data['PP'];

      $party_pack_type_wsie_html .= "<tr><td>Non-PP</td><td>$total_non_bill</td><td>$total_non_time</td><td>$total_non_perc</td><td>$non_pp_target</td></tr>"
        . "<tr><td>PP</td><td>$total_pp_bill</td><td>$total_pp_time</td><td>$total_pp_perc</td>"
        . "<td>$pp_target</td>"
        . "</tr></table>";
    }
  }

  if (( $chart == TRUE && $type == 'picking' ) || ( $chart == FALSE )) {

    $picking = get_productivity_data_for_picking($todays_date_date, $end_date, $distributor_id);
    $picking_supervisor_wise_html = "<h3>Pick Supervisorwise (status:Completed)</h3><table class = 'pp-superwise-table' border='1' cellpadding='5' cellspacing='0'  style='color:#000; font-size: 13px;font-family: arial'>"
      . "<th>Pick Supervisor</th>"
      . "<th>Godown Area Id</th>"
      . "<th>Picking Type</th>"
      . "<th>Sum - Loading Sheet Line</th>"
      . "<th>Sum - Time Duration</th>"
      . "<th>Productivity</th>";


    $picking_godown_wise_html = "<h3>Pick Godownwise (status:Completed)</h3><table class = 'pp-typewise' border='1' cellpadding='5' cellspacing='0'  style='color:#000; font-size: 13px;font-family: arial'>"
      . "<th>Godown Area Id</th>"
      . "<th>Picking Type</th>"
      . "<th>Sum - Loading Sheet Line</th>"
      . "<th>Sum - Time Duration</th>"
      . "<th>Productivity</th>"
      . "<th>Target</th>";


    foreach ($picking as $key => $value) {

      if ($key == "godown") {
        foreach ($value as $ke => $val) {
          $picking_godown_wise_html .="<tr>
    <td>$ke</td>";
          $godown_counter = 0;
          $godown_count = count($val);
          foreach ($val as $k => $v) {
            $godown_counter++;
            $loding_lines = $v['loading_sheet_line'];
            $timing = $v['total_tme'];
            $percentage = ($loding_lines / $timing);
            $percentage = number_format((float) $percentage, 2, '.', '');
            $picking_godown_wise_html .="<td><table class = 'pp-sp'><td><tr>$k</tr></td></table></td>";
            $picking_godown_wise_html .="<td><table class = 'pp-bill'><td><tr>$loding_lines</tr></td></table></td>";
            $picking_godown_wise_html .="<td><table class = 'pp-time'><td><tr>$timing</tr></td></table></td>";
            $picking_godown_wise_html .="<td><table class = 'pp-count'><td><tr>$percentage</tr></td></table></td>";

            $label = $ke . ' ' . $k;
            $label_key = strtolower($label);
            if ($godown_counter == $godown_count) {
              $picking_godown_wise_html .="<td><table class = 'pp-target'><td><tr>$target_data[$label_key]</tr></td></table></td>";
            }
            else {
              $picking_godown_wise_html .="<td><table class = 'pp-target'><td><tr>$target_data[$label_key]</tr></td></table></td><tr></tr><td></td>";
            }

            $total_timing += $timing;
            $total_loding_lines += $loding_lines;
            $all_godown_total_timing += $timing;
            $all_godown_total_loding_lines += $loding_lines;
          }
          $total_perc = ($total_loding_lines / $total_timing);
          $total_perc = number_format((float) $total_perc, 2, '.', '');
          unset($total_timing);
          unset($total_loding_lines);
          unset($total_percentage);
        }
      }
      else {
        $picking_supervisor_wise_html .="<tr>
    <td>$key</td>";
        $superwiser_counter = 0;
        $superwiser_count = count($value);
        foreach ($value as $k => $val) {
          $superwiser_counter++;
          $loding_lines = $val['loading_sheet_line'];
          $timing = $val['total_tme'];
          $pick_godown = $val['godown'];
          $percentage = ($loding_lines / $timing);
          $percentage = number_format((float) $percentage, 2, '.', '');
          $picking_supervisor_wise_html .="<td><table class = 'pp-sp'><td><tr>$pick_godown</tr></td></table></td>";
          $picking_supervisor_wise_html .="<td><table class = 'pp-bill'><td><tr>$k</tr></td></table></td>";
          $picking_supervisor_wise_html .="<td><table class = 'pp-line'><td><tr>$loding_lines</tr></td></table></td>";
          $picking_supervisor_wise_html .="<td><table class = 'pp-time'><td><tr>$timing</tr></td></table></td>";
          if ($superwiser_count == $superwiser_counter) {
            $picking_supervisor_wise_html .="<td><table class = 'pp-count'><td><tr>$percentage</tr></td></table></td>";
          }
          else {
            $picking_supervisor_wise_html .="<td><table class = 'pp-count'><td><tr>$percentage</tr></td></table></td><tr></tr><td></td>";
          }
          $total_timing += $timing;
          $total_loding_lines += $loding_lines;
          $all_sup_total_timing += $timing;
          $all_sup_total_loding_lines += $loding_lines;
        }
        $total_perc = ($total_loding_lines / $total_timing);
        $total_perc = number_format((float) $total_perc, 2, '.', '');
        unset($total_timing);
        unset($total_loding_lines);
        unset($total_percentage);
      }
    }
    $all_sup_total_perc = ($all_sup_total_loding_lines / $all_sup_total_timing);
    $all_sup_total_perc = number_format((float) $all_sup_total_perc, 2, '.', '');
    $all_godown_total_perc = ($all_godown_total_loding_lines / $all_godown_total_timing);
    $all_godown_total_perc = number_format((float) $all_godown_total_perc, 2, '.', '');
    if (empty($all_godown_total_loding_lines) && empty($all_godown_total_timing)) {
      $picking_supervisor_wise_html .= "<tr><td colspan='6' style='text-align: center;'> There is No Activity for today's Date</td></tr>";
    }
    $picking_supervisor_wise_html .= "</tr></table>";
    if (empty($all_godown_total_loding_lines) && empty($all_godown_total_timing)) {
      $picking_godown_wise_html .= "<tr><td colspan='6' style='text-align: center;'> There is No Activity for today's Date</td></tr>";
    }
    $picking_godown_wise_html .= "</tr></table>";
  }


  $params['subject'] = "Productivity Progress Status-$distributor_name";
  $params['body'] = $party_pack_type_wsie_html . "<br>" . $party_pack_superwise_html . "<br>" . $picking_godown_wise_html . "<br>" . $picking_supervisor_wise_html;
  //$mail_to = variable_get('to_email');
  //$from = variable_get('from_email');

  if ($chart == TRUE && $type == 'party_packing') {
    return $party_pack_type_wsie_html . "<br>" . $party_pack_superwise_html;
  }
  else if ($chart == TRUE && $type == 'picking') {
    return $picking_godown_wise_html . "<br>" . $picking_supervisor_wise_html;
  }
  else {
    //drupal_mail('email_status', 'productivity_status', $mail_to, LANGUAGE_NONE, $params, $from);
  }
}

/**
 *  Send Particular Email 
 * @param type $todays_date_date
 * @param type $distributor_name
 * @param type $end_date
 * @param type $chart
 * @param type $type
 * @param type $distributor_id
 * @return type
 */
function send_party_packingand_picking_productivity_emailer() {
  $distributor_id = _DISTRIBUTOR_ID;
  $distributor_name = change_feeds_import_get_distributor_name($distributor_id);
  //$end_date = strtotime('-7 day', date('Y-m-d'));
  //$todays_date_date = strtotime(date('Y-m-d 00:00:00'));
  $end_date = date('Y-m-d', strtotime('-7 day', strtotime(date('Y-m-d'))));
  $todays_date_date = date('Y-m-d');
  $target_data = leanbox_dashboard_target_value_using_voc_name('productivity target');

  // Party Packing productivity
  $party_packing_html = get_email_productivity_data_for_party_packing($end_date, $todays_date_date, $distributor_id);

  // Picking productivity
  $picking_html = get_email_productivity_data_for_picking($end_date, $todays_date_date, $distributor_id);

  //Loose Confirmation Productivity Mailer
  $loose_confirmation_html = get_email_productivity_data_for_loose_confirmation($end_date, $todays_date_date, $distributor_id);

  //Loading Productivity Mailer
  //$loading_html = get_email_productivity_data_for_loading($end_date, $todays_date_date, $distributor_id);


  $params['subject'] = "Pick/Party Packing/LC Productivity Status-$distributor_name";
  $params['body'] = $party_packing_html . "<br>" . $picking_html . "<br>" . $loose_confirmation_html;
  $mail_to = variable_get('productivity_status_to_email');
  $from = variable_get('from_email');
  
  // Attach File For Party Packing
  $file1_name = 'Productivity_Data_Party_Packing.csv';
  $file1_uri = 'public://PRODUCTIVITY_DATA/' . $file1_name;

  // create directory if not exist
  $dir = 'public://PRODUCTIVITY_DATA';
  file_prepare_directory($dir, FILE_CREATE_DIRECTORY);

  $file1 = fopen($file1_uri, 'w');

  $table1 = get_attachment_productivity_data_for_party_packing($end_date, $todays_date_date, $distributor_id);
  fputcsv($file1, $table1['header']);
  foreach ($table1['rows'] as $line) {
    fputcsv($file1, $line);
  }

  fclose($file1);

  $params['attachment'] = array(
    'filecontent' => file_get_contents($file1_uri),
    'filename' => $file1_name,
    'filemime' => 'text/csv',
  );
  
  // Attach File For Picking
  $file2_name = 'Productivity_Data_Picking.csv';
  $file2_uri = 'public://PRODUCTIVITY_DATA/' . $file2_name;

  // create directory if not exist
  $dir = 'public://PRODUCTIVITY_DATA';
  file_prepare_directory($dir, FILE_CREATE_DIRECTORY);

  $file2 = fopen($file2_uri, 'w');

  $table2 = get_attachment_productivity_data_for_picking($end_date, $todays_date_date, $distributor_id);
  fputcsv($file2, $table2['header']);
  foreach ($table2['rows'] as $line) {
    fputcsv($file2, $line);
  }

  fclose($file2);

  $params['attachment2'] = array(
    'filecontent' => file_get_contents($file2_uri),
    'filename' => $file2_name,
    'filemime' => 'text/csv',
  );
  
  // Attach File For Loose Confirmation
  $file3_name = 'Productivity_Data_Loose_confirmation.csv';
  $file3_uri = 'public://PRODUCTIVITY_DATA/' . $file3_name;

  // create directory if not exist
  $dir = 'public://PRODUCTIVITY_DATA';
  file_prepare_directory($dir, FILE_CREATE_DIRECTORY);

  $file3 = fopen($file3_uri, 'w');

  $table3 = get_attachment_productivity_data_for_loose_confirmation($end_date, $todays_date_date, $distributor_id);
  fputcsv($file3, $table3['header']);
  foreach ($table3['rows'] as $line) {
    fputcsv($file3, $line);
  }

  fclose($file3);

  $params['attachment3'] = array(
    'filecontent' => file_get_contents($file3_uri),
    'filename' => $file3_name,
    'filemime' => 'text/csv',
  );
  
  drupal_mail('email_status', 'productivity_status', $mail_to, LANGUAGE_NONE, $params, $from);
}

/*
 * Function to attach with automailer for party packing
 */
function get_attachment_productivity_data_for_party_packing($start_date, $end_date = FALSE, $dis_id = 60) {
  $query = db_select('node', 'n');
  $query->condition('n.type', 'party_packing');
  $query->join('field_data_field_distributor', 'fd', 'fd.entity_id = n.uid');
  $query->condition('fd.entity_id', $dis_id, '=');
  $query->leftjoin('field_data_field_bill_lines', 'bl', 'bl.entity_id = n.nid');
  $query->leftjoin('field_data_field_party_packer_team_count', 'tc', 'tc.entity_id = n.nid');
  $query->leftjoin('field_data_field_party_packing_start_time', 'st', 'st.entity_id = n.nid');
  $query->leftjoin('field_data_field_party_packing_end_time', 'et', 'et.entity_id = n.nid');
  $query->leftjoin('field_data_field__party_packingstatus', 's', 's.entity_id = n.nid');
  $query->condition('s.field__party_packingstatus_value', 2, "=");
  $query->leftjoin('field_data_field_party_packing_loading_date', 'd', 'd.entity_id = n.nid');
  $query->leftjoin('field_data_field_party_packer_name', 'pn', 'pn.entity_id = n.nid');

  $query->join('field_data_field_party_packing_date', 'ppd', 'ppd.entity_id = n.nid');
  $query->condition('ppd.field_party_packing_date_value', array($start_date, $end_date), 'BETWEEN');
  $query->orderBy('ppd.field_party_packing_date_value', 'DESC');
  $query->leftjoin('field_data_field_party_packing_type', 'ppt', 'ppt.entity_id = n.nid');
  $query->leftjoin('field_data_field_party_packing_supervisor', 'pps', 'pps.entity_id = n.nid');

  $query->fields('ppd', array('field_party_packing_date_value'));
  $query->fields('pn', array('field_party_packer_name_value'));
  $query->fields('bl', array('field_bill_lines_value'));
  $query->fields('tc', array('field_party_packer_team_count_value'));
  $query->fields('st', array('field_party_packing_start_time_value'));
  $query->fields('et', array('field_party_packing_end_time_value'));
  $query->fields('s', array('field__party_packingstatus_value'));
  $query->fields('ppt', array('field_party_packing_type_value'));
  $query->fields('pps', array('field_party_packing_supervisor_value'));
  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  
  $target_data = leanbox_dashboard_target_value_using_voc_name('productivity target');
  foreach ($res as $data) {
    $start_time = strtotime($data['field_party_packing_start_time_value']);
    $end_time = strtotime($data['field_party_packing_end_time_value']);
    $time_diff = abs($end_time - $start_time) / 3600;
    $time_diff = number_format((float) $time_diff, 2, '.', '');
    $team_count = $data['field_party_packer_team_count_value'];
    $total_time = ($team_count * $time_diff);
    $bill_line = $data['field_bill_lines_value'];
    $transaction_date = strtotime($data['field_party_packing_date_value']);
    
    $row['transaction_date'] = date('d-m-Y',$transaction_date);
    $row['party_packer_name'] = $data['field_party_packer_name_value'];
    $row['party_packing_sup'] = $data['field_party_packing_supervisor_value'];
    if($data['field_party_packing_type_value'] == 1) {
      $row['party_packing_type'] = 'PP';
      $row['target'] = $target_data['PP'];
    }
    if($data['field_party_packing_type_value'] == 0){
      $row['party_packing_type'] = 'NON-PP';
      $row['target'] = $target_data['NON-PP'];
    }
    $row['bill_lines'] = $bill_line;
    $row['party_packing_start_time'] = $data['field_party_packing_start_time_value'];
    $row['party_packing_end_time'] = $data['field_party_packing_end_time_value'];
    $row['party_packing_team_count'] = $data['field_party_packer_team_count_value'];

     $rows[] = $row;
  }
  $header = array('Transaction Date', 'Party Packer name', 'Party Packing Supervisor', 'Party Packing Type','Target', 'Sum - Bill Line', 'Start Time', 'End Time', 'Team Count');
  
  $output1['header'] = $header;
  $output1['rows'] = $rows;

  return $output1;
}

/*
 * Function to attach with automailer for picking
 */
function get_attachment_productivity_data_for_picking($start_date, $end_date = FALSE, $dis_id = 60) {
  $query = db_select('node', 'n');
  $query->condition('n.type', 'picking');
  $query->join('field_data_field_distributor', 'fd', 'fd.entity_id = n.uid');
  $query->condition('fd.entity_id', $dis_id, '=');
  $query->join('field_data_field_picking_picking_date', 'ppd', 'ppd.entity_id = n.nid');
  $query->condition('ppd.field_picking_picking_date_value', array($start_date, $end_date), 'BETWEEN');
  $query->orderBy('ppd.field_picking_picking_date_value', 'DESC');
  $query->join('field_data_field_picking_godown_area_id', 'gai', 'gai.entity_id = n.nid');
  $query->join('field_data_field_picking_picking_type', 'pt', 'pt.entity_id = n.nid');
  $query->join('field_data_field_pick_lines', 'lsl', 'lsl.entity_id = n.nid');
  $query->join('field_data_field_picking_start_time', 'pst', 'pst.entity_id = n.nid');
  $query->join('field_data_field_picking_end_time', 'pet', 'pet.entity_id = n.nid');
  $query->join('field_data_field_picking_status', 'ps', 'ps.entity_id = n.nid');
  $query->condition('ps.field_picking_status_value', 2, "=");
  $query->join('field_data_field_picking_picking_team_count', 'tc', 'tc.entity_id = n.nid');
  $query->join('field_data_field_picking_pick_supervisor', 'pps', 'pps.entity_id = n.nid');
  $query->leftjoin('field_data_field_picking_picker_name', 'pn', 'pn.entity_id = n.nid');
  $query->fields('pn', array('field_picking_picker_name_value'));
  $query->fields('gai', array('field_picking_godown_area_id_value'));
  $query->fields('pt', array('field_picking_picking_type_value'));
  $query->fields('lsl', array('field_pick_lines_value'));
  $query->fields('pst', array('field_picking_start_time_value'));
  $query->fields('pet', array('field_picking_end_time_value'));

  $query->fields('ppd', array('field_picking_picking_date_value'));
  $query->fields('ps', array('field_picking_status_value'));
  $query->fields('tc', array('field_picking_picking_team_count_value'));
  $query->fields('pps', array('field_picking_pick_supervisor_value'));
  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  
  $target_data = leanbox_dashboard_target_value_using_voc_name('productivity target');
  foreach ($res as $data) {
    $start_time = strtotime($data['field_picking_start_time_value']);
    $end_time = strtotime($data['field_picking_end_time_value']);
    $time_diff = abs(($end_time - $start_time) / 3600);
    $time_diff = number_format((float) $time_diff, 2, '.', '');
    $team_count = $data['field_picking_picking_team_count_value'];
    $total_time = ($team_count * $time_diff);
    $loading_line = $data['field_pick_lines_value'];
    $transaction_date = strtotime($data['field_picking_picking_date_value']);
    
    $row['transaction_date'] = date('d-m-Y',$transaction_date);
    $row['picker_name'] = $data['field_picking_picker_name_value'];
    $row['picker_sup'] = $data['field_picking_pick_supervisor_value'];
    $row['godwon_area_id'] = $data['field_picking_godown_area_id_value'];
    $row['picking_type'] = $data['field_picking_picking_type_value'];
    $row['loading_lines'] = $loading_line;
    $row['picking_start_time'] = $data['field_picking_start_time_value'];
    $row['picking_end_time'] = $data['field_picking_end_time_value'];
    $row['picking_team_count'] = $data['field_picking_picking_team_count_value'];
    $target = strtolower($data['field_picking_godown_area_id_value'].' '.$data['field_picking_picking_type_value']);
    $row['target'] = $target_data[$target];
    
    $rows[] = $row;
  }
  $header = array('Transaction Date', 'Picker Name', 'Picking Supervisor', 'Godown Area Id', 'Picking Type', 'Sum - Loading Sheet Line', 'Start Time', 'End Time', 'Team Count', 'Target');
  
  $output1['header'] = $header;
  $output1['rows'] = $rows;

  return $output1;
}

/*
 * Function to attach with automailer for loose confirmation
 */
function get_attachment_productivity_data_for_loose_confirmation($start_date, $end_date = FALSE, $dis_id = 60) {
  $query = db_select('node', 'n');
  $query->condition('n.type', 'pick_confirm');
  $query->join('field_data_field_distributor', 'fd', 'fd.entity_id = n.uid');
  $query->condition('fd.entity_id', $dis_id, '=');
  $query->join('field_data_field_pc_picking_date', 'ppd', 'ppd.entity_id = n.nid');
  $query->condition('ppd.field_pc_picking_date_value', array($start_date, $end_date), 'BETWEEN');
  $query->orderBy('ppd.field_pc_picking_date_value', 'DESC');
  $query->join('field_data_field_pc_picking_type', 'pt', 'pt.entity_id = n.nid');
  $query->join('field_data_field_pc_pick_lines', 'lsl', 'lsl.entity_id = n.nid');
  $query->join('field_data_field_pc_start_time', 'pst', 'pst.entity_id = n.nid');
  $query->join('field_data_field_pc_end_time', 'pet', 'pet.entity_id = n.nid');
  $query->join('field_data_field_pc_status', 'ps', 'ps.entity_id = n.nid');
  $query->condition('ps.field_pc_status_value', 2, "=");
  $query->join('field_data_field_pc_team_count', 'tc', 'tc.entity_id = n.nid');
  $query->join('field_data_field_pc_pick_supervisor', 'pps', 'pps.entity_id = n.nid');
  $query->leftjoin('field_data_field_pc_picker_name', 'pn', 'pn.entity_id = n.nid');

  $query->fields('pn', array('field_pc_picker_name_value'));
  $query->fields('pt', array('field_pc_picking_type_value'));
  $query->fields('lsl', array('field_pc_pick_lines_value'));
  $query->fields('pst', array('field_pc_start_time_value'));
  $query->fields('pet', array('field_pc_end_time_value'));
  $query->fields('ppd', array('field_pc_picking_date_value'));
  $query->fields('ps', array('field_pc_status_value'));
  $query->fields('tc', array('field_pc_team_count_value'));
  $query->fields('pps', array('field_pc_pick_supervisor_value'));
  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  foreach ($res as $data) {
    $start_time = strtotime($data['field_pc_start_time_value']);
    $end_time = strtotime($data['field_pc_end_time_value']);
    $time_diff = abs(($end_time - $start_time) / 3600);
    $time_diff = number_format((float) $time_diff, 2, '.', '');
    $team_count = $data['field_pc_team_count_value'];
    $total_time = ($team_count * $time_diff);
    $loading_line = $data['field_pc_pick_lines_value'];
    $transaction_date = strtotime($data['field_pc_picking_date_value']);
    
    $row['transaction_date'] = date('d-m-Y',$transaction_date);
    $row['pick_confirm_name'] = $data['field_pc_picker_name_value'];
    $row['pick_confirm_sup'] = $data['field_pc_pick_supervisor_value'];
    $row['picking_type'] = $data['field_pc_picking_type_value'];
    $row['loading_lines'] = $loading_line;
    $row['picking_start_time'] = $data['field_pc_start_time_value'];
    $row['picking_end_time'] = $data['field_pc_end_time_value'];
    $row['picking_team_count'] = $data['field_pc_team_count_value'];
    
    $rows[] = $row;
  }
  
  $header = array('Transaction Date', 'Pick Confirm Name', 'Pick Confirm Supervisor', 'Picking Type', 'Sum - Loading Sheet Line', 'Start Time', 'End Time', 'Team Count');
   
  $output1['header'] = $header;
  $output1['rows'] = $rows;

  return $output1;
}

function send_loading_productivity_emailer() {
  $distributor_id = _DISTRIBUTOR_ID;
  $distributor_name = change_feeds_import_get_distributor_name($distributor_id);
  //$end_date = strtotime('-7 day', date('Y-m-d'));
  //$todays_date_date = strtotime(date('Y-m-d 00:00:00'));
  $end_date = date('Y-m-d', strtotime('-7 day', strtotime(date('Y-m-d'))));
  $todays_date_date = date('Y-m-d');
  $target_data = leanbox_dashboard_target_value_using_voc_name('productivity target');
  
  //Loading Productivity Mailer
  $loading_html = get_email_productivity_data_for_loading($end_date, $todays_date_date, $distributor_id);
  
  $params['subject'] = "Loading Productivity Status-$distributor_name";
  $params['body'] = $loading_html;
  $mail_to = variable_get('loading_productivity_status_to_email');
  $from = variable_get('from_email');

  drupal_mail('email_status', 'daily_data', $mail_to, LANGUAGE_NONE, $params, $from);
}

function get_todays_party_packing_created_data($loading_date, $distributor_id = 60) {
  $query = db_select('node', 'n');
  $query->condition('n.type', 'party_packing');
  $query->join('field_data_field_distributor', 'fd', 'fd.entity_id = n.uid');
  $query->condition('fd.entity_id', $distributor_id, '=');
  $query->join('field_data_field_party_packing_loading_date', 'd', 'd.entity_id = n.nid');
  $query->condition('d.field_party_packing_loading_date_value', $loading_date, "=");
  $query->leftjoin('field_data_field__party_packingstatus', 's', 's.entity_id = n.nid');
  $query->leftjoin('field_data_field_party_packing_check', 'ppc', 'ppc.entity_id = n.nid');
  $query->condition('ppc.field_party_packing_check_value', 1, "=");
  $query->leftjoin('field_data_field_party_packing_type', 'ppt', 'ppt.entity_id = n.nid');
  $query->fields('d', array('field_party_packing_loading_date_value'));
  $query->fields('n', array('nid'));
  $query->fields('s', array('field__party_packingstatus_value'));
  $query->fields('ppc', array('field_party_packing_check_value'));
  $query->fields('ppt', array('field_party_packing_type_value'));
  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  $party_picking_count = count($res);
  foreach ($res as $key => $value) {

    $check = $value['field_party_packing_type_value'];
    $status = $value['field__party_packingstatus_value'];
    if ($check == 0) {
      $non_pp++;
      if ($status == 2) {
        $non_pp_comleted++;
      }
      if ($status == 1) {
        $non_pp_process++;
      }
      if ($status == 0) {
        $non_pp_pending++;
      }
    }
    else {
      $pp++;
      if ($status == 2) {
        $pp_comleted++;
      }
      if ($status == 1) {
        $pp_process++;
      }
      if ($status == 0) {
        $pp_pending++;
      }
    }
  }
  $party_packing['non_pp'] = $non_pp;
  $party_packing['non_pp_completed'] = $non_pp_comleted;
  $party_packing['non_pp_process'] = $non_pp_process;
  $party_packing['non_pp_pending'] = $non_pp_pending;
  $party_packing['pp'] = $pp;
  $party_packing['pp_completed'] = $pp_comleted;
  $party_packing['pp_process'] = $pp_process;
  $party_packing['pp_pending'] = $pp_pending;

  return $party_packing;
}

function get_todays_picking_created_data($loading_date, $distributor_id = 60) {
  $query = db_select('node', 'n');
  $query->condition('n.type', 'picking');
  $query->join('field_data_field_distributor', 'fd', 'fd.entity_id = n.uid');
  $query->condition('fd.entity_id', $distributor_id, '=');
  $query->join('field_data_field_picking_loading_date', 'd', 'd.entity_id = n.nid');
  $query->condition('d.field_picking_loading_date_value', $loading_date, "=");
  $query->leftjoin('field_data_field_picking_status', 's', 's.entity_id = n.nid');
  $query->leftjoin('field_data_field_picking_godown_area_id', 'g', 'g.entity_id = n.nid');
  $query->orderBy('g.field_picking_godown_area_id_value', 'ASC'); //ORDER BY created
  $query->join('field_data_field_picking_picking_type', 'pt', 'pt.entity_id = n.nid');
  $query->fields('d', array('field_picking_loading_date_value'));
  $query->fields('n', array('nid'));
  $query->fields('s', array('field_picking_status_value'));
  $query->fields('g', array('field_picking_godown_area_id_value'));
  $query->fields('pt', array('field_picking_picking_type_value'));
  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  foreach ($res as $key => $value) {
    $godown = $value['field_picking_godown_area_id_value'];
    $status = $value['field_picking_status_value'];
    $type = $value['field_picking_picking_type_value'];
    if (isset($res[$godown])) {
      if ($type == "Loose") {
        $picking[$godown]['picking_loose'] ++;
        if ($status == 2) {
          $picking[$godown]['picking_loose_comleted'] ++;
        }
        if ($status == 1) {
          $picking[$godown]['picking_loose_process'] ++;
        }
        if ($status == 0) {
          $picking[$godown]['picking_loose_pending'] ++;
        }
      }
      if ($type == "Bulk") {
        $picking[$godown]['picking_Bulk'] ++;
        if ($status == 2) {
          $picking_bulk_comleted++;
          $picking[$godown]['picking_bulk_comleted'] ++;
        }
        if ($status == 1) {
          $picking[$godown]['picking_bulk_process'] ++;
        }
        if ($status == 0) {
          $picking[$godown]['picking_bulk_pending'] ++;
        }
      }
    }
    else {
      $res[$godown] = array();
      $picking_type = $value['field_picking_picking_type_value'];
      if ($type == "Loose") {
        $picking[$godown]['picking_loose'] = 1;
        if ($status == 2) {
          $picking[$godown]['picking_loose_comleted'] = 1;
        }
        if ($status == 1) {
          $picking[$godown]['picking_loose_process'] = 1;
        }
        if ($status == 0) {
          $picking[$godown]['picking_loose_pending'] = 1;
        }
      }
      if ($type == "Bulk") {
        $picking[$godown]['picking_Bulk'] = 1;
        if ($status == 2) {
          $picking[$godown]['picking_bulk_comleted'] = 1;
        }
        if ($status == 1) {
          $picking[$godown]['picking_bulk_process'] = 1;
        }
        if ($status == 0) {
          $picking[$godown]['picking_bulk_pending'] = 1;
        }
      }
    }
  }

  return $picking;
}

function get_todays_unloading_created_data($loading_date, $distributor_id = 60) {
  $query = db_select('node', 'n');
  $query->condition('n.type', 'egir');
  $query->join('field_data_field_distributor', 'fd', 'fd.entity_id = n.uid');
  $query->condition('fd.entity_id', $distributor_id, '=');
  $query->leftjoin('field_data_field_egir_date', 'd', 'd.entity_id = n.nid');
  $query->condition('d.field_egir_date_value', $loading_date, "=");
  $query->leftjoin('field_data_field_unloading_status', 's', 's.entity_id = n.nid');
  $query->fields('d', array('field_egir_date_value'));
  $query->fields('n', array('nid'));
  $query->fields('s', array('field_unloading_status_value'));
  $query->fields('fd', array('field_distributor_value'));
  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  $egir_count = count($res);
  foreach ($res as $key => $value) {
    $status = $value['field_unloading_status_value'];
    if ($status == 2) {
      $egir_comleted++;
    }
    if ($status == 1) {
      $egir_in_process++;
    }
    if ($status == 0) {
      $egir_pending++;
    }
  }
  $egir['egir_count'] = $egir_count;
  $egir['egir_completed'] = $egir_comleted;
  $egir['egir_in_process'] = $egir_in_process;
  $egir['egir_pending'] = $egir_pending;
  return $egir;
}

/**
 * Send Email For Loading Productivity
 * @param type $start_date
 * @param type $end_date
 * @param type $dis_id
 * @return type
 */
function get_email_productivity_data_for_loading($start_date, $end_date = FALSE, $dis_id = 60) {
  $query = db_select('node', 'n');
  $query->condition('n.type', 'dispatch_data');
  $query->join('field_data_field_distributor', 'fd', 'fd.entity_id = n.uid');
  $query->condition('fd.entity_id', $dis_id, '=');
  //$query->condition('n.changed', array($start_date, $end_date), 'BETWEEN');
  //$query->orderBy('n.changed', 'DESC');
  $query->join('field_data_field_dispatch_date', 'dd', 'dd.entity_id = n.nid');
  $query->condition('dd.field_dispatch_date_value', array($start_date, $end_date), 'BETWEEN');
  $query->orderBy('dd.field_dispatch_date_value', 'DESC');
  $query->leftjoin('field_data_field_vehicle_no', 'vno', 'vno.entity_id = n.nid');
  $query->leftjoin('field_data_field_dispatch_bill_value', 'dis', 'dis.entity_id = n.nid');
  $query->leftjoin('field_data_field_bill_count', 'bc', 'bc.entity_id = n.nid');
  $query->leftjoin('field_data_field_dispatch_pre_start_time', 'dst', 'dst.entity_id = n.nid');
  $query->leftjoin('field_data_field_dispatch_start_time', 'det', 'det.entity_id = n.nid');
  $query->leftjoin('field_data_field_dispatch_status', 'ds', 'ds.entity_id = n.nid');
  $query->condition('ds.field_dispatch_status_value', 1, "=");
  //$query->leftjoin('field_data_field_dispatch_loader_team_count', 'tc', 'tc.entity_id = n.nid');
  $query->leftjoin('field_data_field_dispatch_supervisor', 'pps', 'pps.entity_id = n.nid');
  $query->fields('bc', array('field_bill_count_value'));
  $query->fields('dis', array('field_dispatch_bill_value_value'));
  $query->fields('vno', array('field_vehicle_no_value'));
  $query->fields('dst', array('field_dispatch_pre_start_time_value'));
  $query->fields('det', array('field_dispatch_start_time_value'));
  //$query->fields('n', array('nid', 'changed'));
  $query->fields('dd', array('field_dispatch_date_value'));
  $query->fields('ds', array('field_dispatch_status_value'));
  //$query->fields('tc', array('field_dispatch_loader_team_count_value'));
  $query->fields('pps', array('field_dispatch_supervisor_value'));
  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  $table_data = array();
  foreach ($res as $value) {
    $dispatch_date = strtotime($value['field_dispatch_date_value']);
    $date = date('d-m-Y', $dispatch_date);
    $supervisor = $value['field_dispatch_supervisor_value'];
    $start_time = strtotime($value['field_dispatch_pre_start_time_value']);
    $end_time = strtotime($value['field_dispatch_start_time_value']);
    $time_per_transaction = abs($end_time - $start_time) / 60;
    //$team_count = $value['field_dispatch_loader_team_count_value'];
    //$time_per_transaction = ($team_count * $time_diff);
    $table_data[$date][$supervisor]['transaction_date'] = $date;
    $table_data[$date][$supervisor]['supervisor_name'] = $supervisor;
    $table_data[$date][$supervisor]['vehicle'][$value['field_vehicle_no_value']] = $value['field_vehicle_no_value'];
    $table_data[$date][$supervisor]['dispatch_value'] += $value['field_dispatch_bill_value_value'];
    $table_data[$date][$supervisor]['bill_count'] += $value['field_bill_count_value'];
    $table_data[$date][$supervisor]['total_time'] += $time_per_transaction;
  }

  $loading_productivity_html = "<h3>Loading Productivity For Last 7 Days</h3></br><h3>Loading Status (status:Completed)</h3><table class = 'pp-superwise-table' border='1' cellpadding='5' cellspacing='0'  style='color:#000; font-size: 13px;font-family: arial'>"
    . "<th>Transaction Date</th>"
    . "<th>Loading Supervisor</th>"
    . "<th>Count of Vehicle Loaded</th>"
    . "<th>Total Dispatch Value</th>"
    . "<th>Total Bill Count</th>"
    . "<th>Total Time Taken in Mins</th>"
    . "<th>Productivity (Dispatch Value/Hr)</th>"
    . "<th>Productivity (Dispatch Value/10Mins)</th>";

  foreach ($table_data as $trannsaction_date => $data) {
    foreach ($data as $key => $value) {
      $productivity_per_min = round(($value['dispatch_value'] / $value['total_time']) * 10);
      $productivity_per_hour = $productivity_per_min * 6;
      $loading_productivity_html .= "<tr><td style = 'border:1px solid #000;'>" . $value['transaction_date'] . "</td>";
      $loading_productivity_html .= "<td style = 'border:1px solid #000;'>" . $value['supervisor_name'] . "</td>";
      $loading_productivity_html .= "<td style = 'border:1px solid #000;'>" . count($value['vehicle']) . "</td>";
      $loading_productivity_html .= "<td style = 'border:1px solid #000;'>" . $value['dispatch_value'] . "</td>";
      $loading_productivity_html .= "<td style = 'border:1px solid #000;'>" . $value['bill_count'] . "</td>";
      $loading_productivity_html .= "<td style = 'border:1px solid #000;'>" . $value['total_time'] . "</td>";
      $loading_productivity_html .= "<td style = 'border:1px solid #000;'>" . $productivity_per_hour . "</td>";
      $loading_productivity_html .= "<td style = 'border:1px solid #000;'>" . $productivity_per_min . "</td></tr>";
    }
  }
  $loading_productivity_html .= "</table>";
  return $loading_productivity_html;
}

/**
 * Send Email For Loose Confirmation Productivity
 * @param type $start_date
 * @param type $end_date
 * @param type $dis_id
 * @return type
 */
function get_email_productivity_data_for_loose_confirmation($start_date, $end_date = FALSE, $dis_id = 60) {
  $query = db_select('node', 'n');
  $query->condition('n.type', 'pick_confirm');
  $query->join('field_data_field_distributor', 'fd', 'fd.entity_id = n.uid');
  $query->condition('fd.entity_id', $dis_id, '=');
  //$query->condition('n.changed', array($start_date, $end_date), 'BETWEEN');
  //$query->orderBy('n.changed', 'DESC');
  $query->join('field_data_field_pc_picking_date', 'ppd', 'ppd.entity_id = n.nid');
  $query->condition('ppd.field_pc_picking_date_value', array($start_date, $end_date), 'BETWEEN');
  $query->orderBy('ppd.field_pc_picking_date_value', 'DESC');
  $query->join('field_data_field_pc_picking_type', 'pt', 'pt.entity_id = n.nid');
  $query->join('field_data_field_pc_pick_lines', 'lsl', 'lsl.entity_id = n.nid');
  $query->join('field_data_field_pc_start_time', 'pst', 'pst.entity_id = n.nid');
  $query->join('field_data_field_pc_end_time', 'pet', 'pet.entity_id = n.nid');
  $query->join('field_data_field_pc_status', 'ps', 'ps.entity_id = n.nid');
  $query->condition('ps.field_pc_status_value', 2, "=");
  $query->join('field_data_field_pc_team_count', 'tc', 'tc.entity_id = n.nid');
  $query->join('field_data_field_pc_pick_supervisor', 'pps', 'pps.entity_id = n.nid');
  $query->leftjoin('field_data_field_pc_picker_name', 'pn', 'pn.entity_id = n.nid');

  $query->fields('pn', array('field_pc_picker_name_value'));
  $query->fields('pt', array('field_pc_picking_type_value'));
  $query->fields('lsl', array('field_pc_pick_lines_value'));
  $query->fields('pst', array('field_pc_start_time_value'));
  $query->fields('pet', array('field_pc_end_time_value'));
  //$query->fields('n', array('nid', 'changed'));
  $query->fields('ppd', array('field_pc_picking_date_value'));
  $query->fields('ps', array('field_pc_status_value'));
  $query->fields('tc', array('field_pc_team_count_value'));
  $query->fields('pps', array('field_pc_pick_supervisor_value'));
  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  $picking = array();
  foreach ($res as $value) {
    $start_time = strtotime($value['field_pc_start_time_value']);
    $end_time = strtotime($value['field_pc_end_time_value']);
    $time_diff = abs(($end_time - $start_time) / 3600);
    $time_diff = number_format((float) $time_diff, 2, '.', '');
    $loading_line = $value['field_pc_pick_lines_value'];
    $team_count = $value['field_pc_team_count_value'];
    $total_time = ($team_count * $time_diff);

    $picker_name = $value['field_pc_picker_name_value'];
    $type = $value['field_pc_picking_type_value'];
    //$transaction_date = date('Y-m-d', $value['changed']);
    $transaction_date = $value['field_pc_picking_date_value'];

    if (isset($res[$picker_name])) {
      if ($type == "Loose") {
        $picking[$transaction_date][$picker_name][$type]['loading_sheet_line'] += $loading_line;
        $picking[$transaction_date][$picker_name][$type]['total_tme'] += $total_time;
        //$productivity_per = ($loading_line / $total_time);
        //$picking[$transaction_date][$picker_name][$type]['productivity'] = round($productivity_per);
      }
      if ($type == "Bulk") {
        $picking[$transaction_date][$picker_name][$type]['loading_sheet_line'] += $loading_line;
        $picking[$transaction_date][$picker_name][$type]['total_tme'] += $total_time;
        //$productivity_per = ($loading_line / $total_time);
        //$picking[$transaction_date][$picker_name][$type]['productivity'] = round($productivity_per);
      }
    }
    else {
      $res[$picker_name] = array();
      if ($type == "Loose") {
        $picking[$transaction_date][$picker_name][$type]['loading_sheet_line'] = $loading_line;
        $picking[$transaction_date][$picker_name][$type]['total_tme'] = $total_time;
        //$productivity_per = ($loading_line / $total_time);
        //$picking[$transaction_date][$picker_name][$type]['productivity'] = round($productivity_per);
      }
      if ($type == "Bulk") {
        $picking[$transaction_date][$picker_name][$type]['loading_sheet_line'] = $loading_line;
        $picking[$transaction_date][$picker_name][$type]['total_tme'] = $total_time;
        //$productivity_per = ($loading_line / $total_time);
       //$picking[$transaction_date][$picker_name][$type]['productivity'] = round($productivity_per);
      }
    }
    $picking[$transaction_date][$picker_name][$type]['pc_picker_name'] = $picker_name;
    $picking[$transaction_date][$picker_name][$type]['supervisor'] = $value['field_pc_pick_supervisor_value'];
    //$picking[$transaction_date][$picker_name][$type]['updated_date'] = date('Y-m-d', $value['changed']);
    $pick_confirm_date = strtotime($transaction_date);
    $picking[$transaction_date][$picker_name][$type]['pick_confirm_date'] = date('d-m-Y', $pick_confirm_date);
    $picking[$transaction_date][$picker_name][$type]['picking_type'] = $type;
  }

  $loose_confirm_productivity_html = "<h3>Loose Confirmation Productivity For Last 7 Days</h3></br><h3>Loose Confirmation (status:Completed)</h3><table class = 'pp-superwise-table' border='1' cellpadding='5' cellspacing='0'  style='color:#000; font-size: 13px;font-family: arial'>"
    . "<th>Transaction Date</th>"
    . "<th>Pick Confirm Name</th>"
    . "<th>Pick Confirm Supervisor</th>"
    . "<th>Picking Type</th>"
    . "<th>Sum - Loading Sheet Line</th>"
    . "<th>Sum - Time Duration</th>"
    . "<th>Productivity</th>";
  
  if($picking) {
    foreach ($picking as $transaction_date => $data) {
      foreach ($data as $key => $value) {
        foreach ($value as $k => $result) {
          $productivity = round($result['loading_sheet_line'] / $result['total_tme']);
          $loose_confirm_productivity_html .= "<tr><td style = 'border:1px solid #000;'>" . $result['pick_confirm_date'] . "</td>";
          $loose_confirm_productivity_html .= "<td style = 'border:1px solid #000;'>" . $result['pc_picker_name'] . "</td>";
          $loose_confirm_productivity_html .= "<td style = 'border:1px solid #000;'>" . $result['supervisor'] . "</td>";
          $loose_confirm_productivity_html .= "<td style = 'border:1px solid #000;'>" . $result['picking_type'] . "</td>";
          $loose_confirm_productivity_html .= "<td style = 'border:1px solid #000;'>" . $result['loading_sheet_line'] . "</td>";
          $loose_confirm_productivity_html .= "<td style = 'border:1px solid #000;'>" . $result['total_tme'] . "</td>";
          $loose_confirm_productivity_html .= "<td style = 'border:1px solid #000;'>" . $productivity . "</td></tr>";
        }
      }
    }
  }
  else{
    $loose_confirm_productivity_html .= "<tr><td style = 'border:1px solid #000;'>No Result Found</td></tr>";
  }
  $loose_confirm_productivity_html .= "</table>";
  return $loose_confirm_productivity_html;
}

/**
 * Send Email Productivity
 * @param type $start_date
 * @param type $end_date
 * @param type $dis_id
 * @return type
 */
function get_email_productivity_data_for_party_packing($start_date, $end_date = FALSE, $dis_id = 60) {
  $query = db_select('node', 'n');
  $query->condition('n.type', 'party_packing');
  $query->join('field_data_field_distributor', 'fd', 'fd.entity_id = n.uid');
  $query->condition('fd.entity_id', $dis_id, '=');
  $query->leftjoin('field_data_field_bill_lines', 'bl', 'bl.entity_id = n.nid');
  $query->leftjoin('field_data_field_party_packer_team_count', 'tc', 'tc.entity_id = n.nid');
  $query->leftjoin('field_data_field_party_packing_start_time', 'st', 'st.entity_id = n.nid');
  $query->leftjoin('field_data_field_party_packing_end_time', 'et', 'et.entity_id = n.nid');
  $query->leftjoin('field_data_field__party_packingstatus', 's', 's.entity_id = n.nid');
  $query->condition('s.field__party_packingstatus_value', 2, "=");
  $query->leftjoin('field_data_field_party_packing_loading_date', 'd', 'd.entity_id = n.nid');
  $query->leftjoin('field_data_field_party_packer_name', 'pn', 'pn.entity_id = n.nid');

  //$query->condition('n.changed', array($start_date, $end_date), 'BETWEEN');
  //$query->orderBy('n.changed', 'DESC');
  $query->join('field_data_field_party_packing_date', 'ppd', 'ppd.entity_id = n.nid');
  $query->condition('ppd.field_party_packing_date_value', array($start_date, $end_date), 'BETWEEN');
  $query->orderBy('ppd.field_party_packing_date_value', 'DESC');
  $query->leftjoin('field_data_field_party_packing_type', 'ppt', 'ppt.entity_id = n.nid');
  $query->leftjoin('field_data_field_party_packing_supervisor', 'pps', 'pps.entity_id = n.nid');
  //$query->fields('n', array('nid', 'changed'));
  $query->fields('ppd', array('field_party_packing_date_value'));
  $query->fields('pn', array('field_party_packer_name_value'));
  $query->fields('bl', array('field_bill_lines_value'));

  $query->fields('tc', array('field_party_packer_team_count_value'));
  $query->fields('st', array('field_party_packing_start_time_value'));
  $query->fields('et', array('field_party_packing_end_time_value'));
  $query->fields('s', array('field__party_packingstatus_value'));
  $query->fields('ppt', array('field_party_packing_type_value'));
  $query->fields('pps', array('field_party_packing_supervisor_value'));
  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  $party_packing = array();
  foreach ($res as $value) {
    $start_time = strtotime($value['field_party_packing_start_time_value']);
    $end_time = strtotime($value['field_party_packing_end_time_value']);
    $time_diff = abs($end_time - $start_time) / 3600;
    $time_diff = number_format((float) $time_diff, 2, '.', '');
    $type = $value['field_party_packing_type_value'];
    $bill_line = $value['field_bill_lines_value'];
    $team_count = $value['field_party_packer_team_count_value'];
    $total_time = ($team_count * $time_diff);
    //$transaction_date = date('Y-m-d', $value['changed']);
    $transaction_date = $value['field_party_packing_date_value'];
    $party_packer_n = $value['field_party_packer_name_value'];

    if (isset($res[$party_packer_n])) {
      if ($type == 1) { // type is PP
        $party_packing[$transaction_date][$party_packer_n][$type]['pp_bill_lines'] += $bill_line;
        $party_packing[$transaction_date][$party_packer_n][$type]['pp_time'] += $total_time;
        $party_packing[$transaction_date][$party_packer_n][$type]['packer_type'] = 'PP';
        //$productivity_per = ($bill_line / $total_time);
        //$party_packing[$transaction_date][$party_packer_n][$type]['productivity'] = round($productivity_per);
      }
      if ($type == 0) { //type is NON-PP
        $party_packing[$transaction_date][$party_packer_n][$type]['pp_bill_lines'] += $bill_line;
        $party_packing[$transaction_date][$party_packer_n][$type]['pp_time'] += $total_time;
        $party_packing[$transaction_date][$party_packer_n][$type]['packer_type'] = 'NON-PP';
        //$productivity_per = ($bill_line / $total_time);
        //$party_packing[$transaction_date][$party_packer_n][$type]['productivity'] = round($productivity_per);
      }
    }
    else {
      $res[$party_packer_n] = array();
      if ($type == 1) { // type is PP
        $party_packing[$transaction_date][$party_packer_n][$type]['pp_bill_lines'] = $bill_line;
        $party_packing[$transaction_date][$party_packer_n][$type]['pp_time'] = $total_time;
        $party_packing[$transaction_date][$party_packer_n][$type]['packer_type'] = 'PP';
        //$productivity_per = ($bill_line / $total_time);
        //$party_packing[$transaction_date][$party_packer_n][$type]['productivity'] = round($productivity_per);
      }
      if ($type == 0) { //type is NON-PP
        $party_packing[$transaction_date][$party_packer_n][$type]['pp_bill_lines'] = $bill_line;
        $party_packing[$transaction_date][$party_packer_n][$type]['pp_time'] = $total_time;
        $party_packing[$transaction_date][$party_packer_n][$type]['packer_type'] = 'NON-PP';
        //$productivity_per = ($bill_line / $total_time);
        //$party_packing[$transaction_date][$party_packer_n][$type]['productivity'] = round($productivity_per);
      }
    }

    //$party_packing[$transaction_date][$party_packer_n][$type]['updated_date'] = $transaction_date;
    $party_packing_date = strtotime($transaction_date);
    $party_packing[$transaction_date][$party_packer_n][$type]['party_packing_date'] = date('d-m-Y',$party_packing_date);
    $party_packing[$transaction_date][$party_packer_n][$type]['supervisor_name'] = $value['field_party_packing_supervisor_value'];
    $party_packing[$transaction_date][$party_packer_n][$type]['party_packer_name'] = $party_packer_n;
  }

  $target_data = leanbox_dashboard_target_value_using_voc_name('productivity target');
  $party_pack_datewise_html = "<h3>Party Packing Productivity For Last 7 Days</h3></br><h3>Party Packing (status:Completed)</h3><table class = 'pp-superwise-table' border='1' cellpadding='5' cellspacing='0'  style='color:#000; font-size: 13px;font-family: arial'>"
    . "<th>Transaction Date</th>"
    . "<th>Party Packer name</th>"
    . "<th>Party Packing Supervisor</th>"
    . "<th>Party Packing Type</th>"
    . "<th>Sum - Bill Line</th>"
    . "<th>Sum - Total Time</th>"
    . "<th>Productivity</th>"
    . "<th>Target</th>";

  if($party_packing) {
    foreach ($party_packing as $transaction_date => $data) {
      foreach ($data as $key => $value) {
        foreach ($value as $k => $result) {
          $productivity = round($result['pp_bill_lines'] / $result['pp_time']);
          $party_pack_datewise_html .= "<tr><td style = 'border:1px solid #000;'>" . $result['party_packing_date'] . "</td>";
          $party_pack_datewise_html .= "<td style = 'border:1px solid #000;'>" . $result['party_packer_name'] . "</td>";
          $party_pack_datewise_html .= "<td style = 'border:1px solid #000;'>" . $result['supervisor_name'] . "</td>";
          $party_pack_datewise_html .= "<td style = 'border:1px solid #000;'>" . $result['packer_type'] . "</td>";
          $party_pack_datewise_html .= "<td style = 'border:1px solid #000;'>" . $result['pp_bill_lines'] . "</td>";
          $party_pack_datewise_html .= "<td style = 'border:1px solid #000;'>" . $result['pp_time'] . "</td>";
          $party_pack_datewise_html .= "<td style = 'border:1px solid #000;'>" . $productivity . "</td>";
          $party_pack_datewise_html .= "<td style = 'border:1px solid #000;'>" . $target_data[$result['packer_type']] . "</td></tr>";
        }
      }
    }
  }
  else {
    $party_pack_datewise_html .= "<tr><td style = 'border:1px solid #000;'>No Result Found</td></tr>";
  }
  $party_pack_datewise_html .= "</table>";
  return $party_pack_datewise_html;
}

/**
 * email productivity for picking
 * @param type $start_date
 * @param type $end_date
 * @param type $dis_id
 * @return type
 */
function get_email_productivity_data_for_picking($start_date, $end_date = FALSE, $dis_id = 60) {
  $query = db_select('node', 'n');
  $query->condition('n.type', 'picking');
  $query->join('field_data_field_distributor', 'fd', 'fd.entity_id = n.uid');
  $query->condition('fd.entity_id', $dis_id, '=');
  //$query->condition('n.changed', array($start_date, $end_date), 'BETWEEN');
  //$query->orderBy('n.changed', 'DESC');
  $query->join('field_data_field_picking_picking_date', 'ppd', 'ppd.entity_id = n.nid');
  $query->condition('ppd.field_picking_picking_date_value', array($start_date, $end_date), 'BETWEEN');
  $query->orderBy('ppd.field_picking_picking_date_value', 'DESC');
  $query->join('field_data_field_picking_godown_area_id', 'gai', 'gai.entity_id = n.nid');
  $query->join('field_data_field_picking_picking_type', 'pt', 'pt.entity_id = n.nid');
  $query->join('field_data_field_pick_lines', 'lsl', 'lsl.entity_id = n.nid');
  $query->join('field_data_field_picking_start_time', 'pst', 'pst.entity_id = n.nid');
  $query->join('field_data_field_picking_end_time', 'pet', 'pet.entity_id = n.nid');
  $query->join('field_data_field_picking_status', 'ps', 'ps.entity_id = n.nid');
  $query->condition('ps.field_picking_status_value', 2, "=");
  $query->join('field_data_field_picking_picking_team_count', 'tc', 'tc.entity_id = n.nid');
  $query->join('field_data_field_picking_pick_supervisor', 'pps', 'pps.entity_id = n.nid');
  $query->leftjoin('field_data_field_picking_picker_name', 'pn', 'pn.entity_id = n.nid');
  $query->fields('pn', array('field_picking_picker_name_value'));
  $query->fields('gai', array('field_picking_godown_area_id_value'));
  $query->fields('pt', array('field_picking_picking_type_value'));
  $query->fields('lsl', array('field_pick_lines_value'));
  $query->fields('pst', array('field_picking_start_time_value'));
  $query->fields('pet', array('field_picking_end_time_value'));
  //$query->fields('n', array('nid', 'changed'));
  $query->fields('ppd', array('field_picking_picking_date_value'));
  $query->fields('ps', array('field_picking_status_value'));
  $query->fields('tc', array('field_picking_picking_team_count_value'));
  $query->fields('pps', array('field_picking_pick_supervisor_value'));
  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  foreach ($res as $value) {
    $start_time = strtotime($value['field_picking_start_time_value']);
    $end_time = strtotime($value['field_picking_end_time_value']);
    $time_diff = abs(($end_time - $start_time) / 3600);
    $time_diff = number_format((float) $time_diff, 2, '.', '');
    $loading_line = $value['field_pick_lines_value'];
    $team_count = $value['field_picking_picking_team_count_value'];
    $total_time = ($team_count * $time_diff);
    $picker_n = $value['field_picking_picker_name_value'];
    $type = $value['field_picking_picking_type_value'];
    $godown = $value['field_picking_godown_area_id_value'];
    //$transaction_date = date('Y-m-d', $value['changed']);
    $transaction_date = $value['field_picking_picking_date_value'];

    if (isset($res[$picker_n])) {
      if ($type == "Loose") {
        $picking[$transaction_date][$picker_n][$type][$godown]['loading_sheet_line'] += $loading_line;
        $picking[$transaction_date][$picker_n][$type][$godown]['total_time'] += $total_time;
        $picking[$transaction_date][$picker_n][$type][$godown]['picking_type'] = $type;
        $picking[$transaction_date][$picker_n][$type][$godown]['godown'] = $godown;
        //$productivity_per = ($loading_line / $total_time);
        //$picking[$transaction_date][$picker_n][$type]['productivity'] = round($productivity_per);
      }
      if ($type == "Bulk") {
        $picking[$transaction_date][$picker_n][$type][$godown]['loading_sheet_line'] += $loading_line;
        $picking[$transaction_date][$picker_n][$type][$godown]['total_time'] += $total_time;
        $picking[$transaction_date][$picker_n][$type][$godown]['picking_type'] = $type;
        $picking[$transaction_date][$picker_n][$type][$godown]['godown'] = $godown;
        //$productivity_per = ($loading_line / $total_time);
        //$picking[$transaction_date][$picker_n][$type]['productivity'] = round($productivity_per);
      }
    }
    else {
      $res[$picker_n] = array();
      if ($type == "Loose") {
        $picking[$transaction_date][$picker_n][$type][$godown]['loading_sheet_line'] = $loading_line;
        $picking[$transaction_date][$picker_n][$type][$godown]['total_time'] = $total_time;
        $picking[$transaction_date][$picker_n][$type][$godown]['picking_type'] = $type;
        $picking[$transaction_date][$picker_n][$type][$godown]['godown'] = $godown;
        //$productivity_per = ($loading_line / $total_time);
        //$picking[$transaction_date][$picker_n][$type]['productivity'] = round($productivity_per);
      }
      if ($type == "Bulk") {
        $picking[$transaction_date][$picker_n][$type][$godown]['loading_sheet_line'] = $loading_line;
        $picking[$transaction_date][$picker_n][$type][$godown]['total_time'] = $total_time;
        $picking[$transaction_date][$picker_n][$type][$godown]['picking_type'] = $type;
        $picking[$transaction_date][$picker_n][$type][$godown]['godown'] = $godown;
        //$productivity_per = ($loading_line / $total_time);
        //$picking[$transaction_date][$picker_n][$type]['productivity'] = round($productivity_per);
      }
    }
    $picking[$transaction_date][$picker_n][$type][$godown]['picker_name'] = $value['field_picking_picker_name_value'];
    $picking[$transaction_date][$picker_n][$type][$godown]['supervisor_name'] = $value['field_picking_pick_supervisor_value'];
    $picking_date = strtotime($transaction_date);
    $picking[$transaction_date][$picker_n][$type][$godown]['picking_date'] = date('d-m-Y',$picking_date);
  }

  $target_data = leanbox_dashboard_target_value_using_voc_name('productivity target');
  $picking_datewise_html = "<h3>Picking Productivity For Last 7 Days</h3></br><h3>Picking (status:Completed)</h3><table class = 'pp-superwise-table' border='1' cellpadding='5' cellspacing='0'  style='color:#000; font-size: 13px;font-family: arial'>"
    . "<th>Transaction Date</th>"
    . "<th>Picker Name</th>"
    . "<th>Picking Supervisor</th>"
    . "<th>Godown Area Id</th>"
    . "<th>Picking Type</th>"
    . "<th>Sum - Loading Sheet Line</th>"
    . "<th>Sum - Time Duration</th>"
    . "<th>Productivity</th>"
    . "<th>Target</th>";
  if($picking){
    foreach ($picking as $transaction_date => $data) {
      foreach ($data as $key => $value) {
        foreach ($value as $k => $result) {
          foreach($result as $kk => $results) {
          $productivity = round($results['loading_sheet_line'] / $results['total_time']);
          $label = $results['godown'] . ' ' . $results['picking_type'];
          $label_key = strtolower($label);
          $picking_datewise_html .= "<tr><td style = 'border:1px solid #000;'>" . $results['picking_date'] . "</td>";
          $picking_datewise_html .= "<td style = 'border:1px solid #000;'>" . $results['picker_name'] . "</td>";
          $picking_datewise_html .= "<td style = 'border:1px solid #000;'>" . $results['supervisor_name'] . "</td>";
          $picking_datewise_html .= "<td style = 'border:1px solid #000;'>" . $results['godown'] . "</td>";
          $picking_datewise_html .= "<td style = 'border:1px solid #000;'>" . $results['picking_type'] . "</td>";
          $picking_datewise_html .= "<td style = 'border:1px solid #000;'>" . $results['loading_sheet_line'] . "</td>";
          $picking_datewise_html .= "<td style = 'border:1px solid #000;'>" . $results['total_time'] . "</td>";
          $picking_datewise_html .= "<td style = 'border:1px solid #000;'>" . $productivity . "</td>";
          $picking_datewise_html .= "<td style = 'border:1px solid #000;'>" . $target_data[$label_key] . "</td></tr>";
          }
        }
      }
    }
  }
  else {
    $picking_datewise_html .= "<tr><td style = 'border:1px solid #000;'>No Result Found</td></tr>";
  }
  $picking_datewise_html .= "</table>";
  return $picking_datewise_html;
}

/**
 * 
 * @param type $start_date
 * @param type $end_date
 * @param type $dis_id
 * @return type
 */
function get_productivity_data_for_party_packing($start_date, $end_date = FALSE, $dis_id = 60) {
  if ($end_date == FALSE) {
    $end_date = date('Y-m-d'); // dnt change format as date are stored in same format in db
  }


  $query = db_select('node', 'n');
  $query->condition('n.type', 'party_packing');
  $query->join('field_data_field_distributor', 'fd', 'fd.entity_id = n.uid');
  $query->condition('fd.entity_id', $dis_id, '=');
  $query->leftjoin('field_data_field_bill_lines', 'bl', 'bl.entity_id = n.nid');
  $query->leftjoin('field_data_field_party_packer_team_count', 'tc', 'tc.entity_id = n.nid');
  $query->leftjoin('field_data_field_party_packing_start_time', 'st', 'st.entity_id = n.nid');
  $query->leftjoin('field_data_field_party_packing_end_time', 'et', 'et.entity_id = n.nid');
  $query->leftjoin('field_data_field__party_packingstatus', 's', 's.entity_id = n.nid');
  $query->condition('s.field__party_packingstatus_value', 2, "=");
  $query->leftjoin('field_data_field_party_packing_loading_date', 'd', 'd.entity_id = n.nid');
  $query->leftjoin('field_data_field_party_packer_name', 'pn', 'pn.entity_id = n.nid');

  $query->condition('(d.field_party_packing_loading_date_value)', array($start_date, $end_date), 'BETWEEN');
  $query->leftjoin('field_data_field_party_packing_type', 'ppt', 'ppt.entity_id = n.nid');
  $query->leftjoin('field_data_field_party_packing_supervisor', 'pps', 'pps.entity_id = n.nid');
  $query->fields('n', array('nid'));
  $query->fields('d', array('field_party_packing_loading_date_value'));
  $query->fields('pn', array('field_party_packer_name_value'));
  $query->fields('bl', array('field_bill_lines_value'));

  $query->fields('bl', array('field_bill_lines_value'));
  $query->fields('tc', array('field_party_packer_team_count_value'));
  $query->fields('st', array('field_party_packing_start_time_value'));
  $query->fields('et', array('field_party_packing_end_time_value'));
  $query->fields('s', array('field__party_packingstatus_value'));
  $query->fields('d', array('field_party_packing_loading_date_value'));
  $query->fields('ppt', array('field_party_packing_type_value'));
  $query->fields('pps', array('field_party_packing_supervisor_value'));
  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  foreach ($res as $key => $value) {

    $start_time = strtotime($value['field_party_packing_start_time_value']);
    $end_time = strtotime($value['field_party_packing_end_time_value']);
    $time_diff = ($end_time - $start_time) / 3600;
    $time_diff = number_format((float) $time_diff, 2, '.', '');
    $type = $value['field_party_packing_type_value'];
    $bill_line = $value['field_bill_lines_value'];
    $team_count = $value['field_party_packer_team_count_value'];
    $total_time = ($team_count * $time_diff);

    if ($type == 1) {  // type is PP
      $pp_bill_lines += $bill_line;
      $pp_time += $total_time;
      $party_packing['total']['pp_bill_lines'] = $pp_bill_lines;
      $party_packing['total']['pp_time'] = $pp_time;
    }
    if ($type == 0) { //type is NON-PP
      $non_pp_bill_lines += $bill_line;
      $non_time += $total_time;
      $party_packing['total']['non_pp_bill_lines'] = $non_pp_bill_lines;
      $party_packing['total']['non_time'] = $non_time;
    }

    $supervisor = $value['field_party_packing_supervisor_value'];
    if (isset($res[$supervisor])) {

      if ($type == 1) { // type is PP
        $party_packing[$type][$supervisor]['supervisor_pp_bill_lines'] += $bill_line;
        $party_packing[$type][$supervisor]['supervisor_pp_time'] += $total_time;
        $party_packing[$type][$supervisor]['loading_date'] = $value['field_party_packing_loading_date_value'];
        $party_packing[$type][$supervisor]['party_packer_name'] = $value['field_party_packer_name_value'];
        $total_pp_bill_lines += $bill_line;
        $total_pp_total_time += $total_time;
      }
      if ($type == 0) { //type is NON-PP
        $party_packing[$type][$supervisor]['supervisor_non_pp_bill_lines'] += $bill_line;
        $party_packing[$type][$supervisor]['supervisor_non_pp_time'] += $total_time;
        $party_packing[$type][$supervisor]['loading_date'] = $value['field_party_packing_loading_date_value'];
        $party_packing[$type][$supervisor]['party_packer_name'] = $value['field_party_packer_name_value'];

        $total_non_pp_bill_lines += $bill_line;
        $total_non_pp_total_time += $total_time;
      }
    }
    else {
      $res[$supervisor] = array();
      if ($type == 1) { // type is PP
        $party_packing[$type][$supervisor]['supervisor_pp_bill_lines'] = $bill_line;
        $party_packing[$type][$supervisor]['supervisor_pp_time'] = $total_time;
        $party_packing[$type][$supervisor]['loading_date'] = $value['field_party_packing_loading_date_value'];
        $party_packing[$type][$supervisor]['party_packer_name'] = $value['field_party_packer_name_value'];
        $total_pp_bill_lines += $bill_line;
        $total_pp_total_time += $total_time;
      }
      if ($type == 0) { //type is NON-PP
        $party_packing[$type][$supervisor]['supervisor_non_pp_bill_lines'] = $bill_line;
        $party_packing[$type][$supervisor]['supervisor_non_pp_time'] = $total_time;
        $party_packing[$type][$supervisor]['loading_date'] = $value['field_party_packing_loading_date_value'];
        $party_packing[$type][$supervisor]['party_packer_name'] = $value['field_party_packer_name_value'];
        $total_non_pp_bill_lines += $bill_line;
        $total_non_pp_total_time += $total_time;
      }
    }

    if ($type == 1) {
      $party_packing[$type]['total_pp_bill_lines'] = $total_pp_bill_lines;
      $party_packing[$type]['total_pp_total_time'] = $total_pp_total_time;
    }
    if ($type == 0) {
      $party_packing[$type]['total_non_pp_bill_lines'] = $total_non_pp_bill_lines;
      $party_packing[$type]['total_non_pp_total_time'] = $total_non_pp_total_time;
    }
  }

  return $party_packing;
}

/**
 * 
 * @param type $start_date
 * @param type $end_date
 * @param type $dis_id
 * @return type
 */
function get_productivity_data_for_picking($start_date, $end_date = FALSE, $dis_id = 60) {
  if ($end_date == FALSE) {
    $end_date = date('Y-m-d'); // dnt change format as date are stored in same format in db
  }
  $query = db_select('node', 'n');
  $query->condition('n.type', 'picking');
  $query->join('field_data_field_distributor', 'fd', 'fd.entity_id = n.uid');
  $query->condition('fd.entity_id', $dis_id, '=');
  $query->join('field_data_field_picking_loading_date', 'd', 'd.entity_id = n.nid');

  $query->condition('(d.field_picking_loading_date_value)', array($start_date, $end_date), 'BETWEEN');

  $query->join('field_data_field_picking_godown_area_id', 'gai', 'gai.entity_id = n.nid');
  $query->orderBy('gai.field_picking_godown_area_id_value', 'ASC');
  $query->join('field_data_field_picking_picking_type', 'pt', 'pt.entity_id = n.nid');
  $query->join('field_data_field_pick_lines', 'lsl', 'lsl.entity_id = n.nid');
  $query->join('field_data_field_picking_start_time', 'pst', 'pst.entity_id = n.nid');
  $query->join('field_data_field_picking_end_time', 'pet', 'pet.entity_id = n.nid');
  $query->join('field_data_field_picking_status', 'ps', 'ps.entity_id = n.nid');
  $query->condition('ps.field_picking_status_value', 2, "=");
  $query->join('field_data_field_picking_picking_team_count', 'tc', 'tc.entity_id = n.nid');
  $query->join('field_data_field_picking_pick_supervisor', 'pps', 'pps.entity_id = n.nid');
  $query->leftjoin('field_data_field_picking_picker_name', 'pn', 'pn.entity_id = n.nid');

  $query->fields('d', array('field_picking_loading_date_value'));
  $query->fields('pn', array('field_picking_picker_name_value'));

  $query->fields('gai', array('field_picking_godown_area_id_value'));
  $query->fields('pt', array('field_picking_picking_type_value'));
  $query->fields('lsl', array('field_pick_lines_value'));
  $query->fields('pst', array('field_picking_start_time_value'));
  $query->fields('pet', array('field_picking_end_time_value'));
  $query->fields('n', array('nid'));
  $query->fields('ps', array('field_picking_status_value'));
  $query->fields('tc', array('field_picking_picking_team_count_value'));
  $query->fields('pps', array('field_picking_pick_supervisor_value'));
  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  foreach ($res as $key => $value) {

    $start_time = strtotime($value['field_picking_start_time_value']);
    $end_time = strtotime($value['field_picking_end_time_value']);
    $time_diff = abs(($end_time - $start_time) / 3600);
    $time_diff = number_format((float) $time_diff, 2, '.', '');
    $loading_line = $value['field_pick_lines_value'];
    $team_count = $value['field_picking_picking_team_count_value'];
    $total_time = ($team_count * $time_diff);
    $supervisor = $value['field_picking_pick_supervisor_value'];
    $type = $value['field_picking_picking_type_value'];
    $godown = $value['field_picking_godown_area_id_value'];
    if (isset($res[$godown])) {
      if ($type == "Loose") {
        $picking['godown'][$godown][$type]['loading_sheet_line'] += $loading_line;
        $picking['godown'][$godown][$type]['total_tme'] += $total_time;
        $picking['godown'][$godown][$type]['loading_date'] = $value['field_picking_loading_date_value'];
        $picking['godown'][$godown][$type]['picker_name'] = $value['field_picking_picker_name_value'];
        $picking['godown'][$godown][$type]['supervisor'] = $value['field_picking_pick_supervisor_value'];
      }
      if ($type == "Bulk") {
        $picking['godown'][$godown][$type]['loading_sheet_line'] += $loading_line;
        $picking['godown'][$godown][$type]['total_tme'] += $total_time;
        $picking['godown'][$godown][$type]['loading_date'] = $value['field_picking_loading_date_value'];
        $picking['godown'][$godown][$type]['picker_name'] = $value['field_picking_picker_name_value'];
        $picking['godown'][$godown][$type]['supervisor'] = $value['field_picking_pick_supervisor_value'];
      }
    }
    else {
      $res[$godown] = array();
      $picking_type = $value['field_picking_picking_type_value'];
      if ($type == "Loose") {
        $picking['godown'][$godown][$type]['loading_sheet_line'] = $loading_line;
        $picking['godown'][$godown][$type]['total_tme'] = $total_time;
        $picking['godown'][$godown][$type]['loading_date'] = $value['field_picking_loading_date_value'];
        $picking['godown'][$godown][$type]['picker_name'] = $value['field_picking_picker_name_value'];
        $picking['godown'][$godown][$type]['supervisor'] = $value['field_picking_pick_supervisor_value'];
      }
      if ($type == "Bulk") {
        $picking['godown'][$godown][$type]['loading_sheet_line'] = $loading_line;
        $picking['godown'][$godown][$type]['total_tme'] = $total_time;
        $picking['godown'][$godown][$type]['loading_date'] = $value['field_picking_loading_date_value'];
        $picking['godown'][$godown][$type]['picker_name'] = $value['field_picking_picker_name_value'];
        $picking['godown'][$godown][$type]['supervisor'] = $value['field_picking_pick_supervisor_value'];
      }
    }


    if (isset($res[$supervisor])) {
      if ($type == "Loose") {
        $picking[$supervisor][$type]['loading_sheet_line'] += $loading_line;
        $picking[$supervisor][$type]['total_tme'] += $total_time;
        $picking[$supervisor][$type]['godown'] = $godown;
      }
      if ($type == "Bulk") {
        $picking[$supervisor][$type]['loading_sheet_line'] += $loading_line;
        $picking[$supervisor][$type]['total_tme'] += $total_time;
        $picking[$supervisor][$type]['godown'] = $godown;
      }
    }
    else {
      $res[$supervisor] = array();
      if ($type == "Loose") {
        $picking[$supervisor][$type]['loading_sheet_line'] = $loading_line;
        $picking[$supervisor][$type]['total_tme'] = $total_time;
        $picking[$supervisor][$type]['godown'] = $godown;
      }
      if ($type == "Bulk") {
        $picking[$supervisor][$type]['loading_sheet_line'] = $loading_line;
        $picking[$supervisor][$type]['total_tme'] = $total_time;
        $picking[$supervisor][$type]['godown'] = $godown;
      }
    }
  }
  return $picking;
}

function get_twoday_before_yesterday_data_channel($twoday_before_yesterday, $twoday_before_yesterday, $distributor_id) {
  return get_common_data_for_chhanel_datewise($twoday_before_yesterday, $twoday_before_yesterday, $distributor_id);
}

function get_day_before_yesterday_data_channel($day_before_yesterday, $day_before_yesterday, $distributor_id) {
  return get_common_data_for_chhanel_datewise($day_before_yesterday, $day_before_yesterday, $distributor_id);
}

function get_yesterday_data_channel($yesterday, $yesterday, $distributor_id) {
  return get_common_data_for_chhanel_datewise($yesterday, $yesterday, $distributor_id);
}

function get_mtd_data_channel($this_date, $yesterday, $distributor_id) {
  return get_common_data_for_chhanel_datewise($this_date, $yesterday, $distributor_id);
}

function get_mtd_data_channel_otif($this_date, $yesterday, $distributor_id) {
  return get_common_data_for_chhanel_datewise_otif($this_date, $yesterday, $distributor_id);
}
function get_mtd_data_channel_impact($this_date, $yesterday, $distributor_id) {
  return get_common_data_for_chhanel_datewise_impact($this_date, $yesterday, $distributor_id);
}

function get_one_day_before_mtd_data_channel($this_date, $day_before_yesterday, $distributor_id) {
  return get_common_data_for_chhanel_datewise($this_date, $day_before_yesterday, $distributor_id);
}

function get_two_day_before_mtd_data_channel($this_date, $twoday_before_yesterday, $distributor_id) {
  return get_common_data_for_chhanel_datewise($this_date, $twoday_before_yesterday, $distributor_id);
}

//function get_twoday_before_yesterday_data_pl_groupwise($twoday_before_yesterday, $twoday_before_yesterday, $distributor_id) {
//  return get_common_data_for_pl_group_datewise($twoday_before_yesterday, $twoday_before_yesterday, $distributor_id);
//}
//
//function get_day_before_yesterday_data_pl_groupwise($day_before_yesterday, $day_before_yesterday, $distributor_id) {
//  return get_common_data_for_pl_group_datewise($day_before_yesterday, $day_before_yesterday, $distributor_id);
//}
//
//function get_yesterday_data_pl_groupwise($yesterday, $yesterday, $distributor_id) {
//  return get_common_data_for_pl_group_datewise($yesterday, $yesterday, $distributor_id);
//}

function get_mtd_data_pl_groupwise($this_date, $yesterday, $distributor_id) {
  return get_common_data_for_pl_group_datewise($this_date, $yesterday, $distributor_id);
}

//function get_one_day_before_mtd_data_pl_groupwise($this_date, $day_before_yesterday, $distributor_id) {
//  return get_common_data_for_pl_group_datewise($this_date, $day_before_yesterday, $distributor_id);
//}
//
//function get_two_day_before_mtd_data_pl_groupwise($this_date, $twoday_before_yesterday, $distributor_id) {
//  return get_common_data_for_pl_group_datewise($this_date, $twoday_before_yesterday, $distributor_id);
//}

function get_common_data_for_chhanel_datewise($start_date, $end_date, $distributor_id) {
  $query = db_select('node', 'n');
  $query->condition('n.type', 'sales_register_data');
  $query->condition('n.uid', $distributor_id, '=');
  $query->join('field_data_field_billing_van', 'bva', 'bva.entity_id = n.nid');
  $query->join('field_data_field_sr_bill_date', 'bd', 'bd.entity_id = n.nid');
  $query->condition('bd.field_sr_bill_date_value', array($start_date, $end_date), 'BETWEEN');
  $query->join('field_data_field_bill_value', 'bv', 'bv.entity_id = n.nid');
  $query->join('field_data_field_sales_party_code', 'pc', 'pc.entity_id = n.nid');
  $query->join('node', 'oun', 'pc.field_sales_party_code_value = oun.title');
  $query->condition('oun.type', 'outlet_master');
  $query->condition('oun.uid', $distributor_id, '=');
  $query->join('field_data_field_channel', 'chan', 'chan.entity_id = oun.nid');
  $query->groupBy('field_channel_value');
  $query->orderBy('chan.field_channel_value', 'ASC');
  $query->leftjoin('field_data_field_trip_id_reference', 'ti', 'ti.entity_id = n.nid');
  $query->leftjoin('node', 'disn', 'disn.nid = ti.field_trip_id_reference_nid');
  $query->leftjoin('field_data_field_dispatch_date', 'disp_date', 'disp_date.entity_id = disn.nid');
  $query->addExpression('COUNT(n.title)', 'bill_count');
  $query->addExpression('SUM(bv.field_bill_value_value)', 'bill_value');
  $query->leftjoin('field_data_field_dispatch_n_value', 'd1', 'd1.entity_id = n.nid');

  // bill counts
  $query->addExpression('SUM(CASE WHEN (d1.field_dispatch_n_value_value = \'N+2\') THEN 1 ELSE 0 END)', 'n2_counts');
  $query->addExpression('SUM(CASE WHEN (d1.field_dispatch_n_value_value = \'N+3\') THEN 1 ELSE 0 END)', 'n3_counts');
  $query->addExpression('SUM(CASE WHEN (d1.field_dispatch_n_value_value = \'N+4\') THEN 1 ELSE 0 END)', 'n4_counts');
  $query->addExpression('SUM(CASE WHEN (disp_date.field_dispatch_date_value IS NULL) THEN 1 ELSE 0 END)', 'null_counts');


  // bill values
  $query->addExpression('SUM(CASE WHEN (d1.field_dispatch_n_value_value = \'N+2\') THEN field_bill_value_value ELSE 0 END)', 'n2_value');
  $query->addExpression('SUM(CASE WHEN (d1.field_dispatch_n_value_value = \'N+3\') THEN field_bill_value_value ELSE 0 END)', 'n3_value');
  $query->addExpression('SUM(CASE WHEN (d1.field_dispatch_n_value_value = \'N+4\') THEN field_bill_value_value ELSE 0 END)', 'n4_value');
  $query->addExpression('SUM(CASE WHEN (disp_date.field_dispatch_date_value IS NULL) THEN field_bill_value_value ELSE 0 END)', 'null_value');


  $query->fields('n', array('nid'));
  $query->fields('bd', array('field_sr_bill_date_value'));
  $query->fields('chan', array('field_channel_value'));

  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  if (!empty($res)) {
    foreach ($res as $k => $v) {
      $channel = $v['field_channel_value'];
      $bill_val = $v['bill_value'];
      $bill_val = round($bill_val);

      $otif_n2_count_perc = round(($v['n2_counts'] / $v['bill_count']) * 100);
      $otif_n2_value_perc = round(($v['n2_value'] / $v['bill_value']) * 100);
      $otif_n3_count_perc = round(($v['n3_counts'] / $v['bill_count']) * 100);
      $otif_n3_value_perc = round(($v['n3_value'] / $v['bill_value']) * 100);

      $otif_n4_count_perc = round(($v['n4_counts'] / $v['bill_count']) * 100);
      $otif_n4_value_perc = round(($v['n4_value'] / $v['bill_value']) * 100);

      $otif_null_count_perc = round(($v['null_counts'] / $v['bill_count']) * 100);
      $otif_null_value_perc = round(($v['null_value'] / $v['bill_value']) * 100);

      $total_bill_count += $v['bill_count'];
      $total_bill_val += $bill_val;
      $total_n2_counts += $v['n2_counts'];
      $total_n2_value += $v['n2_value'];
      $total_n3_counts += $v['n3_counts'];
      $total_n3_value += $v['n3_value'];

      $total_n4_counts += $v['n4_counts'];
      $total_n4_value += $v['n4_value'];

      $total_null_counts += $v['null_counts'];
      $total_null_value += $v['null_value'];

      $rows[] = array($channel,
        $v['bill_count'],
        $bill_val,
        $v['n2_counts'],
        round($v['n2_value']),
        $v['n3_counts'],
        round($v['n3_value']),
        $v['n4_counts'],
        round($v['n4_value']),
        $v['null_counts'],
        round($v['null_value']),
        $otif_n2_count_perc . " %",
        $otif_n2_value_perc . " %",
        $otif_n3_count_perc . " %",
        $otif_n3_value_perc . " %",
        $otif_n4_count_perc . " %",
        $otif_n4_value_perc . " %",
        $otif_null_count_perc . " %",
        $otif_null_value_perc . " %",
      );
    }
  }
  else {
    $output = "No Result Found";
  }
  if (!empty($res)) {
    $header = get_header_of_chhanel(TRUE);
    $total_otif_n2_count_perc = round(($total_n2_counts / $total_bill_count) * 100);
    $total_otif_n2_value_perc = round(($total_n2_value / $total_bill_val) * 100);
    $total_otif_n3_count_perc = round(($total_n3_counts / $total_bill_count) * 100);
    $total_otif_n3_value_perc = round(($total_n3_value / $total_bill_val) * 100);

    $total_otif_n4_count_perc = round(($total_n4_counts / $total_bill_count) * 100);
    $total_otif_n4_value_perc = round(($total_n4_value / $total_bill_val) * 100);

    $total_otif_null_count_perc = round(($total_null_counts / $total_bill_count) * 100);
    $total_otif_null_value_perc = round(($total_null_value / $total_bill_val) * 100);

    $rows[] = array("Total",
      $total_bill_count,
      $total_bill_val,
      $total_n2_counts,
      $total_n2_value,
      $total_n3_counts,
      $total_n3_value,
      $total_n4_counts,
      $total_n4_value,
      $total_null_counts,
      $total_null_value,
      $total_otif_n2_count_perc . " %",
      $total_otif_n2_value_perc . " %",
      $total_otif_n3_count_perc . " %",
      $total_otif_n3_value_perc . " %",
      $total_otif_n4_count_perc . " %",
      $total_otif_n4_value_perc . " %",
      $total_otif_null_count_perc . " %",
      $total_otif_null_value_perc . " %",
    );

    $output = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('border' => '1', 'cellpadding' => '5', 'cellspacing' => '0')));
  }
  return $output;
}

/**
 * 
 * @param type $start_date
 * @param type $end_date
 * @param type $distributor_id
 * @return html
 */
function get_cron_common_data_for_pl_datewise($start_date, $end_date, $distributor_id) {
  $query = db_select('node', 'n');
  $query->condition('n.type', 'sales_register_data');
  $query->condition('n.uid', $distributor_id, '=');
  $query->join('field_data_field_billing_van', 'bva', 'bva.entity_id = n.nid');
  $query->join('field_data_field_sr_bill_date', 'bd', 'bd.entity_id = n.nid');
  $query->condition('bd.field_sr_bill_date_value', array($start_date, $end_date), 'BETWEEN');
  $query->join('field_data_field_bill_value', 'bv', 'bv.entity_id = n.nid');
  $query->join('field_data_field_sales_party_code', 'pc', 'pc.entity_id = n.nid');
  $query->join('node', 'oun', 'pc.field_sales_party_code_value = oun.title');
  $query->condition('oun.type', 'outlet_master');
  $query->condition('oun.uid', $distributor_id, '=');
  // $query->join('field_data_field_channel', 'chan', 'chan.entity_id = oun.nid');
  // $query->groupBy('field_channel_value');
  $query->join('field_data_field_pl_group', 'plg', 'plg.entity_id = oun.nid');
  $query->groupBy('field_pl_group_value');
  //$query->orderBy('chan.field_channel_value', 'ASC');
  $query->orderBy('plg.field_pl_group_value', 'ASC');

  $query->leftjoin('field_data_field_trip_id_reference', 'ti', 'ti.entity_id = n.nid');
  $query->leftjoin('node', 'disn', 'disn.nid = ti.field_trip_id_reference_nid');
  $query->leftjoin('field_data_field_dispatch_date', 'disp_date', 'disp_date.entity_id = disn.nid');
  $query->addExpression('COUNT(n.title)', 'bill_count');
  $query->addExpression('SUM(bv.field_bill_value_value)', 'bill_value');
  $query->leftjoin('field_data_field_dispatch_n_value', 'd1', 'd1.entity_id = n.nid');

  // bill counts
  $query->addExpression('SUM(CASE WHEN (d1.field_dispatch_n_value_value = \'N+2\') THEN 1 ELSE 0 END)', 'n2_counts');
  $query->addExpression('SUM(CASE WHEN (d1.field_dispatch_n_value_value = \'N+3\') THEN 1 ELSE 0 END)', 'n3_counts');
  $query->addExpression('SUM(CASE WHEN (d1.field_dispatch_n_value_value = \'N+4\') THEN 1 ELSE 0 END)', 'n4_counts');
  $query->addExpression('SUM(CASE WHEN (disp_date.field_dispatch_date_value IS NULL) THEN 1 ELSE 0 END)', 'null_counts');


  // bill values
  $query->addExpression('SUM(CASE WHEN (d1.field_dispatch_n_value_value = \'N+2\') THEN field_bill_value_value ELSE 0 END)', 'n2_value');
  $query->addExpression('SUM(CASE WHEN (d1.field_dispatch_n_value_value = \'N+3\') THEN field_bill_value_value ELSE 0 END)', 'n3_value');
  $query->addExpression('SUM(CASE WHEN (d1.field_dispatch_n_value_value = \'N+4\') THEN field_bill_value_value ELSE 0 END)', 'n4_value');
  $query->addExpression('SUM(CASE WHEN (disp_date.field_dispatch_date_value IS NULL) THEN field_bill_value_value ELSE 0 END)', 'null_value');


  $query->fields('n', array('nid'));
  $query->fields('bd', array('field_sr_bill_date_value'));
  // $query->fields('chan', array('field_channel_value'));
  $query->fields('plg', array('field_pl_group_value'));

  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  if (!empty($res)) {
    foreach ($res as $k => $v) {
      //$channel = $v['field_channel_value'];
      $channel = $v['field_pl_group_value'];
      $bill_val = $v['bill_value'];
      $bill_val = round($bill_val);

      $otif_n2_count_perc = round(($v['n2_counts'] / $v['bill_count']) * 100);
      $otif_n2_value_perc = round(($v['n2_value'] / $v['bill_value']) * 100);
      $otif_n3_count_perc = round(($v['n3_counts'] / $v['bill_count']) * 100);
      $otif_n3_value_perc = round(($v['n3_value'] / $v['bill_value']) * 100);

      $otif_n4_count_perc = round(($v['n4_counts'] / $v['bill_count']) * 100);
      $otif_n4_value_perc = round(($v['n4_value'] / $v['bill_value']) * 100);

      $otif_null_count_perc = round(($v['null_counts'] / $v['bill_count']) * 100);
      $otif_null_value_perc = round(($v['null_value'] / $v['bill_value']) * 100);

      $total_bill_count += $v['bill_count'];
      $total_bill_val += $bill_val;
      $total_n2_counts += $v['n2_counts'];
      $total_n2_value += $v['n2_value'];
      $total_n3_counts += $v['n3_counts'];
      $total_n3_value += $v['n3_value'];

      $total_n4_counts += $v['n4_counts'];
      $total_n4_value += $v['n4_value'];

      $total_null_counts += $v['null_counts'];
      $total_null_value += $v['null_value'];

      $rows[] = array($channel,
        $v['bill_count'],
        $bill_val,
        $v['n2_counts'],
        round($v['n2_value']),
        $v['n3_counts'],
        round($v['n3_value']),
        $v['n4_counts'],
        round($v['n4_value']),
        $v['null_counts'],
        round($v['null_value']),
        $otif_n2_count_perc . " %",
        $otif_n2_value_perc . " %",
        $otif_n3_count_perc . " %",
        $otif_n3_value_perc . " %",
        $otif_n4_count_perc . " %",
        $otif_n4_value_perc . " %",
        $otif_null_count_perc . " %",
        $otif_null_value_perc . " %",
      );
    }
  }
  else {
    $output = "No Result Found";
  }
  if (!empty($res)) {
    $header = get_header_of_chhanel(TRUE, TRUE);
    $total_otif_n2_count_perc = round(($total_n2_counts / $total_bill_count) * 100);
    $total_otif_n2_value_perc = round(($total_n2_value / $total_bill_val) * 100);
    $total_otif_n3_count_perc = round(($total_n3_counts / $total_bill_count) * 100);
    $total_otif_n3_value_perc = round(($total_n3_value / $total_bill_val) * 100);

    $total_otif_n4_count_perc = round(($total_n4_counts / $total_bill_count) * 100);
    $total_otif_n4_value_perc = round(($total_n4_value / $total_bill_val) * 100);

    $total_otif_null_count_perc = round(($total_null_counts / $total_bill_count) * 100);
    $total_otif_null_value_perc = round(($total_null_value / $total_bill_val) * 100);

    $rows[] = array("Total",
      $total_bill_count,
      $total_bill_val,
      $total_n2_counts,
      $total_n2_value,
      $total_n3_counts,
      $total_n3_value,
      $total_n4_counts,
      $total_n4_value,
      $total_null_counts,
      $total_null_value,
      $total_otif_n2_count_perc . " %",
      $total_otif_n2_value_perc . " %",
      $total_otif_n3_count_perc . " %",
      $total_otif_n3_value_perc . " %",
      $total_otif_n4_count_perc . " %",
      $total_otif_n4_value_perc . " %",
      $total_otif_null_count_perc . " %",
      $total_otif_null_value_perc . " %",
    );

    $output = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('border' => '1', 'cellpadding' => '5', 'cellspacing' => '0')));
  }
  return $output;
}

function get_common_data_for_chhanel_datewise_otif($start_date, $end_date, $distributor_id) {
  $query = db_select('node', 'n');
  $query->condition('n.type', 'sales_register_data');
  $query->condition('n.uid', $distributor_id, '=');
  $query->join('field_data_field_billing_van', 'bva', 'bva.entity_id = n.nid');
  $query->join('field_data_field_sr_bill_date', 'bd', 'bd.entity_id = n.nid');
  $query->condition('bd.field_sr_bill_date_value', array($start_date, $end_date), 'BETWEEN');
  $query->join('field_data_field_bill_value', 'bv', 'bv.entity_id = n.nid');
  $query->join('field_data_field_sales_party_code', 'pc', 'pc.entity_id = n.nid');
  $query->join('node', 'oun', 'pc.field_sales_party_code_value = oun.title');
  $query->condition('oun.type', 'outlet_master');
  $query->condition('oun.uid', $distributor_id, '=');
  $query->join('field_data_field_channel', 'chan', 'chan.entity_id = oun.nid');
  $query->groupBy('field_channel_value');
  $query->orderBy('chan.field_channel_value', 'ASC');
  $query->leftjoin('field_data_field_trip_id_reference', 'ti', 'ti.entity_id = n.nid');
  $query->leftjoin('node', 'disn', 'disn.nid = ti.field_trip_id_reference_nid');
  $query->leftjoin('field_data_field_dispatch_date', 'disp_date', 'disp_date.entity_id = disn.nid');
  $query->addExpression('COUNT(n.title)', 'bill_count');
  $query->addExpression('SUM(bv.field_bill_value_value)', 'bill_value');
  $query->leftjoin('field_data_field_dispatch_n_value', 'd1', 'd1.entity_id = n.nid');

  // bill counts
  $query->addExpression('SUM(CASE WHEN (d1.field_dispatch_n_value_value = \'N+2\') THEN 1 ELSE 0 END)', 'n2_counts');
  $query->addExpression('SUM(CASE WHEN (d1.field_dispatch_n_value_value = \'N+3\') THEN 1 ELSE 0 END)', 'n3_counts');
  $query->addExpression('SUM(CASE WHEN (disp_date.field_dispatch_date_value IS NULL) OR ((d1.field_dispatch_n_value_value = \'N+4\')) THEN 1 ELSE 0 END)', 'n4_counts');

  // bill values
  $query->addExpression('SUM(CASE WHEN (d1.field_dispatch_n_value_value = \'N+2\') THEN field_bill_value_value ELSE 0 END)', 'n2_value');
  $query->addExpression('SUM(CASE WHEN (d1.field_dispatch_n_value_value = \'N+3\') THEN field_bill_value_value ELSE 0 END)', 'n3_value');
  $query->addExpression('SUM(CASE WHEN (disp_date.field_dispatch_date_value IS NULL) OR ((d1.field_dispatch_n_value_value = \'N+4\')) THEN field_bill_value_value ELSE 0 END)', 'n4_value');

  $query->fields('n', array('nid'));
  $query->fields('bd', array('field_sr_bill_date_value'));
  $query->fields('chan', array('field_channel_value'));

  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  if (!empty($res)) {
    foreach ($res as $k => $v) {
      $channel = $v['field_channel_value'];
      $bill_val = $v['bill_value'];
      $bill_val = round($bill_val);

      $otif_n2_count_perc = round(($v['n2_counts'] / $v['bill_count']) * 100);
      $otif_n2_value_perc = round(($v['n2_value'] / $v['bill_value']) * 100);
      $otif_n3_count_perc = round(($v['n3_counts'] / $v['bill_count']) * 100);
      $otif_n3_value_perc = round(($v['n3_value'] / $v['bill_value']) * 100);

      $otif_n4_count_perc = round(($v['n4_counts'] / $v['bill_count']) * 100);
      $otif_n4_value_perc = round(($v['n4_value'] / $v['bill_value']) * 100);

      $total_bill_count += $v['bill_count'];
      $total_bill_val += $bill_val;
      $total_n2_counts += $v['n2_counts'];
      $total_n2_value += $v['n2_value'];
      $total_n3_counts += $v['n3_counts'];
      $total_n3_value += $v['n3_value'];

      $total_n4_counts += $v['n4_counts'];
      $total_n4_value += $v['n4_value'];

      $rows[] = array($channel,
        $v['bill_count'],
        $bill_val,
        $v['n2_counts'],
        round($v['n2_value']),
        $v['n3_counts'],
        round($v['n3_value']),
        $v['n4_counts'],
        round($v['n4_value']),
        $otif_n2_count_perc . " %",
        $otif_n2_value_perc . " %",
        $otif_n3_count_perc . " %",
        $otif_n3_value_perc . " %",
        $otif_n4_count_perc . " %",
        $otif_n4_value_perc . " %",
      );
    }
  }
  else {
    $output = "No Result Found";
  }
  if (!empty($res)) {
    $header = get_header_of_chhanel_otif();
    $total_otif_n2_count_perc = round(($total_n2_counts / $total_bill_count) * 100);
    $total_otif_n2_value_perc = round(($total_n2_value / $total_bill_val) * 100);
    $total_otif_n3_count_perc = round(($total_n3_counts / $total_bill_count) * 100);
    $total_otif_n3_value_perc = round(($total_n3_value / $total_bill_val) * 100);

    $total_otif_n4_count_perc = round(($total_n4_counts / $total_bill_count) * 100);
    $total_otif_n4_value_perc = round(($total_n4_value / $total_bill_val) * 100);
    $rows[] = array("Total",
      $total_bill_count,
      $total_bill_val,
      $total_n2_counts,
      $total_n2_value,
      $total_n3_counts,
      $total_n3_value,
      $total_n4_counts,
      $total_n4_value,
      $total_otif_n2_count_perc . " %",
      $total_otif_n2_value_perc . " %",
      $total_otif_n3_count_perc . " %",
      $total_otif_n3_value_perc . " %",
      $total_otif_n4_count_perc . " %",
      $total_otif_n4_value_perc . " %",
    );

    $output = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('border' => '1', 'cellpadding' => '5', 'cellspacing' => '0')));
  }
  return $output;
}

//Impact
function get_common_data_for_chhanel_datewise_impact($start_date, $end_date, $distributor_id) {
  $query = db_select('node', 'n');
  $query->condition('n.type', 'sales_register_data');
  $query->condition('n.uid', $distributor_id, '=');
  $query->join('field_data_field_billing_van', 'bva', 'bva.entity_id = n.nid');
  $query->join('field_data_field_sr_bill_date', 'bd', 'bd.entity_id = n.nid');
  $query->condition('bd.field_sr_bill_date_value', array($start_date, $end_date), 'BETWEEN');
  $query->join('field_data_field_bill_value', 'bv', 'bv.entity_id = n.nid');
  $query->join('field_data_field_sales_party_code', 'pc', 'pc.entity_id = n.nid');
  $query->join('node', 'oun', 'pc.field_sales_party_code_value = oun.title');
  $query->condition('oun.type', 'outlet_master');
  $query->condition('oun.uid', $distributor_id, '=');
  $query->join('field_data_field_channel', 'chan', 'chan.entity_id = oun.nid');
  $query->groupBy('field_channel_value');
  $query->orderBy('chan.field_channel_value', 'ASC');
  //$query->leftjoin('field_data_field_trip_id_reference', 'ti', 'ti.entity_id = n.nid');
  //$query->leftjoin('node', 'disn', 'disn.nid = ti.field_trip_id_reference_nid');
  $query->leftjoin('field_data_field_impact_updated_date', 'im_date', 'im_date.entity_id = n.nid');
  $query->addExpression('COUNT(n.title)', 'bill_count');
  $query->addExpression('SUM(bv.field_bill_value_value)', 'bill_value');
  $query->leftjoin('field_data_field_impact_ontime_criteria', 'd1', 'd1.entity_id = n.nid');

  // bill counts
  $query->addExpression('SUM(CASE WHEN (d1.field_impact_ontime_criteria_value = \'N+2\') THEN 1 ELSE 0 END)', 'n2_counts');
  $query->addExpression('SUM(CASE WHEN (d1.field_impact_ontime_criteria_value = \'N+3\') THEN 1 ELSE 0 END)', 'n3_counts');
  $query->addExpression('SUM(CASE WHEN (im_date.field_impact_updated_date_value IS NULL) OR ((d1.field_impact_ontime_criteria_value = \'N+4\')) THEN 1 ELSE 0 END)', 'n4_counts');

  // bill values
  $query->addExpression('SUM(CASE WHEN (d1.field_impact_ontime_criteria_value = \'N+2\') THEN field_bill_value_value ELSE 0 END)', 'n2_value');
  $query->addExpression('SUM(CASE WHEN (d1.field_impact_ontime_criteria_value = \'N+3\') THEN field_bill_value_value ELSE 0 END)', 'n3_value');
  $query->addExpression('SUM(CASE WHEN (im_date.field_impact_updated_date_value IS NULL) OR ((d1.field_impact_ontime_criteria_value = \'N+4\')) THEN field_bill_value_value ELSE 0 END)', 'n4_value');

  $query->fields('n', array('nid'));
  $query->fields('bd', array('field_sr_bill_date_value'));
  $query->fields('chan', array('field_channel_value'));

  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  if (!empty($res)) {
    foreach ($res as $k => $v) {
      $channel = $v['field_channel_value'];
      $bill_val = $v['bill_value'];
      $bill_val = round($bill_val);

      $otif_n2_count_perc = round(($v['n2_counts'] / $v['bill_count']) * 100);
      $otif_n2_value_perc = round(($v['n2_value'] / $v['bill_value']) * 100);
      $otif_n3_count_perc = round(($v['n3_counts'] / $v['bill_count']) * 100);
      $otif_n3_value_perc = round(($v['n3_value'] / $v['bill_value']) * 100);

      $otif_n4_count_perc = round(($v['n4_counts'] / $v['bill_count']) * 100);
      $otif_n4_value_perc = round(($v['n4_value'] / $v['bill_value']) * 100);

      $total_bill_count += $v['bill_count'];
      $total_bill_val += $bill_val;
      $total_n2_counts += $v['n2_counts'];
      $total_n2_value += $v['n2_value'];
      $total_n3_counts += $v['n3_counts'];
      $total_n3_value += $v['n3_value'];

      $total_n4_counts += $v['n4_counts'];
      $total_n4_value += $v['n4_value'];

      $rows[] = array($channel,
        $v['bill_count'],
        $bill_val,
        $v['n2_counts'],
        round($v['n2_value']),
        $v['n3_counts'],
        round($v['n3_value']),
        $v['n4_counts'],
        round($v['n4_value']),
        $otif_n2_count_perc . " %",
        $otif_n2_value_perc . " %",
        $otif_n3_count_perc . " %",
        $otif_n3_value_perc . " %",
        $otif_n4_count_perc . " %",
        $otif_n4_value_perc . " %",
      );
    }
  }
  else {
    $output = "No Result Found";
  }
  if (!empty($res)) {
    $header = get_header_of_chhanel_impact();
    $total_otif_n2_count_perc = round(($total_n2_counts / $total_bill_count) * 100);
    $total_otif_n2_value_perc = round(($total_n2_value / $total_bill_val) * 100);
    $total_otif_n3_count_perc = round(($total_n3_counts / $total_bill_count) * 100);
    $total_otif_n3_value_perc = round(($total_n3_value / $total_bill_val) * 100);

    $total_otif_n4_count_perc = round(($total_n4_counts / $total_bill_count) * 100);
    $total_otif_n4_value_perc = round(($total_n4_value / $total_bill_val) * 100);
    $rows[] = array("Total",
      $total_bill_count,
      $total_bill_val,
      $total_n2_counts,
      $total_n2_value,
      $total_n3_counts,
      $total_n3_value,
      $total_n4_counts,
      $total_n4_value,
      $total_otif_n2_count_perc . " %",
      $total_otif_n2_value_perc . " %",
      $total_otif_n3_count_perc . " %",
      $total_otif_n3_value_perc . " %",
      $total_otif_n4_count_perc . " %",
      $total_otif_n4_value_perc . " %",
    );

    $output = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('border' => '1', 'cellpadding' => '5', 'cellspacing' => '0')));
  }
  return $output;
}


function get_common_data_for_pl_group_datewise($start_date, $end_date, $distributor_id = 60) {
  $query = db_select('node', 'n');
  $query->condition('n.type', 'sales_register_data');
  $query->condition('n.uid', $distributor_id, '=');
  $query->join('field_data_field_billing_van', 'bva', 'bva.entity_id = n.nid');
  $query->join('field_data_field_sr_bill_date', 'bd', 'bd.entity_id = n.nid');
  $query->condition('bd.field_sr_bill_date_value', array($start_date, $end_date), 'BETWEEN');
  $query->join('field_data_field_bill_value', 'bv', 'bv.entity_id = n.nid');
  $query->join('field_data_field_sales_party_code', 'pc', 'pc.entity_id = n.nid');
  $query->join('node', 'oun', 'pc.field_sales_party_code_value = oun.title');
  $query->condition('oun.type', 'outlet_master');
  $query->condition('oun.uid', $distributor_id, '=');
  $query->join('field_data_field_pl_group', 'plg', 'plg.entity_id = oun.nid');
  $query->groupBy('field_pl_group_value');
  $query->leftjoin('field_data_field_trip_id_reference', 'ti', 'ti.entity_id = n.nid');
  $query->leftjoin('node', 'disn', 'disn.nid = ti.field_trip_id_reference_nid');

  $query->leftjoin('field_data_field_dispatch_date', 'fd', 'fd.entity_id = disn.nid');

  $query->leftjoin('field_data_field_dispatch_status', 'disp_st', 'disp_st.entity_id = disn.nid');
  $query->addExpression('COUNT(n.title)', 'bill_count');
  $query->addExpression('SUM(bv.field_bill_value_value)', 'bill_value');
  $query->addExpression('COUNT(ti.field_trip_id_reference_nid)', 'trip_count');
  $query->addExpression('SUM(if(ti.field_trip_id_reference_nid IS NOT NULL,field_bill_value_value, 0))', 'trip_sum');
  //$query->addExpression('SUM(if(disp_st.field_dispatch_status_value=1, 1, 0))', 'trip_dispatch_sum');
  //$query->addExpression('SUM(if(disp_st.field_dispatch_status_value=1, field_bill_value_value, 0))', 'trip_dispatch_value');
  $query->addExpression('SUM(if(fd.field_dispatch_date_value IS NOT NULL, 1, 0))', 'trip_dispatch_sum');
  $query->addExpression('SUM(if(fd.field_dispatch_date_value IS NOT NULL, field_bill_value_value, 0))', 'trip_dispatch_value');

  $query->fields('bd', array('field_sr_bill_date_value'));
  $query->fields('plg', array('field_pl_group_value'));
  $query->fields('n', array('nid'));
  $query->fields('disp_st', array('field_dispatch_status_value'));
  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  if (!empty($res)) {
    foreach ($res as $k => $v) {
      $pl_group = $v['field_pl_group_value'];
      $trip_created_count_percentage = round(($v['trip_count'] / $v['bill_count']) * 100);
      $trip_created_value_percentage = round(($v['trip_sum'] / $v['bill_value']) * 100);
      $dispatch_created_pe_count_rcentage = round(($v['trip_dispatch_sum'] / $v['bill_count']) * 100);
      $dispatch_created_value_percentage = round(($v['trip_dispatch_value'] / $v['bill_value']) * 100);
      $bill_val = $v['bill_value'];
      $bill_val = round($bill_val);

      $total_bill_count += $v['bill_count'];
      $total_bill_val += $bill_val;
      $total_trip_count += $v['trip_count'];
      $total_trip_sum += $v['trip_sum'];
      $total_trip_dispatch_sum += $v['trip_dispatch_sum'];
      $total_trip_dispatch_value += $v['trip_dispatch_value'];

      $rows[] = array($pl_group,
        $v['bill_count'],
        $bill_val,
        $v['trip_count'],
        $v['trip_sum'],
        $v['trip_dispatch_sum'],
        $v['trip_dispatch_value'],
        $trip_created_count_percentage . " %",
        $trip_created_value_percentage . " %",
        $dispatch_created_pe_count_rcentage . " %",
        $dispatch_created_value_percentage . " %"
      );
    }
  }
  else {
    $output = "No Result Found";
  }
  if (!empty($res)) {
    $header = get_header_of_pl_group();
    $total_trip_created_count_percentage = round(($total_trip_count / $total_bill_count) * 100);
    $total_trip_created_value_percentage = round(($total_trip_sum / $total_bill_val) * 100);
    $total_dispatch_created_pe_count_rcentage = round(($total_trip_dispatch_sum / $total_bill_count) * 100);
    $total_dispatch_created_value_percentage = round(($total_trip_dispatch_value / $total_bill_val) * 100);

    $rows[] = array("Total",
      $total_bill_count,
      $total_bill_val,
      $total_trip_count,
      $total_trip_sum,
      $total_trip_dispatch_sum,
      $total_trip_dispatch_value,
      $total_trip_created_count_percentage . " %",
      $total_trip_created_value_percentage . " %",
      $total_dispatch_created_pe_count_rcentage . " %",
      $total_dispatch_created_value_percentage . " %"
    );

    $output = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('border' => '1', 'cellpadding' => '5', 'cellspacing' => '0')));
  }
  return $output;
}

function get_header_of_pl_group() {
  $header = array('PL Group', 'Bill Count', 'Bill Value', 'Trip Created Count ', 'Trip Created Value',
    'Dispatch Count', 'Dispatch Value', 'Trip Created Count % ', 'Trip Created Value%',
    'Dispatch Count%', 'Dispatch Value%');
  return $header;
}

/*
 * Get Pending Bills Summary In Mail
 */

function get_pending_bills_pl_group_datewise($start_date, $end_date, $distributor_id = 60) {
  $query = db_select('node', 'n');
  $query->condition('n.type', 'sales_register_data');
  $query->condition('n.uid', $distributor_id, '=');
  $query->join('field_data_field_billing_van', 'bva', 'bva.entity_id = n.nid');
  $query->join('field_data_field_sr_bill_date', 'bd', 'bd.entity_id = n.nid');
  $query->condition('bd.field_sr_bill_date_value', array($start_date, $end_date), 'BETWEEN');
  $query->join('field_data_field_bill_value', 'bv', 'bv.entity_id = n.nid');
  $query->join('field_data_field_sales_party_code', 'pc', 'pc.entity_id = n.nid');
  $query->join('node', 'oun', 'pc.field_sales_party_code_value = oun.title');
  $query->condition('oun.type', 'outlet_master');
  $query->condition('oun.uid', $distributor_id, '=');
  $query->join('field_data_field_pl_group', 'plg', 'plg.entity_id = oun.nid');
  $query->groupBy('field_pl_group_value');
  $query->leftjoin('field_data_field_trip_id_reference', 'ti', 'ti.entity_id = n.nid');
  $query->leftjoin('node', 'disn', 'disn.nid = ti.field_trip_id_reference_nid');
  $query->leftjoin('field_data_field_dispatch_date', 'fd', 'fd.entity_id = disn.nid');
  //$query->leftjoin('field_data_field_dispatch_status', 'disp_st', 'disp_st.entity_id = disn.nid');
  $query->addExpression('COUNT(n.title)', 'bill_count');
  $query->addExpression('SUM(bv.field_bill_value_value)', 'bill_value');
  //$query->addExpression('COUNT(ti.field_trip_id_reference_nid)', 'trip_count');
  //$query->addExpression('SUM(if(ti.field_trip_id_reference_nid IS NOT NULL,field_bill_value_value, 0))', 'trip_sum');
  //$query->addExpression('SUM(if(disp_st.field_dispatch_status_value=1, 1, 0))', 'trip_dispatch_sum');
  //$query->addExpression('SUM(if(disp_st.field_dispatch_status_value=1, field_bill_value_value, 0))', 'trip_dispatch_value');
  $query->addExpression('SUM(if(fd.field_dispatch_date_value IS NOT NULL, 1, 0))', 'trip_dispatch_sum');
  $query->addExpression('SUM(if(fd.field_dispatch_date_value IS NOT NULL, field_bill_value_value, 0))', 'trip_dispatch_value');
  $query->fields('bd', array('field_sr_bill_date_value'));
  $query->fields('plg', array('field_pl_group_value'));
  $query->fields('n', array('nid'));
  //$query->fields('disp_st', array('field_dispatch_status_value'));
  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  if (!empty($res)) {
    foreach ($res as $k => $v) {
      $pl_group = $v['field_pl_group_value'];
//      $trip_created_count_percentage = round(($v['trip_count'] / $v['bill_count']) * 100);
//      $trip_created_value_percentage = round(($v['trip_sum'] / $v['bill_value']) * 100);
//      $dispatch_created_pe_count_rcentage = round(($v['trip_dispatch_sum'] / $v['bill_count']) * 100);
//      $dispatch_created_value_percentage = round(($v['trip_dispatch_value'] / $v['bill_value']) * 100);
      $bill_val = $v['bill_value'];
      $bill_val = round($bill_val);
      $pending_bill = ($v['bill_count'] - $v['trip_dispatch_sum']);
      $pending_bill_value = ($bill_val - $v['trip_dispatch_value']);

      $total_bill_count += $v['bill_count'];
      $total_bill_val += $bill_val;
      //$total_trip_count += $v['trip_count'];
      //$total_trip_sum += $v['trip_sum'];
      $total_trip_dispatch_sum += $v['trip_dispatch_sum'];
      $total_trip_dispatch_value += $v['trip_dispatch_value'];
      $total_pending_bill_count += $pending_bill;
      $total_pending_bill_value += $pending_bill_value;

      $rows[] = array($pl_group,
        $v['bill_count'],
        $bill_val,
        //$v['trip_count'],
        //$v['trip_sum'],
        $v['trip_dispatch_sum'],
        $v['trip_dispatch_value'],
        $pending_bill,
        $pending_bill_value
//        $trip_created_count_percentage . " %",
//        $trip_created_value_percentage . " %",
//        $dispatch_created_pe_count_rcentage . " %",
//        $dispatch_created_value_percentage . " %"
      );
    }
  }
  else {
    $output = "No Result Found";
  }
  if (!empty($res)) {
    $header = array('PL Group', 'Bill Count', 'Bill Value', 'Dispatch Count', 'Dispatch Value', 'Pending Bill', 'Pending Bill Value');
//    $total_trip_created_count_percentage = round(($total_trip_count / $total_bill_count) * 100);
//    $total_trip_created_value_percentage = round(($total_trip_sum / $total_bill_val) * 100);
//    $total_dispatch_created_pe_count_rcentage = round(($total_trip_dispatch_sum / $total_bill_count) * 100);
//    $total_dispatch_created_value_percentage = round(($total_trip_dispatch_value / $total_bill_val) * 100);

    $rows[] = array("Total",
      $total_bill_count,
      $total_bill_val,
//    $total_trip_count,
//    $total_trip_sum,
      $total_trip_dispatch_sum,
      $total_trip_dispatch_value,
      $total_pending_bill_count,
      $total_pending_bill_value
//    $total_trip_created_count_percentage . " %",
//    $total_trip_created_value_percentage . " %",
//    $total_dispatch_created_pe_count_rcentage . " %",
//    $total_dispatch_created_value_percentage . " %"
    );

    $output = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('border' => '1', 'cellpadding' => '5', 'cellspacing' => '0')));
  }
  return $output;
}

/*
 * Get Pending Bills Count And Value by Billing Date
 */

function get_mtd_data_pending_bills_count_value_pl_groupwise($distributor_id = 60, $mtd_type) {
  $query = db_select('node', 'n');
  $query->condition('n.type', 'outlet_master');
  $query->join('field_data_field_pl_group', 'pl', 'pl.entity_id = n.nid');
  $query->condition('n.uid', $distributor_id, '=');
  $query->fields('pl', array('field_pl_group_value'));
  $query->groupBy('field_pl_group_value');
  $ress = $query->execute()->fetchAll();

  if (!empty($ress)) {
    $row = array();
    foreach ($ress as $value) {
      $row[$value->field_pl_group_value][] = $value->field_pl_group_value;
      $pending_bill_sum_value = 0;
      for ($i = 1; $i <= 5; $i++) {
        switch ($i) {
          case '1':
            $start_date = strtotime('-1 day', strtotime(date('Y-m-d'))) + 86399;
            $end_date = strtotime('-1 day', strtotime(date('Y-m-d')));
            break;
          case '2':
            $start_date = strtotime('-2 day', strtotime(date('Y-m-d'))) + 86399;
            $end_date = strtotime('-2 day', strtotime(date('Y-m-d')));
            break;
          case '3':
            $start_date = strtotime('-3 day', strtotime(date('Y-m-d'))) + 86399;
            $end_date = strtotime('-3 day', strtotime(date('Y-m-d')));
            break;
          case '4':
            $start_date = strtotime('-4 day', strtotime(date('Y-m-d'))) + 86399;
            $end_date = strtotime('-4 day', strtotime(date('Y-m-d')));
            break;
          case '5':
            $start_date = strtotime('-5 day', strtotime(date('Y-m-d')));
            $end_date = strtotime('-12 day', strtotime(date('Y-m-d')));
            break;
        }

        $query = db_select('node', 'n');
        $query->condition('n.type', 'sales_register_data');
        $query->condition('n.uid', $distributor_id, '=');
        $query->join('field_data_field_billing_van', 'bva', 'bva.entity_id = n.nid');
        $query->join('field_data_field_sr_bill_date', 'bd', 'bd.entity_id = n.nid');
        $query->condition('bd.field_sr_bill_date_value', array($end_date, $start_date), 'BETWEEN');
        $query->join('field_data_field_bill_value', 'bv', 'bv.entity_id = n.nid');
        $query->join('field_data_field_party_code_reference', 'pc', 'pc.entity_id = n.nid');
        $query->join('field_data_field_pl_group', 'plg', 'plg.entity_id = pc.field_party_code_reference_nid');
        $query->condition('plg.field_pl_group_value', $value->field_pl_group_value, '=');
        $query->leftjoin('field_data_field_trip_id_reference', 'ti', 'ti.entity_id = n.nid');
        $query->leftjoin('node', 'disn', 'disn.nid = ti.field_trip_id_reference_nid');
        //$query->leftjoin('field_data_field_dispatch_status', 'disp_st', 'disp_st.entity_id = disn.nid');
        $query->leftjoin('field_data_field_dispatch_date', 'fd', 'fd.entity_id = disn.nid');
        if ($mtd_type == 'bill_count') {
          $query->addExpression('COUNT(n.title)', 'bill_value_count');
          //$query->addExpression('SUM(if(disp_st.field_dispatch_status_value=1, 1, 0))', 'trip_dispatch_sum_value');
          $query->addExpression('SUM(if(fd.field_dispatch_date_value IS NOT NULL, 1, 0))', 'trip_dispatch_sum_value');
        }
        else {
          $query->addExpression('SUM(bv.field_bill_value_value)', 'bill_value_count');
          //$query->addExpression('SUM(if(disp_st.field_dispatch_status_value=1, field_bill_value_value, 0))', 'trip_dispatch_sum_value');
          $query->addExpression('SUM(if(fd.field_dispatch_date_value IS NOT NULL, field_bill_value_value, 0))', 'trip_dispatch_sum_value');
        }
        $bill_res = $query->execute()->fetchAssoc();

        $pending_bill = ($bill_res['bill_value_count'] - $bill_res['trip_dispatch_sum_value']);
        $pending_bill_sum_value += $pending_bill;
        if ($bill_res['bill_value_count'] || $bill_res['trip_dispatch_sum_value']) {
          $row[$value->field_pl_group_value][] = $pending_bill;
        }
        else {
          $row[$value->field_pl_group_value][] = 0;
        }
      }
      $row[$value->field_pl_group_value][] = $pending_bill_sum_value;
    }

    $total = array();
    $total['Total'][0] = 'Total';
    for ($k = 1; $k < count($ress); $k++) {
      foreach ($ress as $value) {
        $total['Total'][$k] += $row[$value->field_pl_group_value][$k];
      }
    }
    $rows = array_merge($row, $total);
  }
  else {
    $output = "No Result Found";
  }

  if ($mtd_type == 'bill_count') {
    $header = array('PL Group', date('dS M', strtotime('-1 day')), date('dS M', strtotime('-2 days')), date('dS M', strtotime('-3 days')), date('dS M', strtotime('-4 days')), '>4 Days', 'Total Pending Bills');
  }
  else {
    $header = array('PL Group', date('dS M', strtotime('-1 day')), date('dS M', strtotime('-2 days')), date('dS M', strtotime('-3 days')), date('dS M', strtotime('-4 days')), '>4 Days', 'Total Pending Bill Value');
  }
  $output = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('border' => '1', 'cellpadding' => '5', 'cellspacing' => '0')));

  return $output;
}

function get_header_of_chhanel($otif = FALSE, $pl = FALSE) {
  if ($pl) {
    $header = array('PL GROUP', 'Bill Count', 'Bill Value', 'Dispatch (N+2) Count ', 'Dispatch (N+2) Value',
      'Dispatch (N+3) Count', 'Dispatch (N+3) Value', 'Dispatch (>N+3) Count', 'Dispatch (>N+3) Value', 'Not Dispatched Count', 'Not Dispatched Value', 'OTIF (N+2) Count%', 'OTIF (N+2) Value%',
      'OTIF (N+3) Count%', 'OTIF (N+3) Value%', 'OTIF (>N+3) Count%', 'OTIF (>N+3) Value%', 'Not Dispatched Count %', 'Not Dispatched Value %');
  }
  else {
    if ($otif) {
      $header = array('Channel', 'Bill Count', 'Bill Value', 'Dispatch (N+2) Count ', 'Dispatch (N+2) Value',
        'Dispatch (N+3) Count', 'Dispatch (N+3) Value', 'Dispatch (>N+3) Count', 'Dispatch (>N+3) Value', 'Not Dispatched Count', 'Not Dispatched Value', 'OTIF (N+2) Count%', 'OTIF (N+2) Value%',
        'OTIF (N+3) Count%', 'OTIF (N+3) Value%', 'OTIF (>N+3) Count%', 'OTIF (>N+3) Value%', 'Not Dispatched Count %', 'Not Dispatched Value %');
    }
    else {
      $header = array('Channel', 'Bill Count', 'Bill Value', 'Dispatch (N+2) Count ', 'Dispatch (N+2) Value',
        'Dispatch (N+3) Count', 'Dispatch (N+3) Value', 'OTIF (N+2) Count%', 'OTIF (N+2) Value%',
        'OTIF (N+3) Count%', 'OTIF (N+3) Value%');
    }
  }

  return $header;
}

function get_header_of_chhanel_otif() {
  $header = array('Channel', 'Bill Count', 'Bill Value', 'Dispatch (N+2) Count ', 'Dispatch (N+2) Value',
    'Dispatch (N+3) Count', 'Dispatch (N+3) Value', 'Dispatch (>N+3) Count', 'Dispatch (>N+3) Value', 'OTIF (N+2) Count%', 'OTIF (N+2) Value%',
    'OTIF (N+3) Count%', 'OTIF (N+3) Value%', 'OTIF (>N+3) Count%', 'OTIF (>N+3) Value%',);
  return $header;
}

function get_header_of_chhanel_impact() {
  $header = array('Channel', 'Bill Count', 'Bill Value', 'Impact (N+2) Count ', 'Impact (N+2) Value',
    'Impact (N+3) Count', 'Impact (N+3) Value', 'Impact (>N+3) Count', 'Impact (>N+3) Value', 'Impact (N+2) Count%', 'Impact (N+2) Value%',
    'Impact (N+3) Count%', 'Impact (N+3) Value%', 'Impact (>N+3) Count%', 'Impact (>N+3) Value%',);
  return $header;
}

/*
 * Function to send auto mailer of Pending OFD Sales Beat Wise Report.
 */

function send_email_pending_ofd_salesbeatwise_data() {
  $distributor_id = _DISTRIBUTOR_ID;
  $distributor_name = change_feeds_import_get_distributor_name($distributor_id);
  $start_date = strtotime('-7 day', strtotime(date('Y-m-d')));
  $end_date = strtotime('-1 day', strtotime(date('Y-m-d')));
  $query = db_select('node', 'n');
  $query->condition('n.type', 'sales_register_data');
  $query->condition('n.uid', $distributor_id, '=');
  $query->join('field_data_field_sr_bill_date', 'bd', 'bd.entity_id = n.nid');
  $query->groupBy('field_sr_bill_date_value');
  $query->condition('bd.field_sr_bill_date_value', array($start_date, $end_date), 'BETWEEN');
  $query->orderBy('field_sr_bill_date_value', 'DESC');
  $query->join('field_data_field_bill_value', 'bv', 'bv.entity_id = n.nid');
  $query->join('field_data_field_party_code_reference', 'pc', 'pc.entity_id = n.nid');
  $query->join('field_data_field_beat_name', 'sb', 'sb.entity_id = pc.field_party_code_reference_nid');
  $query->groupBy('field_beat_name_value');
  $query->join('field_data_field_salesman', 'sm', 'sm.entity_id = pc.field_party_code_reference_nid');
  $query->groupBy('field_salesman_value');

  $query->leftjoin('field_data_field_trip_id_reference', 'ti', 'ti.entity_id = n.nid');
  $query->leftjoin('field_data_field_dispatch_date', 'disp_date', 'disp_date.entity_id = ti.field_trip_id_reference_nid');

  // bill counts
  $query->addExpression('SUM(CASE WHEN (disp_date.field_dispatch_date_value IS NULL) THEN 1 ELSE 0 END)', 'bill_count');

  // bill values
  $query->addExpression('SUM(CASE WHEN (disp_date.field_dispatch_date_value IS NULL) THEN field_bill_value_value ELSE 0 END)', 'bill_value');

  $query->fields('bd', array('field_sr_bill_date_value'));
  $query->fields('sb', array('field_beat_name_value'));
  $query->fields('sm', array('field_salesman_value'));

  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  $header = array('Sr. No.', 'Bill Date', 'Sales Beat', 'Salesman', 'Bill Count', 'Bill Value');
  $row = array();
  $counter = 1;
  foreach ($res as $key => $data) {
    if ($data['bill_count'] != 0 && $data['bill_value'] != 0) {
      $row['serial_no'] = $counter++;
      $row['bill_date'] = date('d-m-Y', $data['field_sr_bill_date_value']);
      $row['beat_name'] = check_plain($data['field_beat_name_value']);
      $row['salesman'] = check_plain($data['field_salesman_value']);
      $row['bill_count'] = $data['bill_count'];
      $row['bill_value'] = $data['bill_value'];

      $rows[] = $row;
    }
  }

  $output = "<h3>Pending OFD Sales Beat Wise For Last 7 Days Till Yesterday</h3>";
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('border' => '1', 'cellpadding' => '5', 'cellspacing' => '0')));


  $params['subject'] = "Pending OFD Sales Beat Wise - " . $distributor_name;
  $params['body'] = $output;
  $mail_to = variable_get('ofd_salesbeatwise_to_email');
  $from = variable_get('from_email');

  drupal_mail('email_status', 'ofd_report_salesbeatwise', $mail_to, LANGUAGE_NONE, $params, $from);
}

function email_status_mail($key, &$message, $params) {
  switch ($key) {
    case 'daily_data':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      break;
    case 'productivity_status':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      $message['params']['attachments'][] = $params['attachment'];
      $message['params']['attachments'][] = $params['attachment2'];
      $message['params']['attachments'][] = $params['attachment3'];
      break;
    case 'pl_group_status':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      break;
    case 'channel_status':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      break;
    case 'ofd_report':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      break;
    case 'ofd_report_salesbeatwise':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      break;
    case 'collection_status':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      $message['params']['attachments'][] = $params['attachment'];
      break;
    case 'exception_mis':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      $message['params']['attachments'][] = $params['attachment'];
      $message['params']['attachments'][] = $params['attachment2'];
      $message['params']['attachments'][] = $params['attachment3'];
      break;
  }
}
