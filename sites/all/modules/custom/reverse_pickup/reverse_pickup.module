<?php

function reverse_pickup_menu() {
  $items = array();

  $items['order-receive-import'] = array(
    'title' => ' Order Receive Importer',
    'description' => ' Order Receive Importer',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('order_receive_import_form'),
    'access arguments' => array('Reverse Pickup'),
    'file' => 'form/order_receive_import.inc',
  );
  $items['order-receive-data-create'] = array(
    'title' => '',
    'page callback' => 'order_receive_data_create_callback',
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/order_receive_data_create.inc',
  );
  return $items;
}

/**
 * Service for reverse pickup
 */
function reverse_pickup_services_resources() {
  $reverse_pickup_resource = array(
    '#api_version' => 3002,
  );
    $reverse_pickup_resource = array(
    'order-receive' => array(
      'actions' => array(
        'order-receive-api' => array(
          'help' => 'Order',
          'callback' => 'order_receive_data_callback',
          'args' => array(
            array(
              'name' => 'data',
              'type' => 'array',
              'description' => 'Post data',
              'source' => 'data',
              'optional' => TRUE,
            )
           ),
            'file' => array(
              'type' => 'inc',
              'module' => 'reverse_pickup',
              'name' => 'includes/order_receive_data'
            ),
            'access arguments' => array('Order Receive API'),
          ),
        ),
      ),
  );
  return $reverse_pickup_resource;
}

/**
 * permission
 */
function reverse_pickup_permission() {

  return array(
    'Reverse Pickup' => array(
      'title' => t('Reverse Pickup'),
      'description' => t('Reverse Pickup')
    ),
    'Order Receive API' => array(
      'title' => t('Order Receive API'),
      'description' => t('Order Receive API')
    )   
  );
}


/**
 * Implements of hook_views_api().
 */
function reverse_pickup_views_api() {
   return array(
     'api' => 3,
     'path' => drupal_get_path('module', 'reverse_pickup') . '/views'
   );
}

function get_order_qty_from_bill_sku($bill_no, $sku, $distributor_id) {
    $query = db_select('custom_billing_data', 'cb');
    $query->condition('cb.bill_number', $bill_no, '=');
    $query->condition('cb.sku7_code', $sku, '=');
    $query->condition('cb.distributor_id', $distributor_id, '=');
    $query->fields('cb', array('Sum_of_TOTAL_SALES_QTY'));
    $delivered_qty = $query->execute()->fetchField();
    return $delivered_qty;
}

function get_distributor_by_title($title,$type){
  $query = db_select('node', 'n');
  $query->condition('n.type', $type);
  $query->condition('n.title', $title);
  $query->fields('n', array('uid'));
  $result = $query->execute()->fetchField();
  return $result;
}


function validate_content_title($title,$type){
  $query = db_select('node', 'n');
  $query->condition('n.type', $type);
  $query->condition('n.title', $title);
  $query->fields('n', array('title'));
  $result = $query->execute()->fetchField();
  return $result;
}

function check_bill_exists_with_party($title, $type, $party) {
    $query1 = db_select('node', 'n');
    $query1->condition('n.type', $type);
    $query1->condition('n.title', $title);
    $query1->fields('n', array('nid'));
    if ($party) {
        $query1->join('field_data_field_sales_party_code', 'd', 'd.entity_id = n.nid');
        $query1->condition('d.field_sales_party_code_value', $party);
    }
    $nid = $query1->execute()->fetchField();
    return $nid;
}

//will use this function if we have to check delivered qty
function get_delivered_qty_from_bill_sku($bill_no, $sku, $distributor_id) {
    $query = db_select('dispatch_planning_api_data', 'ad');
    $query->join('dispatch_planning_item_details', 'itd', 'itd.trip_bill_reference = ad.id');
    $query->condition('ad.bill_number', $bill_no, '=');
    $query->condition('ad.distributor_id', $distributor_id, '=');
    $query->condition('itd.sku_code', $sku, '=');
    $query->fields('itd', array('res_sku_actual_quantity1'));
    $delivered_qty = $query->execute()->fetchField();
  return $delivered_qty;
}

function check_child_order_in_order_receive($child_order_id, $type, $distributor_id) {
    $query = db_select('order_receive_data', 'ord');
    $query->condition('ord.child_order_id', $child_order_id, '=');
    $query->condition('ord.distributor_id', $distributor_id, '=');
    $query->condition('ord.order_type', $type, '=');
    $query->fields('ord', array('child_order_id'));
    $res = $query->execute()->fetchField();
  return $res;
}

function check_child_order_in_sales_register($child_order_id, $distributor_id) {
    $query = db_select('field_data_field_outlet_order_no', 'fco');
    $query->join('node', 'n', 'fco.entity_id = n.nid');
    $query->condition('fco.bundle', 'sales_register_data', '=');
    $query->condition('fco.field_outlet_order_no_value', $child_order_id, '=');
    $query->condition('n.uid', $distributor_id, '=');
    $query->fields('fco', array('field_outlet_order_no_value'));
    $res = $query->execute()->fetchField();
  return $res;
}

function get_upc_by_skus($sku7_code) {
    $query = db_select('node', 'n');
    $query->condition('n.type', 'sku7_code_master');
    $query->condition('n.title', $sku7_code);
    $query->leftjoin('field_data_field_unit_case_units_', 'uc', 'uc.entity_id = n.nid');
    $query->addField('uc', 'field_unit_case_units__value', 'upc');
    $res = $query->execute()->fetchField();
    return $res;
}


//Call the Forward Order API when return confirmed
function reverse_pickup_node_presave($node) {
    if ($node->type == 'dispatch_data') {

        $status = $node->field_vrs_status[LANGUAGE_NONE][0]['value'];
        $prev_status = $node->original->field_vrs_status[LANGUAGE_NONE][0]['value'];

        if ($status == 2 &&  $prev_status != $status) {
            $data = $api_data = array();
            $nid = $node->nid;
            $trip_id = $node->title;
            $distributor_id = $node->uid;
            $sales_data = reverse_pickup_get_all_bill_parentbill($nid);
            foreach ($sales_data as $sales_info) {
                $bill = $sales_info['bill'];
                $parent_bill = $sales_info['parent_bill'];
                $parent_bill = $parent_bill ? $parent_bill : $bill;
                $child_bill = $sales_info['child_bill'];
                $dispatch_info = reverse_pickup_get_delivered_sku_details($bill, $trip_id, $distributor_id);
                $counter = 0;
                foreach ($dispatch_info as $value) {
                    $sku = $value['sku_code'];
                    $order_info = reverse_pickup_get_lb_details($child_bill, $parent_bill, $sku, $distributor_id);
                    $data[$bill]['parent_order_no'] = $child_bill;
                    $data[$bill]['parent_bill_no'] = $parent_bill;
                    $data[$bill]['input_type'] = '1';                  
                    //scan_code
                    foreach ($order_info as $key1 => $val1) {
                        $data[$bill]['distributor_code'] = $val1['external_dis_id'];  
                        $data[$bill]['details'][$val1['lb_sku_id'].'#'.$val1['pkd']]['lbsku_id'] = $val1['lb_sku_id'];
//                    $data[$bill]['details'][$bill][$counter]['packed_qty'] = $value['packed_qty'];
                        $data[$bill]['details'][$val1['lb_sku_id'].'#'.$val1['pkd']]['packed_qty'] = "";
                        $data[$bill]['details'][$val1['lb_sku_id'].'#'.$val1['pkd']]['delivered_qty'] = $value['delivered_qty'];
                        $data[$bill]['details'][$val1['lb_sku_id'].'#'.$val1['pkd']]['pkd'] = $val1['pkd'];
                        $data[$bill]['details'][$val1['lb_sku_id'].'#'.$val1['pkd']]['scan_code'][$val1['lb_sku_id'].'#'.$val1['pkd']]['ean_code'] = $val1['ean_code'];
                        $data[$bill]['details'][$val1['lb_sku_id'].'#'.$val1['pkd']]['scan_code'][$val1['lb_sku_id'].'#'.$val1['pkd']]['pkd'] = $val1['pkd'];
                        $data[$bill]['details'][$val1['lb_sku_id'].'#'.$val1['pkd']]['scan_code'][$val1['lb_sku_id'].'#'.$val1['pkd']]['packed_qty'] = '';
                        $data[$bill]['details'][$val1['lb_sku_id'].'#'.$val1['pkd']]['scan_code'][$val1['lb_sku_id'].'#'.$val1['pkd']]['delivered_qty'] = $value['delivered_qty'];
                        $data[$bill]['details'][$val1['lb_sku_id'].'#'.$val1['pkd']]['scan_code'][$val1['lb_sku_id'].'#'.$val1['pkd']]['crate_id'] = $val1['crate_id'];
                    }
//                    $data[$bill]['details'][$bill][$counter]['scan_code'] = $res;
                
                    $counter++;
                }
            }//End of all data create
            foreach($data as $key => $value){
                $data_arr = array();
                $data_arr['parent_order_no'] = $value['parent_order_no'];
                $data_arr['parent_bill_no'] = $value['parent_bill_no'];
                $data_arr['input_type'] = '1';
                $data_arr['distributor_code'] = $value['distributor_code'];
                $data_arr['details'] = array();
                foreach($value['details'] as $val){
                   // foreach ($val['scan_code'] as $k => $v) {
                        $val['scan_code'] = array_values($val['scan_code']);
                    //}
                    $data_arr['details'][] = $val;
                }
                $api_data['data'][] = $data_arr;
            }
            if($api_data){
                $json_api_data = json_encode($api_data);
                
                $sql_ins_id = db_insert('oms_api_log')
                    ->fields(array(
                        'received_data' => $json_api_data,
                        'request_time' => time(),
                    ))
                    ->execute();
                
                $request_headers = array('Content-Type' => 'application/json');
                $api_url = 'http://15.206.34.41:8094/order_management/orderUpdate/';
                $options = array('headers' => $request_headers, 'method' => 'POST', 'data' => $json_api_data);
                $response = drupal_http_request($api_url, $options);
                
                db_update('oms_api_log')
                    ->fields(array(
                        'response_data' => json_encode($response),
                    ))
                    ->condition('id', $sql_ins_id, '=')
                    ->execute();
                
                watchdog('orderUpdateREQ', '<pre>' . print_r($json_api_data, TRUE) . '</pre>');     
                watchdog('orderUpdateRES', '<pre>' . print_r($response, TRUE) . '</pre>');     
            }
        }
    }
}

function reverse_pickup_get_lb_details($child_bill, $parent_bill, $sku7_code, $distributor_id) {
    $query = db_select('order_receive_data', 'ord');
    $query->condition('ord.child_order_id', $child_bill, '=');
    //$query->condition('ord.parent_bill_number', $parent_bill, '=');
//    $query->condition('ord.sku7_code', $sku7_code, '=');
    $query->condition('ord.distributor_id', $distributor_id, '=');
    $query->fields('ord', array('lb_sku_id', 'pkd','ean_code','crate_id','external_dis_id'));
    $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    return $res;
}

function reverse_pickup_get_delivered_sku_details($bill_number, $trip_id, $distributor_id) {
    $query = db_select('dispatch_planning_api_data', 'ad');
    $query->condition('ad.distributor_id', $distributor_id, '=');
    $query->condition('ad.runsheet_number', $trip_id, '=');
    $query->condition('ad.bill_number', $bill_number, '=');
    $query->join('dispatch_planning_item_details', 'dpi', 'dpi.trip_bill_reference = ad.id');
    $query->addExpression('ad.bill_number', 'bill_number');
    $query->addExpression('dpi.res_sku_actual_quantity1', 'delivered_qty');
    $query->addExpression('dpi.dispatch_qty', 'packed_qty');
    $query->addExpression('dpi.sku_code', 'sku_code');
    $res = $query->execute()->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_UNIQUE | PDO::FETCH_ASSOC);
    return $res;
}

function reverse_pickup_get_all_bill_parentbill($nid) {
    $res = array();
    if (!empty($nid)) {
        $query = db_select('node', 'n');
        $query->condition('n.type', 'sales_register_data');
        $query->join('field_data_field_trip_id_reference', 'ti', 'ti.entity_id = n.nid');
        $query->leftjoin('field_data_field_parent_bill_number', 'pb', 'pb.entity_id = n.nid');
        $query->join('field_data_field_outlet_order_no', 'oo', 'oo.entity_id = n.nid');
        $query->condition('ti.field_trip_id_reference_nid', $nid);
        $query->addExpression('n.title', 'title');
        $query->addExpression('n.title', 'bill');
        $query->addExpression('pb.field_parent_bill_number_value', 'parent_bill');
        $query->addExpression('oo.field_outlet_order_no_value', 'child_bill');
        $res = $query->execute()->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_UNIQUE | PDO::FETCH_ASSOC);
    }
    return $res;
}
