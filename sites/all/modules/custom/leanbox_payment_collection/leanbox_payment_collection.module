<?php

/**
 * Files containing list of functions for payment collection
 */

/**
 * Implements hook_preprocess_page
 * @param type $vars
 */
function leanbox_payment_collection_preprocess_page(&$vars) {
  $arg0 = arg(0);
  if ($arg0 == 'payment-collection') {
    drupal_add_js(drupal_get_path('module', 'leanbox_payment_collection') . '/js/leanbox_payment_collection.js');
  }
}

/**
 * Implements hook_menu
 */
function leanbox_payment_collection_menu() {
   $items = array();

   $items['upload-collection-bill/signed'] = array(
     'title' => 'Declare Payment Collection',
     'page callback' => 'drupal_get_form',
     'page arguments' => array('upload_signed_bill_callback'),
     'access arguments' => array('upload payment collection'),
     'type' => MENU_CALLBACK,
     'file' => 'form/leanbox_payment_collection.form.inc',
   );
   $items['upload-collection-bill/bounced'] = array(
     'title' => 'Declare Payment Collection',
     'page callback' => 'drupal_get_form',
     'page arguments' => array('upload_signed_bill_callback'),
     'access arguments' => array('upload payment collection'),
     'type' => MENU_CALLBACK,
     'file' => 'form/leanbox_payment_collection.form.inc',
   );
   $items['bill-no/list'] = array(
     'title' => 'Get List of logged in distributor bills',
     'page callback' => 'get_list_of_bill_no',
     'access arguments' => array('upload payment collection'),
     'type' => MENU_CALLBACK,
   );
   $items['email/payment-collection-status'] = array(
    'title' => 'Send Email Of Signed and Bounced Chq Status',
    'page callback' => 'send_email_payment_collection_status',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'includes/payment_collection_status_automailer.inc',
   );
   return $items;
}

/**
 * Implement hook_permission()
 *  Add custom permission for collection payment
 */
function leanbox_payment_collection_permission() {
   return array(
     'upload payment collection' => array(
       'title' => t('upload payment collection'),
       'description' => t('upload payment collection for bills')
     )
   );
}

/**
 * Menu callback; Retrieve a JSON object containing autocomplete suggestions for existing bill no.
 * @param type $string
 */
function get_list_of_bill_no($string = '') {
   global $user;
   $res = '';
   // Store distributor id in author in each node
   $dis_id = change_feeds_import_get_distributor_id($user->uid);
   $length = strlen($string);
   if ($length > 2) {
      if (!empty($dis_id) && !empty($string)) {
         $query = db_select('node', 'n');
         $query->join('field_data_field_trip_id_reference', 'tr', 'tr.entity_id = n.nid');
         $query->condition('n.type', 'sales_register_data');
         $query->condition('n.uid', $dis_id);
         $query->condition('n.title', db_like($string) . '%', 'LIKE');
         $query->fields('n', array('title'));
         $query->range(0, 10);
         $res = $query->execute()->fetchAllKeyed(0, 0);
      }
   }
   drupal_json_output($res);
}

/**
 * 
 * @param type $bill_no
 * @param type $dis_id
 * @return array
 */
function leanbox_payment_collection_get_title_and_nid_combo($bill_no, $dis_id) {
   $res = array();
   if (!empty($bill_no) && !empty($dis_id)) {
      $query = db_select('node', 'n');
      $query->leftjoin('field_data_field_sales_bill_no_ref', 'br', 'n.nid = br.field_sales_bill_no_ref_nid');
      $query->condition('n.type', 'sales_register_data');
      $query->addField('br', 'entity_id', 'payment_collection_nid');
      $query->addField('n', 'nid', 'sales_register_nid');
      $query->condition('n.title', $bill_no);
      $query->condition('n.uid', $dis_id);
      $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
   }
   return $res;
}

/**
 * Implements hook_node_presave()
 */
function leanbox_payment_collection_node_presave($node) {
  if ($node->type == 'payment_collection') {
    if ($node->original->field_file['und'][0]['fid'] != $node->field_file['und'][0]['fid']) {
      $node->field_file_upload_date['und'][0]['value'] = date('Y-m-d');
    }
    if ($node->original->field_assigned_person['und'][0]['value'] != $node->field_assigned_person['und'][0]['value']) {
      $node->field_assignment_date['und'][0]['value'] = date('Y-m-d');
      $node->field_returned_bill_flag['und'][0]['value'] = 0;
      unset($node->field_return_remarks['und']);
    }
    if(empty($node->field_file['und'][0]['fid'])){
      unset($node->field_file_upload_date['und'][0]['value']);
    }
    if(empty($node->field_assigned_person['und'][0]['value'])){
      unset($node->field_assignment_date['und'][0]['value']);
    }
    if ($node->original->field_returned_bill_flag['und'][0]['value'] != 1 && $node->field_returned_bill_flag['und'][0]['value'] == 1) {
      // New node Create
      $assign_history = new StdClass();
      $assign_history->type = 'assignment_history';
      node_object_prepare($assign_history); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
      $assign_history->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
      $assign_history->uid = $node->uid;
      $assign_history->status = 1; //(1 or 0): published or not
      $assign_history->comment = 0; // 0 = comments disabled, 1 = read only, 2 = read/write
      $assign_history->title = $node->title;
      $assign_history->field_assign_person['und'][0]['value'] = $node->field_assigned_person['und'][0]['value'];
      $assign_history->field_assign_date['und'][0]['value'] = $node->field_assignment_date['und'][0]['value'];
      $assign_history->field_returned_date['und'][0]['value'] = date("Y-m-d");
      $assign_history->field_payment_collection_nid[$node->language][0]['nid'] = $node->nid;
      $assign_history->field_history_return_remarks['und'][0]['value'] = $node->field_return_remarks['und'][0]['value']; // return remark
      node_save($assign_history);
      unset($node->field_assigned_person['und']);
      unset($node->field_assignment_date['und']);
      unset($node->field_collection_cheque_date['und']);
      unset($node->field_cash_amt['und']);
      unset($node->field_collection_cheque_amt['und']);
    }
     
    
    if(arg(0) == 'payment-collection') {   
    // Create Collection History
      if((!empty($node->field_cash_amt['und'][0]['value']) || !empty($node->field_collection_cheque_amt['und'][0]['value']) || !empty($node->field_fine_amount['und'][0]['value'])) && $node->field_returned_bill_flag['und'][0]['value'] != 1) {
        $collection_his = new StdClass();
        $collection_his->type = 'collection_history';
        node_object_prepare($collection_his); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
        $collection_his->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
        $collection_his->uid = $node->uid;
        $collection_his->status = 1; //(1 or 0): published or not
        $collection_his->comment = 0; // 0 = comments disabled, 1 = read only, 2 = read/write
        $collection_his->title = $node->title;
        $collection_his->field_payment_collection_referen[$node->language][0]['nid'] = $node->nid;
        $collection_his->field_assign_to[$node->language][0]['value'] = $node->field_assigned_person['und'][0]['value'];
        $collection_his->field_collection_cash_amount[$node->language][0]['value'] = $node->field_cash_amt['und'][0]['value'];
        $collection_his->field_collection_cheque_amount[$node->language][0]['value'] = $node->field_collection_cheque_amt['und'][0]['value'];
        $collection_his->field_collection_cheque_num[$node->language][0]['value'] = $node->field_collection_cheque_number['und'][0]['value'];
        $collection_his->field_collection_chq_date[$node->language][0]['value'] = $node->field_collection_cheque_date['und'][0]['value'];
        $collection_his->field_collection_history_date[$node->language][0]['value'] = date('Y-m-d');
        $collection_his->field_his_partial_coll_remarks[$node->language][0]['value'] = $node->field_partial_collection_remarks['und'][0]['value']; // partial remark
        $collection_his->field_his_fine_amount[$node->language][0]['value'] = $node->field_fine_amount['und'][0]['value']; // Fine Amount
        node_save($collection_his);
        
        //Save the previous cash and cheque amount in payment collection content type    
        $node->field_previous_cash_amt['und'][0]['value'] = $node->field_previous_cash_amt['und'][0]['value'] + $node->field_cash_amt['und'][0]['value'];
        $node->field_previous_cheque_amt['und'][0]['value'] = $node->field_previous_cheque_amt['und'][0]['value'] + $node->field_collection_cheque_amt['und'][0]['value'];
        $node->field_collection_date[$node->language][0]['value'] = date('Y-m-d');
        //Get the bill value
        $bill_value = $node->field_remaining_amt_collection['und'][0]['value'];
        
        //Update the difference field in payment collection
        $node->field_field_amnt_difference['und'][0]['value'] = $bill_value - ($node->field_previous_cash_amt['und'][0]['value'] + $node->field_previous_cheque_amt['und'][0]['value']);
        
        //Update the previous fine amount field
        $node->field_previous_fine_amount['und'][0]['value'] = ($node->field_previous_fine_amount['und'][0]['value'] + $node->field_fine_amount['und'][0]['value']);
        
        unset($node->field_cash_amt['und']);
        unset($node->field_collection_cheque_amt['und']);
        unset($node->field_fine_amount['und']);
        
        if($node->field_field_amnt_difference['und'][0]['value'] == 0) {
          $node->field_collection_status['und'][0]['value'] = '2';
        }
        else {
          $node->field_collection_status['und'][0]['value'] = '1';
        }
      }
    }
  }
}

/*
 * Function to send auto mailer of Payment Collection Status.
 */
function send_email_payment_collection_status() {
  $distributor_id = _DISTRIBUTOR_ID;
  $distributor_name = change_feeds_import_get_distributor_name($distributor_id);
  
  // Pending For Collection
  $pending_for_collection_html = get_email_pending_for_collection($distributor_id);
  
  // Pending For Assignment
  $pending_for_assignment_html = get_email_pending_for_assignment($distributor_id);
  
  // Pending For Upload
  $pending_for_upload_html = get_email_pending_for_upload($distributor_id);
  
  $params['subject'] = "<h3>SB And Bounce Chq Status</h3>";
  $params['body'] = $pending_for_collection_html . "<br>" . $pending_for_assignment_html . "<br>" . $pending_for_upload_html;
  $mail_to = variable_get('to_email');
  $from = variable_get('from_email');

  drupal_mail('email_status', 'collection_status', $mail_to, LANGUAGE_NONE, $params, $from);
}

function get_email_pending_for_collection($distributor_id) {
  $query = db_select('node', 'n');
  $query->condition('n.type', 'payment_collection');
  $query->condition('n.uid', $distributor_id, '=');
  $query->join('field_data_field_declaration_date', 'dd', 'dd.entity_id = n.nid');
  $query->join('field_data_field_flag', 'ff', 'ff.entity_id = n.nid');
  $query->join('field_data_field_collection_status', 'cs', 'cs.entity_id = n.nid');
  $query->condition('cs.field_collection_status_value', '2', '!=');
  $query->join('field_data_field_remaining_amt_collection', 'ra', 'ra.entity_id = n.nid');
  $query->leftjoin('field_data_field_previous_cash_amt', 'pc', 'pc.entity_id = n.nid');
  $query->leftjoin('field_data_field_previous_cheque_amt', 'pch', 'pch.entity_id = n.nid');
  
  $query->fields('n', array('nid'));
  $query->fields('dd', array('field_declaration_date_value'));
  $query->fields('ff', array('field_flag_value'));
  $query->fields('cs', array('field_collection_status_value'));
  $query->fields('ra', array('field_remaining_amt_collection_value'));
  $query->fields('pc', array('field_previous_cash_amt_value'));
  $query->fields('pch', array('field_previous_cheque_amt_value'));
  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  $signed_counter  = 1;
  $bounced_counter  = 1;
  $decl_signed_counter = 1;
  $decl_bounced_counter = 1;
  $rows = array();
  $row[] = array('Type', 'Count', 'Value', 'Count', 'Value');
  $start_date = strtotime('-8 day', strtotime(date('Y-m-d')));
  $end_date =  strtotime(date('Y-m-d'));
  foreach($res as $data) {
    if($data['field_flag_value']  == 'signed') {
      $row['signed']['type']  = 'Signed';
      $row['signed']['count']  = $signed_counter++;
      $row['signed']['value'] += $data['field_remaining_amt_collection_value'] - ($data['field_previous_cash_amt_value'] + $data['field_previous_cheque_amt_value']);
      if(strtotime($data['field_declaration_date_value'])  >= $start_date  && strtotime($data['field_declaration_date_value'])  <= $end_date) {
        $row['signed']['decl_count'] = $decl_signed_counter++;
        $row['signed']['decl_value'] += $data['field_remaining_amt_collection_value'] - ($data['field_previous_cash_amt_value'] + $data['field_previous_cheque_amt_value']);
      }
      else {
        $row['signed']['decl_count'] = 0;
        $row['signed']['decl_value'] = 0;
      }
    }
    else{
      $row['bounced']['type']  = 'Bounced';
      $row['bounced']['count']  = $bounced_counter++;
      $row['bounced']['value'] += $data['field_remaining_amt_collection_value'] - ($data['field_previous_cash_amt_value'] + $data['field_previous_cheque_amt_value']);
      if(strtotime($data['field_declaration_date_value'])  >= $start_date  && strtotime($data['field_declaration_date_value'])  <= $end_date) {
        $row['bounced']['decl_count'] = $decl_bounced_counter++;
        $row['bounced']['decl_value'] += $data['field_remaining_amt_collection_value'] - ($data['field_previous_cash_amt_value'] + $data['field_previous_cheque_amt_value']);
      }
      else {
        $row['bounced']['decl_count'] = 0;
        $row['bounced']['decl_value'] = 0;
      }
    }
  } 
  
  $header = array('', array('data' => 'Till Date', 'colspan' => 2), array('data' => '>8Days from Declaration Date', 'colspan' => 2));
  $output = "<h3>Pending for Collection</h3>";
  $output .= theme('table', array('header' => $header, 'rows' => $row, 'attributes' => array('border' => '1', 'cellpadding' => '5', 'cellspacing' => '0')));

  return $output;
}

function get_email_pending_for_assignment($distributor_id) {
  $query = db_select('node', 'n');
  $query->condition('n.type', 'payment_collection');
  $query->condition('n.uid', $distributor_id, '=');
  $query->join('field_data_field_declaration_date', 'dd', 'dd.entity_id = n.nid');
  $query->join('field_data_field_flag', 'ff', 'ff.entity_id = n.nid');
  $query->join('field_data_field_remaining_amt_collection', 'ra', 'ra.entity_id = n.nid');
  $query->leftjoin('field_data_field_assignment_date', 'ad', 'ad.entity_id = n.nid');
  $query->isNull('ad.field_assignment_date_value');
  
  $query->fields('n', array('nid'));
  $query->fields('dd', array('field_declaration_date_value'));
  $query->fields('ff', array('field_flag_value'));
  $query->fields('ra', array('field_remaining_amt_collection_value'));
  $query->fields('ad', array('field_assignment_date_value'));
  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  $signed_counter  = 1;
  $bounced_counter  = 1;
  $decl_signed_counter = 1;
  $decl_bounced_counter = 1;
  $rows = array();
  $row[] = array('Type', 'Count', 'Value', 'Count', 'Value');
  $start_date = strtotime('-7 day', strtotime(date('Y-m-d')));
  $end_date =  strtotime(date('Y-m-d'));
  foreach($res as $data) {
    if($data['field_flag_value']  == 'signed') {
      $row['signed']['type']  = 'Signed';
      $row['signed']['count']  = $signed_counter++;
      $row['signed']['value'] += $data['field_remaining_amt_collection_value'];
      if(strtotime($data['field_declaration_date_value'])  >= $start_date  && strtotime($data['field_declaration_date_value'])  <= $end_date) {
        $row['signed']['decl_count'] = $decl_signed_counter++;
        $row['signed']['decl_value'] += $data['field_remaining_amt_collection_value'];
      }
      else {
        $row['signed']['decl_count'] = 0;
        $row['signed']['decl_value'] = 0;
      }
    }
    else{
      $row['bounced']['type']  = 'Bounced';
      $row['bounced']['count']  = $bounced_counter++;
      $row['bounced']['value'] += $data['field_remaining_amt_collection_value'];
      if(strtotime($data['field_declaration_date_value'])  >= $start_date  && strtotime($data['field_declaration_date_value'])  <= $end_date) {
        $row['bounced']['decl_count'] = $decl_bounced_counter++;
        $row['bounced']['decl_value'] += $data['field_remaining_amt_collection_value'];
      }
      else {
        $row['bounced']['decl_count'] = 0;
        $row['bounced']['decl_value'] = 0;
      }
    }
  }

  $header = array('', array('data' => 'Till Date', 'colspan' => 2), array('data' => '>7Days from Declaration Date', 'colspan' => 2));
  $output = "<h3>Pending for Assignment</h3>";
  $output .= theme('table', array('header' => $header, 'rows' => $row, 'attributes' => array('border' => '1', 'cellpadding' => '5', 'cellspacing' => '0')));

  return $output;
}

function get_email_pending_for_upload($distributor_id) {
  $query = db_select('node', 'n');
  $query->condition('n.type', 'payment_collection');
  $query->condition('n.uid', $distributor_id, '=');
  $query->join('field_data_field_declaration_date', 'dd', 'dd.entity_id = n.nid');
  $query->join('field_data_field_flag', 'ff', 'ff.entity_id = n.nid');
  $query->join('field_data_field_remaining_amt_collection', 'ra', 'ra.entity_id = n.nid');
  $query->leftjoin('field_data_field_file_upload_date', 'ud', 'ud.entity_id = n.nid');
  $query->isNull('ud.field_file_upload_date_value');
  
  $query->fields('n', array('nid'));
  $query->fields('dd', array('field_declaration_date_value'));
  $query->fields('ff', array('field_flag_value'));
  $query->fields('ra', array('field_remaining_amt_collection_value'));
  $query->fields('ud', array('field_file_upload_date_value'));
  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  $signed_counter  = 1;
  $bounced_counter  = 1;
  $decl_signed_counter = 1;
  $decl_bounced_counter = 1;
  $rows = array();
  $row[] = array('Type', 'Count', 'Value', 'Count', 'Value');
  $start_date = strtotime('-2 day', strtotime(date('Y-m-d')));
  $end_date =  strtotime(date('Y-m-d'));
  foreach($res as $data) {
    if($data['field_flag_value']  == 'signed') {
      $row['signed']['type']  = 'Signed';
      $row['signed']['count']  = $signed_counter++;
      $row['signed']['value'] += $data['field_remaining_amt_collection_value'];
      if(strtotime($data['field_declaration_date_value'])  >= $start_date  && strtotime($data['field_declaration_date_value'])  <= $end_date) {
        $row['signed']['decl_count']  = $decl_signed_counter++;
        $row['signed']['decl_value'] += $data['field_remaining_amt_collection_value'];
      }
      else {
        $row['signed']['decl_count']  = 0;
        $row['signed']['decl_value']  = 0;
      }
    }
    else {
      $row['bounced']['type']  = 'Bounced';
      $row['bounced']['count']  = $bounced_counter++;
      $row['bounced']['value'] += $data['field_remaining_amt_collection_value'];
      if(strtotime($data['field_declaration_date_value'])  >= $start_date  && strtotime($data['field_declaration_date_value'])  <= $end_date) {    
        $row['bounced']['decl_count']  = $decl_bounced_counter++;
        $row['bounced']['decl_value'] += $data['field_remaining_amt_collection_value'];
      }
      else {
        $row['bounced']['decl_count']  = 0;
        $row['bounced']['decl_value'] = 0;
      }
    }
  }

  $header = array('', array('data' => 'Till Date', 'colspan' => 2), array('data' => '>2Days from Declaration Date', 'colspan' => 2));
  $output = "<h3>Pending for Upload</h3>";
  $output .= theme('table', array('header' => $header, 'rows' => $row, 'attributes' => array('border' => '1', 'cellpadding' => '5', 'cellspacing' => '0')));

  return $output;
}
