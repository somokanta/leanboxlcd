<?php

/**
 * Files containing list of functions for payment collection
 */

/**
 * Implements hook_menu
 */
function leanbox_payment_collection_menu() {
   $items = array();

   $items['upload-collection-bill/signed'] = array(
     'title' => 'Declare Payment Collection',
     'page callback' => 'drupal_get_form',
     'page arguments' => array('upload_signed_bill_callback'),
     'access arguments' => array('upload payment collection'),
     'type' => MENU_CALLBACK,
     'file' => 'form/leanbox_payment_collection.form.inc',
   );
   $items['upload-collection-bill/bounced'] = array(
     'title' => 'Declare Payment Collection',
     'page callback' => 'drupal_get_form',
     'page arguments' => array('upload_signed_bill_callback'),
     'access arguments' => array('upload payment collection'),
     'type' => MENU_CALLBACK,
     'file' => 'form/leanbox_payment_collection.form.inc',
   );
   $items['bill-no/list'] = array(
     'title' => 'Get List of logged in distributor bills',
     'page callback' => 'get_list_of_bill_no',
     'access arguments' => array('upload payment collection'),
     'type' => MENU_CALLBACK,
   );

   return $items;
}

/**
 * Implement hook_permission()
 *  Add custom permission for collection payment
 */
function leanbox_payment_collection_permission() {
   return array(
     'upload payment collection' => array(
       'title' => t('upload payment collection'),
       'description' => t('upload payment collection for bills')
     )
   );
}

/**
 * Menu callback; Retrieve a JSON object containing autocomplete suggestions for existing bill no.
 * @param type $string
 */
function get_list_of_bill_no($string = '') {
   global $user;
   $res = '';
   // Store distributor id in author in each node
   $dis_id = change_feeds_import_get_distributor_id($user->uid);
   $length = strlen($string);
   if ($length > 2) {
      if (!empty($dis_id) && !empty($string)) {
         $query = db_select('node', 'n');
         $query->join('field_data_field_trip_id_reference', 'tr', 'tr.entity_id = n.nid');
         $query->condition('n.type', 'sales_register_data');
         $query->condition('n.uid', $dis_id);
         $query->condition('n.title', db_like($string) . '%', 'LIKE');
         $query->fields('n', array('title'));
         $query->range(0, 10);
         $res = $query->execute()->fetchAllKeyed(0, 0);
      }
   }
   drupal_json_output($res);
}

/**
 * 
 * @param type $bill_no
 * @param type $dis_id
 * @return array
 */
function leanbox_payment_collection_get_title_and_nid_combo($bill_no, $dis_id) {
   $res = array();
   if (!empty($bill_no) && !empty($dis_id)) {
      $query = db_select('node', 'n');
      $query->leftjoin('field_data_field_sales_bill_no_ref', 'br', 'n.nid = br.field_sales_bill_no_ref_nid');
      $query->condition('n.type', 'sales_register_data');
      $query->addField('br', 'entity_id', 'payment_collection_nid');
      $query->addField('n', 'nid', 'sales_register_nid');
      $query->condition('n.title', $bill_no);
      $query->condition('n.uid', $dis_id);
      $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
   }
   return $res;
}

/**
 * Implements hook_node_presave()
 */
function leanbox_payment_collection_node_presave($node) {
  global $user;
  if ($node->type == 'payment_collection') {
    if ($node->original->field_file['und'][0]['fid'] != $node->field_file['und'][0]['fid']) {
      $node->field_file_upload_date['und'][0]['value'] = date('Y-m-d');
    }
    if ($node->original->field_assigned_person['und'][0]['value'] != $node->field_assigned_person['und'][0]['value']) {
      $node->field_assignment_date['und'][0]['value'] = date('Y-m-d');
    }
    if(empty($node->field_file['und'][0]['fid'])){
      unset($node->field_file_upload_date['und'][0]['value']);
    }
    if(empty($node->field_assigned_person['und'][0]['value'])){
      unset($node->field_assignment_date['und'][0]['value']);
    }
    if ($node->field_returned_bill_flag['und'][0]['value'] == 1) {
      unset($node->field_assigned_person['und']);
      unset($node->field_assignment_date['und']);
      unset($node->field_collection_cheque_date['und']);
    }

    if(arg(0) == 'payment-collection') {
    // Create Collection History
      foreach($node as $value) {
        //dpm($value);
        if(!empty($value->field_cash_amt['und'][0]['value']) || !empty($value->field_collection_cheque_amt['und'][0]['value'])) {
          $collection_his = new StdClass();
          $collection_his->type = 'collection_history';
          $collection_his->language = 'und';
          $collection_his->uid = $user->uid;
          $collection_his->created = time();
          $collection_his->changed = time();
          $collection_his->status = 1;
          $collection_his->comment = 0;
          $collection_his->promote = 0;
          $collection_his->sticky = 0;
          $collection_his->title = $node->title;
          $collection_his->body['und'][0]['value']  = '';
          $collection_his->field_payment_collection_ref['und'][0]['nid'] = $value->nid;
          $collection_his->field_assigned_to['und'][0]['value'] = $value->field_assigned_person['und'][0]['value'];
          $collection_his->field_collection_cash_amt['und'][0]['value'] = $value->field_cash_amt['und'][0]['value'];
          $collection_his->field_collection_ch_amt['und'][0]['value'] = $value->field_collection_cheque_amt['und'][0]['value'];
          $collection_his->field_collection_cheque_no['und'][0]['value'] = $value->field_collection_cheque_number['und'][0]['value'];
          $collection_his->field_collection_ch_date['und'][0]['value'] = $value->field_collection_cheque_date['und'][0]['value'];
          $data = node_save($collection_his);
          // main table empty few field.. prev cast/cheque amout condition. prev amount + coll amount  
        }
      }
    }
  }
}


