<?php

/*
 *  hook_permission()
 */

function change_feeds_import_permission() {
  return array(
    'Distributor Upload File' => array(
      'title' => t('Distributor Upload File'),
      'description' => t('Distributor Upload File')
    ),
  );
}

/**
 * Implments hook_menu
 *
 */
function change_feeds_import_menu() {

  $items['drs-report'] = array(
    'title' => 'DRS Report',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('get_data_of_trip_id_form'),
    'access arguments' => array('Distributor Upload File'),
    'type' => MENU_CALLBACK,
  );


  $items['download-pdf/%'] = array(
    'title' => 'Download PDF',
    'page callback' => 'download_pdf',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['email/daily-data'] = array(
    'title' => 'Send Email Of Daily Data',
    'page callback' => 'send_email_daily_data',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // setting form for flat table
  $items['admin/config/flat-table'] = array(
    'title' => 'Setting Form For Flat Table',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('change_feeds_import_setting_form'),
    'access callback' => 'check_if_fr_role_user_admin',
  );


  // setting form for flat table
  $items['admin/config/email-conf'] = array(
    'title' => 'Setting Form For Send Email',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('change_feeds_import_email_form'),
    'access callback' => 'check_if_fr_role_user_admin',
  );

  // Upload form for sales register data
  $items['outstanding-activity/import'] = array(
    'title' => 'Import Outstanding Activity Data',
    'description' => 'Import Outstanding Activity Node',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('change_feeds_import_outstanding_activity_form'),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/outstanding_activity_data.inc',
  );

  $items['outstanding-activity-confirm/%'] = array(
    'title' => 'Outstanding Activity  Confirm Table',
    'description' => 'Outstanding Activity  Confirm Table',
    'page callback' => 'change_feeds_import_outstanding_activity_confirm_content',
    'page arguments' => array(1),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/outstanding_activity_data.inc',
  );

  // when confirm is clicked
  $items['outstanding-activity-confirm/create_content/%'] = array(
    'title' => 'confirm',
    'description' => 'Confirm to create Outstanding Activity contents',
    'page callback' => 'change_feeds_import_outstanding_activity_create_confirm_content',
    'page arguments' => array(2),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/outstanding_activity_data.inc',
  );

  // when discard is clicked
  $items['outstanding-activity-discard/%'] = array(
    'title' => 'Outstanding Activity delete',
    'description' => 'Outstanding Activity delete Data',
    'page callback' => 'change_feeds_import_outstanding_activity_discard_data',
    'page arguments' => array(1),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/outstanding_activity_data.inc',
  );

  // Upload form for sales register data
  $items['sales-register/import'] = array(
    'title' => 'Import Sales Register Data',
    'description' => 'Import Sales Register Data Node',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('change_feeds_import_sales_register_form'),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/sales_register_data.inc',
  );

  $items['sales-confirm/%'] = array(
    'title' => 'Sales Confirm Table',
    'description' => 'Sales Register Confirm Table',
    'page callback' => 'change_feeds_import_sales_confirm_content',
    'page arguments' => array(1),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/sales_register_data.inc',
  );

  // when confirm is clicked
  $items['sales-confirm/create_content/%'] = array(
    'title' => 'confirm',
    'description' => 'Confirm to create sales register contents',
    'page callback' => 'change_feeds_import_sales_create_confirm_content',
    'page arguments' => array(2),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/sales_register_data.inc',
  );

  // when discard is clicked
  $items['sales-discard/%'] = array(
    'title' => 'sales Discard',
    'description' => 'sales Discard Data',
    'page callback' => 'change_feeds_import_sales_discard_data',
    'page arguments' => array(1),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/sales_register_data.inc',
  );

  // Upload form for billing data
  $items['billing_data/import'] = array(
    'title' => 'Import Billing Data',
    'description' => 'Import Billing Data Node',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('change_feeds_import_billing_data_form'),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/upload_billing_data.inc',
  );

  // error validate confirm screen for data
  $items['confirm/%'] = array(
    'title' => 'Confirm Table',
    'description' => 'Confirm Table',
    'page callback' => 'change_feeds_import_confirm_content',
    'page arguments' => array(1),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/show_confirm_table.inc',
  );

  // when validate is clicked
  $items['validate/%'] = array(
    'title' => 'Validate Data',
    'description' => 'Validate Data',
    'page callback' => 'change_feeds_import_validate_content',
    'page arguments' => array(1),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/validate_content.inc',
  );

  // when confirm is clicked
  $items['confirm/create_content/%'] = array(
    'title' => 'confirm',
    'description' => 'Confirm to create billing packing and picking contents',
    'page callback' => 'change_feeds_import_create_confirm_content',
    'page arguments' => array(2),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/create_content_on_confirm.inc',
  );

  // when discard is clicked
  $items['discard/%'] = array(
    'title' => 'Discard',
    'description' => 'Discard Data',
    'page callback' => 'change_feeds_import_discard_data',
    'page arguments' => array(1),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/discard_content.inc',
  );

  return $items;
}

function download_pdf($args) {
  $view_name = "drs_report";
  $view = views_get_view($view_name, '');
  $view->set_arguments(array($args));
  $rendered_html = $view->render();
  pdf_using_mpdf_api($rendered_html);
}

function get_data_of_trip_id_form($form, &$form_state) {

  $form['#prefix'] = '<div id="itemlist-div">';
  $form['#suffix'] = '</div>';

  $form['trip_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Trip Id'),
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('submit'),
    '#ajax' => array(
      'wrapper' => 'itemlist-div',
      'callback' => 'get_data_of_trip_id_form_submit',
      'method' => 'replace',
      'effect' => 'fade',
    ),
    '#submit' => array('trip_form_submit'),
  );
  if (!empty($form_state['views_data'])) {
    $form['hhh'] = array(
      '#type' => 'markup',
      '#markup' => $form_state['views_data'],
    );
    $trip_id = $form_state['values']['trip_id'];
    $rr = l('Open PDF', "/download-pdf/$trip_id");
    $form['dowmload_mark'] = array(
      '#type' => 'markup',
      '#markup' => $rr,
    );
  }
  return $form;
}

function get_data_of_trip_id_form_submit($form, &$form_state) {
  return $form;
}

function trip_form_submit($form, &$form_state) {
  $trip_id = $form_state['values']['trip_id'];
  $view_name = "drs_report";
  $view = views_get_view($view_name, '');
  $view->set_arguments(array($trip_id));
  $rendered_html = $view->render();
  $form_state['views_data'] = $rendered_html;
  $form_state['rebuild'] = TRUE;
}

function send_email_daily_data() {
  
  global $user;
  $user_id = $user->uid;
  $distributor_id = change_feeds_import_get_distributor_id($user_id);
  $distributor_name = change_feeds_import_get_distributor_name($distributor_id);
  
  $todays_date_date = date('Y-m-d 00:00:00');
  // $todays_date_date = "2017-02-12 00:00:00"; 
  $party_packing = get_todays_party_packing_created_data($todays_date_date);
  $picking = get_todays_picking_created_data($todays_date_date);
  $egir = get_todays_unloading_created_data($todays_date_date);

  $non_pp_count = $party_packing['non_pp'];
  if (empty($non_pp_count)) {
    $non_pp_count = 0;
  }
  $non_pp_completed_count = $party_packing['non_pp_completed'];
  if (empty($non_pp_completed_count)) {
    $non_pp_completed_count = 0;
  }
  $non_pp_process_count = $party_packing['non_pp_process'];
  if (empty($non_pp_process_count)) {
    $non_pp_process_count = 0;
  }
  $non_pp_pending_count = $party_packing['non_pp_pending'];
  if (empty($non_pp_pending_count)) {
    $non_pp_pending_count = 0;
  }

  $pp_count = $party_packing['pp'];
  if (empty($pp_count)) {
    $pp_count = 0;
  }
  $pp_completed_count = $party_packing['pp_completed'];
  if (empty($pp_completed_count)) {
    $pp_completed_count = 0;
  }

  $pp_process_count = $party_packing['pp_process'];
  if (empty($pp_process_count)) {
    $pp_process_count = 0;
  }
  $pp_pending_count = $party_packing['pp_pending'];
  if (empty($pp_pending_count)) {
    $pp_pending_count = 0;
  }

  $non_pp_percentage = round(($non_pp_completed_count / $non_pp_count) * 100);
  $non_pp_process_percentage = round(($non_pp_process_count / $non_pp_count) * 100);
  $non_pp_pending_percentage = round(($non_pp_pending_count / $non_pp_count) * 100);

  $pp_percentage = round(($pp_completed_count / $pp_count) * 100);
  $pp_process_percentage = round(($pp_process_count / $pp_count) * 100);
  $pp_pending_percentage = round(($pp_pending_count / $pp_count) * 100);


  $total_party_packing_count = ($non_pp_count + $pp_count);
  $total_completed_party_packing_count = ($non_pp_completed_count + $pp_completed_count);
  $total_result_perc = round(($total_completed_party_packing_count / $total_party_packing_count) * 100);
  $total_process_party_packing_count = ($non_pp_process_count + $pp_process_count);
  $total_process_result_perc = round(($total_process_party_packing_count / $total_party_packing_count) * 100);
  $total_pending_party_packing_count = ($non_pp_pending_count + $pp_pending_count);
  $total_pending_result_perc = round(($total_pending_party_packing_count / $total_party_packing_count) * 100);


  $party_packing_html = "<h3>Party Packing Status</h3><h4>PARTY PACKING CHECK : YES</h4><table border='1' cellpadding='5' cellspacing='0'  style='color:#000; font-size: 13px;font-family: arial' ><th>Party Packing</th><th>Created</th><th>Count Completed</th><th>Count In Progress</th><th>Count Pending </th><th>% Completion</th><th>%  In Progress</th><th>% Pending</th>
<tr>
<td>NON-PP</td>
<td>$non_pp_count</td>
<td>$non_pp_completed_count</td>
<td>$non_pp_process_count</td>
<td>$non_pp_pending_count</td>
<td>$non_pp_percentage %</td>
<td>$non_pp_process_percentage %</td>
<td>$non_pp_pending_percentage %</td>
</tr>
<tr>
<td>PP</td>
<td>$pp_count</td>
<td>$pp_completed_count</td>
<td>$pp_process_count</td>
<td>$pp_pending_count</td>
<td>$pp_percentage %</td>
<td>$pp_process_percentage %</td>
<td>$pp_pending_percentage %</td>
</tr>
<tr>
<td>Total Result</td>
<td>$total_party_packing_count</td>
<td>$total_completed_party_packing_count</td>
<td>$total_process_party_packing_count</td>
<td>$total_pending_party_packing_count</td>
<td>$total_result_perc %</td>
<td>$total_process_result_perc %</td>
<td>$total_pending_result_perc %</td>
</tr>
</table>";


  $picking_html = "<h3>Picking Status</h3><table border='1' cellpadding='5' cellspacing='0'  style='color:#000;font-size: 13px; font-family: arial'><th>Godown Area Id</th><th>Picking Type</th><th>Created</th><th>Count Completed</th><th>Count In Progress </th><th>Count Pending</th><th>% Completion</th><th>%  In Progress</th><th>% Pending </th>";


  foreach ($picking as $key => $value) {
    $picking_loose = $value['picking_loose'];
    if (empty($picking_loose)) {
      $picking_loose = 0;
    }
    $picking_loose_comleted = $value['picking_loose_comleted'];
    if (empty($picking_loose_comleted)) {
      $picking_loose_comleted = 0;
    }
    $picking_loose_process = $value['picking_loose_process'];
    if (empty($picking_loose_process)) {
      $picking_loose_process = 0;
    }
    $picking_loose_pending = $value['picking_loose_pending'];
    if (empty($picking_loose_pending)) {
      $picking_loose_pending = 0;
    }
    $loose_percentage = round(($picking_loose_comleted / $picking_loose) * 100);
    $loose_process_percentage = round(($picking_loose_process / $picking_loose) * 100);
    $loose_pending_percentage = round(($picking_loose_pending / $picking_loose) * 100);

    $picking_Bulk = $value['picking_Bulk'];
    if (empty($picking_Bulk)) {
      $picking_Bulk = 0;
    }
    $picking_bulk_comleted = $value['picking_bulk_comleted'];
    if (empty($picking_bulk_comleted)) {
      $picking_bulk_comleted = 0;
    }

    $picking_bulk_process = $value['picking_bulk_process'];
    if (empty($picking_bulk_process)) {
      $picking_bulk_process = 0;
    }
    $picking_bulk_pending = $value['picking_bulk_pending'];
    if (empty($picking_bulk_pending)) {
      $picking_bulk_pending = 0;
    }

    $bulk_percentage = round(($picking_bulk_comleted / $picking_Bulk) * 100);
    $bulk_process_percentage = round(($picking_bulk_process / $picking_Bulk) * 100);
    $bulk_pending_percentage = round(($picking_bulk_pending / $picking_Bulk) * 100);


    $picking_html .="<tr>
<td>$key</td>
<td><table ><tr>Bulk</tr><td>Loose</td></table></td>
<td><table><tr>$picking_Bulk</tr><td>$picking_loose</td></table></td>
<td><table><tr>$picking_bulk_comleted</tr><td>$picking_loose_comleted</td></table></td>
<td><table><tr>$picking_bulk_process</tr><td>$picking_loose_process</td></table></td>
<td><table><tr>$picking_bulk_pending</tr><td>$picking_loose_pending</td></table></td>
<td><table><tr>$bulk_percentage %</tr><td>$loose_percentage %</td></table></td>
<td><table><tr>$bulk_process_percentage %</tr><td>$loose_process_percentage %</td></table></td>
<td><table><tr>$bulk_pending_percentage %</tr><td>$loose_pending_percentage %</td></table></td>
</tr>
";
  }

  if (empty($picking)) {
    $picking_html .= "<tr><td colspan='9' style='text-align: center;'> There is No Picking Created for today's Date</td></tr>";
  }
  $picking_html .= "</table>";


  $egir_count = $egir['egir_count'];
  $egir_comleted = $egir['egir_completed'];
  $egir_in_process = $egir['egir_in_process'];
  $egir_pending = $egir['egir_pending'];

  if (empty($egir_pending)) {
    $egir_pending = 0;
  }
  if (empty($egir_in_process)) {
    $egir_in_process = 0;
  }
  if (empty($egir_comleted)) {
    $egir_comleted = 0;
  }
  $egir_percentage = round(($egir_comleted / $egir_count) * 100);
  $egir_process_percentage = round(($egir_in_process / $egir_count) * 100);
  $egir_pending_percentage = round(($egir_pending / $egir_count) * 100);

  $egir_html = "<h3>Unloading Status</h3><table border='1' cellpadding='5' cellspacing='0'  style='color:#000; font-size: 13px;font-family: arial'><th>Count of Invoice</th><th>Count Completed Invoice</th><th>Count In Progress</th><th>Count Pending</th><th>% Completion</th><th>%  In Progress </th><th>% Pending </th>
<tr>
<td>$egir_count</td>
<td>$egir_comleted</td>
<td>$egir_in_process</td>
<td>$egir_pending</td>
<td>$egir_percentage %</td>
<td>$egir_process_percentage %</td>
<td>$egir_pending_percentage %</td>
</tr>
</table>";

  $params['subject'] = "Operations Progress Status - $distributor_name";
  $params['body'] = $egir_html . "<br>" . $party_packing_html . "<br>" . $picking_html;

  // $mail_to = "hplord12@gmail.com";
//  $mail_to  = 'hplord12@gmail.com,hardikcbpatel@gmail.com,hardik,hardik.patel@iksulaops.com';
  $mail_to = variable_get('to_email');
//  $from = "MIS.HELPDESK@leanbox.in";
  $from = variable_get('from_email');
  $rr = drupal_mail('change_feeds_import', 'daily_data', $mail_to, LANGUAGE_NONE, $params, $from);

  send_email_productivity_emailer($todays_date_date,$distributor_name);
  }

function send_email_productivity_emailer($todays_date_date,$distributor_name) {

  $party_packing = get_productivity_data_for_party_packing($todays_date_date);

  $party_pack_superwise_html = "<h3>Party Packing Supervisorwise (status:Completed)</h3><table border='1' cellpadding='5' cellspacing='0'  style='color:#000; font-size: 13px;font-family: arial'>"
      . "<th>Party Packing Type</th>"
      . "<th>Party Packing Supervisor</th>"
      . "<th>Sum - Total Time</th>"
      . "<th>Sum - Bill Line</th>"
      . "<th>Productivity</th>";

  foreach ($party_packing as $key => $value) {
    if ($key !== "total") {
      if ($key == 1) {
        $first_row = "PP";
      }if ($key == 0) {
        $first_row = "NON-PP";
      }

      $party_pack_superwise_html .="<tr>
    <td>$first_row</td>";

      $super_wise_counter = 0;
      foreach ($value as $k => $v) {
        if (is_array($v)) {
          $counts++;
        }
      }
      $superwise_count = $counts;
      foreach ($value as $k => $val) {
        if (($k == "total_non_pp_bill_lines") || ($k == "total_non_pp_total_time" ) || ($k == "total_pp_bill_lines") || ($k == "total_pp_total_time" )) {
          // do nothing
        }
        else {
          $super_wise_counter ++;
          $super_visor = $k;
          $time = $val['supervisor_non_pp_time'];
          if (empty($time)) {
            $time = $val['supervisor_pp_time'];
          }
          $bill_lines = $val['supervisor_non_pp_bill_lines'];
          if (empty($bill_lines)) {
            $bill_lines = $val['supervisor_pp_bill_lines'];
          }
          $percentage = ($bill_lines / $time);
          $percentage = number_format((float) $percentage, 2, '.', '');
          $party_pack_superwise_html .="<td><table><td><tr>$super_visor</tr></td></table></td>";
          $party_pack_superwise_html .="<td><table><td><tr>$time</tr></td></table></td>";
          $party_pack_superwise_html .="<td><table><td><tr>$bill_lines</tr></td></table></td>";

          if ($super_wise_counter == $superwise_count) {
            $party_pack_superwise_html .="<td><table><td><tr>$percentage</tr></td></table></td>";
          }
          else {
            $party_pack_superwise_html .="<td><table><td><tr>$percentage</tr></td></table></td><tr></tr><td></td>";
          }

          $total_timing += $time;
          $total_bill_lines += $bill_lines;
        }
      }

      $total_percentage = ($total_bill_lines / $total_timing);
      $total_percentage = number_format((float) $total_percentage, 2, '.', '');
      
      $all_total_timing += $total_timing;
      $all_total_loding_lines += $total_bill_lines;

      $party_pack_superwise_html .="<tr>
<td>$first_row Result</td>
<td></td>
<td><table><td><tr>$total_timing</tr></td></table></td>
<td><table><td><tr>$total_bill_lines</tr></td></table></td>
<td><table><td><tr>$total_percentage</tr></td></table></td>
</tr><td></td>";
      unset($total_timing);
      unset($total_bill_lines);
      unset($total_percentage);
      unset($counts);
    }
  }

  $all_godown_total_perc = ($all_total_loding_lines / $all_total_timing);
  $all_godown_total_perc = number_format((float) $all_godown_total_perc, 2, '.', '');

  if (empty($all_total_loding_lines) && empty($all_total_timing)) {
    $party_pack_superwise_html .= "<tr><td colspan='5' style='text-align: center;'> There is No Activity for today's Date</td></tr>";
  }
  else {
    $party_pack_superwise_html .="<tr>
   <td>Total Result</td>
   <td></td>
   <td><table><td><tr>$all_total_timing</tr></td></table></td>
   <td><table><td><tr>$all_total_loding_lines</tr></td></table></td>
   <td><table><td><tr>$all_godown_total_perc</tr></td></table></td>
   </tr>";
  }

  $party_pack_superwise_html .= "</table>";

  $total_non_time = $party_packing['total']['non_time'];
  $total_non_bill = $party_packing['total']['non_pp_bill_lines'];
  $total_non_perc = ($total_non_bill / $total_non_time);
  $total_non_perc = number_format((float) $total_non_perc, 2, '.', '');
  $total_pp_time = $party_packing['total']['pp_time'];
  $total_pp_bill = $party_packing['total']['pp_bill_lines'];
  $total_pp_perc = ($total_pp_bill / $total_pp_time);
  $total_pp_perc = number_format((float) $total_pp_perc, 2, '.', '');

  $total_bills = ($total_non_bill + $total_pp_bill);
  $total_time = ($total_non_time + $total_pp_time);
  $total_perc = ($total_bills / $total_time);
  $total_perc = number_format((float) $total_perc, 2, '.', '');
  $party_pack_type_wsie_html = "<h3>Party Packing Typewise</h3><table border='1' cellpadding='5' cellspacing='0'  style='color:#000;font-size: 13px; font-family: arial'>"
      . "<th>Party Packing Type</th>"
      . "<th>Sum - Total Time</th>"
      . "<th>Sum - Bill Line</th>"
      . "<th>Productivity</th>";


  if (empty($total_bills) && empty($total_time)) {
    $party_pack_type_wsie_html .= "<tr><td colspan='4' style='text-align: center;'> There is No Activity for today's Date</td></tr></table>";
  }
  else {
    $party_pack_type_wsie_html .= "<tr><td>Non-PP</td><td>$total_non_time</td><td>$total_non_bill</td><td>$total_non_perc</td></tr>"
        . "<tr><td>PP</td><td>$total_pp_time</td><td>$total_pp_bill</td><td>$total_pp_perc</td></tr>"
        . "<tr><td>Total</td><td>$total_time</td><td>$total_bills</td><td>$total_perc</td></tr></table>";
  }

  $picking = get_productivity_data_for_picking($todays_date_date);

  $picking_supervisor_wise_html = "<h3>Pick Supervisorwise (status:Completed)</h3><table border='1' cellpadding='5' cellspacing='0'  style='color:#000; font-size: 13px;font-family: arial'>"
      . "<th>Pick Supervisor</th>"
      . "<th>Picking Type</th>"
      . "<th>Sum - Loading Sheet Line</th>"
      . "<th>Sum - Time Duration</th>"
      . "<th>Productivity</th>";


  $picking_godown_wise_html = "<h3>Pick Godownwise (status:Completed)</h3><table border='1' cellpadding='5' cellspacing='0'  style='color:#000; font-size: 13px;font-family: arial'>"
      . "<th>Godown Area Id</th>"
      . "<th>Picking Type</th>"
      . "<th>Sum - Loading Sheet Line</th>"
      . "<th>Sum - Time Duration</th>"
      . "<th>Productivity</th>";

  foreach ($picking as $key => $value) {

    if ($key == "godown") {
      foreach ($value as $ke => $val) {
        $picking_godown_wise_html .="<tr>
    <td>$ke</td>";


        $godown_counter = 0;
        $godown_count = count($val);
        foreach ($val as $k => $v) {
          $godown_counter++;
          $loding_lines = $v['loading_sheet_line'];
          $timing = $v['total_tme'];
          $percentage = ($loding_lines / $timing);
          $percentage = number_format((float) $percentage, 2, '.', '');
          $picking_godown_wise_html .="<td><table><td><tr>$k</tr></td></table></td>";
          $picking_godown_wise_html .="<td><table><td><tr>$loding_lines</tr></td></table></td>";
          $picking_godown_wise_html .="<td><table><td><tr>$timing</tr></td></table></td>";

          if ($godown_counter == $godown_count) {
            $picking_godown_wise_html .="<td><table><td><tr>$percentage</tr></td></table></td>";
          }
          else {
            $picking_godown_wise_html .="<td><table><td><tr>$percentage</tr></td></table></td><tr></tr><td></td>";
          }


          $total_timing += $timing;
          $total_loding_lines += $loding_lines;

          $all_godown_total_timing += $timing;
          $all_godown_total_loding_lines += $loding_lines;
        }

        $total_perc = ($total_loding_lines / $total_timing);
        $total_perc = number_format((float) $total_perc, 2, '.', '');

        $picking_godown_wise_html .="<tr>
   <td>$ke Result</td>
   <td></td>
   <td><table><td><tr>$total_loding_lines</tr></td></table></td>
   <td><table><td><tr>$total_timing</tr></td></table></td>
   <td><table><td><tr>$total_perc</tr></td></table></td>
   </tr>";

        unset($total_timing);
        unset($total_loding_lines);
        unset($total_percentage);
      }
    }
    else {

      $picking_supervisor_wise_html .="<tr>
    <td>$key</td>";

      $superwiser_counter = 0;
      $superwiser_count = count($value);
      foreach ($value as $k => $val) {
        $superwiser_counter++;
        $loding_lines = $val['loading_sheet_line'];
        $timing = $val['total_tme'];
        $percentage = ($loding_lines / $timing);
        $percentage = number_format((float) $percentage, 2, '.', '');
        $picking_supervisor_wise_html .="<td><table><td><tr>$k</tr></td></table></td>";
        $picking_supervisor_wise_html .="<td><table><td><tr>$loding_lines</tr></td></table></td>";
        $picking_supervisor_wise_html .="<td><table><td><tr>$timing</tr></td></table></td>";

        if ($superwiser_count == $superwiser_counter) {
          $picking_supervisor_wise_html .="<td><table><td><tr>$percentage</tr></td></table></td>";
        }
        else {
          $picking_supervisor_wise_html .="<td><table><td><tr>$percentage</tr></td></table></td><tr></tr><td></td>";
        }

        $total_timing += $timing;
        $total_loding_lines += $loding_lines;


        $all_sup_total_timing += $timing;
        $all_sup_total_loding_lines += $loding_lines;
      }

      $total_perc = ($total_loding_lines / $total_timing);
      $total_perc = number_format((float) $total_perc, 2, '.', '');


      $picking_supervisor_wise_html .="<tr>
   <td>$key Result</td>
   <td></td>
   <td><table><td><tr>$total_loding_lines</tr></td></table></td>
   <td><table><td><tr>$total_timing</tr></td></table></td>
   <td><table><td><tr>$total_perc</tr></td></table></td>
   </tr>";

      unset($total_timing);
      unset($total_loding_lines);
      unset($total_percentage);
    }
  }

  $all_sup_total_perc = ($all_sup_total_loding_lines / $all_sup_total_timing);
  $all_sup_total_perc = number_format((float) $all_sup_total_perc, 2, '.', '');


  $all_godown_total_perc = ($all_godown_total_loding_lines / $all_godown_total_timing);
  $all_godown_total_perc = number_format((float) $all_godown_total_perc, 2, '.', '');

  if (empty($all_godown_total_loding_lines) && empty($all_godown_total_timing)) {
    $picking_supervisor_wise_html .= "<tr><td colspan='5' style='text-align: center;'> There is No Activity for today's Date</td></tr>";
  }
  else {
    $picking_supervisor_wise_html .="<tr>
   <td>Total Result</td>
   <td></td>
   <td><table><td><tr>$all_sup_total_loding_lines</tr></td></table></td>
   <td><table><td><tr>$all_sup_total_timing</tr></td></table></td>
   <td><table><td><tr>$all_sup_total_perc</tr></td></table></td>
   </tr>";
  }


  $picking_supervisor_wise_html .= "</tr></table>";


  if (empty($all_godown_total_loding_lines) && empty($all_godown_total_timing)) {
    $picking_godown_wise_html .= "<tr><td colspan='5' style='text-align: center;'> There is No Activity for today's Date</td></tr>";
  }
  else {
    $picking_godown_wise_html .="<tr>
   <td>Total Result</td>
   <td></td>
   <td><table><td><tr>$all_godown_total_loding_lines</tr></td></table></td>
   <td><table><td><tr>$all_godown_total_timing</tr></td></table></td>
   <td><table><td><tr>$all_godown_total_perc</tr></td></table></td>
   </tr>";
  }

  $picking_godown_wise_html .= "</tr></table>";




  $params['subject'] = "Productivity Progress Status-$distributor_name";
  $params['body'] = $party_pack_superwise_html . "<br>" . $party_pack_type_wsie_html . "<br>" . $picking_godown_wise_html . "<br>" . $picking_supervisor_wise_html;

  // $mail_to = variable_get('to_email');
   $mail_to = "gaurav@leanbox.in";
//  $from = "MIS.HELPDESK@leanbox.in";
  $from = variable_get('from_email');
  drupal_mail('change_feeds_import', 'productivity_status', $mail_to, LANGUAGE_NONE, $params, $from);
}

function get_productivity_data_for_picking($todays_date_date) {
  $query = db_select('node', 'n');
  $query->condition('n.type', 'picking');
  $query->join('field_data_field_distributor', 'fd', 'fd.entity_id = n.uid');
  $query->condition('fd.entity_id', 60, '=');
  $query->join('field_data_field_picking_loading_date', 'd', 'd.entity_id = n.nid');
  $query->condition('d.field_picking_loading_date_value', $todays_date_date, "=");
  $query->join('field_data_field_picking_godown_area_id', 'gai', 'gai.entity_id = n.nid');
  $query->join('field_data_field_picking_picking_type', 'pt', 'pt.entity_id = n.nid');
  $query->join('field_data_field_picking_loading_sheet_line', 'lsl', 'lsl.entity_id = n.nid');
  $query->join('field_data_field_picking_start_time', 'pst', 'pst.entity_id = n.nid');
  $query->join('field_data_field_picking_end_time', 'pet', 'pet.entity_id = n.nid');
  $query->join('field_data_field_picking_status', 'ps', 'ps.entity_id = n.nid');
  $query->condition('ps.field_picking_status_value', 2, "=");
  $query->join('field_data_field_picking_picking_team_count', 'tc', 'tc.entity_id = n.nid');
  $query->join('field_data_field_picking_pick_supervisor', 'pps', 'pps.entity_id = n.nid');
  $query->fields('gai', array('field_picking_godown_area_id_value'));
  $query->fields('pt', array('field_picking_picking_type_value'));
  $query->fields('lsl', array('field_picking_loading_sheet_line_value'));
  $query->fields('pst', array('field_picking_start_time_value'));
  $query->fields('pet', array('field_picking_end_time_value'));
  $query->fields('n', array('nid'));
  $query->fields('ps', array('field_picking_status_value'));
  $query->fields('tc', array('field_picking_picking_team_count_value'));
  $query->fields('pps', array('field_picking_pick_supervisor_value'));
  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  foreach ($res as $key => $value) {
    $start_time = strtotime($value['field_picking_start_time_value']);
    $end_time = strtotime($value['field_picking_end_time_value']);
    $time_diff = ($end_time - $start_time) / 3600;
    $time_diff = number_format((float) $time_diff, 2, '.', '');

    $loading_line = $value['field_picking_loading_sheet_line_value'];
    $team_count = $value['field_picking_picking_team_count_value'];
    $total_time = ($team_count * $time_diff);
    $supervisor = $value['field_picking_pick_supervisor_value'];
    $type = $value['field_picking_picking_type_value'];
    $godown = $value['field_picking_godown_area_id_value'];
    if (isset($res[$godown])) {
      if ($type == "Loose") {
        $picking['godown'][$godown][$type]['loading_sheet_line'] += $loading_line;
        $picking['godown'][$godown][$type]['total_tme'] += $total_time;
      }
      if ($type == "Bulk") {
        $picking['godown'][$godown][$type]['loading_sheet_line'] += $loading_line;
        $picking['godown'][$godown][$type]['total_tme'] += $total_time;
      }
    }
    else {
      $res[$godown] = array();
      $picking_type = $value['field_picking_picking_type_value'];
      if ($type == "Loose") {
        $picking['godown'][$godown][$type]['loading_sheet_line'] = $loading_line;
        $picking['godown'][$godown][$type]['total_tme'] = $total_time;
      }
      if ($type == "Bulk") {
        $picking['godown'][$godown][$type]['loading_sheet_line'] = $loading_line;
        $picking['godown'][$godown][$type]['total_tme'] = $total_time;
      }
    }


    if (isset($res[$supervisor])) {
      if ($type == "Loose") {
        $picking[$supervisor][$type]['loading_sheet_line'] += $loading_line;
        $picking[$supervisor][$type]['total_tme'] += $total_time;
      }
      if ($type == "Bulk") {
        $picking[$supervisor][$type]['loading_sheet_line'] += $loading_line;
        $picking[$supervisor][$type]['total_tme'] += $total_time;
      }
    }
    else {
      $res[$supervisor] = array();
      if ($type == "Loose") {
        $picking[$supervisor][$type]['loading_sheet_line'] = $loading_line;
        $picking[$supervisor][$type]['total_tme'] = $total_time;
      }
      if ($type == "Bulk") {
        $picking[$supervisor][$type]['loading_sheet_line'] = $loading_line;
        $picking[$supervisor][$type]['total_tme'] = $total_time;
      }
    }
  }
  return $picking;
}

function get_productivity_data_for_party_packing($todays_date_date) {
  $query = db_select('node', 'n');
  $query->condition('n.type', 'party_packing');
  $query->join('field_data_field_distributor', 'fd', 'fd.entity_id = n.uid');
  $query->condition('fd.entity_id', 60, '=');
  $query->leftjoin('field_data_field_bill_lines', 'bl', 'bl.entity_id = n.nid');
  $query->leftjoin('field_data_field_party_packer_team_count', 'tc', 'tc.entity_id = n.nid');
  $query->leftjoin('field_data_field_party_packing_start_time', 'st', 'st.entity_id = n.nid');
  $query->leftjoin('field_data_field_party_packing_end_time', 'et', 'et.entity_id = n.nid');
  $query->leftjoin('field_data_field__party_packingstatus', 's', 's.entity_id = n.nid');
  $query->condition('s.field__party_packingstatus_value', 2, "=");
  $query->leftjoin('field_data_field_party_packing_loading_date', 'd', 'd.entity_id = n.nid');
  $query->condition('d.field_party_packing_loading_date_value', $todays_date_date, "=");
  $query->leftjoin('field_data_field_party_packing_type', 'ppt', 'ppt.entity_id = n.nid');
  $query->leftjoin('field_data_field_party_packing_supervisor', 'pps', 'pps.entity_id = n.nid');
  $query->fields('n', array('nid'));
  $query->fields('bl', array('field_bill_lines_value'));
  $query->fields('tc', array('field_party_packer_team_count_value'));
  $query->fields('st', array('field_party_packing_start_time_value'));
  $query->fields('et', array('field_party_packing_end_time_value'));
  $query->fields('s', array('field__party_packingstatus_value'));
  $query->fields('d', array('field_party_packing_loading_date_value'));
  $query->fields('ppt', array('field_party_packing_type_value'));
  $query->fields('pps', array('field_party_packing_supervisor_value'));
  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  foreach ($res as $key => $value) {

    $start_time = strtotime($value['field_party_packing_start_time_value']);
    $end_time = strtotime($value['field_party_packing_end_time_value']);
    $time_diff = ($end_time - $start_time) / 3600;
    $time_diff = number_format((float) $time_diff, 2, '.', '');
    $type = $value['field_party_packing_type_value'];
    $bill_line = $value['field_bill_lines_value'];
    $team_count = $value['field_party_packer_team_count_value'];
    $total_time = ($team_count * $time_diff);

    if ($type == 1) {  // type is PP
      $pp_bill_lines += $bill_line;
      $pp_time += $total_time;
      $party_packing['total']['pp_bill_lines'] = $pp_bill_lines;
      $party_packing['total']['pp_time'] = $pp_time;
    }
    if ($type == 0) { //type is NON-PP
      $non_pp_bill_lines += $bill_line;
      $non_time += $total_time;
      $party_packing['total']['non_pp_bill_lines'] = $non_pp_bill_lines;
      $party_packing['total']['non_time'] = $non_time;
    }

    $supervisor = $value['field_party_packing_supervisor_value'];
    if (isset($res[$supervisor])) {

      if ($type == 1) { // type is PP
        $party_packing[$type][$supervisor]['supervisor_pp_bill_lines'] += $bill_line;
        $party_packing[$type][$supervisor]['supervisor_pp_time'] += $total_time;

        $total_pp_bill_lines += $bill_line;
        $total_pp_total_time += $total_time;
      }
      if ($type == 0) { //type is NON-PP
        $party_packing[$type][$supervisor]['supervisor_non_pp_bill_lines'] += $bill_line;
        $party_packing[$type][$supervisor]['supervisor_non_pp_time'] += $total_time;

        $total_non_pp_bill_lines += $bill_line;
        $total_non_pp_total_time += $total_time;
      }
    }
    else {
      $res[$supervisor] = array();
      if ($type == 1) { // type is PP
        $party_packing[$type][$supervisor]['supervisor_pp_bill_lines'] = $bill_line;
        $party_packing[$type][$supervisor]['supervisor_pp_time'] = $total_time;

        $total_pp_bill_lines += $bill_line;
        $total_pp_total_time += $total_time;
      }
      if ($type == 0) { //type is NON-PP
        $party_packing[$type][$supervisor]['supervisor_non_pp_bill_lines'] = $bill_line;
        $party_packing[$type][$supervisor]['supervisor_non_pp_time'] = $total_time;

        $total_non_pp_bill_lines += $bill_line;
        $total_non_pp_total_time += $total_time;
      }
    }

    if ($type == 1) {
      $party_packing[$type]['total_pp_bill_lines'] = $total_pp_bill_lines;
      $party_packing[$type]['total_pp_total_time'] = $total_pp_total_time;
    }
    if ($type == 0) {
      $party_packing[$type]['total_non_pp_bill_lines'] = $total_non_pp_bill_lines;
      $party_packing[$type]['total_non_pp_total_time'] = $total_non_pp_total_time;
    }
  }

  return $party_packing;
}

function change_feeds_import_mail($key, &$message, $params) {
  switch ($key) {
    case 'daily_data':

      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      break;

    case 'productivity_status':

      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      break;
  }
}

function get_todays_party_packing_created_data($loading_date) {
  $query = db_select('node', 'n');
  $query->condition('n.type', 'party_packing');
  $query->join('field_data_field_distributor', 'fd', 'fd.entity_id = n.uid');
  $query->condition('fd.entity_id', 60, '=');
  $query->join('field_data_field_party_packing_loading_date', 'd', 'd.entity_id = n.nid');
  $query->condition('d.field_party_packing_loading_date_value', $loading_date, "=");
  $query->leftjoin('field_data_field__party_packingstatus', 's', 's.entity_id = n.nid');
  $query->leftjoin('field_data_field_party_packing_check', 'ppc', 'ppc.entity_id = n.nid');
  $query->condition('ppc.field_party_packing_check_value', 1, "=");
  $query->leftjoin('field_data_field_party_packing_type', 'ppt', 'ppt.entity_id = n.nid');
  $query->fields('d', array('field_party_packing_loading_date_value'));
  $query->fields('n', array('nid'));
  $query->fields('s', array('field__party_packingstatus_value'));
  $query->fields('ppc', array('field_party_packing_check_value'));
  $query->fields('ppt', array('field_party_packing_type_value'));
  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  $party_picking_count = count($res);
  foreach ($res as $key => $value) {

    $check = $value['field_party_packing_type_value'];
    $status = $value['field__party_packingstatus_value'];
    if ($check == 0) {
      $non_pp++;
      if ($status == 2) {
        $non_pp_comleted++;
      }
      if ($status == 1) {
        $non_pp_process++;
      }
      if ($status == 0) {
        $non_pp_pending++;
      }
    }
    else {
      $pp++;
      if ($status == 2) {
        $pp_comleted++;
      }
      if ($status == 1) {
        $pp_process++;
      }
      if ($status == 0) {
        $pp_pending++;
      }
    }
  }
  $party_packing['non_pp'] = $non_pp;
  $party_packing['non_pp_completed'] = $non_pp_comleted;
  $party_packing['non_pp_process'] = $non_pp_process;
  $party_packing['non_pp_pending'] = $non_pp_pending;
  $party_packing['pp'] = $pp;
  $party_packing['pp_completed'] = $pp_comleted;
  $party_packing['pp_process'] = $pp_process;
  $party_packing['pp_pending'] = $pp_pending;

  return $party_packing;
}

function get_todays_picking_created_data($loading_date) {
  $query = db_select('node', 'n');
  $query->condition('n.type', 'picking');
  $query->join('field_data_field_distributor', 'fd', 'fd.entity_id = n.uid');
  $query->condition('fd.entity_id', 60, '=');
  $query->join('field_data_field_picking_loading_date', 'd', 'd.entity_id = n.nid');
  $query->condition('d.field_picking_loading_date_value', $loading_date, "=");
  $query->leftjoin('field_data_field_picking_status', 's', 's.entity_id = n.nid');
  $query->leftjoin('field_data_field_picking_godown_area_id', 'g', 'g.entity_id = n.nid');
  $query->orderBy('g.field_picking_godown_area_id_value', 'ASC'); //ORDER BY created
  $query->join('field_data_field_picking_picking_type', 'pt', 'pt.entity_id = n.nid');
  $query->fields('d', array('field_picking_loading_date_value'));
  $query->fields('n', array('nid'));
  $query->fields('s', array('field_picking_status_value'));
  $query->fields('g', array('field_picking_godown_area_id_value'));
  $query->fields('pt', array('field_picking_picking_type_value'));
  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  foreach ($res as $key => $value) {
    $godown = $value['field_picking_godown_area_id_value'];
    $status = $value['field_picking_status_value'];
    $type = $value['field_picking_picking_type_value'];
    if (isset($res[$godown])) {
      if ($type == "Loose") {
        $picking[$godown]['picking_loose'] ++;
        if ($status == 2) {
          $picking[$godown]['picking_loose_comleted'] ++;
        }
        if ($status == 1) {
          $picking[$godown]['picking_loose_process'] ++;
        }
        if ($status == 0) {
          $picking[$godown]['picking_loose_pending'] ++;
        }
      }
      if ($type == "Bulk") {
        $picking[$godown]['picking_Bulk'] ++;
        if ($status == 2) {
          $picking_bulk_comleted++;
          $picking[$godown]['picking_bulk_comleted'] ++;
        }
        if ($status == 1) {
          $picking[$godown]['picking_bulk_process'] ++;
        }
        if ($status == 0) {
          $picking[$godown]['picking_bulk_pending'] ++;
        }
      }
    }
    else {
      $res[$godown] = array();
      $picking_type = $value['field_picking_picking_type_value'];
      if ($type == "Loose") {
        $picking[$godown]['picking_loose'] = 1;
        if ($status == 2) {
          $picking[$godown]['picking_loose_comleted'] = 1;
        }
        if ($status == 1) {
          $picking[$godown]['picking_loose_process'] = 1;
        }
        if ($status == 0) {
          $picking[$godown]['picking_loose_pending'] = 1;
        }
      }
      if ($type == "Bulk") {
        $picking[$godown]['picking_Bulk'] = 1;
        if ($status == 2) {
          $picking[$godown]['picking_bulk_comleted'] = 1;
        }
        if ($status == 1) {
          $picking[$godown]['picking_bulk_process'] = 1;
        }
        if ($status == 0) {
          $picking[$godown]['picking_bulk_pending'] = 1;
        }
      }
    }
  }

  return $picking;
}

function get_todays_unloading_created_data($loading_date) {
  $query = db_select('node', 'n');
  $query->condition('n.type', 'egir');
  $query->join('field_data_field_distributor', 'fd', 'fd.entity_id = n.uid');
  $query->condition('fd.entity_id', 60, '=');
  $query->leftjoin('field_data_field_egir_date', 'd', 'd.entity_id = n.nid');
  $query->condition('d.field_egir_date_value', $loading_date, "=");
  $query->leftjoin('field_data_field_unloading_status', 's', 's.entity_id = n.nid');
  $query->fields('d', array('field_egir_date_value'));
  $query->fields('n', array('nid'));
  $query->fields('s', array('field_unloading_status_value'));
  $query->fields('fd', array('field_distributor_value'));
  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  $egir_count = count($res);
  foreach ($res as $key => $value) {
    $status = $value['field_unloading_status_value'];
    if ($status == 2) {
      $egir_comleted++;
    }
    if ($status == 1) {
      $egir_in_process++;
    }
    if ($status == 0) {
      $egir_pending++;
    }
  }
  $egir['egir_count'] = $egir_count;
  $egir['egir_completed'] = $egir_comleted;
  $egir['egir_in_process'] = $egir_in_process;
  $egir['egir_pending'] = $egir_pending;
  return $egir;
}

// check permission for (admin/config/flat-table) Menu
function check_if_fr_role_user_admin() {
  global $user;
  if (in_array('administrator', $user->roles)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

// setting form for email of daily status
function change_feeds_import_email_form($form, $form_state) {

  // PARTY PACKING PRODUCTIVITY LINES/Hr
  $form['to_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Receiver'),
    '#default_value' => variable_get('to_email', ''),
    '#required' => TRUE,
    '#size' => 60,
    '#maxlength' => 255,
  );

  // PARTY PACKING COMPLIANCE
  $form['from_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Sender'),
    '#default_value' => variable_get('from_email', ''),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

// Menu Callback  for (admin/config/flat-table)
function change_feeds_import_setting_form($form, $form_state) {

  // PARTY PACKING PRODUCTIVITY LINES/Hr
  $form['party_packing_productivity_lines'] = array(
    '#type' => 'textfield',
    '#title' => t('PARTY PACKING PRODUCTIVITY LINES/Hr'),
    '#default_value' => variable_get('party_packing_productivity_lines', ''),
    '#required' => TRUE,
  );

  // PARTY PACKING COMPLIANCE
  $form['party_packing_compliance'] = array(
    '#type' => 'textfield',
    '#title' => t('PARTY PACKING COMPLIANCE'),
    '#default_value' => variable_get('party_packing_compliance', ''),
    '#required' => TRUE,
  );

  // Pick Productivity Pick
  $form['pick_productivity_pick'] = array(
    '#type' => 'textfield',
    '#title' => t('Pick Productivity Pick / Hr'),
    '#default_value' => variable_get('pick_productivity_pick', ''),
    '#required' => TRUE,
  );

  // Picking Compliance
  $form['picking_compliance'] = array(
    '#type' => 'textfield',
    '#title' => t('Picking Compliance'),
    '#default_value' => variable_get('picking_compliance', ''),
    '#required' => TRUE,
  );

  // EGIR End Time Cut-Off 
  $form['egir_end_time_cutoff'] = array(
    '#type' => 'textfield',
    '#title' => t('EGIR End time - Cutoff'),
    '#default_value' => variable_get('egir_end_time_cutoff', ''),
    '#required' => TRUE,
  );

  // Unloading End Time Cutoff
  $form['unloading_end_time_cutOff'] = array(
    '#type' => 'textfield',
    '#title' => t('Unloading End Time - CutOff'),
    '#default_value' => variable_get('unloading_end_time_cutOff', ''),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Implements hook_node_insert()
 */
function change_feeds_import_node_insert($node) {

  if ($node->type == 'dispatch_data') {
    // logic for when dispatch node is uploading get billing data nid (on basis of vehicle+loading date)
    $query = db_select('custom_billing_data', 'cb');
    $query->fields('cb', array('vehicle', 'loading_date', 'id'));
    $query->groupBy('vehicle')->groupBy('loading_date');


    $sub_query2 = db_select('node', 'n');
    $sub_query2->condition('n.type', "dispatch_data", '=');
    $sub_query2->condition('n.nid', $node->nid, '=');
    $sub_query2->innerjoin('field_data_field_vehicle', 'fv', 'fv.entity_id = n.nid');
    $sub_query2->innerjoin('field_data_field_loading_date', 'fld', 'fld.entity_id = n.nid');
    $sub_query2->fields('n', array('nid'));
    $sub_query2->join($query, 'bd', 'bd.vehicle = fv.field_vehicle_value and bd.loading_date = fld.field_loading_date_value');
    $sub_query2->fields('bd', array('id'));
    $billing_result = $sub_query2->execute()->fetchAll(PDO::FETCH_ASSOC);
    $billing_id = $billing_result[0]['id'];


    $sub_query3 = db_select('node', 'n1');
    $sub_query3->condition('n1.type', "party_packing", '=');
    $sub_query3->innerjoin('field_data_field_party_packing_vehicle', 'ppv', 'ppv.entity_id = n1.nid');
    $sub_query3->innerjoin('field_data_field_party_packing_loading_date', 'pld', 'pld.entity_id = n1.nid');
    $sub_query3->innerjoin('field_data_field__party_packingstatus', 'pps', 'pps.entity_id = n1.nid');
    $sub_query3->fields('ppv', array('field_party_packing_vehicle_value'));
    $sub_query3->fields('pld', array('field_party_packing_loading_date_value'));
    $sub_query3->fields('pps', array('field__party_packingstatus_value'));
    $sub_query3->fields('n1', array('nid'));

    $sub_query4 = db_select('node', 'n2');
    $sub_query4->condition('n2.type', "dispatch_data", '=');
    $sub_query4->innerjoin('field_data_field_vehicle', 'fv', 'fv.entity_id = n2.nid');
    $sub_query4->innerjoin('field_data_field_loading_date', 'fld', 'fld.entity_id = n2.nid');
    $sub_query4->innerjoin('field_data_field_dispatch_date', 'fdd', 'fdd.entity_id = n2.nid');
    $sub_query4->fields('fv', array('field_vehicle_value'));
    $sub_query4->fields('fld', array('field_loading_date_value'));
    $sub_query4->fields('fdd', array('field_dispatch_date_value'));
    $sub_query4->fields('n2', array('nid'));


    $query = db_select('custom_billing_data', 'cb');
    $query->condition('cb.id', $billing_id, '=');
    $query->innerjoin('field_data_field_party_code', 'pc2', 'pc2.field_party_code_value = cb.party_code');
    $query->innerjoin('field_data_field_pl_group', 'plg', 'pc2.entity_id = plg.entity_id');
    $query->innerjoin('field_data_field_channel', 'fc', 'pc2.entity_id = fc.entity_id');
    $query->innerjoin('field_data_field_pl_group', 'plg2', 'plg2.field_pl_group_value = plg.field_pl_group_value');
    $query->innerjoin('field_data_field_party_packing', 'fpp', 'plg2.entity_id = fpp.entity_id');
    //$query->fields('cb', array('bill_number', 'bill_date', 'vehicle', 'loading_date', 'Sum_of_SALES_VALUE', 'distributor_id', 'Sum_of_SALES_RET_VALUE', 'party_code', 'promise_date'));
    $query->fields('cb', array('bill_number', 'bill_date', 'vehicle', 'loading_date', 'distributor_id', 'party_code', 'promise_date'));
    $query->groupBy('cb.bill_number');
    // $query->addExpression('SUM(cb.Sum_of_SALES_VALUE)', 'Sum_of_SALES_VALUE');
    // $query->addExpression('SUM(cb.Sum_of_SALES_RET_VALUE)', 'Sum_of_SALES_RET_VALUE');
    $query->fields('plg', array('field_pl_group_value'));
    $query->fields('fc', array('field_channel_value'));
    $query->fields('fpp', array('field_party_packing_value'));
    $query->join($sub_query3, 'party_p', 'party_p.field_party_packing_vehicle_value = cb.vehicle and party_p.field_party_packing_loading_date_value = cb.loading_date');
    $query->join($sub_query4, 'dd', 'dd.field_vehicle_value = cb.vehicle and dd.field_loading_date_value = cb.loading_date');
    $query->fields('dd');
    $query->fields('party_p');
    $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

    foreach ($result as $key => $value) {
      $billing_vehicle = $value['field_vehicle_value'];
      $billing_loading_date = $value['field_loading_date_value'];
      $promised_delivery_date = $value['field_promised_delivery_date_value'];


      //  $sum_of_sales_value = $value['Sum_of_SALES_VALUE'];
      //  $sum_of_sales_ret_value = $value['Sum_of_SALES_RET_VALUE'];
      //  $net_value = $sum_of_sales_ret_value / $sum_of_sales_value;
//      if ($net_value == 0) {
//        $return_type = 'NA';
//      }
//      elseif ($net_value >= 0.98 && $net_value <= 1.02) {
//        $return_type = 'FULL';
//      }
//      else {
//        $return_type = 'Partial';
//      }
      $dispatch_date = $value['field_dispatch_date_value'];
      $endDate = strtotime($dispatch_date);
      $promised_delivery_date_stamp = strtotime($promised_delivery_date);
      $datediff = $endDate - $promised_delivery_date_stamp;
      $diff = floor($datediff / (60 * 60 * 24));
      $result[$key]['delay_days'] = $diff;

      if ($diff == 0 || $diff < 0) {
        $result[$key]['delay_range'] = "N+2";
      }
      elseif ($diff == 1) {
        $result[$key]['delay_range'] = "N+3";
      }
      else {
        $result[$key]['delay_range'] = ">N+2";
      }


      $billing_loading_timestamp = strtotime($billing_loading_date);
      $billing_loading_day = date("d", $billing_loading_timestamp);

      $result[$key]['Day'] = $billing_loading_day;


      ######### Loagic for MOC #######
      if ($billing_loading_day < 21) {
        $month = date("m", $billing_loading_timestamp);
        $result[$key]['MOC'] = "MOC" . $month;
      }
      else {
        $newdate = strtotime('+1 month', strtotime($billing_loading_date));
        $next_month = date("m", $newdate);
        $result[$key]['MOC'] = "MOC" . $next_month;
      }
      ########### End Logic for MOC #######
      ######### Loagic for TDP #######
      if (($billing_loading_day >= 1) && ($billing_loading_day <= 10)) {
        $result[$key]['TDP'] = "TDP2";
      }
      elseif (($billing_loading_day >= 11) && ($billing_loading_day <= 20)) {
        $result[$key]['TDP'] = "TDP3";
      }
      else {
        $result[$key]['TDP'] = "TDP1";
      }
      ########### End Logic for TDP #######
      $billing_loading_day_text = date("D", $billing_loading_timestamp);
      $billing_loading_month = date("M", $billing_loading_timestamp);
      $result[$key]['month'] = $billing_loading_month;
      $result[$key]['Week_day'] = $billing_loading_day_text;

      $party_packing_status = $value['field__party_packingstatus_value'];
      if ($party_packing_status == 2) {
        $status = "Yes";
      }
      else {
        $status = "No";
      }


      $distributor_id = $value['field_distributor_uid_value'];
      $distributor_name = change_feeds_import_get_distributor_name($distributor_id);

      // insert in flat_billing_data table when node update.(if record is not in table then create new record)
      db_merge('flat_billing_data')
          ->key(array('nid' => $node->nid))
          ->fields(array(
            'nid' => $node->nid,
            'bill_number' => $result[$key]['field_bill_number_value'],
            'bill_date' => strtotime($result[$key]['field_bill_date_value']) ? strtotime($result[$key]['field_bill_date_value']) : 0,
            'vehicle' => $result[$key]['field_vehicle_value'],
            'loading_date' => strtotime($result[$key]['field_loading_date_value']) ? strtotime($result[$key]['field_loading_date_value']) : 0,
            // 'sum_of_sales_value' => $result[$key]['Sum_of_SALES_VALUE'] ? $result[$key]['Sum_of_SALES_VALUE'] : 0,
            //  'sum_of_sales_ret_value' => $result[$key]['Sum_of_SALES_RET_VALUE'] ? $result[$key]['Sum_of_SALES_RET_VALUE'] : 0,
            'promised_delivery_date' => strtotime($result[$key]['field_promised_delivery_date_value']) ? strtotime($result[$key]['field_promised_delivery_date_value']) : 0,
            'dispatch_date' => strtotime($result[$key]['field_dispatch_date_value']) ? strtotime($result[$key]['field_dispatch_date_value']) : 0,
            'delay_days' => $result[$key]['delay_days'] ? $result[$key]['delay_days'] : 0,
            'delay_range' => $result[$key]['delay_range'],
            // 'return_type' => $return_type,
            'ideal_party_packing' => $result[$key]['field_party_packing_value'],
            'actual_party_packing' => $status,
            'day' => $result[$key]['Day'],
            'tdp' => $result[$key]['TDP'],
            'month' => $result[$key]['month'],
            'moc' => $result[$key]['MOC'],
            'week_day' => $result[$key]['Week_day'],
            'party_code' => $result[$key]['field_party_code_value'],
            'pl_group' => $result[$key]['field_pl_group_value'],
            'channel' => $result[$key]['field_channel_value'],
            'distributor_name' => $distributor_name
          ))
          ->execute();
    }
  }
}

/**
 * Implements hook_node_update()
 */
function change_feeds_import_node_update($node) {
  if ($node->type == 'party_packing') { // if Content Type is party packing.
    $start_time = strtotime($node->field_party_packing_start_time['und'][0]['value']); // party packing start time
    $end_time = strtotime($node->field_party_packing_end_time['und'][0]['value']); // party packing end time
    $party_picking_ld = $node->field_party_packing_loading_date['und'][0]['value']; // party packing loading date
    $timestamp = strtotime($party_picking_ld);
    $party_picking_ld_stamp = date("d", $timestamp);
    ######  logic for MOC ####
    if ($party_picking_ld_stamp < 21) {
      $month = date("m", $timestamp);
      $node->MOC = "MOC" . $month;
    }
    else {
      $newdate = strtotime('+1 month', strtotime($party_picking_ld));
      $next_month = date("m", $newdate);
      $node->MOC = "MOC" . $next_month;
    }

    ##### End MOC logic #######
    ######  logic for TDP ####
    if (($party_picking_ld_stamp >= 1) && ($party_picking_ld_stamp <= 10)) {
      $node->TDP = "TDP2";
    }
    elseif (($party_picking_ld_stamp >= 11) && ($party_picking_ld_stamp <= 20)) {
      $node->TDP = "TDP3";
    }
    else {
      $node->TDP = "TDP1";
    }
    ##### End TDP logic #######

    $node->field_party_packing_loading_date['und'][0]['value'] = strtotime($party_picking_ld);
    $node->field_party_packing_date['und'][0]['value'] = strtotime($node->field_party_packing_date['und'][0]['value']);
    $node->party_packing_productivity_lines = variable_get('party_packing_productivity_lines', '');
    $node->party_packing_compliance = variable_get('party_packing_compliance', '');
    $compliance = variable_get('party_packing_compliance', ''); // value from setting form
    $compliance_seconds = strtotime("1970-01-01 $compliance UTC"); // value from setting form
    ######  logic for Compliant ####
    if (empty($end_time)) {
      $node->compliance = "";
    }
    else {
      if ($end_time > $compliance_seconds) {
        $node->compliance = "Non Compliant";
      }
      else {
        $node->compliance = "Compliant";
      }
    }

    ##### End TDP Compliant #######
    $status = $node->field__party_packingstatus['und'][0]['value'];
    if ($status == 1) {
      $status = "In Process";
    }
    else if ($status == 2) {
      $status = "Completed";
    }
    else {
      $status = "Null";
    }
    $distributor_id = $node->field_distributor_uid['und'][0]['value'];
    $distributor_name = change_feeds_import_get_distributor_name($distributor_id);


    // insert in flat_party_packing table when node update.(if record is not in table then create new record)
    db_merge('flat_party_packing')
        ->key(array('nid' => $node->nid))
        ->fields(array(
          'nid' => $node->nid,
          'vehicle' => $node->field_party_packing_vehicle['und'][0]['value'],
          'loading_date' => $node->field_party_packing_loading_date['und'][0]['value'] ? $node->field_party_packing_loading_date['und'][0]['value'] : 0,
          'party_packing_date' => $node->field_party_packing_date['und'][0]['value'] ? $node->field_party_packing_date['und'][0]['value'] : 0,
          'loading_sheet_line' => $node->field_loading_sheet_line['und'][0]['value'] ? $node->field_loading_sheet_line['und'][0]['value'] : 0,
          'bill_lines' => $node->field_bill_lines['und'][0]['value'] ? $node->field_bill_lines['und'][0]['value'] : 0,
          'each_units' => $node->field_each_units['und'][0]['value'] ? $node->field_each_units['und'][0]['value'] : 0,
          'party_packing_start_time' => $start_time ? $start_time : 0,
          'party_packing_end_time' => $end_time ? $end_time : 0,
          'supervisor' => $node->field_party_packing_supervisor['und'][0]['value'],
          'packer_name' => $node->field_party_packer_name['und'][0]['value'],
          'team_count' => $node->field_party_packer_team_count['und'][0]['value'] ? $node->field_party_packer_team_count['und'][0]['value'] : 0,
          'status' => $status,
          'productivity_lines' => $node->party_packing_productivity_lines ? $node->party_packing_productivity_lines : 0,
          'party_packing_compliance' => $compliance_seconds ? $compliance_seconds : 0,
          'compliance' => $node->compliance,
          'tdp' => $node->TDP,
          'moc' => $node->MOC,
          'distributor_name' => $distributor_name
        ))
        ->execute();
  }

  if ($node->type == 'picking') {
    $start_time = strtotime($node->field_picking_start_time['und'][0]['value']); // picking start time
    $end_time = strtotime($node->field_picking_end_time['und'][0]['value']); // picking end time
    $picking_ld = $node->field_picking_loading_date['und'][0]['value']; // picking loading date
    $timestamp = strtotime($picking_ld);
    $picking_ld_stamp = date("d", $timestamp);
    ######  logic for MOC ####
    if ($picking_ld_stamp < 21) {
      $month = date("m", $timestamp);
      $node->MOC = "MOC" . $month;
    }
    else {
      $newdate = strtotime('+1 month', strtotime($picking_ld));
      $next_month = date("m", $newdate);
      $node->MOC = "MOC" . $next_month;
    }

    ##### End MOC logic #######
    ######  logic for TDP ####
    if (($picking_ld_stamp >= 1) && ($picking_ld_stamp <= 10)) {
      $node->TDP = "TDP2";
    }
    elseif (($picking_ld_stamp >= 11) && ($picking_ld_stamp <= 20)) {
      $node->TDP = "TDP3";
    }
    else {
      $node->TDP = "TDP1";
    }
    ##### End TDP logic #######

    $node->field_picking_loading_date['und'][0]['value'] = strtotime($picking_ld);
    $node->field_picking_picking_date['und'][0]['value'] = strtotime($node->field_picking_picking_date['und'][0]['value']);
    $node->pick_productivity_pick = variable_get('pick_productivity_pick', '');
    $node->picking_compliance = variable_get('picking_compliance', '');
    $compliance = variable_get('picking_compliance', '');
    $compliance_seconds = strtotime("1970-01-01 $compliance UTC");
    ######  logic for Compliant ####

    if (empty($end_time)) {
      $node->compliance = "";
    }
    else {
      if ($end_time > $compliance_seconds) {
        $node->compliance = "Non Compliant";
      }
      else {
        $node->compliance = "Compliant";
      }
    }


    ##### End TDP Compliant #######
    $status = $node->field_picking_status['und'][0]['value'];
    if ($status == 1) {
      $status = "In Process";
    }
    else if ($status == 2) {
      $status = "Completed";
    }
    else {
      $status = "Null";
    }
    $distributor_id = $node->field_distributor_uid['und'][0]['value'];
    $distributor_name = change_feeds_import_get_distributor_name($distributor_id);

    db_merge('flat_picking')
        ->key(array('nid' => $node->nid))
        ->fields(array(
          'nid' => $node->nid,
          'van_id' => $node->field_picking_van_id['und'][0]['value'] ? $node->field_picking_van_id['und'][0]['value'] : 0,
          'loading_date' => $node->field_picking_loading_date['und'][0]['value'] ? $node->field_picking_loading_date['und'][0]['value'] : 0,
          'godown_area_id' => $node->field_picking_godown_area_id['und'][0]['value'],
          'picking_type' => $node->field_picking_picking_type['und'][0]['value'],
          'picking_date' => $node->field_picking_picking_date['und'][0]['value'] ? $node->field_picking_picking_date['und'][0]['value'] : 0,
          'picking_start_time' => $start_time ? $start_time : 0,
          'picking_end_time' => $end_time ? $end_time : 0,
          'pick_lines' => $node->field_pick_lines['und'][0]['value'] ? $node->field_pick_lines['und'][0]['value'] : 0,
          'pick_units' => $node->field_pick_units['und'][0]['value'],
          'pick_clds' => $node->field_pick_clds['und'][0]['value'] ? $node->field_pick_clds['und'][0]['value'] : 0,
          'pick_supervisor' => $node->field_picking_pick_supervisor['und'][0]['value'],
          'picker_name' => $node->field_picking_picker_name['und'][0]['value'],
          'picking_team_count' => $node->field_picking_picking_team_count['und'][0]['value'] ? $node->field_picking_picking_team_count['und'][0]['value'] : 0,
          'status' => $status,
          'pick_productivity_pick' => $node->pick_productivity_pick ? $node->pick_productivity_pick : 0,
          'picking_compliance' => $compliance_seconds ? $compliance_seconds : 0,
          'moc' => $node->MOC,
          'tdp' => $node->TDP,
          'complaince' => $node->compliance,
          'distributor_name' => $distributor_name
        ))
        ->execute();
  }

  if ($node->type == 'egir') { // if content type is EGIR
    $invoice_date = $node->field_invoice_date['und'][0]['value']; // invoice date
    $invoice_timestamp = strtotime($invoice_date);
    $node->field_invoice_date['und'][0]['value'] = $invoice_timestamp;

    $uploading_date = $node->field_unloading_date['und'][0]['value']; // unloading date
    $uploading_timestamp = strtotime($uploading_date);
    $node->field_unloading_date['und'][0]['value'] = $uploading_timestamp;


    ######### Loagic for MOC #######
    $uploading_stamp = date("d", $uploading_timestamp);
    if ($uploading_stamp < 21) {
      $month = date("m", $uploading_timestamp);
      $node->MOC = "MOC" . $month;
    }
    else {
      $newdate = strtotime('+1 month', strtotime($uploading_date));
      $next_month = date("m", $newdate);
      $node->MOC = "MOC" . $next_month;
    }
    ########### End Logic for MOC #######
    ######### Loagic for TDP #######
    if (($uploading_stamp >= 1) && ($uploading_stamp <= 10)) {
      $node->TDP = "TDP2";
    }
    elseif (($uploading_stamp >= 11) && ($uploading_stamp <= 20)) {
      $node->TDP = "TDP3";
    }
    else {
      $node->TDP = "TDP1";
    }
    ########### End Logic for TDP #######

    $egir_date = $node->field_egir_date['und'][0]['value'];
    $egir_timestamp = strtotime($egir_date);
    $node->field_egir_date['und'][0]['value'] = $egir_timestamp;

    $node->egir_end_time_cutoff = variable_get('egir_end_time_cutoff', ''); // value from setting form
    $node->unloading_end_time_cutOff = variable_get('unloading_end_time_cutOff', ''); // value from setting form

    $egir_cutoff = variable_get('egir_end_time_cutoff', '');
    $egir_cutoff_seconds = strtotime("1970-01-01 $egir_cutoff UTC");

    $egir_end_time = strtotime($node->field_egir_end_time['und'][0]['value']);
    ######  logic for EGIR Compliant ####


    if (empty($egir_end_time)) {
      $node->compliance = "";
    }
    else {
      if ($egir_end_time > $egir_cutoff_seconds) {
        $node->compliance = "Non Compliant";
      }
      else {
        $node->compliance = "Compliant";
      }
    }


    ##### End logic for EGIR Compliant #######

    $unloading_cutoff = variable_get('unloading_end_time_cutOff', '');
    $unloading_cutoff_seconds = strtotime("1970-01-01 $unloading_cutoff UTC");

    $unloading_end_time = strtotime($node->field_unloading_end_time['und'][0]['value']);
    ######  logic for Unloading Compliant ####

    if (empty($unloading_end_time)) {
      $node->compliance = "";
    }
    else {
      if ($unloading_end_time > $unloading_cutoff_seconds) {
        $node->compliance = "Non Compliant";
      }
      else {
        $node->compliance = "Compliant";
      }
    }

    ##### End logic for unloading Compliant #######

    $status = $node->field_unloading_status['und'][0]['value'];
    if ($status == 1) {
      $status = "In Process";
    }
    else if ($status == 2) {
      $status = "Completed";
    }
    else {
      $status = "Null";
    }
    $distributor_id = $node->field_distributor_uid['und'][0]['value'];
    $distributor_name = change_feeds_import_get_distributor_name($distributor_id);
    // insert in flat_unloading table when node update.(if record is not in table then create new record)
    db_merge('flat_unloading')
        ->key(array('nid' => $node->nid))
        ->fields(array(
          'nid' => $node->nid,
          'invoice_number' => $node->field_invoice_number['und'][0]['value'],
          'invoice_date' => $node->field_invoice_date['und'][0]['value'] ? $node->field_invoice_date['und'][0]['value'] : 0,
          'truck_no' => $node->field_truck_no['und'][0]['value'],
          'from_location' => $node->field_from_location['und'][0]['value'],
          'unloading_date' => $node->field_unloading_date['und'][0]['value'] ? $node->field_unloading_date['und'][0]['value'] : 0,
          'unloading_start_time' => strtotime($node->field_unloading_start_time['und'][0]['value']) ? strtotime($node->field_unloading_start_time['und'][0]['value']) : 0,
          'unloading_end_time' => strtotime($node->field_unloading_end_time['und'][0]['value']) ? strtotime($node->field_unloading_end_time['und'][0]['value']) : 0,
          'status' => $status,
          'egir_date' => $node->field_egir_date['und'][0]['value'] ? $node->field_egir_date['und'][0]['value'] : 0,
          'egir_start_time' => strtotime($node->field_egir_start_time['und'][0]['value']) ? strtotime($node->field_egir_start_time['und'][0]['value']) : 0,
          'egir_end_time' => strtotime($node->field_egir_end_time['und'][0]['value']) ? strtotime($node->field_egir_end_time['und'][0]['value']) : 0,
          'egir_end_cutoff' => $egir_cutoff_seconds ? $egir_cutoff_seconds : 0,
          'unloading_end_cutoff' => $unloading_cutoff_seconds ? $unloading_cutoff_seconds : 0,
          'tdp' => $node->TDP,
          'moc' => $node->MOC,
          'unloading_compliance' => $node->unloading_end_time_cutOff,
          'egir_complaince' => $node->compliance,
          'distributor_name' => $distributor_name
        ))
        ->execute();
  }
}

/**
 * 
 * @param type $node
 * Implements hook_delete
 */
function change_feeds_import_node_delete($node) {
  // Delete Nid's entry from  party_packing Flat table  on deletion of Party Packing Node
  if ($node->type == 'party_packing') {
    db_delete('flat_party_packing')
        ->condition('nid', $node->nid)
        ->execute();
  }
  // Delete Nid's entry from  EGIR Flat table  on deletion of EGIR Node
  if ($node->type == 'egir') {
    db_delete('flat_unloading')
        ->condition('nid', $node->nid)
        ->execute();
  }

  // Delete Nid's entry from  packing Flat table  on deletion of EGIR Node
  if ($node->type == 'picking') {
    db_delete('flat_picking')
        ->condition('nid', $node->nid)
        ->execute();
  }

  // Delete Nid's entry from  OTIF Flat table  on deletion of EGIR Node
  if ($node->type == 'billing_data') {
    db_delete('flat_billing_data')
        ->condition('nid', $node->nid)
        ->execute();
  }
}

/**
 * 
 * Implements hook_feeds_presave($source, $entity, $item)
 */
function change_feeds_import_feeds_presave($source, $entity, $item, $entity_id) {

  require_once drupal_get_path('module', 'change_feeds_import') . '/form/upload_billing_data.inc';

  if (!empty($item)) {
    foreach ($item as $key => $value) {
      $item[$key] = mb_convert_encoding($value, 'UTF-8', 'UTF-8');
    }
  }
  global $user;
  // Store distributor id in author in each node
  $distributor_id = change_feeds_import_get_distributor_id($user->uid);
  if (!empty($distributor_id)) {
    $entity->uid = $distributor_id;
    if ($entity->type == 'pdd_master') {
      $entity->title = $distributor_id;
    }

    if ($entity->type == 'holiday_master') {
      $entity->title = $distributor_id;
    }
  }
  if ($entity->type == 'egir') {
//    $title = $entity->title;
//    $res = modify_views_forms_master_feed_validate($entity->title, 'egir');
//    if (!empty($res)) {
//      drupal_set_message("$title already exist in EGIR Master", 'error');
//      $entity->feeds_item->skip = TRUE;
//    }
    $egir_start_explode = explode(" ", $entity->field_egir_start_time[LANGUAGE_NONE][0]['value']);
    $egir_end_explode = explode(" ", $entity->field_egir_end_time[LANGUAGE_NONE][0]['value']);
    $egir_date_explode = explode(" ", $entity->field_egir_date[LANGUAGE_NONE][0]['value']);
    $entity->field_egir_start_time[LANGUAGE_NONE][0]['value'] = $egir_date_explode[0] . ' ' . $egir_start_explode[1];
    $entity->field_egir_end_time[LANGUAGE_NONE][0]['value'] = $egir_date_explode[0] . ' ' . $egir_end_explode[1];
  }

  if ($entity->type == 'return_bill') {
    $title = $entity->title;
    $res = modify_views_forms_master_feed_validate($entity->title, 'return_bill');
    if (!empty($res)) {
      drupal_set_message("$title already exist in return bill master", 'error');
      $entity->feeds_item->skip = TRUE;
    }
  }
  if ($entity->type == 'ccfot') {
    $title = $entity->title;
    $res = modify_views_forms_master_feed_validate($entity->title, 'ccfot');
    if (!empty($res)) {
      drupal_set_message("$title already exist in ccoft master", 'error');
      $entity->feeds_item->skip = TRUE;
    }
    if (empty($entity->field_bill_quantity[LANGUAGE_NONE])) {
      $entity->feeds_item->skip = TRUE;
    }
    if ($entity->field_actual_order_quantity[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
    if ($entity->field_suggested_order_quantity[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
  }
  if (($entity->type == 'billing_data') || ($entity->type == 'return_bill')) {
    if ($entity->field_sum_of_net_sales_value[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
    if ($entity->field_sum_of_sales_ret_value[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
    if ($entity->field_sum_of_sales_value[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
    if ($entity->field_mrp[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
    if ($entity->field_tur[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
    if ($entity->field_sum_of_total_sales_qty[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
    if ($entity->field_sum_of_total_sales_ret_qty[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
    if ($entity->field_sum_of_net_sales_qty[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
    if ($entity->field_sum_of_sales_free_qty[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
    if ($entity->field_sum_of_sales_ret_free_qty[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
  }


  if ($entity->type == 'resource_master') {
    $resurce_type_value = $entity->field_resource_type[LANGUAGE_NONE][0]['value'];
    $res = modify_views_forms_master_feed_validate($resurce_type_value, 'resource_type');
    if (empty($res)) {
      drupal_set_message("$resurce_type_value does not exist in Resource type", 'error');
      $entity->feeds_item->skip = TRUE;
    }
  }
  if ($entity->type == 'party_pack_master') {
    $channel = $entity->field_channel[LANGUAGE_NONE][0]['value'];
    $pl_group = $entity->field_pl_group[LANGUAGE_NONE][0]['value'];
    $party_packing = $entity->field_party_packing[LANGUAGE_NONE][0]['value'];

    $res2 = modify_views_forms_master_feed_validate($channel, 'channel_master');
    $res3 = modify_views_forms_master_feed_validate($pl_group, 'pl_group_master');
    $res4 = check_unique_group_channle_combination($channel, $pl_group);
    if (empty($res2)) {
      drupal_set_message("$channel does not exist in Channel Master", 'error');
      $entity->feeds_item->skip = TRUE;
    }
    else if (empty($res3)) {
      drupal_set_message("$pl_group does not exist in PL Group Master", 'error');
      $entity->feeds_item->skip = TRUE;
    }
//    else  if (!empty($res4)) {
//      drupal_set_message("There is already Node present for $channel-$pl_group in Party Pack Master", 'error');
//      $entity->feeds_item->skip = TRUE;
//    }
    elseif (( (strpos($party_packing, 'y') !== false) || (strpos($party_packing, 'Y') !== false) ) && ($party_packing != "YES")) {
      drupal_set_message("$party_packing Should be YES", 'error');
      $entity->feeds_item->skip = TRUE;
    }
    elseif ((strpos($party_packing, 'n') !== false) || (strpos($party_packing, 'N') !== false) && ($party_packing != "NO")) {
      drupal_set_message("$party_packing Should be NO", 'error');
      $entity->feeds_item->skip = TRUE;
    }
    else {
      if (($party_packing != "YES") && ($party_packing != "NO")) {
        drupal_set_message("$party_packing Should be YES or NO", 'error');
        $entity->feeds_item->skip = TRUE;
      }
    }
  }

  if ($entity->type == 'dispatch_data') {
    $title = $entity->title;
    $res = modify_views_forms_master_feed_validate($entity->title, 'dispatch_data');
    if (!empty($res)) {
      drupal_set_message("$title already exist in dispatch data", 'error');
      $entity->feeds_item->skip = TRUE;
    }
  }
  if ($entity->type == 'channel_master') {
//    $title = $entity->title;
//    $res = modify_views_forms_master_feed_validate($entity->title, 'channel_master');
//    if (!empty($res)) {
//      drupal_set_message("$title already exist in channel master", 'error');
//      $entity->feeds_item->skip = TRUE;
//    }
  }
  if ($entity->type == 'godown_master') {
//    $title = $entity->title;
//    $res = modify_views_forms_master_feed_validate($entity->title, 'godown_master');
//    if (!empty($res)) {
//      drupal_set_message("$title already exist in godown master", 'error');
//      $entity->feeds_item->skip = TRUE;
//    }
  }
  if ($entity->type == 'party_pack_master') {
//    $title = $entity->title;
//    $res = modify_views_forms_master_feed_validate($entity->title, 'party_pack_master');
//    if (!empty($res)) {
//      drupal_set_message("$title already exist in party pack master", 'error');
//      $entity->feeds_item->skip = TRUE;
//    }
  }
  if ($entity->type == 'sku7_code_master') {
//    $title = $entity->title;
//    $res = modify_views_forms_master_feed_validate($entity->title, 'sku7_code_master');
//    if (!empty($res)) {
//      drupal_set_message("$title already exist in sku7 code master", 'error');
//      $entity->feeds_item->skip = TRUE;
//    }
  }
  if ($entity->type == 'pl_group_master') {
//    $title = $entity->title;
//    $res = modify_views_forms_master_feed_validate($entity->title, 'pl_group_master');
//    if (!empty($res)) {
//      drupal_set_message("$title already exist in pl group master", 'error');
//      $entity->feeds_item->skip = TRUE;
//    }
  }
  if ($entity->type == 'vehicle_master') {
//    $title = $entity->title;
//    $res = modify_views_forms_master_feed_validate($entity->title, 'vehicle_master');
//    if (!empty($res)) {
//      drupal_set_message("$title already exist in vehicle master ", 'error');
//      $entity->feeds_item->skip = TRUE;
//    }
  }
  if ($entity->type == 'hul_code_master') {
//    $title = $entity->title;
//    $res = modify_views_forms_master_feed_validate($entity->title, 'hul_code_master');
//    if (!empty($res)) {
//      drupal_set_message("$title already exist in hul code master", 'error');
//      $entity->feeds_item->skip = TRUE;
//    }
  }

  if ($entity->type == 'outlet_master') {

    $hul_code = $entity->field_hul_code[LANGUAGE_NONE][0]['value'];
    $channel = $entity->field_channel[LANGUAGE_NONE][0]['value'];
    $pl_group = $entity->field_pl_group[LANGUAGE_NONE][0]['value'];
    $res1 = modify_views_forms_master_feed_validate($hul_code, 'hul_code_master');
    $res2 = modify_views_forms_master_feed_validate($channel, 'channel_master');
    $res3 = modify_views_forms_master_feed_validate($pl_group, 'pl_group_master');
    if (empty($res1)) {
      drupal_set_message("$hul_code does not exist in HUL Code Master", 'error');
      $entity->feeds_item->skip = TRUE;
    }
    else if (empty($res2)) {
      drupal_set_message("$channel does not exist in Channel Master", 'error');
      $entity->feeds_item->skip = TRUE;
    }
    else if (empty($res3)) {
      drupal_set_message("$pl_group does not exist in PL Group Master", 'error');
      $entity->feeds_item->skip = TRUE;
    }
  }
}

/**
 * 
 * @param text $feed
 * @param text $content_type
 */
function modify_views_forms_master_feed_validate($feed_title, $content_type) {
  $query = db_select('node', 'n');
  $query->fields('n', array('title'));
  $query->condition('n.type', $content_type);
  $query->condition('n.title', $feed_title);
  $query->addTag('node_uid');
  $result = $query->execute()->fetchField();
  return $result;
}

function change_feeds_import_views_api() {
  return array(
    'api' => '3.0',
    'path' => drupal_get_path('module', 'change_feeds_import') . '/views',
  );
}

/**
 * Implements hook_node_presave()
 */
function change_feeds_import_node_presave($node) {
  global $user;
  $user_id = $user->uid;
  $distributor_id = change_feeds_import_get_distributor_id($user_id);

  if ($node->type == 'egir') {
    $node->field_distributor_uid['und'][0]['value'] = $distributor_id;
  }
  if (!empty($distributor_id)) {
    $node->uid = $distributor_id;
  }

  if (!empty($node->field_picking_start_time['und']) && !empty($node->field_picking_end_time['und'])) {
    $node->field_picking_status[LANGUAGE_NONE][0]['value'] = 2;
  }
  if (!empty($node->field_picking_start_time['und']) && empty($node->field_picking_end_time['und'])) {
    $node->field_picking_status[LANGUAGE_NONE][0]['value'] = 1;
  }
  if (!empty($node->field_party_packing_start_time['und']) && !empty($node->field_party_packing_end_time['und'])) {
    $node->field__party_packingstatus[LANGUAGE_NONE][0]['value'] = 2;
  }
  if (!empty($node->field_party_packing_start_time['und']) && empty($node->field_party_packing_end_time['und'])) {
    $node->field__party_packingstatus[LANGUAGE_NONE][0]['value'] = 1;
  }
  if (!empty($node->field_unloading_start_time['und']) && !empty($node->field_unloading_end_time['und'])) {
    $node->field_unloading_status[LANGUAGE_NONE][0]['value'] = 2;
  }
  if (!empty($node->field_unloading_start_time['und']) && empty($node->field_unloading_end_time['und'])) {
    $node->field_unloading_status[LANGUAGE_NONE][0]['value'] = 1;
  }
}

function holiday_get_working_day($date_timestamp, $day, $holidays, $weeklyoff) {
  $date = date('Y-m-d', $date_timestamp);

  while ($day != 0) {
    $date_timestamp = strtotime('+1 days', $date_timestamp);
    $date = date('Y-m-d', $date_timestamp);
    $day_name = date("l", $date_timestamp);
    if (in_array($date, $holidays)) {
      
    }
    elseif (in_array($day_name, $weeklyoff)) {
      
    }
    else {
      $day--;
    }
  }
  return $date;
}

function change_feeds_import_get_distributor_id($user_id) {
  $query = db_select('users', 'u');
  $query->innerjoin('field_data_field_distributor', 'd', 'd.entity_id = u.uid');
  $query->condition('d.entity_id', $user_id, '=');
  $query->fields('u', array('uid'));
  $query->fields('d', array('field_distributor_value'));
  $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  $distributor_id = $result[0]['field_distributor_value'];
  return $distributor_id;
}

function change_feeds_import_get_distributor_name($distributor_id) {
  $query = db_select('field_data_field_distributor', 'd');
  $query->innerjoin('field_data_field_name', 'n', 'n.entity_id = d.entity_id');
  $query->condition('n.entity_id', $distributor_id, '=');
  $query->fields('n', array('	field_name_value'));
  $query->fields('d', array('field_distributor_value'));
  $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  $distributor_name = $result[0]['field_name_value'];
  return $distributor_name;
}

function change_feeds_import_user_presave(&$edit, $account, $category) {
  global $user;
  $roles = $user->roles;
  if (in_array("Distributor", $roles)) {
    $uid = $user->uid;
    $edit['field_distributor']['und'][0]['value'] = $uid;
  }
}

function change_feeds_import_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'user_register_form' || $form_id == 'user_profile_form') {
    $form['#validate'][] = 'registration_validate';
    return $form;
  }
  if (isset($form_state['node'])) {
    $node = $form_state['node'];
    if (!isset($node->nid) || isset($node->is_new)) {
      // This is a new node.
      if ($form_id == 'product_division_master_node_form' || $form_id == 'pricelist_group_master_node_form') {
        $form['#submit'][] = 'change_feeds_import_custom_node_add_submit';
      }
    }
  }
}

function change_feeds_import_custom_node_add_submit($form, &$form_state) {
  change_feeds_import_change_status_of_error_billing_table();
  drupal_set_message("Data is created successfully");
}

function registration_validate($form, &$form_state) {
  global $user;
  $roles = $user->roles;
  if (in_array("administrator", $roles)) {
    form_set_error('failed_account', 'administrator can not create account only distributor can create account');
  }
}

function change_feeds_import_feeds_after_import(FeedsSource $source) {
  if ($source->id == 'sku7_code_master' || $source->id == 'outlet_master') { // if importing through sku7_code_master OR outlet_master.  
    change_feeds_import_change_status_of_error_billing_table();
  }
}

function change_feeds_import_change_status_of_error_billing_table() {
  global $user;
  $user_id = $user->uid;
  $distributor_id = change_feeds_import_get_distributor_id($user_id);

  $status_updated = db_update('error_billing_data') // update status in error_billing_data condition based on (Distributor Id )
      ->fields(array(
        'status' => "Validate",
      ))
      ->condition('distributor_id', $distributor_id, '=')
      ->condition('status', 'Error', '=')
      ->execute();
}

function change_feeds_import_services_resources() {
  $android_services_resource = array(
    '#api_version' => 3002,
  );
  $android_services_resource = array(
    'loading' => array(
      'actions' => array(
        'get-details' => array(
          'help' => 'Get data according party packing or not',
          'callback' => 'change_feeds_import_check_party_packing_or_not',
          'args' => array(
            array(
              'name' => 'van_type',
              'type' => 'string',
              'description' => 'pass param as van_type',
              'source' => array('data' => 'van_type'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'nid',
              'type' => 'string',
              'description' => 'pass param as nid',
              'source' => array('data' => 'nid'),
              'optional' => FALSE,
            ),
          ),
          'access arguments' => array('Distributor Upload File'),
          'file' => array('type' => 'inc', 'module' => 'change_feeds_import', 'name' => 'includes/change_feeds_import_loading'),
        ),
      ),
    ),
  );
  return $android_services_resource;
}

function change_feeds_import_views_query_alter(&$view, &$query) {
  // Do the actual join
  global $user;
  // Store distributor id in author in each node

  $distributor_id = change_feeds_import_get_distributor_id($user->uid);

  if ($view->base_table == 'node') {
    $query->add_where(0, 'node.uid', $distributor_id, '=');
  }
  if ($view->base_table == 'custom_billing_data') {
    $query->add_where(0, 'custom_billing_data.distributor_id', $distributor_id, '=');
  }
  if ($view->base_table == 'van_cld_data_table') {
    $query->add_where(0, 'van_cld_data_table.distributor_id', $distributor_id, '=');
  }
  if ($view->name == 'pending_delivery_outstanding_report') {
    $query->add_field('custom_billing_data', 'bill_number', 'custom_billing_data_bill_number', array('function' => 'groupby'));
    $query->add_groupby('custom_billing_data.bill_number');
  }

  if ($view->name == 'impact_delivery_report') {
    $sub_query = db_select('custom_billing_data', 'b');
    $sub_query->join('node', 'n', 'n.title = b.bill_number');
    $sub_query->join('field_data_field_bill_value', 'v', 'v.entity_id = n.nid');
    $sub_query->addField('b', 'bill_number', 'bill_number');
    $sub_query->addField('v', 'field_bill_value_value', 'field_bill_value_value');

    if (isset($view->exposed_raw_input['date_filter']['min']) && isset($view->exposed_raw_input['date_filter']['max'])) {
      $min = intval(strtotime($view->exposed_raw_input['date_filter']['min']));
      $max = intval(strtotime($view->exposed_raw_input['date_filter']['max']));

      $sub_query->condition('b.loading_date', $min, '>=');
      $sub_query->condition('b.loading_date', $max, '<=');
    }

    //$sub_query->addExpression('ifnull(v.field_bill_value_value, 5)', 'field_bill_value_value');
    $sub_query->addExpression('MIN(sku7_code)', 'minimum');
    $sub_query->groupBy('bill_number');
    $join = new views_join();
    $join->definition = array('table formula' => $sub_query, 'left_field' => 'bill_number', 'field' => 'bill_number', 'left_table' => 'custom_billing_data');
    $join->left_table = 'custom_billing_data'; // or wathever table you want to join with
    $join->table = 'custom_billing_data';
    $join->field = 'bill_number';
    $join->left_field = 'bill_number'; // or wathever column you want to join with
    $join->type = 'LEFT'; // if you want another join type play with this value
    $join->extra = array(
      array('field' => 'minimum', 'left_field' => 'sku7_code'),
    );

    // Do the actual join
    $query->table_queue['temp'] = array(
      'alias' => 'temp', // I believe this is optional
      'table' => $sub_query,
      'relationship' => 'custom_billing_data',
      'join' => $join,
    );

    $query->add_field('temp', 'field_bill_value_value');
  }


  if ($view->name == 'drs_report') {
    $trip_id = $view->args[0];
    $sub_query = db_select('node', 'n');
    $sub_query->addTag('node_uid');
    $sub_query->addField('n', 'title', 'bill_number');
    $sub_query->join('field_data_field_trip_id_reference', 'tp', 'tp.entity_id = n.nid');
    $sub_query->join('node', 'dd', 'dd.nid = tp.field_trip_id_reference_nid');
    $sub_query->condition('dd.title', $trip_id, "=");
    $sub_query->join('field_data_field_sales_party_code', 'spc', 'spc.entity_id = n.nid');
    $sub_query->join('field_data_field_party_code', 'opc', 'opc.field_party_code_value = spc.field_sales_party_code_value');
    $sub_query->join('field_data_field_beat_name', 'bn', 'bn.entity_id = opc.entity_id');
    $sub_query->addField('bn', 'field_beat_name_value', 'BEAT_NAME');
    $sub_query->groupBy('BEAT_NAME');
    //$sub_query->addExpression('ifnull(v.field_bill_value_value, 5)', 'field_bill_value_value');
    $sub_query->addExpression('MIN(n.title)', 'minimum');



    $join = new views_join();
    $join->definition = array('table formula' => $sub_query, 'left_field' => 'title', 'field' => 'minimum', 'left_table' => 'node');
    $join->table = 'node';
    $join->field = 'minimum';
    $join->left_table = 'node'; // or wathever table you want to join with
    $join->left_field = 'title'; // or wathever column you want to join with
    $join->type = 'LEFT'; // if you want another join type play with this value
//    $join->extra = array(
//      array('field' => 'minimum', 'left_field' => 'title'),
//    );
    // Do the actual join
    $query->table_queue['temp'] = array(
      'alias' => 'temp', // I believe this is optional
      'table' => $sub_query,
      'relationship' => 'node',
      'join' => $join,
    );

    $query->add_field('temp', 'BEAT_NAME');
  }
}

/**
 * 
 * @param type $channel = Party pack master channle
 * @param type $pl_group = Party pack master group
 */
function check_unique_group_channle_combination($channel, $pl_group) {
  $query = db_select('field_data_field_channel', 'ch');
  $query->join('node', 'n', 'n.nid = ch.entity_id');
  $query->condition('ch.bundle', 'party_pack_master');
  $query->condition('ch.field_channel_value', $channel, '=');
  $query->join('field_data_field_pl_group', 'ppmpl', 'ppmpl.entity_id = ch.entity_id');
  $query->condition('ppmpl.bundle', 'party_pack_master');
  $query->condition('ppmpl.field_pl_group_value', $pl_group, '=');
  $query->fields('ppmpl', array('entity_id'));
  $query->addTag('node_uid');
  $result = $query->execute()->fetchAllKeyed(0, 0);
  return $result;
}

/**
 * implements hook query alter to allow ordering by weight
 * @param QueryAlterableInterface $query
 */
function change_feeds_import_query_node_uid_alter(QueryAlterableInterface $query) {

  global $user;
  $user_id = $user->uid;
  $distributor_id = change_feeds_import_get_distributor_id($user_id);

  // altering the dynamic query object having tag => node_uid
  $query->condition('n.uid', $distributor_id);
}

/**
 * Implements hook_feeds_plugins().
 */
function change_feeds_import_feeds_plugins() {
  $path = drupal_get_path('module', 'change_feeds_import') . '/plugins';
  $info['FeedsNodeCustomProcessor'] = array(
    'name' => 'Custom Node processor',
    'description' => 'Create and update nodes.',
    'help' => 'Create and update nodes from parsed content.',
    'handler' => array(
      'parent' => 'FeedsNodeProcessor',
      'class' => 'FeedsNodeCustomProcessor',
      'file' => 'FeedsNodeCustomProcessor.inc',
      'path' => $path,
    ),
  );
  return $info;
}
