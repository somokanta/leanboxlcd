<?php

module_load_include('inc', 'change_feeds_import', 'form/upload_billing_data');

/*
 *  hook_permission()
 */

function change_feeds_import_permission() {
  return array(
    'Distributor Upload File' => array(
      'title' => t('Distributor Upload File'),
      'description' => t('Distributor Upload File')
    ),
    'Delete Billing Data' => array(
      'title' => t('Delete Billing Data'),
      'description' => t('Delete Billing Data')
    ),
  );
}

/**
 * Implments hook_menu
 *
 */
function change_feeds_import_menu() {
  $items = array();

  $items['update-billing-data'] = array(
    'title' => 'Update Billing Data',
    'page callback' => 'update_billing_data',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['update-billing-data-thankyou'] = array(
    'title' => 'Update Billing Data Thankyou',
    'page callback' => 'update_billing_data_thankyou',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );


  // Manually Delete Billing Data
  $items['delete-billing-data'] = array(
    'title' => 'Delete Billing Data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('delete_billing_form'),
    'access arguments' => array('Delete Billing Data'),
    'type' => MENU_CALLBACK,
  );

  $items['impact-delivery-cron'] = array(
    'title' => 'Impact Delivery Report',
    'page callback' => 'impact_delivery_cron',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['impact-delivery-partypack-cron'] = array(
    'title' => 'Partypack cron Report',
    'page callback' => 'impact_delivery_partypack_cron',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['drs-report'] = array(
    'title' => 'DRS Report',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('get_data_of_trip_id_form'),
    'access arguments' => array('Distributor Upload File'),
    'type' => MENU_CALLBACK,
  );



  $items['download-pdf/%'] = array(
    'title' => 'Download PDF',
    'page callback' => 'download_pdf',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );


  $items['drs-report2'] = array(
    'title' => 'DRS Report',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('get_data_of_trip_id_2_form'),
    'access arguments' => array('Distributor Upload File'),
    'type' => MENU_CALLBACK,
  );


  $items['download-pdf2/%'] = array(
    'title' => 'Download PDF',
    'page callback' => 'download_pdf2',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  // setting form for flat table
  $items['admin/config/flat-table'] = array(
    'title' => 'Setting Form For Flat Table',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('change_feeds_import_setting_form'),
    'access callback' => 'check_if_fr_role_user_admin',
  );

  // Upload form for sales register data
  $items['outlet-area-hook/import'] = array(
    'title' => 'Outlet Area Hook',
    'description' => 'Import Outlet Area Hook',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('change_feeds_import_outlet_area_hook_form'),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/outlet_area_hook.inc',
  );

  $items['outlet-area-hook-confirm/%'] = array(
    'title' => 'Outlet Area Hook Confirm Table',
    'description' => 'Outlet Area Hook Confirm Table',
    'page callback' => 'change_feeds_import_outlet_area_hook_confirm_content',
    'page arguments' => array(1),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/outlet_area_hook.inc',
  );

  // when confirm is clicked
  $items['outlet-area-hook-confirm/create_content/%'] = array(
    'title' => 'Outlet content',
    'description' => 'Outlet Area Hook create Update node of outlet_master',
    'page callback' => 'change_feeds_import_outlet_area_hook_create_confirm_content',
    'page arguments' => array(2),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/outlet_area_hook.inc',
  );

  // when discard is clicked
  $items['outlet-area-hook-discard/%'] = array(
    'title' => 'Outlet Area Hook delete',
    'description' => 'Outlet Area Hook Data',
    'page callback' => 'change_feeds_import_outlet_area_hook_discard_data',
    'page arguments' => array(1),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/outlet_area_hook.inc',
  );

  // Upload form for sales register data
  $items['sales-delivery-data/import'] = array(
    'title' => 'Sales Delivery Data',
    'description' => 'Import Sales Delivery Data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('change_feeds_import_sales_delivery_form'),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/sales_delivery_data.inc',
  );



  $items['sales-delivery-data-confirm/%'] = array(
    'title' => 'Sales Delivery Data  Confirm Table',
    'description' => 'Sales Delivery Data Confirm Table',
    'page callback' => 'change_feeds_import_sales_delivery_confirm_content',
    'page arguments' => array(1),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/sales_delivery_data.inc',
  );

  // when confirm is clicked
  $items['sales-delivery-data-confirm/create_content/%'] = array(
    'title' => 'Sales Delivery content',
    'description' => 'Sales Delivery Data create node of sales register',
    'page callback' => 'change_feeds_import_sales_delivery_create_confirm_content',
    'page arguments' => array(2),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/sales_delivery_data.inc',
  );

  // when discard is clicked
  $items['sales-delivery-data-discard/%'] = array(
    'title' => 'Sales Delivery data delete',
    'description' => 'Sales Delivery delete Data',
    'page callback' => 'change_feeds_import_sales_delivery_discard_data',
    'page arguments' => array(1),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/sales_delivery_data.inc',
  );

  // Upload form for sales register data
  $items['outstanding-activity/import'] = array(
    'title' => 'Import Outstanding Activity Data',
    'description' => 'Import Outstanding Activity Node',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('change_feeds_import_outstanding_activity_form'),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/outstanding_activity_data.inc',
  );

  $items['outstanding-activity-confirm/%'] = array(
    'title' => 'Outstanding Activity  Confirm Table',
    'description' => 'Outstanding Activity  Confirm Table',
    'page callback' => 'change_feeds_import_outstanding_activity_confirm_content',
    'page arguments' => array(1),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/outstanding_activity_data.inc',
  );

  // when confirm is clicked
  $items['outstanding-activity-confirm/create_content/%'] = array(
    'title' => 'confirm',
    'description' => 'Confirm to create Outstanding Activity contents',
    'page callback' => 'change_feeds_import_outstanding_activity_create_confirm_content',
    'page arguments' => array(2),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/outstanding_activity_data.inc',
  );

  // when discard is clicked
  $items['outstanding-activity-discard/%'] = array(
    'title' => 'Outstanding Activity delete',
    'description' => 'Outstanding Activity delete Data',
    'page callback' => 'change_feeds_import_outstanding_activity_discard_data',
    'page arguments' => array(1),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/outstanding_activity_data.inc',
  );

  // Upload form for sales register data
  $items['sales-register/import'] = array(
    'title' => 'Import Sales Register Data',
    'description' => 'Import Sales Register Data Node',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('change_feeds_import_sales_register_form'),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/sales_register_data.inc',
  );



  $items['sales-confirm/%'] = array(
    'title' => 'Sales Confirm Table',
    'description' => 'Sales Register Confirm Table',
    'page callback' => 'change_feeds_import_sales_confirm_content',
    'page arguments' => array(1),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/sales_register_data.inc',
  );



  // when confirm is clicked
  $items['sales-confirm/create_content/%'] = array(
    'title' => 'confirm',
    'description' => 'Confirm to create sales register contents',
    'page callback' => 'change_feeds_import_sales_create_confirm_content',
    'page arguments' => array(2),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/sales_register_data.inc',
  );

  // when discard is clicked
  $items['sales-discard/%'] = array(
    'title' => 'sales Discard',
    'description' => 'sales Discard Data',
    'page callback' => 'change_feeds_import_sales_discard_data',
    'page arguments' => array(1),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/sales_register_data.inc',
  );


  // Upload form for Area Hook Group Master.
  $items['area-hook-grp/import'] = array(
    'title' => 'Area Hook Group Master',
    'description' => 'Import Area Hook Group Master Data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('change_feeds_import_area_hook_grp_form'),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/area_hook_grp_data.inc',
  );


  $items['area-hook-grp-confirm/%'] = array(
    'title' => 'Area Hook Group Master Confirm Table',
    'description' => 'Area Hook Group Master Confirm Table',
    'page callback' => 'change_feeds_import_area_hook_grp_confirm_content',
    'page arguments' => array(1),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/area_hook_grp_data.inc',
  );

  // when confirm is clicked
  $items['area-hook-grp-confirm/create_content/%'] = array(
    'title' => 'confirm',
    'description' => 'Confirm to Area Hook Group Master contents',
    'page callback' => 'change_feeds_import_area_hook_grp_create_confirm_content',
    'page arguments' => array(2),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/area_hook_grp_data.inc',
  );

  // when discard is clicked
  $items['area-hook-grp-discard/%'] = array(
    'title' => 'Area Hook Group Master Discard',
    'description' => 'Area Hook Group Master Discard Data',
    'page callback' => 'change_feeds_import_area_hook_grp_discard_data',
    'page arguments' => array(1),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/area_hook_grp_data.inc',
  );

  // Upload form for Sales Day-Van Pl Group Area Grouping.
  $items['day-van-area/import'] = array(
    'title' => 'Day-Van Pl Group Area Grouping',
    'description' => 'Import Sales Day-Van Pl Group Area Grouping Data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('change_feeds_import_day_van_area_form'),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/day_van_area_data.inc',
  );

  $items['day-van-area-confirm/%'] = array(
    'title' => 'Day-Van-Area Confirm Table',
    'description' => 'Day-Van-Area Confirm Table',
    'page callback' => 'change_feeds_import_day_van_area_confirm_content',
    'page arguments' => array(1),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/day_van_area_data.inc',
  );

  // when confirm is clicked
  $items['day-van-area-confirm/create_content/%'] = array(
    'title' => 'confirm',
    'description' => 'Confirm to Day-Van-Area contents',
    'page callback' => 'change_feeds_import_day_van_area_create_confirm_content',
    'page arguments' => array(2),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/day_van_area_data.inc',
  );

  // when discard is clicked
  $items['day-van-area-discard/%'] = array(
    'title' => 'Day-Van-Area Discard',
    'description' => 'Day-Van-Area Discard Data',
    'page callback' => 'change_feeds_import_day_van_area_discard_data',
    'page arguments' => array(1),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/day_van_area_data.inc',
  );

  // Upload form for billing data
  $items['billing_data/import'] = array(
    'title' => 'Import Billing Data',
    'description' => 'Import Billing Data Node',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('change_feeds_import_billing_data_form'),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/upload_billing_data.inc',
  );

  // error validate confirm screen for data
  $items['confirm/%'] = array(
    'title' => 'Confirm Table',
    'description' => 'Confirm Table',
    'page callback' => 'change_feeds_import_confirm_content',
    'page arguments' => array(1),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/show_confirm_table.inc',
  );

  // when validate is clicked
  $items['validate/%'] = array(
    'title' => 'Validate Data',
    'description' => 'Validate Data',
    'page callback' => 'change_feeds_import_validate_content',
    'page arguments' => array(1),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/validate_content.inc',
  );

  // when confirm is clicked
  $items['confirm/create_content/%'] = array(
    'title' => 'confirm',
    'description' => 'Confirm to create billing packing and picking contents',
    'page callback' => 'change_feeds_import_create_confirm_content',
    'page arguments' => array(2),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/create_content_on_confirm.inc',
  );

  // when discard is clicked
  $items['discard/%'] = array(
    'title' => 'Discard',
    'description' => 'Discard Data',
    'page callback' => 'change_feeds_import_discard_data',
    'page arguments' => array(1),
    'access arguments' => array('Distributor Upload File'),
    'file' => 'form/discard_content.inc',
  );

  return $items;
}

function update_billing_data_thankyou() {
  drupal_set_message("Thankyou updation is completed");
  return "";
}

function update_billing_data() {
  $batch = array(
    'operations' => array(
      array('change_feeds_import_update_billing', array()),
    ),
    'finished' => 'change_feeds_import_update',
    'title' => t('Creating Billing Data'),
    'init_message' => t('Billing Data Batch Creation is starting.'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('Billing Data Batch has encountered an error.'),
    'file' => drupal_get_path('module', 'change_feeds_import')
  );
  batch_set($batch);
  batch_process('update-billing-data-thankyou');
}

function change_feeds_import_update_billing(&$context) {

  if (!isset($context['sandbox']['progress'])) {
    $rr = strtotime(date('Y-m-d', strtotime('last month')));
    $rr1 = time();
    $query = db_select('custom_billing_data', 'cb');
    $query->addField('cb', 'bill_number');
    $query->condition('cb.created_date', array($rr, $rr1), 'BETWEEN');
    $results = $query->execute();
    $num = $results->rowCount();
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = $num;
  }

  $limit = 500;
  $progress = $context['sandbox']['progress'];
  // With each pass through the callback, retrieve the next group of nids.
  $rr = strtotime(date('Y-m-d', strtotime('last month')));
  $rr1 = time();
  $query = db_select('custom_billing_data', 'cb');
  $query->addField('cb', 'bill_number');
  $query->addField('cb', 'bill_date', 'bill_date');
  $query->addField('cb', 'distributor_id', 'distributor_id');
  $query->condition('cb.created_date', array($rr, $rr1), 'BETWEEN');
  $query->range($progress, $limit);
  $results = $query->execute()->fetchAll();
  for ($i = $context['sandbox']['progress']; $i < $context['sandbox']['progress'] + 500 && $i < $context['sandbox']['max']; $i++) {
    $key = $i;
    $val = $results[$key];

    $nid = check_node_title_exists_for_update($val->bill_number, $val->distributor_id);
    $node = node_load($nid);
    if ($node) {
      $node->field_sr_bill_date[LANGUAGE_NONE][0]['value'] = $val->bill_date;
      node_save($node);
    }
  }
  $context['sandbox']['progress'] = $i;
  if ($context['sandbox']['progress'] < $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
  else {
    $context['finished'] = 1;
  }
}

function check_node_title_exists_for_update($bill_number, $distributor_id) {
  $query1 = db_select('node', 'n');
  $query1->condition('n.type', 'sales_register_data');
  $query1->condition('n.title', $bill_number);
  $query1->condition('n.uid', $distributor_id);
  $query1->fields('n', array('nid'));
  $nid = $query1->execute()->fetchField();
  return $nid;
}

function download_pdf($args) {
  $view_name = "drs_report";
  $view = views_get_view($view_name, '');
  $view->set_arguments(array($args));
  $rendered_html = $view->render();
  pdf_using_mpdf_api($rendered_html);
}

function download_pdf2($args) {
  $view_name = "drs_report2";
  $view = views_get_view($view_name, '');
  $view->set_arguments(array($args));
  $rendered_html = $view->render();
  pdf_using_mpdf_api($rendered_html);
}

function get_data_of_trip_id_form($form, &$form_state) {

  $form['#prefix'] = '<div id="itemlist-div">';
  $form['#suffix'] = '</div>';

  $form['trip_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Trip Id'),
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('submit'),
    '#ajax' => array(
      'wrapper' => 'itemlist-div',
      'callback' => 'get_data_of_trip_id_form_submit',
      'method' => 'replace',
      'effect' => 'fade',
    ),
    '#submit' => array('trip_form_submit'),
  );
  if (!empty($form_state['views_data'])) {
    $form['hhh'] = array(
      '#type' => 'markup',
      '#markup' => $form_state['views_data'],
    );
    $trip_id = $form_state['values']['trip_id'];
    $rr = l('Open PDF', "/download-pdf/$trip_id");
    $form['dowmload_mark'] = array(
      '#type' => 'markup',
      '#markup' => $rr,
    );
  }
  return $form;
}

/**
 * 
 * @param type $form
 * @param type $form_state
 * @return array
 */
function delete_billing_form($form, &$form_state) {

  $form['#prefix'] = '<div id="itemlist-div">';
  $form['#suffix'] = '</div>';

  // selected date for deleting data of billing data by admin
  $form['to_date'] = array(
    '#type' => 'date_popup',
    '#date_format' => 'd-m-Y h:i A',
    '#required' => TRUE,
  );


  $users = get_list_of_users(); // get all registerd users.
  // Here admin can choose user
  $form['user'] = array(
    '#type' => 'select',
    '#title' => t('User'),
    '#options' => $users,
    '#required' => TRUE,
  );


  $form['check'] = array(
    '#type' => 'submit',
    '#value' => t('Check Records'),
    '#ajax' => array(
      'wrapper' => 'itemlist-div',
      'callback' => 'ajax_form_submit',
      'method' => 'replace',
      'effect' => 'fade',
    ),
    '#submit' => array('check_records_submit'),
  );

  if (!empty($form_state['values']['billing_count'])) {
    $billing_count = $form_state['values']['billing_count'];
    if ($billing_count == "empty") {
      $msg = "There is no data to delete";
    }
    else {
      $msg = "NUmber of Record Going To Delete = $billing_count";
      $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Delete'),
        '#submit' => array('delete_billing_form_submit'),
      );
    }

    $form['data'] = array(
      '#type' => 'markup',
      '#markup' => $msg,
    );
  }



  return $form;
}

/**
 * 
 * @param type $form
 * @param type $form_state
 */
function check_records_submit($form, &$form_state) {
  $start_date = strtotime($form_state['values']['to_date']);
  $end_date = $start_date + 120;
  $user = $form_state['values']['user'];
  $pass = "";
  // get data from custom table for selected date and user (custom_billing_data).
  $billing_data = get_custom_data($pass, $start_date, $end_date, $user);
  if (!empty($billing_data)) {
    $billing_count = count($billing_data);
  }
  else {
    $billing_count = "empty";
  }
  $form_state['values']['billing_count'] = $billing_count;
  $form_state['rebuild'] = TRUE;
}

/**
 * 
 * @param type $form
 * @param type $form_state
 * @return type
 */
function ajax_form_submit($form, &$form_state) {
  return $form;
}

/**
 * 
 * @param type $element
 * @param type $form_state
 * @param type $context
 */
function change_feeds_import_date_popup_process_alter(&$element, &$form_state, $context) {
  if ($element['#name'] == 'to_date') {
    $element['date']['#title'] = "Date";
    $element['time']['#title'] = "Time";
  }
}

// get all registerd users.
function get_list_of_users() {
  $query = db_select('users', 'u');
  $query->fields('u', array('name', 'uid'));
  $result = $query->execute()->fetchAllKeyed(1, 0);
  return $result;
}

/**
 * 
 * @param type $form
 * @param type $form_state
 */
function delete_billing_form_submit($form, &$form_state) {

  $start_date = strtotime($form_state['values']['to_date']);
  $end_date = $start_date + 120;
  $user = $form_state['values']['user'];
  $pass = "";
  // get data from custom table for selected date and user (custom_billing_data).
  $billing_data = $sales_data = get_custom_data($pass, $start_date, $end_date, $user);
  $billing_count = count($billing_data);
  $pass = "sales";
  // get data from Sales register's node's for selected date and user (custom_billing_data).
  // $sales_data = get_custom_data($pass, $start_date, $end_date, $user);
  // delete data from custom table for selected date and user (custom_billing_data).
  foreach ($billing_data as $key => $val) {
    $id = $val['id'];
    $num_deleted = db_delete('custom_billing_data')
        ->condition('id', $id)
        ->execute();
  }

  // update data(billing_van,billing_loading_date) from Sales register's node's for selected date and user (custom_billing_data).
  if (!empty($sales_data)) {
    foreach ($sales_data as $key => $val) {

      // check Sales Register's node exist or not
      $nid = check_node_title_exists_sales_register_data($val['bill_number'], $user);
      $node = node_load($nid);
      if ($node) {
//        $node->field_billing_van[LANGUAGE_NONE][0]['value'] = NULL;
//        $node->field_billing_loading_date[LANGUAGE_NONE][0]['value'] = NULL;
        $node->field_billing_van = array();
        $node->field_billing_loading_date = array();
        $node->field_sr_bill_date = array();
        node_save($node);
      }
    }
  }

  // Delete data of  Party Packing Nodes selected date and user.
  $party_packing_nodes = get_all_nodes("party_packing", $start_date, $end_date, $user);
  if (!empty($party_packing_nodes)) {
    foreach ($party_packing_nodes as $nid) {
      node_delete($nid);
    }
  }
  // Delete data of Picking Nodes selected date and user.
  $picking_nodes = get_all_nodes("picking", $start_date, $end_date, $user);
  if (!empty($picking_nodes)) {
    foreach ($picking_nodes as $nid) {
      node_delete($nid);
    }
  }
  drupal_set_message("successfully Deleted $billing_count Records");
}

/**
 * 
 * @param type $title = node's title
 * @param type $user = node created by user
 * @return type
 * 
  check Sales Register's node exist or not
 */
function check_node_title_exists_sales_register_data($title, $user) {
  $query1 = db_select('node', 'n');
  $query1->condition('n.type', 'sales_register_data');
  $query1->condition('n.title', $title);
  $query1->condition('n.uid', $user);
  $query1->fields('n', array('nid'));
  $nid = $query1->execute()->fetchField();
  return $nid;
}

/**
 * 
 * @param type $pass = variable for groupby only for sales register data
 * @param type $start_date = Start date
 * @param type $end_date = End Date
 * @param type $user = Data created by user
 * @return type
 */
function get_custom_data($pass, $start_date, $end_date, $user) {
  $query = db_select('custom_billing_data', 'c');
  $query->condition('c.distributor_id', $user);
  $query->fields('c', array('id'));
  $query->condition('c.created_date', array($start_date, $end_date), 'BETWEEN');
  if (!empty($pass)) {
    $query->groupBy('c.bill_number');
    $query->addField('c', 'bill_number');
  }
  $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  return $res;
}

/**
 * 
 * @param type $type = Party Packing Or Picking
 * @param type $start_date = Start date
 * @param type $end_date = End Date
 * @param type $user = Node created by user
 * @return type
 */
function get_all_nodes($type, $start_date, $end_date, $user) {
  $query = db_select('node', 'n');
  $query->condition('n.type', $type);
  $query->condition('n.uid', $user, '=');
  $query->condition('n.created', array($start_date, $end_date), 'BETWEEN');
  $query->fields('n', array('nid'));
  $res = $query->execute()->fetchAllKeyed(0, 0);
  return $res;
}

function get_data_of_trip_id_2_form($form, &$form_state) {

  $form['#prefix'] = '<div id="itemlist-div">';
  $form['#suffix'] = '</div>';

  $form['trip_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Trip Id'),
    '#size' => 10,
    '#required' => TRUE,
    '#id' => 'drs-report2'
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('submit'),
    '#ajax' => array(
      'wrapper' => 'itemlist-div',
      'callback' => 'get_data_of_trip_id_2_form_submit',
      'method' => 'replace',
      'effect' => 'fade',
    ),
    '#submit' => array('trip_2_form_submit'),
  );
  if (!empty($form_state['views_data'])) {
    $form['hhh'] = array(
      '#type' => 'markup',
      '#markup' => $form_state['views_data'],
    );
    $trip_id = $form_state['values']['trip_id'];
    $rr = l('Open PDF', "/download-pdf2/$trip_id");
    $form['dowmload_mark'] = array(
      '#type' => 'markup',
      '#markup' => $rr,
    );
  }
  return $form;
}

function get_data_of_trip_id_form_submit($form, &$form_state) {
  return $form;
}

function get_data_of_trip_id_2_form_submit($form, &$form_state) {
  return $form;
}

function trip_2_form_submit($form, &$form_state) {
  $trip_id = $form_state['values']['trip_id'];
  $view_name = "drs_report2";
  $view = views_get_view($view_name, '');
  $view->set_arguments(array($trip_id));
  $rendered_html = $view->render();
  $form_state['views_data'] = $rendered_html;
  $form_state['rebuild'] = TRUE;
}

function trip_form_submit($form, &$form_state) {
  $trip_id = $form_state['values']['trip_id'];
  $view_name = "drs_report";
  $view = views_get_view($view_name, '');
  $view->set_arguments(array($trip_id));
  $rendered_html = $view->render();
  $form_state['views_data'] = $rendered_html;
  $form_state['rebuild'] = TRUE;
}

// check permission for (admin/config/flat-table) Menu
function check_if_fr_role_user_admin() {
  global $user;
  if (in_array('administrator', $user->roles)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

// Menu Callback  for (admin/config/flat-table)
function change_feeds_import_setting_form($form, $form_state) {

  // PARTY PACKING PRODUCTIVITY LINES/Hr
  $form['party_packing_productivity_lines'] = array(
    '#type' => 'textfield',
    '#title' => t('PARTY PACKING PRODUCTIVITY LINES/Hr'),
    '#default_value' => variable_get('party_packing_productivity_lines', ''),
    '#required' => TRUE,
  );

  // PARTY PACKING COMPLIANCE
  $form['party_packing_compliance'] = array(
    '#type' => 'textfield',
    '#title' => t('PARTY PACKING COMPLIANCE'),
    '#default_value' => variable_get('party_packing_compliance', ''),
    '#required' => TRUE,
  );

  // Pick Productivity Pick
  $form['pick_productivity_pick'] = array(
    '#type' => 'textfield',
    '#title' => t('Pick Productivity Pick / Hr'),
    '#default_value' => variable_get('pick_productivity_pick', ''),
    '#required' => TRUE,
  );

  // Picking Compliance
  $form['picking_compliance'] = array(
    '#type' => 'textfield',
    '#title' => t('Picking Compliance'),
    '#default_value' => variable_get('picking_compliance', ''),
    '#required' => TRUE,
  );

  // EGIR End Time Cut-Off 
  $form['egir_end_time_cutoff'] = array(
    '#type' => 'textfield',
    '#title' => t('EGIR End time - Cutoff'),
    '#default_value' => variable_get('egir_end_time_cutoff', ''),
    '#required' => TRUE,
  );

  // Unloading End Time Cutoff
  $form['unloading_end_time_cutOff'] = array(
    '#type' => 'textfield',
    '#title' => t('Unloading End Time - CutOff'),
    '#default_value' => variable_get('unloading_end_time_cutOff', ''),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Implements hook_node_insert()
 */
function change_feeds_import_node_insert($node) {

  if ($node->type == 'dispatch_data') {
    // logic for when dispatch node is uploading get billing data nid (on basis of vehicle+loading date)
    $query = db_select('custom_billing_data', 'cb');
    $query->fields('cb', array('vehicle', 'loading_date', 'id'));
    $query->groupBy('vehicle')->groupBy('loading_date');


    $sub_query2 = db_select('node', 'n');
    $sub_query2->condition('n.type', "dispatch_data", '=');
    $sub_query2->condition('n.nid', $node->nid, '=');
    $sub_query2->innerjoin('field_data_field_vehicle', 'fv', 'fv.entity_id = n.nid');
    $sub_query2->innerjoin('field_data_field_loading_date', 'fld', 'fld.entity_id = n.nid');
    $sub_query2->fields('n', array('nid'));
    $sub_query2->join($query, 'bd', 'bd.vehicle = fv.field_vehicle_value and bd.loading_date = fld.field_loading_date_value');
    $sub_query2->fields('bd', array('id'));
    $billing_result = $sub_query2->execute()->fetchAll(PDO::FETCH_ASSOC);
    $billing_id = $billing_result[0]['id'];


    $sub_query3 = db_select('node', 'n1');
    $sub_query3->condition('n1.type', "party_packing", '=');
    $sub_query3->innerjoin('field_data_field_party_packing_vehicle', 'ppv', 'ppv.entity_id = n1.nid');
    $sub_query3->innerjoin('field_data_field_party_packing_loading_date', 'pld', 'pld.entity_id = n1.nid');
    $sub_query3->innerjoin('field_data_field__party_packingstatus', 'pps', 'pps.entity_id = n1.nid');
    $sub_query3->fields('ppv', array('field_party_packing_vehicle_value'));
    $sub_query3->fields('pld', array('field_party_packing_loading_date_value'));
    $sub_query3->fields('pps', array('field__party_packingstatus_value'));
    $sub_query3->fields('n1', array('nid'));

    $sub_query4 = db_select('node', 'n2');
    $sub_query4->condition('n2.type', "dispatch_data", '=');
    $sub_query4->innerjoin('field_data_field_vehicle', 'fv', 'fv.entity_id = n2.nid');
    $sub_query4->innerjoin('field_data_field_loading_date', 'fld', 'fld.entity_id = n2.nid');
    $sub_query4->innerjoin('field_data_field_dispatch_date', 'fdd', 'fdd.entity_id = n2.nid');
    $sub_query4->fields('fv', array('field_vehicle_value'));
    $sub_query4->fields('fld', array('field_loading_date_value'));
    $sub_query4->fields('fdd', array('field_dispatch_date_value'));
    $sub_query4->fields('n2', array('nid'));


    $query = db_select('custom_billing_data', 'cb');
    $query->condition('cb.id', $billing_id, '=');
    $query->innerjoin('field_data_field_party_code', 'pc2', 'pc2.field_party_code_value = cb.party_code');
    $query->innerjoin('field_data_field_pl_group', 'plg', 'pc2.entity_id = plg.entity_id');
    $query->innerjoin('field_data_field_channel', 'fc', 'pc2.entity_id = fc.entity_id');
    $query->innerjoin('field_data_field_pl_group', 'plg2', 'plg2.field_pl_group_value = plg.field_pl_group_value');
    $query->innerjoin('field_data_field_party_packing', 'fpp', 'plg2.entity_id = fpp.entity_id');
    //$query->fields('cb', array('bill_number', 'bill_date', 'vehicle', 'loading_date', 'Sum_of_SALES_VALUE', 'distributor_id', 'Sum_of_SALES_RET_VALUE', 'party_code', 'promise_date'));
    $query->fields('cb', array('bill_number', 'bill_date', 'vehicle', 'loading_date', 'distributor_id', 'party_code', 'promise_date'));
    $query->groupBy('cb.bill_number');
    // $query->addExpression('SUM(cb.Sum_of_SALES_VALUE)', 'Sum_of_SALES_VALUE');
    // $query->addExpression('SUM(cb.Sum_of_SALES_RET_VALUE)', 'Sum_of_SALES_RET_VALUE');
    $query->fields('plg', array('field_pl_group_value'));
    $query->fields('fc', array('field_channel_value'));
    $query->fields('fpp', array('field_party_packing_value'));
    $query->join($sub_query3, 'party_p', 'party_p.field_party_packing_vehicle_value = cb.vehicle and party_p.field_party_packing_loading_date_value = cb.loading_date');
    $query->join($sub_query4, 'dd', 'dd.field_vehicle_value = cb.vehicle and dd.field_loading_date_value = cb.loading_date');
    $query->fields('dd');
    $query->fields('party_p');
    $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

    foreach ($result as $key => $value) {
      $billing_vehicle = $value['field_vehicle_value'];
      $billing_loading_date = $value['field_loading_date_value'];
      $promised_delivery_date = $value['field_promised_delivery_date_value'];


      //  $sum_of_sales_value = $value['Sum_of_SALES_VALUE'];
      //  $sum_of_sales_ret_value = $value['Sum_of_SALES_RET_VALUE'];
      //  $net_value = $sum_of_sales_ret_value / $sum_of_sales_value;
//      if ($net_value == 0) {
//        $return_type = 'NA';
//      }
//      elseif ($net_value >= 0.98 && $net_value <= 1.02) {
//        $return_type = 'FULL';
//      }
//      else {
//        $return_type = 'Partial';
//      }
      $dispatch_date = $value['field_dispatch_date_value'];
      $endDate = strtotime($dispatch_date);
      $promised_delivery_date_stamp = strtotime($promised_delivery_date);
      $datediff = $endDate - $promised_delivery_date_stamp;
      $diff = floor($datediff / (60 * 60 * 24));
      $result[$key]['delay_days'] = $diff;

      if ($diff == 0 || $diff < 0) {
        $result[$key]['delay_range'] = "N+2";
      }
      elseif ($diff == 1) {
        $result[$key]['delay_range'] = "N+3";
      }
      else {
        $result[$key]['delay_range'] = ">N+2";
      }


      $billing_loading_timestamp = strtotime($billing_loading_date);
      $billing_loading_day = date("d", $billing_loading_timestamp);

      $result[$key]['Day'] = $billing_loading_day;


      ######### Loagic for MOC #######
      if ($billing_loading_day < 21) {
        $month = date("m", $billing_loading_timestamp);
        $result[$key]['MOC'] = "MOC" . $month;
      }
      else {
        $newdate = strtotime('+1 month', strtotime($billing_loading_date));
        $next_month = date("m", $newdate);
        $result[$key]['MOC'] = "MOC" . $next_month;
      }
      ########### End Logic for MOC #######
      ######### Loagic for TDP #######
      if (($billing_loading_day >= 1) && ($billing_loading_day <= 10)) {
        $result[$key]['TDP'] = "TDP2";
      }
      elseif (($billing_loading_day >= 11) && ($billing_loading_day <= 20)) {
        $result[$key]['TDP'] = "TDP3";
      }
      else {
        $result[$key]['TDP'] = "TDP1";
      }
      ########### End Logic for TDP #######
      $billing_loading_day_text = date("D", $billing_loading_timestamp);
      $billing_loading_month = date("M", $billing_loading_timestamp);
      $result[$key]['month'] = $billing_loading_month;
      $result[$key]['Week_day'] = $billing_loading_day_text;

      $party_packing_status = $value['field__party_packingstatus_value'];
      if ($party_packing_status == 2) {
        $status = "Yes";
      }
      else {
        $status = "No";
      }


      $distributor_id = $value['field_distributor_uid_value'];
      $distributor_name = change_feeds_import_get_distributor_name($distributor_id);

      // insert in flat_billing_data table when node update.(if record is not in table then create new record)
      db_merge('flat_billing_data')
          ->key(array('nid' => $node->nid))
          ->fields(array(
            'nid' => $node->nid,
            'bill_number' => $result[$key]['field_bill_number_value'],
            'bill_date' => strtotime($result[$key]['field_bill_date_value']) ? strtotime($result[$key]['field_bill_date_value']) : 0,
            'vehicle' => $result[$key]['field_vehicle_value'],
            'loading_date' => strtotime($result[$key]['field_loading_date_value']) ? strtotime($result[$key]['field_loading_date_value']) : 0,
            // 'sum_of_sales_value' => $result[$key]['Sum_of_SALES_VALUE'] ? $result[$key]['Sum_of_SALES_VALUE'] : 0,
            //  'sum_of_sales_ret_value' => $result[$key]['Sum_of_SALES_RET_VALUE'] ? $result[$key]['Sum_of_SALES_RET_VALUE'] : 0,
            'promised_delivery_date' => strtotime($result[$key]['field_promised_delivery_date_value']) ? strtotime($result[$key]['field_promised_delivery_date_value']) : 0,
            'dispatch_date' => strtotime($result[$key]['field_dispatch_date_value']) ? strtotime($result[$key]['field_dispatch_date_value']) : 0,
            'delay_days' => $result[$key]['delay_days'] ? $result[$key]['delay_days'] : 0,
            'delay_range' => $result[$key]['delay_range'],
            // 'return_type' => $return_type,
            'ideal_party_packing' => $result[$key]['field_party_packing_value'],
            'actual_party_packing' => $status,
            'day' => $result[$key]['Day'],
            'tdp' => $result[$key]['TDP'],
            'month' => $result[$key]['month'],
            'moc' => $result[$key]['MOC'],
            'week_day' => $result[$key]['Week_day'],
            'party_code' => $result[$key]['field_party_code_value'],
            'pl_group' => $result[$key]['field_pl_group_value'],
            'channel' => $result[$key]['field_channel_value'],
            'distributor_name' => $distributor_name
          ))
          ->execute();
    }
  }
}

/**
 * Implements hook_node_update()
 */
function change_feeds_import_node_update($node) {
  if ($node->type == 'party_packing') { // if Content Type is party packing.
    $start_time = strtotime($node->field_party_packing_start_time['und'][0]['value']); // party packing start time
    $end_time = strtotime($node->field_party_packing_end_time['und'][0]['value']); // party packing end time
    $party_picking_ld = $node->field_party_packing_loading_date['und'][0]['value']; // party packing loading date
    $timestamp = strtotime($party_picking_ld);
    $party_picking_ld_stamp = date("d", $timestamp);
    ######  logic for MOC ####
    if ($party_picking_ld_stamp < 21) {
      $month = date("m", $timestamp);
      $node->MOC = "MOC" . $month;
    }
    else {
      $newdate = strtotime('+1 month', strtotime($party_picking_ld));
      $next_month = date("m", $newdate);
      $node->MOC = "MOC" . $next_month;
    }

    ##### End MOC logic #######
    ######  logic for TDP ####
    if (($party_picking_ld_stamp >= 1) && ($party_picking_ld_stamp <= 10)) {
      $node->TDP = "TDP2";
    }
    elseif (($party_picking_ld_stamp >= 11) && ($party_picking_ld_stamp <= 20)) {
      $node->TDP = "TDP3";
    }
    else {
      $node->TDP = "TDP1";
    }
    ##### End TDP logic #######

    $node->field_party_packing_loading_date['und'][0]['value'] = strtotime($party_picking_ld);
    $node->field_party_packing_date['und'][0]['value'] = strtotime($node->field_party_packing_date['und'][0]['value']);
    $node->party_packing_productivity_lines = variable_get('party_packing_productivity_lines', '');
    $node->party_packing_compliance = variable_get('party_packing_compliance', '');
    $compliance = variable_get('party_packing_compliance', ''); // value from setting form
    $compliance_seconds = strtotime("1970-01-01 $compliance UTC"); // value from setting form
    ######  logic for Compliant ####
    if (empty($end_time)) {
      $node->compliance = "";
    }
    else {
      if ($end_time > $compliance_seconds) {
        $node->compliance = "Non Compliant";
      }
      else {
        $node->compliance = "Compliant";
      }
    }

    ##### End TDP Compliant #######
    $status = $node->field__party_packingstatus['und'][0]['value'];
    if ($status == 1) {
      $status = "In Process";
    }
    else if ($status == 2) {
      $status = "Completed";
    }
    else {
      $status = "Null";
    }
    $distributor_id = $node->field_distributor_uid['und'][0]['value'];
    $distributor_name = change_feeds_import_get_distributor_name($distributor_id);


    // insert in flat_party_packing table when node update.(if record is not in table then create new record)
    db_merge('flat_party_packing')
        ->key(array('nid' => $node->nid))
        ->fields(array(
          'nid' => $node->nid,
          'vehicle' => $node->field_party_packing_vehicle['und'][0]['value'],
          'loading_date' => $node->field_party_packing_loading_date['und'][0]['value'] ? $node->field_party_packing_loading_date['und'][0]['value'] : 0,
          'party_packing_date' => $node->field_party_packing_date['und'][0]['value'] ? $node->field_party_packing_date['und'][0]['value'] : 0,
          'loading_sheet_line' => $node->field_loading_sheet_line['und'][0]['value'] ? $node->field_loading_sheet_line['und'][0]['value'] : 0,
          'bill_lines' => $node->field_bill_lines['und'][0]['value'] ? $node->field_bill_lines['und'][0]['value'] : 0,
          'each_units' => $node->field_each_units['und'][0]['value'] ? $node->field_each_units['und'][0]['value'] : 0,
          'party_packing_start_time' => $start_time ? $start_time : 0,
          'party_packing_end_time' => $end_time ? $end_time : 0,
          'supervisor' => $node->field_party_packing_supervisor['und'][0]['value'],
          'packer_name' => $node->field_party_packer_name['und'][0]['value'],
          'team_count' => $node->field_party_packer_team_count['und'][0]['value'] ? $node->field_party_packer_team_count['und'][0]['value'] : 0,
          'status' => $status,
          'productivity_lines' => $node->party_packing_productivity_lines ? $node->party_packing_productivity_lines : 0,
          'party_packing_compliance' => $compliance_seconds ? $compliance_seconds : 0,
          'compliance' => $node->compliance,
          'tdp' => $node->TDP,
          'moc' => $node->MOC,
          'distributor_name' => $distributor_name
        ))
        ->execute();
  }

  if ($node->type == 'picking') {
    $start_time = strtotime($node->field_picking_start_time['und'][0]['value']); // picking start time
    $end_time = strtotime($node->field_picking_end_time['und'][0]['value']); // picking end time
    $picking_ld = $node->field_picking_loading_date['und'][0]['value']; // picking loading date
    $timestamp = strtotime($picking_ld);
    $picking_ld_stamp = date("d", $timestamp);
    ######  logic for MOC ####
    if ($picking_ld_stamp < 21) {
      $month = date("m", $timestamp);
      $node->MOC = "MOC" . $month;
    }
    else {
      $newdate = strtotime('+1 month', strtotime($picking_ld));
      $next_month = date("m", $newdate);
      $node->MOC = "MOC" . $next_month;
    }

    ##### End MOC logic #######
    ######  logic for TDP ####
    if (($picking_ld_stamp >= 1) && ($picking_ld_stamp <= 10)) {
      $node->TDP = "TDP2";
    }
    elseif (($picking_ld_stamp >= 11) && ($picking_ld_stamp <= 20)) {
      $node->TDP = "TDP3";
    }
    else {
      $node->TDP = "TDP1";
    }
    ##### End TDP logic #######

    $node->field_picking_loading_date['und'][0]['value'] = strtotime($picking_ld);
    $node->field_picking_picking_date['und'][0]['value'] = strtotime($node->field_picking_picking_date['und'][0]['value']);
    $node->pick_productivity_pick = variable_get('pick_productivity_pick', '');
    $node->picking_compliance = variable_get('picking_compliance', '');
    $compliance = variable_get('picking_compliance', '');
    $compliance_seconds = strtotime("1970-01-01 $compliance UTC");
    ######  logic for Compliant ####

    if (empty($end_time)) {
      $node->compliance = "";
    }
    else {
      if ($end_time > $compliance_seconds) {
        $node->compliance = "Non Compliant";
      }
      else {
        $node->compliance = "Compliant";
      }
    }


    ##### End TDP Compliant #######
    $status = $node->field_picking_status['und'][0]['value'];
    if ($status == 1) {
      $status = "In Process";
    }
    else if ($status == 2) {
      $status = "Completed";
    }
    else {
      $status = "Null";
    }
    $distributor_id = $node->field_distributor_uid['und'][0]['value'];
    $distributor_name = change_feeds_import_get_distributor_name($distributor_id);

    db_merge('flat_picking')
        ->key(array('nid' => $node->nid))
        ->fields(array(
          'nid' => $node->nid,
          'van_id' => $node->field_picking_van_id['und'][0]['value'] ? $node->field_picking_van_id['und'][0]['value'] : 0,
          'loading_date' => $node->field_picking_loading_date['und'][0]['value'] ? $node->field_picking_loading_date['und'][0]['value'] : 0,
          'godown_area_id' => $node->field_picking_godown_area_id['und'][0]['value'],
          'picking_type' => $node->field_picking_picking_type['und'][0]['value'],
          'picking_date' => $node->field_picking_picking_date['und'][0]['value'] ? $node->field_picking_picking_date['und'][0]['value'] : 0,
          'picking_start_time' => $start_time ? $start_time : 0,
          'picking_end_time' => $end_time ? $end_time : 0,
          'pick_lines' => $node->field_pick_lines['und'][0]['value'] ? $node->field_pick_lines['und'][0]['value'] : 0,
          'pick_units' => $node->field_pick_units['und'][0]['value'],
          'pick_clds' => $node->field_pick_clds['und'][0]['value'] ? $node->field_pick_clds['und'][0]['value'] : 0,
          'pick_supervisor' => $node->field_picking_pick_supervisor['und'][0]['value'],
          'picker_name' => $node->field_picking_picker_name['und'][0]['value'],
          'picking_team_count' => $node->field_picking_picking_team_count['und'][0]['value'] ? $node->field_picking_picking_team_count['und'][0]['value'] : 0,
          'status' => $status,
          'pick_productivity_pick' => $node->pick_productivity_pick ? $node->pick_productivity_pick : 0,
          'picking_compliance' => $compliance_seconds ? $compliance_seconds : 0,
          'moc' => $node->MOC,
          'tdp' => $node->TDP,
          'complaince' => $node->compliance,
          'distributor_name' => $distributor_name
        ))
        ->execute();
  }

  if ($node->type == 'egir') { // if content type is EGIR
    $invoice_date = $node->field_invoice_date['und'][0]['value']; // invoice date
    $invoice_timestamp = strtotime($invoice_date);
    $node->field_invoice_date['und'][0]['value'] = $invoice_timestamp;

    $uploading_date = $node->field_unloading_date['und'][0]['value']; // unloading date
    $uploading_timestamp = strtotime($uploading_date);
    $node->field_unloading_date['und'][0]['value'] = $uploading_timestamp;


    ######### Loagic for MOC #######
    $uploading_stamp = date("d", $uploading_timestamp);
    if ($uploading_stamp < 21) {
      $month = date("m", $uploading_timestamp);
      $node->MOC = "MOC" . $month;
    }
    else {
      $newdate = strtotime('+1 month', strtotime($uploading_date));
      $next_month = date("m", $newdate);
      $node->MOC = "MOC" . $next_month;
    }
    ########### End Logic for MOC #######
    ######### Loagic for TDP #######
    if (($uploading_stamp >= 1) && ($uploading_stamp <= 10)) {
      $node->TDP = "TDP2";
    }
    elseif (($uploading_stamp >= 11) && ($uploading_stamp <= 20)) {
      $node->TDP = "TDP3";
    }
    else {
      $node->TDP = "TDP1";
    }
    ########### End Logic for TDP #######

    $egir_date = $node->field_egir_date['und'][0]['value'];
    $egir_timestamp = strtotime($egir_date);
    $node->field_egir_date['und'][0]['value'] = $egir_timestamp;

    $node->egir_end_time_cutoff = variable_get('egir_end_time_cutoff', ''); // value from setting form
    $node->unloading_end_time_cutOff = variable_get('unloading_end_time_cutOff', ''); // value from setting form

    $egir_cutoff = variable_get('egir_end_time_cutoff', '');
    $egir_cutoff_seconds = strtotime("1970-01-01 $egir_cutoff UTC");

    $egir_end_time = strtotime($node->field_egir_end_time['und'][0]['value']);
    ######  logic for EGIR Compliant ####


    if (empty($egir_end_time)) {
      $node->compliance = "";
    }
    else {
      if ($egir_end_time > $egir_cutoff_seconds) {
        $node->compliance = "Non Compliant";
      }
      else {
        $node->compliance = "Compliant";
      }
    }


    ##### End logic for EGIR Compliant #######

    $unloading_cutoff = variable_get('unloading_end_time_cutOff', '');
    $unloading_cutoff_seconds = strtotime("1970-01-01 $unloading_cutoff UTC");

    $unloading_end_time = strtotime($node->field_unloading_end_time['und'][0]['value']);
    ######  logic for Unloading Compliant ####

    if (empty($unloading_end_time)) {
      $node->compliance = "";
    }
    else {
      if ($unloading_end_time > $unloading_cutoff_seconds) {
        $node->compliance = "Non Compliant";
      }
      else {
        $node->compliance = "Compliant";
      }
    }

    ##### End logic for unloading Compliant #######

    $status = $node->field_unloading_status['und'][0]['value'];
    if ($status == 1) {
      $status = "In Process";
    }
    else if ($status == 2) {
      $status = "Completed";
    }
    else {
      $status = "Null";
    }
    $distributor_id = $node->field_distributor_uid['und'][0]['value'];
    $distributor_name = change_feeds_import_get_distributor_name($distributor_id);
    // insert in flat_unloading table when node update.(if record is not in table then create new record)
    db_merge('flat_unloading')
        ->key(array('nid' => $node->nid))
        ->fields(array(
          'nid' => $node->nid,
          'invoice_number' => $node->field_invoice_number['und'][0]['value'],
          'invoice_date' => $node->field_invoice_date['und'][0]['value'] ? $node->field_invoice_date['und'][0]['value'] : 0,
          'truck_no' => $node->field_truck_no['und'][0]['value'],
          'from_location' => $node->field_from_location['und'][0]['value'],
          'unloading_date' => $node->field_unloading_date['und'][0]['value'] ? $node->field_unloading_date['und'][0]['value'] : 0,
          'unloading_start_time' => strtotime($node->field_unloading_start_time['und'][0]['value']) ? strtotime($node->field_unloading_start_time['und'][0]['value']) : 0,
          'unloading_end_time' => strtotime($node->field_unloading_end_time['und'][0]['value']) ? strtotime($node->field_unloading_end_time['und'][0]['value']) : 0,
          'status' => $status,
          'egir_date' => $node->field_egir_date['und'][0]['value'] ? $node->field_egir_date['und'][0]['value'] : 0,
          'egir_start_time' => strtotime($node->field_egir_start_time['und'][0]['value']) ? strtotime($node->field_egir_start_time['und'][0]['value']) : 0,
          'egir_end_time' => strtotime($node->field_egir_end_time['und'][0]['value']) ? strtotime($node->field_egir_end_time['und'][0]['value']) : 0,
          'egir_end_cutoff' => $egir_cutoff_seconds ? $egir_cutoff_seconds : 0,
          'unloading_end_cutoff' => $unloading_cutoff_seconds ? $unloading_cutoff_seconds : 0,
          'tdp' => $node->TDP,
          'moc' => $node->MOC,
          'unloading_compliance' => $node->unloading_end_time_cutOff,
          'egir_complaince' => $node->compliance,
          'distributor_name' => $distributor_name
        ))
        ->execute();
  }
}

/**
 * 
 * @param type $node
 * Implements hook_delete
 */
function change_feeds_import_node_delete($node) {
  // Delete Nid's entry from  party_packing Flat table  on deletion of Party Packing Node
  if ($node->type == 'party_packing') {
    db_delete('flat_party_packing')
        ->condition('nid', $node->nid)
        ->execute();
  }
  // Delete Nid's entry from  EGIR Flat table  on deletion of EGIR Node
  if ($node->type == 'egir') {
    db_delete('flat_unloading')
        ->condition('nid', $node->nid)
        ->execute();
  }

  // Delete Nid's entry from  packing Flat table  on deletion of EGIR Node
  if ($node->type == 'picking') {
    db_delete('flat_picking')
        ->condition('nid', $node->nid)
        ->execute();
  }

  // Delete Nid's entry from  OTIF Flat table  on deletion of EGIR Node
  if ($node->type == 'billing_data') {
    db_delete('flat_billing_data')
        ->condition('nid', $node->nid)
        ->execute();
  }
}

/**
 * 
 * Implements hook_feeds_presave($source, $entity, $item)
 */
function change_feeds_import_feeds_presave($source, $entity, $item, $entity_id) {
  require_once drupal_get_path('module', 'change_feeds_import') . '/form/upload_billing_data.inc';
  if (!empty($item)) {
    foreach ($item as $key => $value) {
      $item[$key] = mb_convert_encoding($value, 'UTF-8', 'UTF-8');
    }
  }
  global $user;
  // Store distributor id in author in each node
  $distributor_id = change_feeds_import_get_distributor_id($user->uid);
  if (!empty($distributor_id)) {
    $entity->uid = $distributor_id;
    if ($entity->type == 'pdd_master') {
      $entity->title = $distributor_id;
    }

    if ($entity->type == 'holiday_master') {
      $entity->title = $distributor_id;
    }
  }
  if ($entity->type == 'egir') {
//    $title = $entity->title;
//    $res = modify_views_forms_master_feed_validate($entity->title, 'egir');
//    if (!empty($res)) {
//      drupal_set_message("$title already exist in EGIR Master", 'error');
//      $entity->feeds_item->skip = TRUE;
//    }
    $egir_start_explode = explode(" ", $entity->field_egir_start_time[LANGUAGE_NONE][0]['value']);
    $egir_end_explode = explode(" ", $entity->field_egir_end_time[LANGUAGE_NONE][0]['value']);
    $egir_date_explode = explode(" ", $entity->field_egir_date[LANGUAGE_NONE][0]['value']);
    $entity->field_egir_start_time[LANGUAGE_NONE][0]['value'] = $egir_date_explode[0] . ' ' . $egir_start_explode[1];
    $entity->field_egir_end_time[LANGUAGE_NONE][0]['value'] = $egir_date_explode[0] . ' ' . $egir_end_explode[1];
  }

  if ($entity->feeds_item->id == 'outlet_area_hook_mapping') {
    // we have custom upload for outlet area hook
  }


  if ($entity->feeds_item->id == 'area_hook_group_master') {
    $area_id = $entity->field_area_hook_group_id['und'][0]['value'];
    $area_array = check_area_id_exists($area_id);
    if (!empty($area_array)) {
      if ($area_id_bool = in_array($area_id, $area_array)) {
        drupal_set_message("$area_id Area Id Already exist in Area Hook Master", 'error');
        $entity->feeds_item->skip = TRUE;
      }
    }
  }
  if ($entity->feeds_item->id == 'outlet_sequence' || $entity->feeds_item->id == 'user_defined_outlet_sequence') {

    $import_id = $entity->feeds_item->id;
    $title = $entity->title;
    $res = check_node_title_exists($entity->title, 'outlet_master');
    if (empty($res)) {
      drupal_set_message("$title Party code does not exist in Outlet master", 'error');
      $entity->feeds_item->skip = TRUE;
    }
    else {
      $query = db_select('node', 'n');
      $query->fields('n', array('nid'));
      $query->addTag('node_uid');
      if ($import_id == 'user_defined_outlet_sequence') {
        $query->join('field_data_field_sequence', 'fs', 'fs.entity_id = n.nid');
      }
      $query->join('field_data_field_hul_code', 'h', 'h.entity_id = n.nid');
      $query->join('field_data_field_area_hook_group_hul', 'gh', 'gh.entity_id = n.nid');
      $query->join('node', 'n1');
      $query->join('field_data_field_hul_status', 's', 's.entity_id = n1.nid');
      $query->condition('n.nid', $res);
      $query->condition('n1.type', 'hul_code_master');
      $query->condition('gh.field_area_hook_group_hul_value', 1);
      $query->condition('s.field_hul_status_value', 1);
      $query->condition('n1.uid', $distributor_id);
      $nid = $query->execute()->fetchField();
      if (empty($nid)) {
        drupal_set_message("$title Party code does not have address confirmed or Area Hook Confirmed", 'error');
        $entity->feeds_item->skip = TRUE;
      }
    }
  }

  if ($entity->type == 'return_bill') {
    $title = $entity->title;
    $res = modify_views_forms_master_feed_validate($entity->title, 'return_bill');
    if (!empty($res)) {
      drupal_set_message("$title already exist in return bill master", 'error');
      $entity->feeds_item->skip = TRUE;
    }
  }
  if ($entity->type == 'ccfot') {
    $title = $entity->title;
    $res = modify_views_forms_master_feed_validate($entity->title, 'ccfot');
    if (!empty($res)) {
      drupal_set_message("$title already exist in ccoft master", 'error');
      $entity->feeds_item->skip = TRUE;
    }
    if (empty($entity->field_bill_quantity[LANGUAGE_NONE])) {
      $entity->feeds_item->skip = TRUE;
    }
    if ($entity->field_actual_order_quantity[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
    if ($entity->field_suggested_order_quantity[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
  }
  if (($entity->type == 'billing_data') || ($entity->type == 'return_bill')) {
    if ($entity->field_sum_of_net_sales_value[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
    if ($entity->field_sum_of_sales_ret_value[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
    if ($entity->field_sum_of_sales_value[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
    if ($entity->field_mrp[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
    if ($entity->field_tur[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
    if ($entity->field_sum_of_total_sales_qty[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
    if ($entity->field_sum_of_total_sales_ret_qty[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
    if ($entity->field_sum_of_net_sales_qty[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
    if ($entity->field_sum_of_sales_free_qty[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
    if ($entity->field_sum_of_sales_ret_free_qty[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
  }


  if ($entity->type == 'resource_master') {
    $resurce_type_value = $entity->field_resource_type[LANGUAGE_NONE][0]['value'];
    $res = modify_views_forms_master_feed_validate($resurce_type_value, 'resource_type');
    if (empty($res)) {
      drupal_set_message("$resurce_type_value does not exist in Resource type", 'error');
      $entity->feeds_item->skip = TRUE;
    }
  }
  if ($entity->type == 'party_pack_master') {
    $channel = $entity->field_channel[LANGUAGE_NONE][0]['value'];
    $pl_group = $entity->field_pl_group[LANGUAGE_NONE][0]['value'];
    $party_packing = $entity->field_party_packing[LANGUAGE_NONE][0]['value'];

    $res2 = modify_views_forms_master_feed_validate($channel, 'channel_master');
    $res3 = modify_views_forms_master_feed_validate($pl_group, 'pl_group_master');
    $res4 = check_unique_group_channle_combination($channel, $pl_group);
    if (empty($res2)) {
      drupal_set_message("$channel does not exist in Channel Master", 'error');
      $entity->feeds_item->skip = TRUE;
    }
    else if (empty($res3)) {
      drupal_set_message("$pl_group does not exist in PL Group Master", 'error');
      $entity->feeds_item->skip = TRUE;
    }
//    else  if (!empty($res4)) {
//      drupal_set_message("There is already Node present for $channel-$pl_group in Party Pack Master", 'error');
//      $entity->feeds_item->skip = TRUE;
//    }
    elseif (( (strpos($party_packing, 'y') !== false) || (strpos($party_packing, 'Y') !== false) ) && ($party_packing != "YES")) {
      drupal_set_message("$party_packing Should be YES", 'error');
      $entity->feeds_item->skip = TRUE;
    }
    elseif ((strpos($party_packing, 'n') !== false) || (strpos($party_packing, 'N') !== false) && ($party_packing != "NO")) {
      drupal_set_message("$party_packing Should be NO", 'error');
      $entity->feeds_item->skip = TRUE;
    }
    else {
      if (($party_packing != "YES") && ($party_packing != "NO")) {
        drupal_set_message("$party_packing Should be YES or NO", 'error');
        $entity->feeds_item->skip = TRUE;
      }
    }
  }

  if ($entity->type == 'dispatch_data') {
    $title = $entity->title;
    $res = modify_views_forms_master_feed_validate($entity->title, 'dispatch_data');
    if (!empty($res)) {
      drupal_set_message("$title already exist in dispatch data", 'error');
      $entity->feeds_item->skip = TRUE;
    }
  }
  if ($entity->type == 'channel_master') {
//    $title = $entity->title;
//    $res = modify_views_forms_master_feed_validate($entity->title, 'channel_master');
//    if (!empty($res)) {
//      drupal_set_message("$title already exist in channel master", 'error');
//      $entity->feeds_item->skip = TRUE;
//    }
  }
  if ($entity->type == 'godown_master') {
//    $title = $entity->title;
//    $res = modify_views_forms_master_feed_validate($entity->title, 'godown_master');
//    if (!empty($res)) {
//      drupal_set_message("$title already exist in godown master", 'error');
//      $entity->feeds_item->skip = TRUE;
//    }
  }
  if ($entity->type == 'party_pack_master') {
//    $title = $entity->title;
//    $res = modify_views_forms_master_feed_validate($entity->title, 'party_pack_master');
//    if (!empty($res)) {
//      drupal_set_message("$title already exist in party pack master", 'error');
//      $entity->feeds_item->skip = TRUE;
//    }
  }
  if ($entity->type == 'sku7_code_master') {
//    $title = $entity->title;
//    $res = modify_views_forms_master_feed_validate($entity->title, 'sku7_code_master');
//    if (!empty($res)) {
//      drupal_set_message("$title already exist in sku7 code master", 'error');
//      $entity->feeds_item->skip = TRUE;
//    }
  }
  if ($entity->type == 'pl_group_master') {
//    $title = $entity->title;
//    $res = modify_views_forms_master_feed_validate($entity->title, 'pl_group_master');
//    if (!empty($res)) {
//      drupal_set_message("$title already exist in pl group master", 'error');
//      $entity->feeds_item->skip = TRUE;
//    }
  }
  if ($entity->type == 'vehicle_master') {
//    $title = $entity->title;
//    $res = modify_views_forms_master_feed_validate($entity->title, 'vehicle_master');
//    if (!empty($res)) {
//      drupal_set_message("$title already exist in vehicle master ", 'error');
//      $entity->feeds_item->skip = TRUE;
//    }
  }
  if ($entity->type == 'hul_code_master') {
    $title = $entity->title;  
    $all_title = check_hul_code_exist();
    if (array_key_exists($title,$all_title)){
      drupal_set_message("HulCode Is Alredy Present in System", 'error', FALSE);
      $entity->feeds_item->skip = TRUE;
    }
    $ph_no = $entity->field_hul_phone_no[LANGUAGE_NONE][0]['value'];
    $hul_address = $entity->field_hul_address[LANGUAGE_NONE][0]['value'];

    if (empty($ph_no)) {
      drupal_set_message("Hul Phone No Can Not Be Null", 'error', FALSE);
      $entity->feeds_item->skip = TRUE;
    }
    if (empty($hul_address)) {
      drupal_set_message("Hul Address Can Not Be Null", 'error', FALSE);
      $entity->feeds_item->skip = TRUE;
    }
  }

  if ($entity->feeds_item->id == 'outlet_master') {

    $sales_day = strtolower($entity->field_sales_day[LANGUAGE_NONE][0]['value']);
    $delivery_day = strtolower($entity->field_delivery_day[LANGUAGE_NONE][0]['value']);
    $sales_day_tid = leanbox_check_taxonomy_exists_by_name($sales_day, 'Outlet days');
    //$delivery_day_tid = leanbox_check_taxonomy_exists_by_name($delivery_day, 'Outlet days');
    if (empty($sales_day_tid)) {
      drupal_set_message("$sales_day does not exist in Sales Day", 'error');
      $entity->feeds_item->skip = TRUE;
    }

    $salesman = $entity->field_salesman[LANGUAGE_NONE][0]['value'];
    $salesman_code = $entity->field_salesman_code[LANGUAGE_NONE][0]['value'];

    if (empty($salesman)) {
      drupal_set_message("Salesman Can Not Be Null", 'error', FALSE);
      $entity->feeds_item->skip = TRUE;
    }
    if (empty($salesman_code)) {
      drupal_set_message("Salesman Code Can Not Be Null", 'error', FALSE);
      $entity->feeds_item->skip = TRUE;
    }

//    if (empty($delivery_day_tid)) {
//      drupal_set_message("$delivery_day does not exist in Delivery Day", 'error');
//      $entity->feeds_item->skip = TRUE;
//    }
    $hul_code = $entity->field_hul_code[LANGUAGE_NONE][0]['value'];
    $channel = $entity->field_channel[LANGUAGE_NONE][0]['value'];
    $pl_group = $entity->field_pl_group[LANGUAGE_NONE][0]['value'];
    $res1 = modify_views_forms_master_feed_validate($hul_code, 'hul_code_master');
    $res2 = modify_views_forms_master_feed_validate($channel, 'channel_master');
    $res3 = modify_views_forms_master_feed_validate($pl_group, 'pl_group_master');
    if (empty($res1)) {
      drupal_set_message("$hul_code does not exist in HUL Code Master", 'error');
      $entity->feeds_item->skip = TRUE;
    }
    else if (empty($res2)) {
      drupal_set_message("$channel does not exist in Channel Master", 'error');
      $entity->feeds_item->skip = TRUE;
    }
    else if (empty($res3)) {
      drupal_set_message("$pl_group does not exist in PL Group Master", 'error');
      $entity->feeds_item->skip = TRUE;
    }
  }
  if ($entity->feeds_item->id == 'sales_delivery_day_importer') {
    $sales_day = strtolower($entity->title);
    $delivery_day = strtolower($entity->field_sales_delivery_day[LANGUAGE_NONE][0]['value']);
    $sales_day_tid = leanbox_check_taxonomy_exists_by_name($sales_day, 'Outlet days');
    $delivery_day_tid = leanbox_check_taxonomy_exists_by_name($delivery_day, 'Outlet days');
    if (empty($sales_day_tid)) {
      drupal_set_message("$sales_day does not exist in Sales Day", 'error');
      $entity->feeds_item->skip = TRUE;
    }
    if (empty($delivery_day_tid)) {
      drupal_set_message("$delivery_day does not exist in Delivery Day", 'error');
      $entity->feeds_item->skip = TRUE;
    }
  }
}



function check_hul_code_exist(){
  $query = db_select('node', 'n');
  $query->condition('n.type', 'hul_code_master');
  $query->fields('n', array('title'));
  $results = $query->execute()->fetchAllKeyed(0, 0);
  return $results;
}
/**
 * 
 * @param text $feed
 * @param text $content_type
 */
function modify_views_forms_master_feed_validate($feed_title, $content_type) {
  $query = db_select('node', 'n');
  $query->fields('n', array('title'));
  $query->condition('n.type', $content_type);
  $query->condition('n.title', $feed_title);
  $query->addTag('node_uid');
  $result = $query->execute()->fetchField();
  return $result;
}

function change_feeds_import_views_api() {
  return array(
    'api' => '3.0',
    'path' => drupal_get_path('module', 'change_feeds_import') . '/views',
  );
}

/**
 * Implements hook_node_presave()
 */
function change_feeds_import_node_presave($node) {

  global $user;
  $user_id = $user->uid;
  $distributor_id = change_feeds_import_get_distributor_id($user_id);

  if ($node->type == 'egir') {
    $node->field_distributor_uid['und'][0]['value'] = $distributor_id;
  }

  if ($node->type != 'user_manual') {
    if (!empty($distributor_id) && ($node->is_new == TRUE)) {
      $node->uid = $distributor_id;
    }
  }
  if (($node->type == 'picking') && ($node->is_new == TRUE)) {
    $node->field_combined_nid['und'][0]['value'] = $node->created;
  }

  if (!empty($node->field_picking_start_time['und']) && !empty($node->field_picking_end_time['und'])) {
    $node->field_picking_status[LANGUAGE_NONE][0]['value'] = 2;
  }
  if (!empty($node->field_picking_start_time['und']) && empty($node->field_picking_end_time['und'])) {
    $node->field_picking_status[LANGUAGE_NONE][0]['value'] = 1;
  }
  if (!empty($node->field_party_packing_start_time['und']) && !empty($node->field_party_packing_end_time['und'])) {
    $node->field__party_packingstatus[LANGUAGE_NONE][0]['value'] = 2;
  }
  if (!empty($node->field_party_packing_start_time['und']) && empty($node->field_party_packing_end_time['und'])) {
    $node->field__party_packingstatus[LANGUAGE_NONE][0]['value'] = 1;
  }
  if (!empty($node->field_unloading_start_time['und']) && !empty($node->field_unloading_end_time['und'])) {
    $node->field_unloading_status[LANGUAGE_NONE][0]['value'] = 2;
  }
  if (!empty($node->field_unloading_start_time['und']) && empty($node->field_unloading_end_time['und'])) {
    $node->field_unloading_status[LANGUAGE_NONE][0]['value'] = 1;
  }
}

function holiday_get_working_day($date_timestamp, $day, $holidays, $weeklyoff) {
  $date = date('Y-m-d', $date_timestamp);

  while ($day != 0) {
    $date_timestamp = strtotime('+1 days', $date_timestamp);
    $date = date('Y-m-d', $date_timestamp);
    $day_name = date("l", $date_timestamp);
    if (in_array($date, $holidays)) {
      
    }
    elseif (in_array($day_name, $weeklyoff)) {
      
    }
    else {
      $day--;
    }
  }
  return $date;
}

function change_feeds_import_get_distributor_id($user_id) {
  $query = db_select('users', 'u');
  $query->innerjoin('field_data_field_distributor', 'd', 'd.entity_id = u.uid');
  $query->condition('d.entity_id', $user_id, '=');
  $query->fields('u', array('uid'));
  $query->fields('d', array('field_distributor_value'));
  $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  $distributor_id = $result[0]['field_distributor_value'];
  return $distributor_id;
}

function change_feeds_import_get_distributor_name($distributor_id) {
  $query = db_select('field_data_field_distributor', 'd');
  $query->innerjoin('field_data_field_name', 'n', 'n.entity_id = d.entity_id');
  $query->condition('n.entity_id', $distributor_id, '=');
  $query->fields('n', array('	field_name_value'));
  $query->fields('d', array('field_distributor_value'));
  $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
  $distributor_name = $result[0]['field_name_value'];
  return $distributor_name;
}

function change_feeds_import_user_presave(&$edit, $account, $category) {
  global $user;
  $roles = $user->roles;
  if (in_array("Distributor", $roles)) {
    $uid = $user->uid;
    $edit['field_distributor']['und'][0]['value'] = $uid;
  }
}

function change_feeds_import_prevent_import_validate($form, $form_state) {
  if (!isset($form_state['values']['feeds']["FeedsFileFetcher"]['file'])) {
    form_set_error('upload', t('No new file uploaded'));
    //return false;
  }
}

function change_feeds_import_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'feeds_import_form') {
    unset($form['feeds']["FeedsFileFetcher"]['upload']['#file_info']);
    $form['#validate'][] = 'change_feeds_import_prevent_import_validate';
  }
  if ($form_id == 'user_register_form' || $form_id == 'user_profile_form') {
    $form['#validate'][] = 'registration_validate';
    return $form;
  }
  if (isset($form_state['node'])) {
    $node = $form_state['node'];
    if (!isset($node->nid) || isset($node->is_new)) {
      // This is a new node.
      if ($form_id == 'product_division_master_node_form' || $form_id == 'pricelist_group_master_node_form') {
        $form['#submit'][] = 'change_feeds_import_custom_node_add_submit';
      }
    }
  }

  if ($form_id == 'user_register') {
    drupal_set_title(t('Transaction Platform'));
  }
  elseif ($form_id == 'user_pass') {
    drupal_set_title(t('Transaction Platform'));
  }
  elseif ($form_id == 'user_login') {
    drupal_set_title(t('Transaction Platform'));
  }
}

function change_feeds_import_custom_node_add_submit($form, &$form_state) {
  change_feeds_import_change_status_of_error_billing_table();
  drupal_set_message("Data is created successfully");
}

function registration_validate($form, &$form_state) {
  global $user;
  $roles = $user->roles;
  if (in_array("administrator", $roles)) {
    form_set_error('failed_account', 'administrator can not create account only distributor can create account');
  }
}

function change_feeds_import_feeds_after_import(FeedsSource $source) {
  if ($source->id == 'sku7_code_master' || $source->id == 'outlet_master') { // if importing through sku7_code_master OR outlet_master.  
    change_feeds_import_change_status_of_error_billing_table();
  }
}

function change_feeds_import_change_status_of_error_billing_table() {
  global $user;
  $user_id = $user->uid;
  $distributor_id = change_feeds_import_get_distributor_id($user_id);

  $status_updated = db_update('error_billing_data') // update status in error_billing_data condition based on (Distributor Id )
      ->fields(array(
        'status' => "Validate",
      ))
      ->condition('distributor_id', $distributor_id, '=')
      ->condition('status', 'Error', '=')
      ->execute();
}

function change_feeds_import_services_resources() {
  $android_services_resource = array(
    '#api_version' => 3002,
  );
  $android_services_resource = array(
    'loading' => array(
      'actions' => array(
        'get-details' => array(
          'help' => 'Get data according party packing or not',
          'callback' => 'change_feeds_import_check_party_packing_or_not',
          'args' => array(
            array(
              'name' => 'van_type',
              'type' => 'string',
              'description' => 'pass param as van_type',
              'source' => array('data' => 'van_type'),
              'optional' => FALSE,
            ),
            array(
              'name' => 'nid',
              'type' => 'string',
              'description' => 'pass param as nid',
              'source' => array('data' => 'nid'),
              'optional' => FALSE,
            ),
          ),
          'access arguments' => array('Distributor Upload File'),
          'file' => array('type' => 'inc', 'module' => 'change_feeds_import', 'name' => 'includes/change_feeds_import_loading'),
        ),
      ),
    ),
  );
  return $android_services_resource;
}

function change_feeds_import_query_alter(QueryAlterableInterface $query) {
  $view_name = 'van_planning_report';
  if ($query->hasTag('views_' . $view_name)) {
    $query->groupBy('field_sales_day_value');
    $query->groupBy('field_static_delivery_beat_code_value');
    // $query->groupBy('field_area_hook_nid');
    $query->addExpression('SUM(if(field_sales_day_value != 1, 1, 0))', 'total_rec');
  }

}

function change_feeds_import_views_query_alter(&$view, &$query) {
  // Do the actual join
  global $user;
  // Store distributor id in author in each node
  $distributor_id = change_feeds_import_get_distributor_id($user->uid);

  if (($view->name != 'user_manual') && ($view->name != 'impact_delivery_cron_2') && ($view->name != 'impact_party_master') && ($view->name != 'hul_code_distributor_wise')) {
    foreach ($query->table_queue as $key => $val) {
      if (($val['table'] == 'node')) {
        if (empty($val['join'])) {
          $query->add_where(0, $val['alias'] . '.uid', $distributor_id, '=');
        }
        else {
          $query->table_queue[$key]['join']->extra[] = array('field' => 'uid', 'value' => $distributor_id);
        }
      }
    }
  }
  if ($view->base_table == 'custom_billing_data' && ($view->name != 'impact_delivery_cron_2')) {
    $query->add_where(0, 'custom_billing_data.distributor_id', $distributor_id, '=');
  }
  if ($view->base_table == 'van_cld_data_table') {
    $query->add_where(0, 'van_cld_data_table.distributor_id', $distributor_id, '=');
  }
  if ($view->name == 'pending_delivery_outstanding_report') {
    $query->add_field('custom_billing_data', 'bill_number', 'custom_billing_data_bill_number', array('function' => 'groupby'));
    $query->add_groupby('custom_billing_data.bill_number');
  }

  if ($view->name == 'impact_delivery_report' || $view->name == 'impact_delivery_report_2' || $view->name == 'impact_delivery_cron_2') {
    $sub_query = db_select('custom_billing_data', 'b');
    if ($view->name == 'impact_delivery_cron_2') {
      $query1 = db_select('users', 'u');
      $query1->fields('u', array('uid'));
      $query1->join('field_data_field_idd', 'd1', 'd1.entity_id= u.uid');
      $query1->condition('u.status', 1);
      $query1->condition('d1.field_idd_value', 1);
      $dis_ids = $query1->execute()->fetchCol();

      $next_day = strtotime(date('Y-m-d', strtotime("+1 days")));
      $next_day_end = $next_day + 86399;

      $sub_query->join('node', 'n', 'n.title = b.bill_number AND b.distributor_id = n.uid');
      $sub_query->join('field_data_field_trip_id_reference', 'ftr', 'ftr.entity_id=n.nid');
      $sub_query->join('field_data_field_trip_executon_date', 'fd', 'ftr.field_trip_id_reference_nid=fd.entity_id');

      $sub_query->condition('fd.field_trip_executon_date_value', $next_day, '>=');
      $sub_query->condition('fd.field_trip_executon_date_value', $next_day_end, '<=');
      $sub_query->condition('b.distributor_id', $dis_ids, 'IN');
      // $sub_query->condition('n.uid', $dis_ids, 'IN');
    }
    else {
      $sub_query->join('node', 'n', 'n.title = b.bill_number');
      $sub_query->condition('b.distributor_id', $distributor_id);
      $sub_query->condition('n.uid', $distributor_id);
    }

    $sub_query->join('field_data_field_bill_value', 'v', 'v.entity_id = n.nid');
    $sub_query->addField('b', 'bill_number', 'bill_number');
    $sub_query->addField('v', 'field_bill_value_value', 'field_bill_value_value');
    $sub_query->addField('b', 'distributor_id', 'distributor_id');

    if ($view->name == 'impact_delivery_report') {
      if (isset($view->exposed_raw_input['date_filter']['min']) && isset($view->exposed_raw_input['date_filter']['max'])) {
        $min = intval(strtotime($view->exposed_raw_input['date_filter']['min']));
        $max = intval(strtotime($view->exposed_raw_input['date_filter']['max']));

        $sub_query->condition('b.loading_date', $min, '>=');
        $sub_query->condition('b.loading_date', $max, '<=');
      }
    }
    if ($view->name == 'impact_delivery_report_2') {
      if (isset($view->exposed_raw_input['date_filter']['min']) && isset($view->exposed_raw_input['date_filter']['max'])) {
        $min = intval(strtotime($view->exposed_raw_input['date_filter']['min']));
        $max = intval(strtotime($view->exposed_raw_input['date_filter']['max']));

        $sub_query->join('field_data_field_trip_id_reference', 'ftr', 'ftr.entity_id=n.nid');
        $sub_query->join('field_data_field_trip_executon_date', 'fd', 'ftr.field_trip_id_reference_nid=fd.entity_id');

        $sub_query->condition('fd.field_trip_executon_date_value', $min, '>=');
        $sub_query->condition('fd.field_trip_executon_date_value', $max, '<=');
      }
    }

    //$sub_query->addExpression('ifnull(v.field_bill_value_value, 5)', 'field_bill_value_value');
    $sub_query->addExpression('MIN(sku7_code)', 'minimum');
    $sub_query->groupBy('b.bill_number');
    if ($view->name == 'impact_delivery_cron_2') {
      $sub_query->groupBy('b.distributor_id');
    }
    $join = new views_join();
    $join->definition = array('table formula' => $sub_query, 'left_field' => 'bill_number', 'field' => 'bill_number', 'left_table' => 'custom_billing_data');
    $join->left_table = 'custom_billing_data'; // or wathever table you want to join with
    $join->table = 'custom_billing_data';
    $join->field = 'bill_number';
    $join->left_field = 'bill_number'; // or wathever column you want to join with
    $join->type = 'LEFT'; // if you want another join type play with this value
    $join->extra = array(
      array('field' => 'minimum', 'left_field' => 'sku7_code'),
      array('field' => 'distributor_id', 'left_field' => 'distributor_id'),
    );

    $join->extra_type = 'AND';

    // Do the actual join
    $query->table_queue['temp'] = array(
      'alias' => 'temp', // I believe this is optional
      'table' => $sub_query,
      'relationship' => 'custom_billing_data',
      'join' => $join,
    );

    $query->add_field('temp', 'field_bill_value_value');
  }


  if ($view->name == 'drs_report') {
    $trip_id = $view->args[0];
    $sub_query = db_select('node', 'n');
    $sub_query->addTag('node_uid');
    $sub_query->addField('n', 'title', 'bill_number');
    $sub_query->join('field_data_field_trip_id_reference', 'tp', 'tp.entity_id = n.nid');
    $sub_query->join('node', 'dd', 'dd.nid = tp.field_trip_id_reference_nid');
    $sub_query->condition('dd.title', $trip_id, "=");
    $sub_query->join('field_data_field_sales_party_code', 'spc', 'spc.entity_id = n.nid');
    $sub_query->join('node', 'nd', 'nd.title = spc.field_sales_party_code_value');
    $sub_query->condition('nd.type', 'outlet_master', '=');
    $sub_query->condition('nd.uid', $distributor_id, '=');
    $sub_query->join('field_data_field_beat_name', 'bn', 'bn.entity_id = nd.nid');
    $sub_query->addField('bn', 'field_beat_name_value', 'BEAT_NAME');
    $sub_query->groupBy('BEAT_NAME');
    //$sub_query->addExpression('ifnull(v.field_bill_value_value, 5)', 'field_bill_value_value');
    $sub_query->addExpression('MIN(n.title)', 'minimum');



    $join = new views_join();
    $join->definition = array('table formula' => $sub_query, 'left_field' => 'title', 'field' => 'minimum', 'left_table' => 'node');
    $join->table = 'node';
    $join->field = 'minimum';
    $join->left_table = 'node'; // or wathever table you want to join with
    $join->left_field = 'title'; // or wathever column you want to join with
    $join->type = 'LEFT'; // if you want another join type play with this value
//    $join->extra = array(
//      array('field' => 'minimum', 'left_field' => 'title'),
//    );
    // Do the actual join
    $query->table_queue['temp'] = array(
      'alias' => 'temp', // I believe this is optional
      'table' => $sub_query,
      'relationship' => 'node',
      'join' => $join,
    );

    $query->add_field('temp', 'BEAT_NAME');
  }

  if ($view->name == 'Outlet_Master_Report') {

//    $sub_query = db_select('node', 'n');
//    $sub_query->addTag('node_uid');
//    
//    $sub_query->join('field_data_field_channel', 'fc', 'fc.entity_id = n.nid');
//    $sub_query->join('field_data_field_pl_group', 'fp', 'fp.entity_id = n.nid');
//    $sub_query->join('field_data_field_van_pl_group', 'fv', 'fv.entity_id = n.nid');
//    
//    $sub_query->addField('fc', 'field_channel_value', 'channel');
//    $sub_query->addField('fp', 'field_pl_group_value', 'pl_group');
//    $sub_query->addField('fv', 'field_van_pl_group_value', 'van_pl_group');
//    
//    $join = new views_join();
//    $join->definition = array('table formula' => $sub_query, 'left_field' => 'field_data_field_channel_node_entity_type', 'field' => 'channel', 'left_table' => 'node');
//    $join->left_table = 'node'; // or wathever table you want to join with
//    $join->table = 'node';
//    $join->field = 'channel';
//    $join->left_field = 'field_data_field_channel_node_entity_type'; // or wathever column you want to join with
//    $join->type = 'LEFT'; // if you want another join type play with this value
//    $join->extra = array(
//      array('field' => 'pl_group', 'left_field' => 'field_data_field_pl_group_node_entity_type'),
//    );
    // Do the actual join
//    $query->table_queue['temp'] = array(
//      'alias' => 'temp', // I believe this is optional
//      'table' => $sub_query,
//      'relationship' => 'van_pl',
//      'join' => $join,
//    );
//
//    $query->add_field('temp', 'van_pl_group');
  }
}

/**
 * 
 * @param type $channel = Party pack master channle
 * @param type $pl_group = Party pack master group
 */
function check_unique_group_channle_combination($channel, $pl_group) {
  $query = db_select('field_data_field_channel', 'ch');
  $query->join('node', 'n', 'n.nid = ch.entity_id');
  $query->condition('ch.bundle', 'party_pack_master');
  $query->condition('ch.field_channel_value', $channel, '=');
  $query->join('field_data_field_pl_group', 'ppmpl', 'ppmpl.entity_id = ch.entity_id');
  $query->condition('ppmpl.bundle', 'party_pack_master');
  $query->condition('ppmpl.field_pl_group_value', $pl_group, '=');
  $query->fields('ppmpl', array('entity_id'));
  $query->addTag('node_uid');
  $result = $query->execute()->fetchAllKeyed(0, 0);
  return $result;
}

/**
 * implements hook query alter to allow ordering by weight
 * @param QueryAlterableInterface $query
 */
function change_feeds_import_query_node_uid_alter(QueryAlterableInterface $query) {

  global $user;
  $user_id = $user->uid;
  $distributor_id = change_feeds_import_get_distributor_id($user_id);

  // altering the dynamic query object having tag => node_uid
  $query->condition('n.uid', $distributor_id);
}

/**
 * Implements hook_feeds_plugins().
 */
function change_feeds_import_feeds_plugins() {
  $path = drupal_get_path('module', 'change_feeds_import') . '/plugins';
  $info['FeedsNodeCustomProcessor'] = array(
    'name' => 'Custom Node processor',
    'description' => 'Create and update nodes.',
    'help' => 'Create and update nodes from parsed content.',
    'handler' => array(
      'parent' => 'FeedsNodeProcessor',
      'class' => 'FeedsNodeCustomProcessor',
      'file' => 'FeedsNodeCustomProcessor.inc',
      'path' => $path,
    ),
  );
  return $info;
}

/**
 * Returns all terms list using vocabulary
 */
function change_feeds_import_get_terms_using_vocubulary($vanme) {
  $res = '';
  $query = db_select('taxonomy_term_data', 't');
  $query->join('taxonomy_vocabulary', 'v', 'v.vid = t.vid');
  $query->condition('v.name', 'Outlet Days');
  $query->fields('t', array('tid', 'name'));
  $res = $query->execute()->fetchAllKeyed();
  return $res;
}

/**
 * Return Area Id From Master
 */
function check_area_id_exists($title) {
  $query = db_select('node', 'n');
  $query->condition('n.type', "area_hook_group_master", '=');
  $query->join('field_data_field_area_hook_group_id', 'agi', 'agi.entity_id = n.nid');
  $query->fields('agi', array('field_area_hook_group_id_value'));
  $query->addTag('node_uid');
  $area_id = $query->execute()->fetchAllKeyed(0, 0);
  return $area_id;
}

function change_feeds_import_form_views_exposed_form_alter(&$form, &$form_state) {
  if ($form['#id'] == 'views-exposed-form-Outlet-Master-Report-page') {


    $van_pl_options = get_van_pl('van', NULL, NULL);
    $select = array('' => '- Any -');

    $days = change_feeds_import_get_terms_using_vocubulary('Outlet Days');
    $sales_day_options = array_combine($days, $days);

    $select = array('' => '- Any -');

    $area_grp_name_options = get_van_pl(NULL, NULL, 'name');
    $select = array('' => '- Any -');


    $van_pl_options = $select + $van_pl_options;
    $sales_day_options = $select + $sales_day_options;
    $area_grp_name_options = $select + $area_grp_name_options;


    if (isset($form['field_dva_van_pl_group_value'])) {
      $form['field_dva_van_pl_group_value']['#type'] = 'select';
      $form['field_dva_van_pl_group_value']['#size'] = null;
      $form['field_dva_van_pl_group_value']['#options'] = $van_pl_options;
      $form['field_dva_van_pl_group_value']['#validated'] = TRUE;
    }

    if (isset($form['field_sales_day_value'])) {
      $form['field_sales_day_value']['#type'] = 'select';
      $form['field_sales_day_value']['#size'] = null;
      $form['field_sales_day_value']['#options'] = $sales_day_options;
      $form['field_sales_day_value']['#validated'] = TRUE;
    }

    if (isset($form['field_dva_area_hook_group_name_value'])) {
      $form['field_dva_area_hook_group_name_value']['#type'] = 'select';
      $form['field_dva_area_hook_group_name_value']['#size'] = null;
      $form['field_dva_area_hook_group_name_value']['#options'] = $area_grp_name_options;
      $form['field_dva_area_hook_group_name_value']['#validated'] = TRUE;
    }
  }


  if ($form['#id'] == 'views-exposed-form-Outlet-Master-Report-page') {


    $van_pl_options = get_van_pl('van', NULL, NULL);
    $select = array('' => '- Any -');

    $days = change_feeds_import_get_terms_using_vocubulary('Outlet Days');
    $sales_day_options = array_combine($days, $days);

    $select = array('' => '- Any -');

    $area_grp_name_options = get_van_pl(NULL, NULL, 'name');
    $select = array('' => '- Any -');


    $van_pl_options = $select + $van_pl_options;
    $sales_day_options = $select + $sales_day_options;
    $area_grp_name_options = $select + $area_grp_name_options;


    $salesman = get_all_salesman_data("salesman", NULL);
    $salesman = $select + $salesman;
    $salesman_code = get_all_salesman_data(NULL, "slaesman_code");
    $salesman_code = $select + $salesman_code;
    if (isset($form['field_dva_van_pl_group_value'])) {
      $form['field_dva_van_pl_group_value']['#type'] = 'select';
      $form['field_dva_van_pl_group_value']['#size'] = null;
      $form['field_dva_van_pl_group_value']['#options'] = $van_pl_options;
      $form['field_dva_van_pl_group_value']['#validated'] = TRUE;
    }

    if (isset($form['field_sales_day_value'])) {
      $form['field_sales_day_value']['#type'] = 'select';
      $form['field_sales_day_value']['#size'] = null;
      $form['field_sales_day_value']['#options'] = $sales_day_options;
      $form['field_sales_day_value']['#validated'] = TRUE;
    }

    if (isset($form['field_dva_area_hook_group_name_value'])) {
      $form['field_dva_area_hook_group_name_value']['#type'] = 'select';
      $form['field_dva_area_hook_group_name_value']['#size'] = null;
      $form['field_dva_area_hook_group_name_value']['#options'] = $area_grp_name_options;
      $form['field_dva_area_hook_group_name_value']['#validated'] = TRUE;
    }

    if (isset($form['field_salesman_value'])) {
      $form['field_salesman_value']['#type'] = 'select';
      $form['field_salesman_value']['#size'] = null;
      $form['field_salesman_value']['#options'] = $salesman;
      $form['field_salesman_value']['#validated'] = TRUE;
    }


    if (isset($form['field_salesman_code_value'])) {
      $form['field_salesman_code_value']['#type'] = 'select';
      $form['field_salesman_code_value']['#size'] = null;
      $form['field_salesman_code_value']['#options'] = $salesman_code;
      $form['field_salesman_code_value']['#validated'] = TRUE;
    }
  }
}

function get_all_salesman_data($salesman, $salesman_code) {
  $query = db_select('node', 'n');
  $query->condition('n.type', 'outlet_master');
  $query->addTag('node_uid');
  if (!is_null($salesman)) {
    $query->join('field_data_field_salesman', 'fs', 'fs.entity_id = n.nid');
    $query->fields('fs', array('field_salesman_value'));
  }
  if (!is_null($salesman_code)) {
    $query->join('field_data_field_salesman_code', 'fsc', 'fsc.entity_id = n.nid');
    $query->fields('fsc', array('field_salesman_code_value'));
  }
  $results = $query->execute()->fetchAllKeyed(0, 0);
  return $results;
}

function get_van_pl($van, $day, $name) {
  $query = db_select('node', 'n');
  $query->condition('n.type', 'day_van_pl_gp_area_hook_grouping');
  $query->addTag('node_uid');

  if (!is_null($van)) {
    $query->join('field_data_field_dva_van_pl_group', 'ppplg', 'ppplg.entity_id = n.nid');
    $query->fields('ppplg', array('field_dva_van_pl_group_value'));
  }
  if (!is_null($day)) {
    $query->join('field_data_field_dva_sales_day', 'dsd', 'dsd.entity_id = n.nid');
    $query->fields('dsd', array('field_dva_sales_day_value'));
  }
  if (!is_null($name)) {
    $query->join('field_data_field_dva_area_hook_group_name', 'gn', 'gn.entity_id = n.nid');
    $query->fields('gn', array('field_dva_area_hook_group_name_value'));
  }

  $pl_van = $query->execute()->fetchAllKeyed(0, 0);
  return $pl_van;
}

/**
 * 
 * @param type $batch
 * @param type $batch_redirect
 */
function change_feeds_import_views_data_export_batch_alter(&$batch, &$batch_redirect) {
  watchdog('cron1', '<pre>' . print_r(array(), TRUE) . '</pre>');

  $views_names = array('impact_delivery_cron_2', 'impact_party_master'); //  Download files for this Views only

  if (in_array($batch['view_name'], $views_names)) {
//    $new_batch = $batch;
//
//    $view_name = $new_batch['view_name'];
//    $display_id = $new_batch['display_id'];
//
//    // We actually never return from the drupal_alter, but
//    // use drush's batch system to run the same batch
//    // Add a final callback
//    $new_batch['operations'][] = array(
//      'change_feeds_import_views_data_export_batch_finish', array($new_batch['eid'], $new_batch['view_name']),
//    );
//
//    batch_set($new_batch);
//    $new_batch =& batch_get();
//    $new_batch['progressive'] = FALSE;
//   // $new_batch['timestamp'] = time();
//    // Process the batch using background batch.
//    //background_batch_process_batch('');
//    drush_backend_batch_process();
//
//    // Instruct the view display plugin that it shouldn't set a batch.
//    $batch = array();
    $batch['operations'][] = array(
      'change_feeds_import_views_data_export_batch_finish', array($batch['eid'], $batch['view_name']),
    );
  }
}

/**
 * 
 * Implements Additional Batch Process to Save Export All views Data Into Files
 */
function change_feeds_import_views_data_export_batch_finish($eid, $view_name) {
  $export = views_data_export_get($eid);
  $data = array();
  $view = views_data_export_view_retrieve($eid);
  watchdog('cron2', '<pre>' . print_r(array(), TRUE) . '</pre>');
  // Allow Dump Creation for Export 2 Only to avoid Overriding
  $date = date('Ymdhis') . '_' . date('dmY', strtotime("+1 days"));

  if ($view_name == 'impact_delivery_cron_2') {
    watchdog('impact_delivery', '<pre>' . print_r(array(), TRUE) . '</pre>');
    $view->set_display($export->view_display_id);
    $view->display_handler->batched_execution_state = $export;
    $view->display_handler->remove_index();
    // Naming of file below

    $file_name = 'TP2IMPACT_DELIVERY_' . $date . '.csv';

    $file_uri = 'public://TP2IMPACT_DELIVERY/' . $file_name;
    $temp_file = $view->display_handler->outputfile_path();

    // create directory if not exist
    $dir = 'public://TP2IMPACT_DELIVERY';
    file_prepare_directory($dir, FILE_CREATE_DIRECTORY);

    $uri_path = file_unmanaged_copy($temp_file, $file_uri, FILE_EXISTS_REPLACE);

    $files = file_load_multiple(array(), array('uri' => $uri_path));
  }
  else {
    watchdog('PARTYMASTER', '<pre>' . print_r(array(), TRUE) . '</pre>');
    $view->set_display($export->view_display_id);
    $view->display_handler->batched_execution_state = $export;
    $view->display_handler->remove_index();
    // Naming of file below

    $file_name = 'TP2IMPACT_PARTYMASTER_' . $date . '.csv';

    $file_uri = 'public://TP2IMPACT_PARTYMASTER/' . $file_name;
    $temp_file = $view->display_handler->outputfile_path();

    // create directory if not exist
    $dir = 'public://TP2IMPACT_PARTYMASTER';
    file_prepare_directory($dir, FILE_CREATE_DIRECTORY);

    $uri_path = file_unmanaged_copy($temp_file, $file_uri, FILE_EXISTS_REPLACE);

    $files = file_load_multiple(array(), array('uri' => $uri_path));
  }

  _send_file_using_sftp($file_name, $file_uri);
}

/**
 * 
 */
function impact_delivery_cron() {
  $date = date('m/d/y', strtotime("+1 days"));

  $param['date_filter[min][date]'] = $date;
  $param['date_filter[max][date]'] = $date;

  drupal_goto('impact-delivery-cron2/export', array('query' => $param));
}

/**
 * 
 */
function impact_delivery_partypack_cron() {
  drupal_goto('impact-party-master/export');
}

function _send_file_using_sftp($file_name, $file_uri) {
  if (!empty($file_name) && !empty($file_uri)) {
    $strServer = "103.233.76.251";  // ip address
    $strServerPort = 22;
    $strServerUsername = "sftpuser03";
    $strServerPassword = "Techub123#";
    // $dest_file = "C:\SFTP_ROOT\sftpuser03";
    $csv_filename = 'impact_delivery_report.csv';
    $csv_filename = $file_name;
    $csv_realfilename = drupal_realpath($file_uri);

    //Send file via sftp to server
    //connect to server
    $resConnection = ssh2_connect($strServer, $strServerPort);

    if (ssh2_auth_password($resConnection, $strServerUsername, $strServerPassword)) {
      //Initialize SFTP subsystem

      $output = ssh2_scp_send($resConnection, $csv_realfilename, $file_name);
    }
    else {
      $data['error'] = 'File was not sent';
      $data['file_name'] = $file_name;
      $data['file_uri'] = $file_uri;
      watchdog('File error', '<pre>' . print_r($data, TRUE) . '</pre>');
    }
  }
  else {
    return '';
  }
}
