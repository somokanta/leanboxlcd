<?php

/**
 * Implments hook_menu
 *
 */
function change_feeds_import_menu() {

  // setting form for flat table
  $items['admin/config/flat-table'] = array(
    'title' => 'Setting Form For Flat Table',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('change_feeds_import_setting_form'),
    'access callback' => 'check_if_fr_role_user_admin',
  );

  return $items;
}

// check permission for (admin/config/flat-table) Menu
function check_if_fr_role_user_admin() {
  global $user;
  if (in_array('administrator', $user->roles)) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

// Menu Callback  for (admin/config/flat-table)
function change_feeds_import_setting_form($form, $form_state) {

  // PARTY PACKING PRODUCTIVITY LINES/Hr
  $form['party_packing_productivity_lines'] = array(
    '#type' => 'textfield',
    '#title' => t('PARTY PACKING PRODUCTIVITY LINES/Hr'),
    '#default_value' => variable_get('party_packing_productivity_lines', ''),
    '#required' => TRUE,
  );

  // PARTY PACKING COMPLIANCE
  $form['party_packing_compliance'] = array(
    '#type' => 'textfield',
    '#title' => t('PARTY PACKING COMPLIANCE'),
    '#default_value' => variable_get('party_packing_compliance', ''),
    '#required' => TRUE,
  );

  // Pick Productivity Pick
  $form['pick_productivity_pick'] = array(
    '#type' => 'textfield',
    '#title' => t('Pick Productivity Pick / Hr'),
    '#default_value' => variable_get('pick_productivity_pick', ''),
    '#required' => TRUE,
  );

  // Picking Compliance
  $form['picking_compliance'] = array(
    '#type' => 'textfield',
    '#title' => t('Picking Compliance'),
    '#default_value' => variable_get('picking_compliance', ''),
    '#required' => TRUE,
  );

  // EGIR End Time Cut-Off 
  $form['egir_end_time_cutoff'] = array(
    '#type' => 'textfield',
    '#title' => t('EGIR End time - Cutoff'),
    '#default_value' => variable_get('egir_end_time_cutoff', ''),
    '#required' => TRUE,
  );

  // Unloading End Time Cutoff
  $form['unloading_end_time_cutOff'] = array(
    '#type' => 'textfield',
    '#title' => t('Unloading End Time - CutOff'),
    '#default_value' => variable_get('unloading_end_time_cutOff', ''),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

/**
 * Implements hook_node_insert()
 */
function change_feeds_import_node_insert($node) {
  if ($node->type == 'dispatch_data') {

    // logic for when dispatch node is uploading get billing data nid (on basis of vehicle+loading date)
    $sub_query1 = db_select('node', 'n');
    $sub_query1->condition('n.type', "billing_data", '=');
    $sub_query1->innerjoin('field_data_field_vehicle', 'fv', 'fv.entity_id = n.nid');
    $sub_query1->groupBy('fv.field_vehicle_value');
    $sub_query1->innerjoin('field_data_field_loading_date', 'fld', 'fld.entity_id = n.nid');
    $sub_query1->groupBy('fld.field_loading_date_value');
    $sub_query1->fields('fv', array('field_vehicle_value'));
    $sub_query1->fields('fld', array('field_loading_date_value'));
    $sub_query1->fields('n', array('nid'));

    $sub_query2 = db_select('node', 'n');
    $sub_query2->condition('n.type', "dispatch_data", '=');
    $sub_query2->condition('n.nid', $node->nid, '=');
    $sub_query2->innerjoin('field_data_field_vehicle', 'fv', 'fv.entity_id = n.nid');
    $sub_query2->innerjoin('field_data_field_loading_date', 'fld', 'fld.entity_id = n.nid');
    $sub_query2->fields('n', array('nid'));
    $sub_query2->join($sub_query1, 'bd', 'bd.field_vehicle_value = fv.field_vehicle_value and bd.field_loading_date_value = fld.field_loading_date_value');
    $billing_result = $sub_query2->execute()->fetchAll(PDO::FETCH_ASSOC);

    $billing_nid = $billing_result[0]['nid'];
    
   dpm($billing_nid,"billing_nid");
    ######## logic for Actual Party Packing #########
    $sub_query3 = db_select('node', 'n');
    $sub_query3->condition('n.type', "party_packing", '=');
    $sub_query3->innerjoin('field_data_field_party_packing_vehicle', 'ppv', 'ppv.entity_id = n.nid');
    $sub_query3->innerjoin('field_data_field_party_packing_loading_date', 'pld', 'pld.entity_id = n.nid');
    $sub_query3->innerjoin('field_data_field__party_packingstatus', 'pps', 'pps.entity_id = n.nid');
    $sub_query3->fields('ppv', array('field_party_packing_vehicle_value'));
    $sub_query3->fields('pld', array('field_party_packing_loading_date_value'));
    $sub_query3->fields('pps', array('field__party_packingstatus_value'));
    $sub_query3->fields('n', array('nid'));
    ########  logic for Actual Party Packing  End #######
    
    
    ########  logic for Dispatch Date #######
    $sub_query4 = db_select('node', 'n');
    $sub_query4->condition('n.type', "dispatch_data", '=');
    $sub_query4->innerjoin('field_data_field_vehicle', 'fv', 'fv.entity_id = n.nid');
    $sub_query4->innerjoin('field_data_field_loading_date', 'fld', 'fld.entity_id = n.nid');
    $sub_query4->innerjoin('field_data_field_dispatch_date', 'fdd', 'fdd.entity_id = n.nid');
    $sub_query4->fields('fv', array('field_vehicle_value'));
    $sub_query4->fields('fld', array('field_loading_date_value'));
    $sub_query4->fields('fdd', array('field_dispatch_date_value'));
    $sub_query4->fields('n', array('nid'));
    ########  logic for Dispatch Date End #######
    
    $type = "billing_data";
    $query = db_select('node', 'n');
    $query->condition('n.type', $type, '=');
    $query->condition('n.nid', $billing_nid, '=');
    $query->innerjoin('field_data_field_bill_number', 'bn', 'bn.entity_id = n.nid');
    $query->innerjoin('field_data_field_bill_date', 'bd', 'bd.entity_id = n.nid');
    $query->innerjoin('field_data_field_vehicle', 'v', 'v.entity_id = n.nid');
    $query->innerjoin('field_data_field_loading_date', 'ld', 'ld.entity_id = n.nid');
    $query->innerjoin('field_data_field_sum_of_sales_value', 'ssv', 'ssv.entity_id = n.nid');
    $query->innerjoin('field_data_field_sum_of_sales_ret_value', 'srv', 'srv.entity_id = n.nid');
    $query->innerjoin('field_data_field_party_code', 'pc', 'pc.entity_id = n.nid');
    $query->innerjoin('field_data_field_party_code', 'pc2', 'pc2.field_party_code_value = pc.field_party_code_value');
    $query->innerjoin('field_data_field_pl_group', 'plg', 'pc2.entity_id = plg.entity_id');
    $query->innerjoin('field_data_field_channel', 'fc', 'pc2.entity_id = fc.entity_id');
    $query->innerjoin('field_data_field_pl_group', 'plg2', 'plg2.field_pl_group_value = plg.field_pl_group_value');
    $query->innerjoin('field_data_field_party_packing', 'fpp', 'plg2.entity_id = fpp.entity_id');
    $query->innerjoin('field_data_field_promised_delivery_date', 'pd', 'pd.entity_id = n.nid');
    $query->innerjoin('field_data_field_promised_delivery_date', 'pd', 'pd.entity_id = n.nid');
    $query->fields('bn', array('field_bill_number_value'));
    $query->groupBy('bn.field_bill_number_value');
    $query->fields('bd', array('field_bill_date_value'));
    $query->fields('v', array('field_vehicle_value'));
    $query->fields('ld', array('field_loading_date_value'));
    $query->addExpression('SUM(ssv.field_sum_of_sales_value_value)', 'Sum_of_SALES_VALUE');
    $query->addExpression('SUM(srv.	field_sum_of_sales_ret_value_value)', 'Sum_of_SALES_RET_VALUE');
    $query->fields('pc', array('field_party_code_value', 'entity_id'));
    $query->fields('pd', array('field_promised_delivery_date_value'));
    $query->fields('plg', array('field_pl_group_value'));
    $query->fields('fc', array('field_channel_value'));
    $query->fields('fpp', array('field_party_packing_value'));
    $query->join($sub_query3, 'party_p', 'party_p.field_party_packing_vehicle_value = v.field_vehicle_value and party_p.field_party_packing_loading_date_value = ld.field_loading_date_value');
    $query->join($sub_query4, 'dd', 'dd.field_vehicle_value = v.field_vehicle_value and dd.field_loading_date_value = ld.field_loading_date_value');
    $query->fields('dd');
    $query->fields('party_p');
    $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);


    foreach ($result as $key => $value) {
      $billing_vehicle = $value['field_vehicle_value'];
      $billing_loading_date = $value['field_loading_date_value'];
      $promised_delivery_date = $value['field_promised_delivery_date_value'];


      $sum_of_sales_value = $value['Sum_of_SALES_VALUE'];
      $sum_of_sales_ret_value = $value['Sum_of_SALES_RET_VALUE'];

      $net_value = $sum_of_sales_ret_value / $sum_of_sales_value;
      if ($net_value == 0) {
        $return_type = 'NA';
      }
      elseif ($net_value >= 0.98 && $net_value <= 1.02) {
        $return_type = 'FULL';
      }
      else {
        $return_type = 'Partial';
      }
      $dispatch_date = $value['field_dispatch_date_value'];
      $endDate = strtotime($dispatch_date);
      $promised_delivery_date_stamp = strtotime($promised_delivery_date);
      $datediff = $endDate - $promised_delivery_date_stamp;
      $diff = floor($datediff / (60 * 60 * 24));
      $result[$key]['delay_days'] = $diff;

      if ($diff == 0 || $diff < 0) {
        $result[$key]['delay_range'] = "N+2";
      }
      elseif ($diff == 1) {
        $result[$key]['delay_range'] = "N+3";
      }
      else {
        $result[$key]['delay_range'] = ">N+2";
      }


      $billing_loading_timestamp = strtotime($billing_loading_date);
      $billing_loading_day = date("d", $billing_loading_timestamp);

      $result[$key]['Day'] = $billing_loading_day;


      ######### Loagic for MOC #######
      if ($billing_loading_day < 21) {
        $month = date("m", $billing_loading_timestamp);
        $result[$key]['MOC'] = "MOC" . $month;
      }
      else {
        $newdate = strtotime('+1 month', strtotime($billing_loading_date));
        $next_month = date("m", $newdate);
        $result[$key]['MOC'] = "MOC" . $next_month;
      }
      ########### End Logic for MOC #######
      ######### Loagic for TDP #######
      if (($billing_loading_day >= 1) && ($billing_loading_day <= 10)) {
        $result[$key]['TDP'] = "TDP2";
      }
      elseif (($billing_loading_day >= 11) && ($billing_loading_day <= 20)) {
        $result[$key]['TDP'] = "TDP3";
      }
      else {
        $result[$key]['TDP'] = "TDP1";
      }
      ########### End Logic for TDP #######
      $billing_loading_day_text = date("D", $billing_loading_timestamp);
      $billing_loading_month = date("M", $billing_loading_timestamp);
      $result[$key]['month'] = $billing_loading_month;
      $result[$key]['Week_day'] = $billing_loading_day_text;

      $party_packing_status = $value['field__party_packingstatus_value'];
      if ($party_packing_status == 2) {
        $status = "Yes";
      }
      else {
        $status = "No";
      }



      // insert in flat_billing_data table when node update.(if record is not in table then create new record)
      db_merge('flat_billing_data')
          ->key(array('nid' => $node->nid))
          ->fields(array(
            'nid' => $node->nid,
            'bill_number' => $result[$key]['field_bill_number_value'],
            'bill_date' => strtotime($result[$key]['field_bill_date_value']) ? strtotime($result[$key]['field_bill_date_value']) : 0,
            'vehicle' => $result[$key]['field_vehicle_value'],
            'loading_date' => strtotime($result[$key]['field_loading_date_value']) ? strtotime($result[$key]['field_loading_date_value']) : 0,
            'sum_of_sales_value' => $result[$key]['Sum_of_SALES_VALUE'] ? $result[$key]['Sum_of_SALES_VALUE'] : 0,
            'sum_of_sales_ret_value' => $result[$key]['Sum_of_SALES_RET_VALUE'] ? $result[$key]['Sum_of_SALES_RET_VALUE'] : 0,
            'promised_delivery_date' => strtotime($result[$key]['field_promised_delivery_date_value']) ? strtotime($result[$key]['field_promised_delivery_date_value']) : 0,
            'dispatch_date' => strtotime($result[$key]['field_dispatch_date_value']) ? strtotime($result[$key]['field_dispatch_date_value']) : 0,
            'delay_days' => $result[$key]['delay_days'] ? $result[$key]['delay_days'] : 0,
            'delay_range' => $result[$key]['delay_range'],
            'return_type' => $return_type,
            'ideal_party_packing' => $result[$key]['field_party_packing_value'],
            'actual_party_packing' => $status,
            'day' => $result[$key]['Day'],
            'tdp' => $result[$key]['TDP'],
            'month' => $result[$key]['month'],
            'moc' => $result[$key]['MOC'],
            'week_day' => $result[$key]['Week_day'],
            'party_code' => $result[$key]['field_party_code_value'],
            'pl_group' => $result[$key]['field_pl_group_value'],
            'channel' => $result[$key]['field_channel_value'],
          ))
          ->execute();
    }
  }
  
  
}

/**
 * Implements hook_node_update()
 */
function change_feeds_import_node_update($node) {
  if ($node->type == 'party_packing') { // if Content Type is party packing.
    $start_time = $node->field_party_packing_start_time['und'][0]['value']; // party packing start time
    $end_time = $node->field_party_packing_end_time['und'][0]['value']; // party packing end time
    $party_picking_ld = $node->field_party_packing_loading_date['und'][0]['value']; // party packing loading date
    $timestamp = strtotime($party_picking_ld);
    $party_picking_ld_stamp = date("d", $timestamp);
    ######  logic for MOC ####
    if ($party_picking_ld_stamp < 21) {
      $month = date("m", $timestamp);
      $node->MOC = "MOC" . $month;
    }
    else {
      $newdate = strtotime('+1 month', strtotime($party_picking_ld));
      $next_month = date("m", $newdate);
      $node->MOC = "MOC" . $next_month;
    }

    ##### End MOC logic #######
    ######  logic for TDP ####
    if (($party_picking_ld_stamp >= 1) && ($party_picking_ld_stamp <= 10)) {
      $node->TDP = "TDP2";
    }
    elseif (($party_picking_ld_stamp >= 11) && ($party_picking_ld_stamp <= 20)) {
      $node->TDP = "TDP3";
    }
    else {
      $node->TDP = "TDP1";
    }
    ##### End TDP logic #######

    $node->field_party_packing_loading_date['und'][0]['value'] = strtotime($party_picking_ld);
    $node->field_party_packing_date['und'][0]['value'] = strtotime($node->field_party_packing_date['und'][0]['value']);
    $node->party_packing_productivity_lines = variable_get('party_packing_productivity_lines', '');
    $node->party_packing_compliance = variable_get('party_packing_compliance', '');
    $compliance = variable_get('party_packing_compliance', ''); // value from setting form
    $compliance_seconds = strtotime("1970-01-01 $compliance UTC"); // value from setting form
    ######  logic for Compliant ####
    if (empty($end_time)) {
      $node->compliance = "";
    }
    else {
      if ($end_time > $compliance_seconds) {
        $node->compliance = "Non Compliant";
      }
      else {
        $node->compliance = "Compliant";
      }
    }

    ##### End TDP Compliant #######
    $status = $node->field__party_packingstatus['und'][0]['value'];
    if ($status == 1) {
      $status = "In Process";
    }
    else if ($status == 2) {
      $status = "Completed";
    }
    else {
      $status = "Null";
    }


    // insert in flat_party_packing table when node update.(if record is not in table then create new record)
    db_merge('flat_party_packing')
        ->key(array('nid' => $node->nid))
        ->fields(array(
          'nid' => $node->nid,
          'vehicle' => $node->field_party_packing_vehicle['und'][0]['value'],
          'loading_date' => $node->field_party_packing_loading_date['und'][0]['value'] ? $node->field_party_packing_loading_date['und'][0]['value'] : 0,
          'party_packing_date' => $node->field_party_packing_date['und'][0]['value'] ? $node->field_party_packing_date['und'][0]['value'] : 0,
          'loading_sheet_line' => $node->field_loading_sheet_line['und'][0]['value'] ? $node->field_loading_sheet_line['und'][0]['value'] : 0,
          'bill_lines' => $node->field_bill_lines['und'][0]['value'] ? $node->field_bill_lines['und'][0]['value'] : 0,
          'each_units' => $node->field_each_units['und'][0]['value'] ? $node->field_each_units['und'][0]['value'] : 0,
          'party_packing_start_time' => $start_time ? $start_time : 0,
          'party_packing_end_time' => $end_time ? $end_time : 0,
          'supervisor' => $node->field_party_packing_supervisor['und'][0]['value'],
          'packer_name' => $node->field_party_packer_name['und'][0]['value'],
          'team_count' => $node->field_party_packer_team_count['und'][0]['value'] ? $node->field_party_packer_team_count['und'][0]['value'] : 0,
          'status' => $status,
          'productivity_lines' => $node->party_packing_productivity_lines ? $node->party_packing_productivity_lines : 0,
          'party_packing_compliance' => $compliance_seconds ? $compliance_seconds : 0,
          'compliance' => $node->compliance,
          'tdp' => $node->TDP,
          'moc' => $node->MOC,
        ))
        ->execute();
  }

  if ($node->type == 'picking') {
    $start_time = $node->field_picking_start_time['und'][0]['value']; // picking start time
    $end_time = $node->field_picking_end_time['und'][0]['value']; // picking end time
    $picking_ld = $node->field_picking_loading_date['und'][0]['value']; // picking loading date
    $timestamp = strtotime($picking_ld);
    $picking_ld_stamp = date("d", $timestamp);
    ######  logic for MOC ####
    if ($picking_ld_stamp < 21) {
      $month = date("m", $timestamp);
      $node->MOC = "MOC" . $month;
    }
    else {
      $newdate = strtotime('+1 month', strtotime($picking_ld));
      $next_month = date("m", $newdate);
      $node->MOC = "MOC" . $next_month;
    }

    ##### End MOC logic #######
    ######  logic for TDP ####
    if (($picking_ld_stamp >= 1) && ($picking_ld_stamp <= 10)) {
      $node->TDP = "TDP2";
    }
    elseif (($picking_ld_stamp >= 11) && ($picking_ld_stamp <= 20)) {
      $node->TDP = "TDP3";
    }
    else {
      $node->TDP = "TDP1";
    }
    ##### End TDP logic #######

    $node->field_picking_loading_date['und'][0]['value'] = strtotime($picking_ld);
    $node->field_picking_picking_date['und'][0]['value'] = strtotime($node->field_picking_picking_date['und'][0]['value']);
    $node->pick_productivity_pick = variable_get('pick_productivity_pick', '');
    $node->picking_compliance = variable_get('picking_compliance', '');
    $compliance = variable_get('picking_compliance', '');
    $compliance_seconds = strtotime("1970-01-01 $compliance UTC");
    ######  logic for Compliant ####

    if (empty($end_time)) {
      $node->compliance = "";
    }
    else {
      if ($end_time > $compliance_seconds) {
        $node->compliance = "Non Compliant";
      }
      else {
        $node->compliance = "Compliant";
      }
    }


    ##### End TDP Compliant #######
    $status = $node->field_picking_status['und'][0]['value'];
    if ($status == 1) {
      $status = "In Process";
    }
    else if ($status == 2) {
      $status = "Completed";
    }
    else {
      $status = "Null";
    }

    db_merge('flat_picking')
        ->key(array('nid' => $node->nid))
        ->fields(array(
          'nid' => $node->nid,
          'van_id' => $node->field_picking_van_id['und'][0]['value'] ? $node->field_picking_van_id['und'][0]['value'] : 0,
          'loading_date' => $node->field_picking_loading_date['und'][0]['value'] ? $node->field_picking_loading_date['und'][0]['value'] : 0,
          'godown_area_id' => $node->field_picking_godown_area_id['und'][0]['value'],
          'picking_type' => $node->field_picking_picking_type['und'][0]['value'],
          'picking_date' => $node->field_picking_picking_date['und'][0]['value'] ? $node->field_picking_picking_date['und'][0]['value'] : 0,
          'picking_start_time' => $start_time ? $start_time : 0,
          'picking_end_time' => $end_time ? $end_time : 0,
          'pick_lines' => $node->field_pick_lines['und'][0]['value'] ? $node->field_pick_lines['und'][0]['value'] : 0,
          'pick_units' => $node->field_pick_units['und'][0]['value'],
          'pick_clds' => $node->field_pick_clds['und'][0]['value'] ? $node->field_pick_clds['und'][0]['value'] : 0,
          'pick_supervisor' => $node->field_picking_pick_supervisor['und'][0]['value'],
          'picker_name' => $node->field_picking_picker_name['und'][0]['value'],
          'picking_team_count' => $node->field_picking_picking_team_count['und'][0]['value'] ? $node->field_picking_picking_team_count['und'][0]['value'] : 0,
          'status' => $status,
          'pick_productivity_pick' => $node->pick_productivity_pick ? $node->pick_productivity_pick : 0,
          'picking_compliance' => $compliance_seconds ? $compliance_seconds : 0,
          'moc' => $node->MOC,
          'tdp' => $node->TDP,
          'complaince' => $node->compliance,
        ))
        ->execute();
  }

  if ($node->type == 'egir') { // if content type is EGIR
    $invoice_date = $node->field_invoice_date['und'][0]['value']; // invoice date
    $invoice_timestamp = strtotime($invoice_date);
    $node->field_invoice_date['und'][0]['value'] = $invoice_timestamp;

    $uploading_date = $node->field_unloading_date['und'][0]['value']; // unloading date
    $uploading_timestamp = strtotime($uploading_date);
    $node->field_unloading_date['und'][0]['value'] = $uploading_timestamp;


    ######### Loagic for MOC #######
    $uploading_stamp = date("d", $uploading_timestamp);
    if ($uploading_stamp < 21) {
      $month = date("m", $uploading_timestamp);
      $node->MOC = "MOC" . $month;
    }
    else {
      $newdate = strtotime('+1 month', strtotime($uploading_date));
      $next_month = date("m", $newdate);
      $node->MOC = "MOC" . $next_month;
    }
    ########### End Logic for MOC #######
    ######### Loagic for TDP #######
    if (($uploading_stamp >= 1) && ($uploading_stamp <= 10)) {
      $node->TDP = "TDP2";
    }
    elseif (($uploading_stamp >= 11) && ($uploading_stamp <= 20)) {
      $node->TDP = "TDP3";
    }
    else {
      $node->TDP = "TDP1";
    }
    ########### End Logic for TDP #######

    $egir_date = $node->field_egir_date['und'][0]['value'];
    $egir_timestamp = strtotime($egir_date);
    $node->field_egir_date['und'][0]['value'] = $egir_timestamp;

    $node->egir_end_time_cutoff = variable_get('egir_end_time_cutoff', ''); // value from setting form
    $node->unloading_end_time_cutOff = variable_get('unloading_end_time_cutOff', ''); // value from setting form

    $egir_cutoff = variable_get('egir_end_time_cutoff', '');
    $egir_cutoff_seconds = strtotime("1970-01-01 $egir_cutoff UTC");

    $egir_end_time = $node->field_egir_end_time['und'][0]['value'];
    ######  logic for EGIR Compliant ####


    if (empty($egir_end_time)) {
      $node->compliance = "";
    }
    else {
      if ($egir_end_time > $egir_cutoff_seconds) {
        $node->compliance = "Non Compliant";
      }
      else {
        $node->compliance = "Compliant";
      }
    }


    ##### End logic for EGIR Compliant #######

    $unloading_cutoff = variable_get('unloading_end_time_cutOff', '');
    $unloading_cutoff_seconds = strtotime("1970-01-01 $unloading_cutoff UTC");

    $unloading_end_time = $node->field_unloading_end_time['und'][0]['value'];
    ######  logic for Unloading Compliant ####

    if (empty($unloading_end_time)) {
      $node->compliance = "";
    }
    else {
      if ($unloading_end_time > $unloading_cutoff_seconds) {
        $node->compliance = "Non Compliant";
      }
      else {
        $node->compliance = "Compliant";
      }
    }

    ##### End logic for unloading Compliant #######

    $status = $node->field_unloading_status['und'][0]['value'];
    if ($status == 1) {
      $status = "In Process";
    }
    else if ($status == 2) {
      $status = "Completed";
    }
    else {
      $status = "Null";
    }
    // insert in flat_unloading table when node update.(if record is not in table then create new record)
    db_merge('flat_unloading')
        ->key(array('nid' => $node->nid))
        ->fields(array(
          'nid' => $node->nid,
          'invoice_number' => $node->field_invoice_number['und'][0]['value'],
          'invoice_date' => $node->field_invoice_date['und'][0]['value'] ? $node->field_invoice_date['und'][0]['value'] : 0,
          'truck_no' => $node->field_truck_no['und'][0]['value'],
          'from_location' => $node->field_from_location['und'][0]['value'],
          'unloading_date' => $node->field_unloading_date['und'][0]['value'] ? $node->field_unloading_date['und'][0]['value'] : 0,
          'unloading_start_time' => $node->field_unloading_start_time['und'][0]['value'] ? $node->field_unloading_start_time['und'][0]['value'] : 0,
          'unloading_end_time' => $node->field_unloading_end_time['und'][0]['value'] ? $node->field_unloading_end_time['und'][0]['value'] : 0,
          'status' => $status,
          'egir_date' => $node->field_egir_date['und'][0]['value'] ? $node->field_egir_date['und'][0]['value'] : 0,
          'egir_start_time' => $node->field_egir_start_time['und'][0]['value'] ? $node->field_egir_start_time['und'][0]['value'] : 0,
          'egir_end_time' => $node->field_egir_end_time['und'][0]['value'] ? $node->field_egir_end_time['und'][0]['value'] : 0,
          'egir_end_cutoff' => $egir_cutoff_seconds ? $egir_cutoff_seconds : 0,
          'unloading_end_cutoff' => $unloading_cutoff_seconds ? $unloading_cutoff_seconds : 0,
          'tdp' => $node->TDP,
          'moc' => $node->MOC,
          'unloading_compliance' => $node->unloading_end_time_cutOff,
          'egir_complaince' => $node->compliance,
        ))
        ->execute();
  }

  
}

/**
 * 
 * @param type $node
 * Implements hook_delete
 */
function change_feeds_import_node_delete($node) {
  // Delete Nid's entry from  party_packing Flat table  on deletion of Party Packing Node
  if ($node->type == 'party_packing') {
    db_delete('flat_party_packing')
        ->condition('nid', $node->nid)
        ->execute();
  }
  // Delete Nid's entry from  EGIR Flat table  on deletion of EGIR Node
  if ($node->type == 'egir') {
    db_delete('flat_unloading')
        ->condition('nid', $node->nid)
        ->execute();
  }

  // Delete Nid's entry from  packing Flat table  on deletion of EGIR Node
  if ($node->type == 'picking') {
    db_delete('flat_picking')
        ->condition('nid', $node->nid)
        ->execute();
  }

  // Delete Nid's entry from  OTIF Flat table  on deletion of EGIR Node
  if ($node->type == 'billing_data') {
    db_delete('flat_billing_data')
        ->condition('nid', $node->nid)
        ->execute();
  }
}

/**
 * 
 * @param FeedsSource $source
 * Implements hook_feeds_after_import(FeedsSource $source)
 */
function change_feeds_import_feeds_after_import(FeedsSource $source) {
  if ($source->id == 'billing_data') { // if importing through billing_data (create party_packing nodes)  
    $batch = array(
      'operations' => array(
        array('change_feeds_import_create_party_packing', array()),
      ),
      'finished' => 'change_feeds_import_finished',
      'title' => t('Creating Party Packing'),
      'init_message' => t('Party Packing Batch Creation is starting.'),
      'progress_message' => t('Processed @current out of @total.'),
      'error_message' => t('Party Packing Batch has encountered an error.')
    );
    batch_set($batch);
    $batch = array(
      'operations' => array(
        array('change_feeds_import_create_picking', array()),
      ),
      'finished' => 'change_feeds_import_finished',
      'title' => t('Creating  Picking'),
      'init_message' => t('Picking Batch Creation is starting.'),
      'progress_message' => t('Processed @current out of @total.'),
      'error_message' => t('Picking Batch has encountered an error.')
    );
    batch_set($batch);
  }
}

function change_feeds_import_create_party_packing(&$context) {
  if (!isset($context['sandbox']['progress'])) {
    $query = db_select('node', 'n');
    $query->innerjoin('field_data_field_vehicle', 'v', 'v.entity_id = n.nid');
    $query->innerjoin('field_data_field_loading_date', 'l', 'l.entity_id = n.nid');
    $query->innerjoin('field_data_field_sku7_code', 's', 's.entity_id = n.nid');
    $query->innerjoin('field_data_field_sum_of_total_sales_qty', 't', 't.entity_id = n.nid');
    $query->fields('v', array('field_vehicle_value'));
    $query->groupBy('v.field_vehicle_value');
    $query->fields('l', array('field_loading_date_value'));
    $query->groupBy('l.field_loading_date_value');
    $query->fields('s', array('field_sku7_code_value'));
    $query->fields('n', array('created', 'nid'));
    $query->addExpression('sum(t.field_sum_of_total_sales_qty_value)', 'total_qty');
    $query->addExpression('count(s.field_sku7_code_value)', 'sku_count');
    $query->addExpression('count(distinct(s.field_sku7_code_value))', 'unique_count');
    $query->condition('n.type', 'billing_data');
    $result = $query->execute()->fetchAll();
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_node'] = 0;
    $context['sandbox']['max'] = count($result);
    $context['sandbox']['result'] = $result;
  }
  global $user;
  $res = $context['sandbox']['result'];

  for ($i = $context['sandbox']['progress']; $i < $context['sandbox']['progress'] + 50 && $i < $context['sandbox']['max']; $i++) {
    $key = $i;
    $val = $res[$key];
    $node = new stdClass();
    $node->title = $val->field_vehicle_value . format_date(time());
    $node->type = "party_packing";
    node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
    $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
    $node->uid = $user->uid;
    $node->status = 1; //(1 or 0): published or not
    $node->comment = 1; // 0 = comments disabled, 1 = read only, 2 = read/write
    $node->field_party_packing_vehicle[$node->language][0]['value'] = $val->field_vehicle_value;
    $node->field_party_packing_loading_date[$node->language][0]['value'] = $val->field_loading_date_value;
    //$node->field_party_packing_date[$node->language][0]['value'] = $val->created;
    $node->field_loading_sheet_line[$node->language][0]['value'] = $val->unique_count;
    $node->field_bill_lines[$node->language][0]['value'] = $val->sku_count;
    $node->field_each_units[$node->language][0]['value'] = $val->total_qty;

    $node = node_submit($node); // Prepare node for saving
    node_save($node);
  }
  $context['sandbox']['progress'] = $i;

  if ($context['sandbox']['progress'] < $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
  else {
    $context['finished'] = 1;
  }
}

function change_feeds_import_create_picking(&$context) {
  if (!isset($context['sandbox']['progress'])) {
    $query = db_select('field_data_field_vehicle', 'v');
    $query->condition('v.bundle', 'billing_data', '=');
    $query->join('field_data_field_loading_date', 'date', 'date.entity_id = v.entity_id');
    $query->condition('date.bundle', 'billing_data', '=');
    $query->join('field_data_field_sku7_code', 'sc', 'sc.entity_id = v.entity_id');
    $query->condition('sc.bundle', 'billing_data', '=');
    $query->join('field_data_field_sku7_code', 'gaisc', 'gaisc.field_sku7_code_value = sc.field_sku7_code_value');
    $query->condition('gaisc.bundle', 'sku7_code_master', '=');
    $query->join('field_data_field_godown_area_id', 'gai', 'gaisc.entity_id = gai.entity_id');
    $query->condition('gai.bundle', 'sku7_code_master', '=');
    $query->join('field_data_field_sum_of_total_sales_qty', 'stsq', 'stsq.entity_id = v.entity_id');
    $query->condition('stsq.bundle', 'billing_data', '=');
    $query->join('field_data_field_pack_size', 'fps', 'fps.entity_id = gaisc.entity_id');
    $query->condition('fps.bundle', 'sku7_code_master', '=');
    $query->fields('v', array('field_vehicle_value'));
    $query->fields('date', array('field_loading_date_value'));
    $query->fields('sc', array('field_sku7_code_value'));
    $query->fields('gai', array('field_godown_area_id_value'));
    $query->fields('fps', array('field_pack_size_value'));
    //$query->fields('stsq', array('field_sum_of_total_sales_qty_value'));
    // $query->condition('n.type', 'billing_data', '=');
    // $query->condition('gai.bundle', 'sku7_code_master', '=');
    // $query->condition('sc.bundle', 'billing_data', '=');
    //$query ->groupBy('stsq.field_sum_of_total_sales_qty_value');
    $query->addExpression('SUM(stsq.field_sum_of_total_sales_qty_value)', 'total_sales_qty');
    $query->addExpression('floor(SUM(stsq.field_sum_of_total_sales_qty_value) / field_pack_size_value)', 'cld');
    $query->addExpression('SUM(stsq.field_sum_of_total_sales_qty_value) - (field_pack_size_value * floor(SUM(stsq.field_sum_of_total_sales_qty_value) / field_pack_size_value))', 'eaches');
    $query->groupBy('field_vehicle_value,field_loading_date_value,field_sku7_code_value,field_godown_area_id_value');
    $subquery = db_select($query, 'middle');
    $subquery->fields('middle');
    $subquery->addExpression('COUNT(cld)', 'cld_lines');
    $subquery->addExpression('COUNT(eaches)', 'eaches_lines');
    $subquery->addExpression('SUM(cld)', 'total_cld');
    $subquery->addExpression('SUM(eaches)', 'total_eaches');
    $subquery->groupBy('field_vehicle_value,field_loading_date_value,field_godown_area_id_value');
    $results = $subquery->execute()->fetchAll();
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_node'] = 0;
    $context['sandbox']['max'] = count($results);
    $context['sandbox']['result'] = $results;
  }
  global $user;
  $res = $context['sandbox']['result'];

  for ($i = $context['sandbox']['progress']; $i < $context['sandbox']['progress'] + 50 && $i < $context['sandbox']['max']; $i++) {
    $key = $i;
    $val = $res[$key];
    if ($val->total_cld > 0 || $val->total_eaches > 0) {
      $node = new stdClass();
      $node->title = $val->field_vehicle_value . format_date(time());
      $node->type = "picking";
      node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
      $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
      $node->uid = $user->uid;
      $node->status = 1; //(1 or 0): published or not
      $node->comment = 1; // 0 = comments disabled, 1 = read only, 2 = read/write

      $node->field_picking_van_id[$node->language][0]['value'] = $val->field_vehicle_value;
      $node->field_picking_loading_date[$node->language][0]['value'] = $val->field_loading_date_value;
      $node->field_picking_godown_area_id[$node->language][0]['value'] = $val->field_godown_area_id_value;

      $node->field_pick_units[$node->language][0]['value'] = $val->total_eaches;
      $node->field_pick_clds[$node->language][0]['value'] = $val->total_cld;
      $node_copy = clone $node;
      $node_copy->is_new = true;
      if ($val->total_eaches > 0) {
        $node->field_picking_picking_type[$node->language][0]['value'] = 'Loose';
        $node->field_pick_lines[$node->language][0]['value'] = $val->eaches_lines;
        $node->field_pick_clds[$node->language][0]['value'] = 0;
        node_save($node);
      }
      if ($val->total_cld > 0) {
        $node_copy->field_picking_picking_type[$node->language][0]['value'] = 'Bulk';
        $node_copy->field_pick_lines[$node->language][0]['value'] = $val->cld_lines;
        $node_copy->field_pick_units[$node->language][0]['value'] = 0;
        node_save($node_copy);
      }
    }
  }
  $context['sandbox']['progress'] = $i;

  if ($context['sandbox']['progress'] < $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
  else {
    $context['finished'] = 1;
  }
}

/**
 * 
 * Implements hook_feeds_presave($source, $entity, $item)
 */
function change_feeds_import_feeds_presave($source, $entity, $item) {

  /* if (($entity->field_mrp[LANGUAGE_NONE] < 0 && !is_numeric($entity->field_mrp[LANGUAGE_NONE])) || (($entity->field_tur[LANGUAGE_NONE]) < 0 && !is_numeric($entity->field_tur[LANGUAGE_NONE])) || ($entity->field_sum_of_total_sales_qty[LANGUAGE_NONE] < 0 && !is_numeric($entity->field_sum_of_total_sales_qty[LANGUAGE_NONE])) || ($entity->field_sum_of_total_sales_ret_qty[LANGUAGE_NONE] < 0 && !is_numeric($entity->field_sum_of_total_sales_ret_qty[LANGUAGE_NONE])) || ($entity->field_sum_of_net_sales_qty[LANGUAGE_NONE] < 0 && !is_numeric($entity->field_sum_of_net_sales_qty[LANGUAGE_NONE])) || ($entity->field_sum_of_sales_free_qty[LANGUAGE_NONE] < 0 && !is_numeric($entity->field_sum_of_sales_free_qty[LANGUAGE_NONE])) || ($entity->field_sum_of_sales_ret_free_qty[LANGUAGE_NONE] < 0 && !is_numeric($entity->field_sum_of_sales_ret_free_qty[LANGUAGE_NONE])) || ($entity->field_sum_of_sales_value[LANGUAGE_NONE] < 0 && !is_numeric($entity->field_sum_of_sales_value[LANGUAGE_NONE])) || ($entity->field_sum_of_sales_ret_value[LANGUAGE_NONE] < 0 && !is_numeric($entity->field_sum_of_sales_ret_value[LANGUAGE_NONE])) || ($entity->field_sum_of_net_sales_value[LANGUAGE_NONE] < 0 && !is_numeric($entity->field_sum_of_net_sales_value[LANGUAGE_NONE])) || ($entity->field_suggested_order_quantity[LANGUAGE_NONE] < 0 && !is_numeric($entity->field_suggested_order_quantity[LANGUAGE_NONE])) || ($entity->field_actual_order_quantity[LANGUAGE_NONE] < 0 && !is_numeric($entity->field_actual_order_quantity[LANGUAGE_NONE])) || ($entity->field_bill_quantity[LANGUAGE_NONE] < 0 && !is_numeric($entity->field_bill_quantity[LANGUAGE_NONE]))) {

    $entity->feeds_item->skip = TRUE;

    } */
  if ($entity->type == 'ccfot') {
    if (empty($entity->field_bill_quantity[LANGUAGE_NONE])) {
      $entity->feeds_item->skip = TRUE;
    }
    if ($entity->field_actual_order_quantity[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
    if ($entity->field_suggested_order_quantity[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
  }
  if (($entity->type == 'billing_data') || ($entity->type == 'return_bill')) {
    if ($entity->field_sum_of_net_sales_value[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
    if ($entity->field_sum_of_sales_ret_value[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
    if ($entity->field_sum_of_sales_value[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
    if ($entity->field_mrp[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
    if ($entity->field_tur[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
    if ($entity->field_sum_of_total_sales_qty[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
    if ($entity->field_sum_of_total_sales_ret_qty[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
    if ($entity->field_sum_of_net_sales_qty[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
    if ($entity->field_sum_of_sales_free_qty[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
    if ($entity->field_sum_of_sales_ret_free_qty[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
    }
  }
}

function change_feeds_import_views_api() {
  return array(
    'api' => '3.0',
    'path' => drupal_get_path('module', 'change_feeds_import') . '/views',
  );
}

/**
 * Implements hook_node_presave()
 */
function change_feeds_import_node_presave($node) {
  if ($node->type == 'billing_data') {
    $loading_date = $node->field_loading_date['und'][0]['value'];
    $loading_date_stamp = strtotime($loading_date);
    $billing_loading_month = date("l", strtotime($loading_date));
    switch ($billing_loading_month) {
      case "Monday":
        $promised_delivery_date_stamp = strtotime("+2 day", $loading_date_stamp);
        $promised_delivery_date = date('Y-m-d', $promised_delivery_date_stamp);
        $node->field_promised_delivery_date[LANGUAGE_NONE][0]['value'] = $promised_delivery_date;
        break;
      case "Tuesday":
        $promised_delivery_date_stamp = strtotime("+2 day", $loading_date_stamp);
        $promised_delivery_date = date('Y-m-d', $promised_delivery_date_stamp);
        $node->field_promised_delivery_date[LANGUAGE_NONE][0]['value'] = $promised_delivery_date;
        break;
      case "Wednesday":
        $promised_delivery_date_stamp = strtotime("+2 day", $loading_date_stamp);
        $promised_delivery_date = date('Y-m-d', $promised_delivery_date_stamp);
        $node->field_promised_delivery_date[LANGUAGE_NONE][0]['value'] = $promised_delivery_date;
        break;
      case "Thursday":
        $promised_delivery_date_stamp = strtotime("+2 day", $loading_date_stamp);
        $promised_delivery_date = date('Y-m-d', $promised_delivery_date_stamp);
        $node->field_promised_delivery_date[LANGUAGE_NONE][0]['value'] = $promised_delivery_date;
        break;
      case "Friday":
        $promised_delivery_date_stamp = strtotime("+3 day", $loading_date_stamp);
        $promised_delivery_date = date('Y-m-d', $promised_delivery_date_stamp);
        $node->field_promised_delivery_date[LANGUAGE_NONE][0]['value'] = $promised_delivery_date;
        break;
      case "Saturday":
        $promised_delivery_date_stamp = strtotime("+3 day", $loading_date_stamp);
        $promised_delivery_date = date('Y-m-d', $promised_delivery_date_stamp);
        $node->field_promised_delivery_date[LANGUAGE_NONE][0]['value'] = $promised_delivery_date;
        break;
      case "Sunday":
        $promised_delivery_date_stamp = strtotime("+2 day", $loading_date_stamp);
        $promised_delivery_date = date('Y-m-d', $promised_delivery_date_stamp);
        $node->field_promised_delivery_date[LANGUAGE_NONE][0]['value'] = $promised_delivery_date;
        break;
    }
  }
}
