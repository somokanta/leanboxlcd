<?php

/**
 * 
 * @param FeedsSource $source
 * Implements hook_feeds_after_import(FeedsSource $source)
 */
function change_feeds_import_feeds_after_import(FeedsSource $source) {
  if ($source->id == 'billing_data') {
    $query = db_select('node', 'n');
    $query->innerjoin('field_data_field_vehicle', 'v', 'v.entity_id = n.nid');
    $query->innerjoin('field_data_field_loading_date', 'l', 'l.entity_id = n.nid');
    $query->innerjoin('field_data_field_sku7_code', 's', 's.entity_id = n.nid');
    $query->innerjoin('field_data_field_sum_of_total_sales_qty', 't', 't.entity_id = n.nid');
    $query->fields('v', array('field_vehicle_value'));
    $query->fields('l', array('field_loading_date_value'));
    $query->fields('s', array('field_sku7_code_value'));
    $query->fields('t', array('field_sum_of_total_sales_qty_value'));
    $query->fields('n', array('created', 'nid'));
    $query->condition('n.type', 'billing_data');
    $result = $query->execute()->fetchAll();

    foreach ($result as $key => $value) {
      $vehicle = $value->field_vehicle_value;
      $loading_date = $value->field_loading_date_value;
      $sku = $value->field_sku7_code_value;
      $total_qty = $value->field_sum_of_total_sales_qty_value;
      $unique = "unique";
      $total = "total";
      $created = $value->created;
      if (isset($res[$vehicle . "/" . $loading_date . "/" . $created])) {
        $res[$vehicle . "/" . $loading_date . "/" . $created]['sku_count'] ++;
        $res[$vehicle . "/" . $loading_date . "/" . $created]['total_count'] += $total_qty;
        $unique_sku_string = $vehicle . "" . $loading_date . "" . $sku;
        if ($temp_unique_sku_string != $unique_sku_string) {
          $res[$vehicle . "/" . $loading_date . "/" . $created]['unique_count'] ++;
          $temp_unique_sku_string = $vehicle . "" . $loading_date . "" . $sku;
        }
      }
      else {
        $res[$vehicle . "/" . $loading_date . "/" . $created] = array();
        $res[$vehicle . "/" . $loading_date . "/" . $created]['sku_count'] = 1;
        $res[$vehicle . "/" . $loading_date . "/" . $created]['total_count'] = $total_qty;
        $temp_unique_sku_string = $vehicle . "" . $loading_date . "" . $sku;
        $res[$vehicle . "/" . $loading_date . "/" . $created]['unique_count'] = 1;
      }
    }

    foreach ($res as $key => $val) {
      global $user;
      $rr = explode("/", $key);
      $vehicle = $rr[0];
      $loading_date = $rr[1];
      $created_date = date('Y-m-d H:i:s', $rr[2]);
      $distint_sku_count = $val['unique_count'];
      $sku_count = $val['sku_count'];
      $total_qty_count = $val['total_count'];
      $node = new stdClass();
      $node->title = $vehicle . format_date(time());
      $node->type = "party_packing";
      node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
      $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
      $node->uid = $user->uid;
      $node->status = 1; //(1 or 0): published or not
      $node->comment = 1; // 0 = comments disabled, 1 = read only, 2 = read/write
      // Term reference (taxonomy) field

      $node->field_party_packing_vehicle[$node->language][0]['value'] = $vehicle;
      $node->field_party_packing_loading_date[$node->language][0]['value'] = $loading_date;
      $node->field_party_packing_date[$node->language][0]['value'] = $created_date;
      $node->field_loading_sheet_line[$node->language][0]['value'] = $distint_sku_count;
      $node->field_bill_lines[$node->language][0]['value'] = $sku_count;
      $node->field_each_units[$node->language][0]['value'] = $total_qty_count;

      $node = node_submit($node); // Prepare node for saving
      node_save($node);
    }

  
    $query = db_select('node', 'n');
    $query->join('field_data_field_vehicle', 'v', 'v.entity_id = n.nid');
    $query->join('field_data_field_loading_date', 'date', 'date.entity_id = n.nid');
    $query->join('field_data_field_sku7_code', 'sc', 'sc.entity_id = n.nid');
    $query->join('field_data_field_sku7_code', 'gaisc', 'gaisc.field_sku7_code_value = sc.field_sku7_code_value');
    $query->join('field_data_field_godown_area_id', 'gai', 'gaisc.entity_id = gai.entity_id');
    $query->join('field_data_field_sum_of_total_sales_qty', 'stsq', 'stsq.entity_id = n.nid');
    $query->join('field_data_field_pack_size', 'fps', 'fps.entity_id = gaisc.entity_id');
    $query->fields('v', array('field_vehicle_value'));
    $query->fields('date', array('field_loading_date_value'));
    $query->fields('sc', array('field_sku7_code_value'));
    $query->fields('gai', array('field_godown_area_id_value'));
    $query->fields('fps', array('field_pack_size_value'));
    //$query->fields('stsq', array('field_sum_of_total_sales_qty_value'));
    $query ->condition('n.type', 'billing_data', '=');
    $query ->condition('gai.bundle', 'sku7_code_master', '=');
    $query ->condition('sc.bundle', 'billing_data', '=');
    //$query ->groupBy('stsq.field_sum_of_total_sales_qty_value');
    $query->addExpression('SUM(stsq.field_sum_of_total_sales_qty_value)', 'total_sales_qty');
    $query->addExpression('floor(SUM(stsq.field_sum_of_total_sales_qty_value) / field_pack_size_value)', 'cld');
    $query->addExpression('SUM(stsq.field_sum_of_total_sales_qty_value) - (field_pack_size_value * floor(SUM(stsq.field_sum_of_total_sales_qty_value) / field_pack_size_value))', 'eaches');
    $query ->groupBy('field_vehicle_value,field_loading_date_value,field_sku7_code_value,field_godown_area_id_value');
    $results = $query->execute()->fetchAll();

    $subquery = db_select($query,'middle');
    $subquery->fields('middle');
    $subquery->addExpression('SUM(cld)', 'total_cld');
    $subquery->addExpression('SUM(eaches)', 'total_eaches');
    $subquery ->groupBy('field_vehicle_value,field_loading_date_value,field_godown_area_id_value');
    $results = $subquery->execute()->fetchAll();

    foreach ($results as $key => $val) {
      if ($val->total_cld > 0 || $val->total_eaches > 0) {
          global $user;
          $node = new stdClass();
          $node->title = $val->field_vehicle_value . format_date(time());
          $node->type = "picking";
          node_object_prepare($node); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
          $node->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
          $node->uid = $user->uid;
          $node->status = 1; //(1 or 0): published or not
          $node->comment = 1; // 0 = comments disabled, 1 = read only, 2 = read/write

          $node->field_picking_van_id[$node->language][0]['value'] = $val->field_vehicle_value;
          $node->field_picking_loading_date[$node->language][0]['value'] = $val->field_loading_date_value;
          $node->field_picking_godown_area_id[$node->language][0]['value'] = $val->field_godown_area_id_value;
     
          $node->field_pick_units[$node->language][0]['value'] = $val->total_eaches;
          $node->field_pick_clds[$node->language][0]['value'] = $val->total_cld;
          $node_copy = $node;
          if ($val->total_eaches > 0) {
             $node->field_picking_picking_type[$node->language][0]['value'] = 'Loose';
             node_save($node);
          }
          if ($val->total_cld > 0) {
             $node_copy->field_picking_picking_type[$node->language][0]['value'] = 'Bulk';
             node_save($node_copy);
          }
      }
    }
  }

}


function change_feeds_import_feeds_presave($source, $entity, $item) {
 dsm($source);
  /*if (($entity->field_mrp[LANGUAGE_NONE] < 0 && !is_numeric($entity->field_mrp[LANGUAGE_NONE])) || (($entity->field_tur[LANGUAGE_NONE]) < 0 && !is_numeric($entity->field_tur[LANGUAGE_NONE])) || ($entity->field_sum_of_total_sales_qty[LANGUAGE_NONE] < 0 && !is_numeric($entity->field_sum_of_total_sales_qty[LANGUAGE_NONE])) || ($entity->field_sum_of_total_sales_ret_qty[LANGUAGE_NONE] < 0 && !is_numeric($entity->field_sum_of_total_sales_ret_qty[LANGUAGE_NONE])) || ($entity->field_sum_of_net_sales_qty[LANGUAGE_NONE] < 0 && !is_numeric($entity->field_sum_of_net_sales_qty[LANGUAGE_NONE])) || ($entity->field_sum_of_sales_free_qty[LANGUAGE_NONE] < 0 && !is_numeric($entity->field_sum_of_sales_free_qty[LANGUAGE_NONE])) || ($entity->field_sum_of_sales_ret_free_qty[LANGUAGE_NONE] < 0 && !is_numeric($entity->field_sum_of_sales_ret_free_qty[LANGUAGE_NONE])) || ($entity->field_sum_of_sales_value[LANGUAGE_NONE] < 0 && !is_numeric($entity->field_sum_of_sales_value[LANGUAGE_NONE])) || ($entity->field_sum_of_sales_ret_value[LANGUAGE_NONE] < 0 && !is_numeric($entity->field_sum_of_sales_ret_value[LANGUAGE_NONE])) || ($entity->field_sum_of_net_sales_value[LANGUAGE_NONE] < 0 && !is_numeric($entity->field_sum_of_net_sales_value[LANGUAGE_NONE])) || ($entity->field_suggested_order_quantity[LANGUAGE_NONE] < 0 && !is_numeric($entity->field_suggested_order_quantity[LANGUAGE_NONE])) || ($entity->field_actual_order_quantity[LANGUAGE_NONE] < 0 && !is_numeric($entity->field_actual_order_quantity[LANGUAGE_NONE])) || ($entity->field_bill_quantity[LANGUAGE_NONE] < 0 && !is_numeric($entity->field_bill_quantity[LANGUAGE_NONE]))) {

      $entity->feeds_item->skip = TRUE;

  }*/
  if ($entity->type == 'ccfot') {
    dsm($entity->type);
    if (empty($entity->field_bill_quantity[LANGUAGE_NONE])) {
        $entity->feeds_item->skip = TRUE;
    }
    if ($entity->field_actual_order_quantity[LANGUAGE_NONE] == NULL) {
        $entity->feeds_item->skip = TRUE;
    }
    if ($entity->field_suggested_order_quantity[LANGUAGE_NONE] == NULL) {
        $entity->feeds_item->skip = TRUE;
    }
  }
  if ($entity->type == 'billing_data') {
  // if ($entity->field_sum_of_net_sales_value[LANGUAGE_NONE] == NULL) {
  //     $entity->feeds_item->skip = TRUE;
  // }
  // if ($entity->field_sum_of_sales_ret_value[LANGUAGE_NONE] == NULL) {
  //     $entity->feeds_item->skip = TRUE;
  // }
  // if ($entity->field_sum_of_sales_value[LANGUAGE_NONE] == NULL) {
  //     $entity->feeds_item->skip = TRUE;
  // }
    if ($entity->field_mrp[LANGUAGE_NONE] == NULL) {
        $entity->feeds_item->skip = TRUE;
    }
  if ($entity->field_tur[LANGUAGE_NONE] == NULL) {
      $entity->feeds_item->skip = TRUE;
  }
  // if ($entity->field_sum_of_total_sales_qty[LANGUAGE_NONE] == NULL) {
  //     $entity->feeds_item->skip = TRUE;
  // }
  // if ($entity->field_sum_of_total_sales_ret_qty[LANGUAGE_NONE] == NULL) {
  //     $entity->feeds_item->skip = TRUE;
  // }
  // if ($entity->field_sum_of_net_sales_qty[LANGUAGE_NONE] == NULL) {
  //     $entity->feeds_item->skip = TRUE;
  // }
  // if ($entity->field_sum_of_sales_free_qty[LANGUAGE_NONE] == NULL) {
  //     $entity->feeds_item->skip = TRUE;
  // }
  // if ($entity->field_sum_of_sales_ret_free_qty[LANGUAGE_NONE] == NULL) {
  //     $entity->feeds_item->skip = TRUE;
  // }
  }
}

/**
 * Implements hook_ctools_plugin_directory().
 */
//function change_feeds_import_ctools_plugin_directory($module, $plugin){

  //watchdog('owner_null', $owner);
  //watchdog('plugin_type_null', $plugin_type);
  //if ($module == 'block_plugin') {
    //return 'plugins/' . $plugin;
  //}
//}
