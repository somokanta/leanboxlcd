<?php

module_load_include('inc', 'change_feeds_import', 'form/upload_billing_data');
global $table_name;
global $table_column;
$table_name = 'field_data_field_distributor_name';
$table_column = 'field_distributor_name_value';
/*
 *  hook_permission()
 */

function change_feeds_import_permission() {
    return array(
        'Distributor Upload File' => array(
            'title' => t('Distributor Upload File'),
            'description' => t('Distributor Upload File')
        ),
        'Distributor Upload File DFE and RS admin wise' => array(
            'title' => t('Distributor Upload File DFE and RS admin wise'),
            'description' => t('Distributor Upload File DFE and RS admin wise')
        ),
        'Delete Billing Data' => array(
            'title' => t('Delete Billing Data'),
            'description' => t('Delete Billing Data')
        ),
    );
}

/**
 * Implments hook_menu
 *
 */
function change_feeds_import_menu() {
    $items = array();

    $items['update-billing-data'] = array(
        'title' => 'Update Billing Data',
        'page callback' => 'update_billing_data',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['update-billing-data-thankyou'] = array(
        'title' => 'Update Billing Data Thankyou',
        'page callback' => 'update_billing_data_thankyou',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );


    // Manually Delete Billing Data
    $items['delete-billing-data'] = array(
        'title' => 'Delete Billing Data',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('delete_billing_form'),
        'access arguments' => array('Delete Billing Data'),
        'type' => MENU_CALLBACK,
    );

    $items['impact-delivery-cron'] = array(
        'title' => 'Impact Delivery Report',
        'page callback' => 'impact_delivery_cron',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );
    $items['impact-delivery-partypack-cron'] = array(
        'title' => 'Partypack cron Report',
        'page callback' => 'impact_delivery_partypack_cron',
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    $items['drs-report'] = array(
        'title' => 'DRS Report',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('get_data_of_trip_id_form'),
        'access arguments' => array('Distributor Upload File'),
        'type' => MENU_CALLBACK,
    );



    $items['download-pdf/%'] = array(
        'title' => 'Download PDF',
        'page callback' => 'download_pdf',
        'page arguments' => array(1),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );


    $items['drs-report2'] = array(
        'title' => 'DRS Report',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('get_data_of_trip_id_2_form'),
        'access arguments' => array('Distributor Upload File'),
        'type' => MENU_CALLBACK,
    );


    $items['download-pdf2/%'] = array(
        'title' => 'Download PDF',
        'page callback' => 'download_pdf2',
        'page arguments' => array(1),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    // setting form for flat table
    $items['admin/config/flat-table'] = array(
        'title' => 'Setting Form For Flat Table',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('change_feeds_import_setting_form'),
        'access callback' => 'check_if_fr_role_user_admin',
    );

    // Upload form for sales register data
    $items['outlet-area-hook/import'] = array(
        'title' => 'Outlet Area Hook',
        'description' => 'Import Outlet Area Hook',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('change_feeds_import_outlet_area_hook_form'),
        'access arguments' => array('Distributor Upload File DFE and RS admin wise'),
        'file' => 'form/outlet_area_hook.inc',
    );

    $items['outlet-area-hook-confirm/%'] = array(
        'title' => 'Outlet Area Hook Confirm Table',
        'description' => 'Outlet Area Hook Confirm Table',
        'page callback' => 'change_feeds_import_outlet_area_hook_confirm_content',
        'page arguments' => array(1),
        'access arguments' => array('Distributor Upload File'),
        'file' => 'form/outlet_area_hook.inc',
    );

    // when confirm is clicked
    $items['outlet-area-hook-confirm/create_content/%'] = array(
        'title' => 'Outlet content',
        'description' => 'Outlet Area Hook create Update node of outlet_master',
        'page callback' => 'change_feeds_import_outlet_area_hook_create_confirm_content',
        'page arguments' => array(2),
        'access arguments' => array('Distributor Upload File'),
        'file' => 'form/outlet_area_hook.inc',
    );

    // when discard is clicked
    $items['outlet-area-hook-discard/%'] = array(
        'title' => 'Outlet Area Hook delete',
        'description' => 'Outlet Area Hook Data',
        'page callback' => 'change_feeds_import_outlet_area_hook_discard_data',
        'page arguments' => array(1),
        'access arguments' => array('Distributor Upload File'),
        'file' => 'form/outlet_area_hook.inc',
    );

    // Upload form for sales register data
    $items['sales-delivery-data/import'] = array(
        'title' => 'Sales Delivery Data',
        'description' => 'Import Sales Delivery Data',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('change_feeds_import_sales_delivery_form'),
        'access arguments' => array('Distributor Upload File'),
        'file' => 'form/sales_delivery_data.inc',
    );

    // Upload form for sales register data
    $items['sales-delivery-data1/import'] = array(
        'title' => 'Sales Delivery Data',
        'description' => 'Import Sales Delivery Data',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('change_feeds_import_sales_delivery1_form'),
        'access arguments' => array('Distributor Upload File'),
        'file' => 'form/sales_delivery_data.inc',
    );


    $items['sales-delivery-data-confirm/%'] = array(
        'title' => 'Sales Delivery Data  Confirm Table',
        'description' => 'Sales Delivery Data Confirm Table',
        'page callback' => 'change_feeds_import_sales_delivery_confirm_content',
        'page arguments' => array(1),
        'access arguments' => array('Distributor Upload File'),
        'file' => 'form/sales_delivery_data.inc',
    );

    // when confirm is clicked
    $items['sales-delivery-data-confirm/create_content/%'] = array(
        'title' => 'Sales Delivery content',
        'description' => 'Sales Delivery Data create node of sales register',
        'page callback' => 'change_feeds_import_sales_delivery_create_confirm_content',
        'page arguments' => array(2),
        'access arguments' => array('Distributor Upload File'),
        'file' => 'form/sales_delivery_data.inc',
    );

    // when discard is clicked
    $items['sales-delivery-data-discard/%'] = array(
        'title' => 'Sales Delivery data delete',
        'description' => 'Sales Delivery delete Data',
        'page callback' => 'change_feeds_import_sales_delivery_discard_data',
        'page arguments' => array(1),
        'access arguments' => array('Distributor Upload File'),
        'file' => 'form/sales_delivery_data.inc',
    );

    // Upload form for sales register data
    $items['outstanding-activity/import'] = array(
        'title' => 'Import Outstanding Activity Data',
        'description' => 'Import Outstanding Activity Node',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('change_feeds_import_outstanding_activity_form'),
        'access arguments' => array('Distributor Upload File'),
        'file' => 'form/outstanding_activity_data.inc',
    );

    $items['outstanding-activity-confirm/%'] = array(
        'title' => 'Outstanding Activity  Confirm Table',
        'description' => 'Outstanding Activity  Confirm Table',
        'page callback' => 'change_feeds_import_outstanding_activity_confirm_content',
        'page arguments' => array(1),
        'access arguments' => array('Distributor Upload File'),
        'file' => 'form/outstanding_activity_data.inc',
    );

    // when confirm is clicked
    $items['outstanding-activity-confirm/create_content/%'] = array(
        'title' => 'confirm',
        'description' => 'Confirm to create Outstanding Activity contents',
        'page callback' => 'change_feeds_import_outstanding_activity_create_confirm_content',
        'page arguments' => array(2),
        'access arguments' => array('Distributor Upload File'),
        'file' => 'form/outstanding_activity_data.inc',
    );

    // when discard is clicked
    $items['outstanding-activity-discard/%'] = array(
        'title' => 'Outstanding Activity delete',
        'description' => 'Outstanding Activity delete Data',
        'page callback' => 'change_feeds_import_outstanding_activity_discard_data',
        'page arguments' => array(1),
        'access arguments' => array('Distributor Upload File'),
        'file' => 'form/outstanding_activity_data.inc',
    );

    // Upload form for sales register data
    $items['sales-register/import'] = array(
        'title' => 'Import Sales Register Data',
        'description' => 'Import Sales Register Data Node',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('change_feeds_import_sales_register_form'),
        'access arguments' => array('Distributor Upload File'),
        'file' => 'form/sales_register_data.inc',
    );



    $items['sales-confirm/%'] = array(
        'title' => 'Sales Confirm Table',
        'description' => 'Sales Register Confirm Table',
        'page callback' => 'change_feeds_import_sales_confirm_content',
        'page arguments' => array(1),
        'access arguments' => array('Distributor Upload File'),
        'file' => 'form/sales_register_data.inc',
    );



    // when confirm is clicked
    $items['sales-confirm/create_content/%'] = array(
        'title' => 'confirm',
        'description' => 'Confirm to create sales register contents',
        'page callback' => 'change_feeds_import_sales_create_confirm_content',
        'page arguments' => array(2),
        'access arguments' => array('Distributor Upload File'),
        'file' => 'form/sales_register_data.inc',
    );

    // when discard is clicked
    $items['sales-discard/%'] = array(
        'title' => 'sales Discard',
        'description' => 'sales Discard Data',
        'page callback' => 'change_feeds_import_sales_discard_data',
        'page arguments' => array(1),
        'access arguments' => array('Distributor Upload File'),
        'file' => 'form/sales_register_data.inc',
    );


    // Upload form for Area Hook Group Master.
    $items['area-hook-grp/import'] = array(
        'title' => 'Area Hook Group Master',
        'description' => 'Import Area Hook Group Master Data',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('change_feeds_import_area_hook_grp_form'),
        'access arguments' => array('Distributor Upload File DFE and RS admin wise'),
        'file' => 'form/area_hook_grp_data.inc',
    );


    $items['area-hook-grp-confirm/%'] = array(
        'title' => 'Area Hook Group Master Confirm Table',
        'description' => 'Area Hook Group Master Confirm Table',
        'page callback' => 'change_feeds_import_area_hook_grp_confirm_content',
        'page arguments' => array(1),
        'access arguments' => array('Distributor Upload File'),
        'file' => 'form/area_hook_grp_data.inc',
    );

    // when confirm is clicked
    $items['area-hook-grp-confirm/create_content/%'] = array(
        'title' => 'confirm',
        'description' => 'Confirm to Area Hook Group Master contents',
        'page callback' => 'change_feeds_import_area_hook_grp_create_confirm_content',
        'page arguments' => array(2),
        'access arguments' => array('Distributor Upload File'),
        'file' => 'form/area_hook_grp_data.inc',
    );

    // when discard is clicked
    $items['area-hook-grp-discard/%'] = array(
        'title' => 'Area Hook Group Master Discard',
        'description' => 'Area Hook Group Master Discard Data',
        'page callback' => 'change_feeds_import_area_hook_grp_discard_data',
        'page arguments' => array(1),
        'access arguments' => array('Distributor Upload File'),
        'file' => 'form/area_hook_grp_data.inc',
    );

    // Upload form for Sales Day-Van Pl Group Area Grouping.
    $items['day-van-area/import'] = array(
        'title' => 'Day-Van Pl Group Area Grouping',
        'description' => 'Import Sales Day-Van Pl Group Area Grouping Data',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('change_feeds_import_day_van_area_form'),
        'access arguments' => array('Distributor Upload File'),
        'file' => 'form/day_van_area_data.inc',
    );

    $items['day-van-area-confirm/%'] = array(
        'title' => 'Day-Van-Area Confirm Table',
        'description' => 'Day-Van-Area Confirm Table',
        'page callback' => 'change_feeds_import_day_van_area_confirm_content',
        'page arguments' => array(1),
        'access arguments' => array('Distributor Upload File'),
        'file' => 'form/day_van_area_data.inc',
    );

    // when confirm is clicked
    $items['day-van-area-confirm/create_content/%'] = array(
        'title' => 'confirm',
        'description' => 'Confirm to Day-Van-Area contents',
        'page callback' => 'change_feeds_import_day_van_area_create_confirm_content',
        'page arguments' => array(2),
        'access arguments' => array('Distributor Upload File'),
        'file' => 'form/day_van_area_data.inc',
    );

    // when discard is clicked
    $items['day-van-area-discard/%'] = array(
        'title' => 'Day-Van-Area Discard',
        'description' => 'Day-Van-Area Discard Data',
        'page callback' => 'change_feeds_import_day_van_area_discard_data',
        'page arguments' => array(1),
        'access arguments' => array('Distributor Upload File'),
        'file' => 'form/day_van_area_data.inc',
    );

    // Upload form for billing data
    $items['billing_data/import'] = array(
        'title' => 'Import Billing Data',
        'description' => 'Import Billing Data Node',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('change_feeds_import_billing_data_form'),
        'access arguments' => array('Distributor Upload File'),
        'file' => 'form/upload_billing_data.inc',
    );

    // error validate confirm screen for data
    $items['confirm/%'] = array(
        'title' => 'Confirm Table',
        'description' => 'Confirm Table',
        'page callback' => 'change_feeds_import_confirm_content',
        'page arguments' => array(1),
        'access arguments' => array('Distributor Upload File'),
        'file' => 'form/show_confirm_table.inc',
    );

    // when validate is clicked
    $items['validate/%'] = array(
        'title' => 'Validate Data',
        'description' => 'Validate Data',
        'page callback' => 'change_feeds_import_validate_content',
        'page arguments' => array(1),
        'access arguments' => array('Distributor Upload File'),
        'file' => 'form/validate_content.inc',
    );

    // when confirm is clicked
    $items['confirm/create_content/%'] = array(
        'title' => 'confirm',
        'description' => 'Confirm to create billing packing and picking contents',
        'page callback' => 'change_feeds_import_create_confirm_content',
        'page arguments' => array(2),
        'access arguments' => array('Distributor Upload File'),
        'file' => 'form/create_content_on_confirm.inc',
    );

    // when discard is clicked
    $items['discard/%'] = array(
        'title' => 'Discard',
        'description' => 'Discard Data',
        'page callback' => 'change_feeds_import_discard_data',
        'page arguments' => array(1),
        'access arguments' => array('Distributor Upload File'),
        'file' => 'form/discard_content.inc',
    );

    // setting form for views name used in hook_views_query_alter
    $items['admin/config/views-name-conf'] = array(
        'title' => 'Setting Form For Storing Views Name',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('storing_views_name_form'),
        'access callback' => 'check_if_fr_role_user_admin',
    );

    // Upload form for revised billing data
    $items['revised_billing_data/import'] = array(
        'title' => 'Import Revised Billing Data',
        'description' => 'Import Revised Billing Data Node',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('change_feeds_import_revised_billing_data_form'),
        'access arguments' => array('Distributor Upload File'),
        'file' => 'form/revised_billing_data.inc',
    );

    // RE-Upload form for sales register data
    $items['reupload_sales_register/import'] = array(
        'title' => 'Re Upload Sales Register Data',
        'description' => 'Re Upload Sales Register Data Node',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('change_feeds_import_reupload_sales_register_form'),
        'access arguments' => array('Distributor Upload File'),
        'file' => 'form/reupload_sales_register_data.inc',
    );

    // DRS (Invoice vs Actual Dispatched) Report.
    $items['drs-invoice-vs-actual-dispatched-report'] = array(
        'title' => 'DRS (Invoice vs Actual Dispatched) Report',
        'description' => 'DRS (Invoice vs Actual Dispatched) Report',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('drs_invoice_vs_actual_dispatched_report_form'),
        'access arguments' => array('Distributor Upload File'),
        'file' => 'drs_invoice_vs_actual_dispatched_report.inc',
    );

    $items['outlet-working-hours'] = array(
        'title' => 'Outlet Working Hours',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('outlet_working_hours_form'),
        'type' => MENU_NORMAL_ITEM,
        'access arguments' => array('Distributor Upload File'),
        'file' => 'includes/outlet_working_hours.inc',
    );

     $items['hul-code/autocomplete/%'] = array(
        'title' => 'trip_autocomplete',
        'page callback' => '_get_hul_code_autocomplete',
        'access callback' => TRUE,
        'page arguments' => array(2),
        'type' => MENU_CALLBACK,
    );

    $items['working-hours-report'] = array(
        'title' => 'Outlet Working Hours Report',
        'page callback' => array('working_hours_form_callback'),
        'access arguments' => array('returns confirmation'),
        'type' => MENU_CALLBACK,
        'file' => 'includes/outlet_working_hours_report.inc',
    );

    $items['working-hours-report/export'] = array(
        'title' => 'Outlet Working Hours Report Export',
        'description' => 'Outlet Working Hours Report Export',
        'page callback' => array('working_hours_report_export'),
        'file' => 'includes/outlet_working_hours_report.inc',
        'access arguments' => array('returns confirmation')
    );

    $items['admin/config/apis-config'] = array(
        'title' => 'Setting Form For Master APIs Config',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('master_api_config_form'),
        'access callback' => 'check_if_fr_role_user_admin',
    );
    return $items;
}

// setting form for storing views name used in hook_views_query_alter
function storing_views_name_form($form, $form_state) {

    // Views Name
    $form['views_name'] = array(
        '#type' => 'textarea',
        '#title' => t('Views Name'),
        '#description' => t('Above views will be skipped from default logged in distributor condition written in hook_views_query_alter.'),
        '#default_value' => variable_get('views_name', ''),
        '#required' => TRUE,
        '#size' => 60,
        '#maxlength' => 2048,
    );

    return system_settings_form($form);
}

function update_billing_data_thankyou() {
    drupal_set_message("Thankyou updation is completed");
    return "";
}

function update_billing_data() {
    $batch = array(
        'operations' => array(
            array('change_feeds_import_update_billing', array()),
        ),
        'finished' => 'change_feeds_import_update',
        'title' => t('Creating Billing Data'),
        'init_message' => t('Billing Data Batch Creation is starting.'),
        'progress_message' => t('Processed @current out of @total.'),
        'error_message' => t('Billing Data Batch has encountered an error.'),
        'file' => drupal_get_path('module', 'change_feeds_import')
    );
    batch_set($batch);
    batch_process('update-billing-data-thankyou');
}

function change_feeds_import_update_billing(&$context) {

    if (!isset($context['sandbox']['progress'])) {
        $rr = strtotime(date('Y-m-d', strtotime('last month')));
        $rr1 = time();
        $query = db_select('custom_billing_data', 'cb');
        $query->addField('cb', 'bill_number');
        $query->condition('cb.created_date', array($rr, $rr1), 'BETWEEN');
        $results = $query->execute();
        $num = $results->rowCount();
        $context['sandbox']['progress'] = 0;
        $context['sandbox']['max'] = $num;
    }

    $limit = 500;
    $progress = $context['sandbox']['progress'];
    // With each pass through the callback, retrieve the next group of nids.
    $rr = strtotime(date('Y-m-d', strtotime('last month')));
    $rr1 = time();
    $query = db_select('custom_billing_data', 'cb');
    $query->addField('cb', 'bill_number');
    $query->addField('cb', 'bill_date', 'bill_date');
    $query->addField('cb', 'distributor_id', 'distributor_id');
    $query->condition('cb.created_date', array($rr, $rr1), 'BETWEEN');
    $query->range($progress, $limit);
    $results = $query->execute()->fetchAll();
    for ($i = $context['sandbox']['progress']; $i < $context['sandbox']['progress'] + 500 && $i < $context['sandbox']['max']; $i++) {
        $key = $i;
        $val = $results[$key];

        $nid = check_node_title_exists_for_update($val->bill_number, $val->distributor_id);
        $node = node_load($nid);
        if ($node) {
            $node->field_sr_bill_date[LANGUAGE_NONE][0]['value'] = $val->bill_date;
            node_save($node);
        }
    }
    $context['sandbox']['progress'] = $i;
    if ($context['sandbox']['progress'] < $context['sandbox']['max']) {
        $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
    } else {
        $context['finished'] = 1;
    }
}

function check_node_title_exists_for_update($bill_number, $distributor_id) {
    $query1 = db_select('node', 'n');
    $query1->condition('n.type', 'sales_register_data');
    $query1->condition('n.title', $bill_number);
    $query1->condition('n.uid', $distributor_id);
    $query1->fields('n', array('nid'));
    $nid = $query1->execute()->fetchField();
    return $nid;
}

function download_pdf($args) {
    $view_name = "drs_report";
    $view = views_get_view($view_name, '');
    $view->set_arguments(array($args));
    $rendered_html = $view->render();
    pdf_using_mpdf_api($rendered_html);
}

/**
 * Running sheet drs report2
 * @param type $args
 * @return string
 */
function download_pdf2($args) {
    global $base_url;
    if (!empty($args)) {

        // If Sum of Bill Value in Sales Register is not equal to Dispatch Value in Dispatch Table 
        $res = _check_dispatch_value_and_bill_value_mismatch($args);
        if (!empty($res['dispatch_bill_value'])) {
            $sum_of_sales_value = $res['sales_bill_value'];
            $dispatch_value = $res['dispatch_bill_value'];
            if ($sum_of_sales_value == $dispatch_value) {
                $view_name = "drs_report2";
                $view = views_get_view($view_name, '');
                $view->set_display('drs_report2');
                $view->set_arguments(array($args));
                $rendered_html = $view->render();
                $trip_id = $args;

                // Remove xls image from pdf.
                $xls_string = '<div class="feed-icon">
      <a href="/drs2-download/' . $trip_id . '"><img typeof="foaf:Image" class="img-responsive" src="' . $base_url . '/sites/all/modules/contrib/views_data_export/images/xls.png" alt="XLS" title="XLS" /></a>    </div>';
                $render = str_replace($xls_string, "", $rendered_html);
                pdf_using_mpdf_api($render);
            } else {
                drupal_set_message(t('Mismatch between: Original Trip Bill Count and Present Trip Bill Count'), 'error');
            }
        }
    }
    return '';
}

function get_data_of_trip_id_form($form, &$form_state) {

    $form['#prefix'] = '<div id="itemlist-div">';
    $form['#suffix'] = '</div>';

    $form['trip_id'] = array(
        '#type' => 'textfield',
        '#title' => t('Trip Id'),
        '#required' => TRUE,
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('submit'),
        '#ajax' => array(
            'wrapper' => 'itemlist-div',
            'callback' => 'get_data_of_trip_id_form_submit',
            'method' => 'replace',
            'effect' => 'fade',
        ),
        '#submit' => array('trip_form_submit'),
    );
    if (!empty($form_state['views_data'])) {
        $form['hhh'] = array(
            '#type' => 'markup',
            '#markup' => $form_state['views_data'],
        );
        $trip_id = $form_state['values']['trip_id'];
        $rr = l('Open PDF', "/download-pdf/$trip_id");
        $form['dowmload_mark'] = array(
            '#type' => 'markup',
            '#markup' => $rr,
        );
    }
    return $form;
}

/**
 * 
 * @param type $form
 * @param type $form_state
 * @return array
 */
function delete_billing_form($form, &$form_state) {

    $form['#prefix'] = '<div id="itemlist-div">';
    $form['#suffix'] = '</div>';

    // selected date for deleting data of billing data by admin
    $form['to_date'] = array(
        '#type' => 'date_popup',
        '#date_format' => 'd-m-Y h:i A',
        '#required' => TRUE,
    );


    $users = get_list_of_users(); // get all registerd users.
    // Here admin can choose user
    $form['user'] = array(
        '#type' => 'select',
        '#title' => t('User'),
        '#options' => $users,
        '#required' => TRUE,
    );


    $form['check'] = array(
        '#type' => 'submit',
        '#value' => t('Check Records'),
        '#ajax' => array(
            'wrapper' => 'itemlist-div',
            'callback' => 'ajax_form_submit',
            'method' => 'replace',
            'effect' => 'fade',
        ),
        '#submit' => array('check_records_submit'),
    );

    if (!empty($form_state['values']['billing_count'])) {
        $billing_count = $form_state['values']['billing_count'];
        if ($billing_count == "empty") {
            $msg = "There is no data to delete";
        } else {
            $msg = "NUmber of Record Going To Delete = $billing_count";
            $form['submit'] = array(
                '#type' => 'submit',
                '#value' => t('Delete'),
                '#submit' => array('delete_billing_form_submit'),
            );
        }

        $form['data'] = array(
            '#type' => 'markup',
            '#markup' => $msg,
        );
    }



    return $form;
}

/**
 * 
 * @param type $form
 * @param type $form_state
 */
function check_records_submit($form, &$form_state) {
    $start_date = strtotime($form_state['values']['to_date']);
    $end_date = $start_date + 120;
    $user = $form_state['values']['user'];
    $pass = "";
    // get data from custom table for selected date and user (custom_billing_data).
    $billing_data = get_custom_data($pass, $start_date, $end_date, $user);
    if (!empty($billing_data)) {
        $billing_count = count($billing_data);
    } else {
        $billing_count = "empty";
    }
    $form_state['values']['billing_count'] = $billing_count;
    $form_state['rebuild'] = TRUE;
}

/**
 * 
 * @param type $form
 * @param type $form_state
 * @return type
 */
function ajax_form_submit($form, &$form_state) {
    return $form;
}

/**
 * 
 * @param type $element
 * @param type $form_state
 * @param type $context
 */
function change_feeds_import_date_popup_process_alter(&$element, &$form_state, $context) {
    if ($element['#name'] == 'to_date') {
        $element['date']['#title'] = "Date";
        $element['time']['#title'] = "Time";
    }
}

// get all registerd users.
function get_list_of_users() {
    $query = db_select('users', 'u');
    $query->fields('u', array('name', 'uid'));
    $result = $query->execute()->fetchAllKeyed(1, 0);
    return $result;
}

/**
 * 
 * @param type $form
 * @param type $form_state
 */
function delete_billing_form_submit($form, &$form_state) {

    $start_date = strtotime($form_state['values']['to_date']);
    $end_date = $start_date + 120;
    $user = $form_state['values']['user'];
    $pass = "";
    // get data from custom table for selected date and user (custom_billing_data).
    $billing_data = $sales_data = get_custom_data($pass, $start_date, $end_date, $user);
    $billing_count = count($billing_data);
    $pass = "sales";
    // get data from Sales register's node's for selected date and user (custom_billing_data).
    // $sales_data = get_custom_data($pass, $start_date, $end_date, $user);
    // delete data from custom table for selected date and user (custom_billing_data).
    foreach ($billing_data as $key => $val) {
        $id = $val['id'];
        $num_deleted = db_delete('custom_billing_data')
                ->condition('id', $id)
                ->execute();
    }

    // update data(billing_van,billing_loading_date) from Sales register's node's for selected date and user (custom_billing_data).
    if (!empty($sales_data)) {
        foreach ($sales_data as $key => $val) {

            // check Sales Register's node exist or not
            $nid = check_node_title_exists_sales_register_data($val['bill_number'], $user);
            $node = node_load($nid);
            if ($node) {
//        $node->field_billing_van[LANGUAGE_NONE][0]['value'] = NULL;
//        $node->field_billing_loading_date[LANGUAGE_NONE][0]['value'] = NULL;
                $node->field_billing_van = array();
                $node->field_billing_loading_date = array();
                $node->field_sr_bill_date = array();
                node_save($node);
            }
        }
    }

    $end_date = $end_date + 120; // party packing takes time to create
    // Delete data of  Party Packing Nodes selected date and user.
    $party_packing_nodes = get_all_nodes("party_packing", $start_date, $end_date, $user);
    if (!empty($party_packing_nodes)) {
        foreach ($party_packing_nodes as $nid) {
            node_delete($nid);
        }
    }
    // Delete data of Picking Nodes selected date and user.
    $picking_nodes = get_all_nodes("picking", $start_date, $end_date, $user);
    if (!empty($picking_nodes)) {
        foreach ($picking_nodes as $nid) {
            node_delete($nid);
        }
    }
    drupal_set_message("successfully Deleted $billing_count Records");
}

/**
 * 
 * @param type $title = node's title
 * @param type $user = node created by user
 * @return type
 * 
  check Sales Register's node exist or not
 */
function check_node_title_exists_sales_register_data($title, $user) {
    $query1 = db_select('node', 'n');
    $query1->condition('n.type', 'sales_register_data');
    $query1->condition('n.title', $title);
    $query1->condition('n.uid', $user);
    $query1->fields('n', array('nid'));
    $nid = $query1->execute()->fetchField();
    return $nid;
}

/**
 * 
 * @param type $pass = variable for groupby only for sales register data
 * @param type $start_date = Start date
 * @param type $end_date = End Date
 * @param type $user = Data created by user
 * @return type
 */
function get_custom_data($pass, $start_date, $end_date, $user) {
    $query = db_select('custom_billing_data', 'c');
    $query->condition('c.distributor_id', $user);
    $query->fields('c', array('id'));
    $query->condition('c.created_date', array($start_date, $end_date), 'BETWEEN');
    if (!empty($pass)) {
        $query->groupBy('c.bill_number');
        $query->addField('c', 'bill_number');
    }
    $res = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    return $res;
}

/**
 * 
 * @param type $type = Party Packing Or Picking
 * @param type $start_date = Start date
 * @param type $end_date = End Date
 * @param type $user = Node created by user
 * @return type
 */
function get_all_nodes($type, $start_date, $end_date, $user) {
    $query = db_select('node', 'n');
    $query->condition('n.type', $type);
    $query->condition('n.uid', $user, '=');
    $query->condition('n.created', array($start_date, $end_date), 'BETWEEN');
    $query->fields('n', array('nid'));
    $res = $query->execute()->fetchAllKeyed(0, 0);
    return $res;
}

function get_data_of_trip_id_2_form($form, &$form_state) {

    $form['#prefix'] = '<div id="itemlist-div">';
    $form['#suffix'] = '</div>';

    $form['trip_id'] = array(
        '#type' => 'textfield',
        '#title' => t('Trip Id'),
        '#size' => 10,
        '#required' => TRUE,
        '#id' => 'drs-report2'
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('submit'),
        '#ajax' => array(
            'wrapper' => 'itemlist-div',
            'callback' => 'get_data_of_trip_id_2_form_submit',
            'method' => 'replace',
            'effect' => 'fade',
        ),
        '#submit' => array('trip_2_form_submit'),
    );
    if (!empty($form_state['views_data'])) {
        $form['hhh'] = array(
            '#type' => 'markup',
            '#markup' => $form_state['views_data'],
        );
        $trip_id = $form_state['values']['trip_id'];
        $rr = l('Open PDF', "/download-pdf2/$trip_id", array('attributes' => array("target" => "_blank")));
        $form['dowmload_mark'] = array(
            '#type' => 'markup',
            '#markup' => $rr,
        );
    }
    return $form;
}

function get_data_of_trip_id_form_submit($form, &$form_state) {
    return $form;
}

//Added validation for bill edit confirmation TP to Host
function get_data_of_trip_id_2_form_validate($form, &$form_state) {
    $trip_id = $form_state['values']['trip_id'];
    $nid = get_nid_from_title($trip_id, 'dispatch_data');
    $node = node_load($nid);
    if ($node) {
        if ($node->field_confirm_bill_edit_status['und'][0]['value'] != 1) {
            unset($form_state['complete form']['hhh']);
            unset($form_state['complete form']['dowmload_mark']);
            form_set_error('form', t("Bill Confirmation status is not completed for trip: " . $trip_id));
        }
    } else {
        unset($form_state['complete form']['hhh']);
        unset($form_state['complete form']['dowmload_mark']);
        form_set_error('form', t("Trip not exists: " . $trip_id));
    }
}

function get_data_of_trip_id_2_form_submit($form, &$form_state) {
    return $form;
}

function trip_2_form_submit($form, &$form_state) {
    $trip_id = $form_state['values']['trip_id'];
    $view_name = "drs_report2";
    $view = views_get_view($view_name, '');
    // If Sum of Bill Value in Sales Register is not equal to Dispatch Value in Dispatch Table 
    $res = _check_dispatch_value_and_bill_value_mismatch($trip_id);
    if (!empty($res['dispatch_bill_value'])) {
        $sum_of_sales_value = $res['sales_bill_value'];
        $dispatch_value = $res['dispatch_bill_value'];
        if ($sum_of_sales_value != $dispatch_value) {
            unset($view->display['views_data_export_1']);
        }
    }
    $view->set_display('drs_report2');
    $view->set_arguments(array($trip_id));
    $rendered_html = $view->render();
    $form_state['views_data'] = $rendered_html;
    $form_state['rebuild'] = TRUE;
}

function trip_form_submit($form, &$form_state) {
    $trip_id = $form_state['values']['trip_id'];
    $view_name = "drs_report";
    $view = views_get_view($view_name, '');
    $view->set_arguments(array($trip_id));
    $rendered_html = $view->render();
    $form_state['views_data'] = $rendered_html;
    $form_state['rebuild'] = TRUE;
}

// check permission for (admin/config/flat-table) Menu
function check_if_fr_role_user_admin() {
    global $user;
    if (in_array('administrator', $user->roles)) {
        return TRUE;
    } else {
        return FALSE;
    }
}

// Menu Callback  for (admin/config/flat-table)
function change_feeds_import_setting_form($form, $form_state) {

    // PARTY PACKING PRODUCTIVITY LINES/Hr
    $form['party_packing_productivity_lines'] = array(
        '#type' => 'textfield',
        '#title' => t('PARTY PACKING PRODUCTIVITY LINES/Hr'),
        '#default_value' => variable_get('party_packing_productivity_lines', ''),
        '#required' => TRUE,
    );

    // PARTY PACKING COMPLIANCE
    $form['party_packing_compliance'] = array(
        '#type' => 'textfield',
        '#title' => t('PARTY PACKING COMPLIANCE'),
        '#default_value' => variable_get('party_packing_compliance', ''),
        '#required' => TRUE,
    );

    // Pick Productivity Pick
    $form['pick_productivity_pick'] = array(
        '#type' => 'textfield',
        '#title' => t('Pick Productivity Pick / Hr'),
        '#default_value' => variable_get('pick_productivity_pick', ''),
        '#required' => TRUE,
    );

    // Picking Compliance
    $form['picking_compliance'] = array(
        '#type' => 'textfield',
        '#title' => t('Picking Compliance'),
        '#default_value' => variable_get('picking_compliance', ''),
        '#required' => TRUE,
    );

    // EGIR End Time Cut-Off 
    $form['egir_end_time_cutoff'] = array(
        '#type' => 'textfield',
        '#title' => t('EGIR End time - Cutoff'),
        '#default_value' => variable_get('egir_end_time_cutoff', ''),
        '#required' => TRUE,
    );

    // Unloading End Time Cutoff
    $form['unloading_end_time_cutOff'] = array(
        '#type' => 'textfield',
        '#title' => t('Unloading End Time - CutOff'),
        '#default_value' => variable_get('unloading_end_time_cutOff', ''),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

/**
 * Implements hook_node_insert()
 */
function change_feeds_import_node_insert($node) {

    if ($node->type == 'dispatch_data') {
        // logic for when dispatch node is uploading get billing data nid (on basis of vehicle+loading date)
        $query = db_select('custom_billing_data', 'cb');
        $query->fields('cb', array('vehicle', 'loading_date', 'id'));
        $query->groupBy('vehicle')->groupBy('loading_date');


        $sub_query2 = db_select('node', 'n');
        $sub_query2->condition('n.type', "dispatch_data", '=');
        $sub_query2->condition('n.nid', $node->nid, '=');
        $sub_query2->innerjoin('field_data_field_vehicle', 'fv', 'fv.entity_id = n.nid');
        $sub_query2->innerjoin('field_data_field_loading_date', 'fld', 'fld.entity_id = n.nid');
        $sub_query2->fields('n', array('nid'));
        $sub_query2->join($query, 'bd', 'bd.vehicle = fv.field_vehicle_value and bd.loading_date = fld.field_loading_date_value');
        $sub_query2->fields('bd', array('id'));
        $billing_result = $sub_query2->execute()->fetchAll(PDO::FETCH_ASSOC);
        $billing_id = $billing_result[0]['id'];


        $sub_query3 = db_select('node', 'n1');
        $sub_query3->condition('n1.type', "party_packing", '=');
        $sub_query3->innerjoin('field_data_field_party_packing_vehicle', 'ppv', 'ppv.entity_id = n1.nid');
        $sub_query3->innerjoin('field_data_field_party_packing_loading_date', 'pld', 'pld.entity_id = n1.nid');
        $sub_query3->innerjoin('field_data_field__party_packingstatus', 'pps', 'pps.entity_id = n1.nid');
        $sub_query3->fields('ppv', array('field_party_packing_vehicle_value'));
        $sub_query3->fields('pld', array('field_party_packing_loading_date_value'));
        $sub_query3->fields('pps', array('field__party_packingstatus_value'));
        $sub_query3->fields('n1', array('nid'));

        $sub_query4 = db_select('node', 'n2');
        $sub_query4->condition('n2.type', "dispatch_data", '=');
        $sub_query4->innerjoin('field_data_field_vehicle', 'fv', 'fv.entity_id = n2.nid');
        $sub_query4->innerjoin('field_data_field_loading_date', 'fld', 'fld.entity_id = n2.nid');
        $sub_query4->innerjoin('field_data_field_dispatch_date', 'fdd', 'fdd.entity_id = n2.nid');
        $sub_query4->fields('fv', array('field_vehicle_value'));
        $sub_query4->fields('fld', array('field_loading_date_value'));
        $sub_query4->fields('fdd', array('field_dispatch_date_value'));
        $sub_query4->fields('n2', array('nid'));


        $query = db_select('custom_billing_data', 'cb');
        $query->condition('cb.id', $billing_id, '=');
        $query->innerjoin('field_data_field_party_code', 'pc2', 'pc2.field_party_code_value = cb.party_code');
        $query->innerjoin('field_data_field_pl_group', 'plg', 'pc2.entity_id = plg.entity_id');
        $query->innerjoin('field_data_field_channel', 'fc', 'pc2.entity_id = fc.entity_id');
        $query->innerjoin('field_data_field_pl_group', 'plg2', 'plg2.field_pl_group_value = plg.field_pl_group_value');
        $query->innerjoin('field_data_field_party_packing', 'fpp', 'plg2.entity_id = fpp.entity_id');
        //$query->fields('cb', array('bill_number', 'bill_date', 'vehicle', 'loading_date', 'Sum_of_SALES_VALUE', 'distributor_id', 'Sum_of_SALES_RET_VALUE', 'party_code', 'promise_date'));
        $query->fields('cb', array('bill_number', 'bill_date', 'vehicle', 'loading_date', 'distributor_id', 'party_code', 'promise_date'));
        $query->groupBy('cb.bill_number');
        // $query->addExpression('SUM(cb.Sum_of_SALES_VALUE)', 'Sum_of_SALES_VALUE');
        // $query->addExpression('SUM(cb.Sum_of_SALES_RET_VALUE)', 'Sum_of_SALES_RET_VALUE');
        $query->fields('plg', array('field_pl_group_value'));
        $query->fields('fc', array('field_channel_value'));
        $query->fields('fpp', array('field_party_packing_value'));
        $query->join($sub_query3, 'party_p', 'party_p.field_party_packing_vehicle_value = cb.vehicle and party_p.field_party_packing_loading_date_value = cb.loading_date');
        $query->join($sub_query4, 'dd', 'dd.field_vehicle_value = cb.vehicle and dd.field_loading_date_value = cb.loading_date');
        $query->fields('dd');
        $query->fields('party_p');
        $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

        foreach ($result as $key => $value) {
            $billing_vehicle = $value['field_vehicle_value'];
            $billing_loading_date = $value['field_loading_date_value'];
            $promised_delivery_date = $value['field_promised_delivery_date_value'];


            //  $sum_of_sales_value = $value['Sum_of_SALES_VALUE'];
            //  $sum_of_sales_ret_value = $value['Sum_of_SALES_RET_VALUE'];
            //  $net_value = $sum_of_sales_ret_value / $sum_of_sales_value;
//      if ($net_value == 0) {
//        $return_type = 'NA';
//      }
//      elseif ($net_value >= 0.98 && $net_value <= 1.02) {
//        $return_type = 'FULL';
//      }
//      else {
//        $return_type = 'Partial';
//      }
            $dispatch_date = $value['field_dispatch_date_value'];
            $endDate = strtotime($dispatch_date);
            $promised_delivery_date_stamp = strtotime($promised_delivery_date);
            $datediff = $endDate - $promised_delivery_date_stamp;
            $diff = floor($datediff / (60 * 60 * 24));
            $result[$key]['delay_days'] = $diff;

            if ($diff == 0 || $diff < 0) {
                $result[$key]['delay_range'] = "N+2";
            } elseif ($diff == 1) {
                $result[$key]['delay_range'] = "N+3";
            } else {
                $result[$key]['delay_range'] = ">N+2";
            }


            $billing_loading_timestamp = strtotime($billing_loading_date);
            $billing_loading_day = date("d", $billing_loading_timestamp);

            $result[$key]['Day'] = $billing_loading_day;


            ######### Loagic for MOC #######
            if ($billing_loading_day < 21) {
                $month = date("m", $billing_loading_timestamp);
                $result[$key]['MOC'] = "MOC" . $month;
            } else {
                $newdate = strtotime('+1 month', strtotime($billing_loading_date));
                $next_month = date("m", $newdate);
                $result[$key]['MOC'] = "MOC" . $next_month;
            }
            ########### End Logic for MOC #######
            ######### Loagic for TDP #######
            if (($billing_loading_day >= 1) && ($billing_loading_day <= 10)) {
                $result[$key]['TDP'] = "TDP2";
            } elseif (($billing_loading_day >= 11) && ($billing_loading_day <= 20)) {
                $result[$key]['TDP'] = "TDP3";
            } else {
                $result[$key]['TDP'] = "TDP1";
            }
            ########### End Logic for TDP #######
            $billing_loading_day_text = date("D", $billing_loading_timestamp);
            $billing_loading_month = date("M", $billing_loading_timestamp);
            $result[$key]['month'] = $billing_loading_month;
            $result[$key]['Week_day'] = $billing_loading_day_text;

            $party_packing_status = $value['field__party_packingstatus_value'];
            if ($party_packing_status == 2) {
                $status = "Yes";
            } else {
                $status = "No";
            }


            $distributor_id = $value['field_distributor_uid_value'];
            $distributor_name = change_feeds_import_get_distributor_name($distributor_id);

            // insert in flat_billing_data table when node update.(if record is not in table then create new record)
            db_merge('flat_billing_data')
                    ->key(array('nid' => $node->nid))
                    ->fields(array(
                        'nid' => $node->nid,
                        'bill_number' => $result[$key]['field_bill_number_value'],
                        'bill_date' => strtotime($result[$key]['field_bill_date_value']) ? strtotime($result[$key]['field_bill_date_value']) : 0,
                        'vehicle' => $result[$key]['field_vehicle_value'],
                        'loading_date' => strtotime($result[$key]['field_loading_date_value']) ? strtotime($result[$key]['field_loading_date_value']) : 0,
                        // 'sum_of_sales_value' => $result[$key]['Sum_of_SALES_VALUE'] ? $result[$key]['Sum_of_SALES_VALUE'] : 0,
                        //  'sum_of_sales_ret_value' => $result[$key]['Sum_of_SALES_RET_VALUE'] ? $result[$key]['Sum_of_SALES_RET_VALUE'] : 0,
                        'promised_delivery_date' => strtotime($result[$key]['field_promised_delivery_date_value']) ? strtotime($result[$key]['field_promised_delivery_date_value']) : 0,
                        'dispatch_date' => strtotime($result[$key]['field_dispatch_date_value']) ? strtotime($result[$key]['field_dispatch_date_value']) : 0,
                        'delay_days' => $result[$key]['delay_days'] ? $result[$key]['delay_days'] : 0,
                        'delay_range' => $result[$key]['delay_range'],
                        // 'return_type' => $return_type,
                        'ideal_party_packing' => $result[$key]['field_party_packing_value'],
                        'actual_party_packing' => $status,
                        'day' => $result[$key]['Day'],
                        'tdp' => $result[$key]['TDP'],
                        'month' => $result[$key]['month'],
                        'moc' => $result[$key]['MOC'],
                        'week_day' => $result[$key]['Week_day'],
                        'party_code' => $result[$key]['field_party_code_value'],
                        'pl_group' => $result[$key]['field_pl_group_value'],
                        'channel' => $result[$key]['field_channel_value'],
                        'distributor_name' => $distributor_name
                    ))
                    ->execute();
        }
    }
}

/**
 * Implements hook_node_update()
 */
function change_feeds_import_node_update($node) {
    if ($node->type == 'party_packing') { // if Content Type is party packing.
        $start_time = strtotime($node->field_party_packing_start_time['und'][0]['value']); // party packing start time
        $end_time = strtotime($node->field_party_packing_end_time['und'][0]['value']); // party packing end time
        $party_picking_ld = $node->field_party_packing_loading_date['und'][0]['value']; // party packing loading date
        $timestamp = strtotime($party_picking_ld);
        $party_picking_ld_stamp = date("d", $timestamp);
        ######  logic for MOC ####
        if ($party_picking_ld_stamp < 21) {
            $month = date("m", $timestamp);
            $node->MOC = "MOC" . $month;
        } else {
            $newdate = strtotime('+1 month', strtotime($party_picking_ld));
            $next_month = date("m", $newdate);
            $node->MOC = "MOC" . $next_month;
        }

        ##### End MOC logic #######
        ######  logic for TDP ####
        if (($party_picking_ld_stamp >= 1) && ($party_picking_ld_stamp <= 10)) {
            $node->TDP = "TDP2";
        } elseif (($party_picking_ld_stamp >= 11) && ($party_picking_ld_stamp <= 20)) {
            $node->TDP = "TDP3";
        } else {
            $node->TDP = "TDP1";
        }
        ##### End TDP logic #######

        $node->field_party_packing_loading_date['und'][0]['value'] = strtotime($party_picking_ld);
        $node->field_party_packing_date['und'][0]['value'] = strtotime($node->field_party_packing_date['und'][0]['value']);
        $node->party_packing_productivity_lines = variable_get('party_packing_productivity_lines', '');
        $node->party_packing_compliance = variable_get('party_packing_compliance', '');
        $compliance = variable_get('party_packing_compliance', ''); // value from setting form
        $compliance_seconds = strtotime("1970-01-01 $compliance UTC"); // value from setting form
        ######  logic for Compliant ####
        if (empty($end_time)) {
            $node->compliance = "";
        } else {
            if ($end_time > $compliance_seconds) {
                $node->compliance = "Non Compliant";
            } else {
                $node->compliance = "Compliant";
            }
        }

        ##### End TDP Compliant #######
        $status = $node->field__party_packingstatus['und'][0]['value'];
        if ($status == 1) {
            $status = "In Process";
        } else if ($status == 2) {
            $status = "Completed";
        } else {
            $status = "Null";
        }
        $distributor_id = $node->field_distributor_uid['und'][0]['value'];
        $distributor_name = change_feeds_import_get_distributor_name($distributor_id);


        // insert in flat_party_packing table when node update.(if record is not in table then create new record)
        db_merge('flat_party_packing')
                ->key(array('nid' => $node->nid))
                ->fields(array(
                    'nid' => $node->nid,
                    'vehicle' => $node->field_party_packing_vehicle['und'][0]['value'],
                    'loading_date' => $node->field_party_packing_loading_date['und'][0]['value'] ? $node->field_party_packing_loading_date['und'][0]['value'] : 0,
                    'party_packing_date' => $node->field_party_packing_date['und'][0]['value'] ? $node->field_party_packing_date['und'][0]['value'] : 0,
                    'loading_sheet_line' => $node->field_loading_sheet_line['und'][0]['value'] ? $node->field_loading_sheet_line['und'][0]['value'] : 0,
                    'bill_lines' => $node->field_bill_lines['und'][0]['value'] ? $node->field_bill_lines['und'][0]['value'] : 0,
                    'each_units' => $node->field_each_units['und'][0]['value'] ? $node->field_each_units['und'][0]['value'] : 0,
                    'party_packing_start_time' => $start_time ? $start_time : 0,
                    'party_packing_end_time' => $end_time ? $end_time : 0,
                    'supervisor' => $node->field_party_packing_supervisor['und'][0]['value'],
                    'packer_name' => $node->field_party_packer_name['und'][0]['value'],
                    'team_count' => $node->field_party_packer_team_count['und'][0]['value'] ? $node->field_party_packer_team_count['und'][0]['value'] : 0,
                    'status' => $status,
                    'productivity_lines' => $node->party_packing_productivity_lines ? $node->party_packing_productivity_lines : 0,
                    'party_packing_compliance' => $compliance_seconds ? $compliance_seconds : 0,
                    'compliance' => $node->compliance,
                    'tdp' => $node->TDP,
                    'moc' => $node->MOC,
                    'distributor_name' => $distributor_name
                ))
                ->execute();
    }

    if ($node->type == 'picking') {
        $start_time = strtotime($node->field_picking_start_time['und'][0]['value']); // picking start time
        $end_time = strtotime($node->field_picking_end_time['und'][0]['value']); // picking end time
        $picking_ld = $node->field_picking_loading_date['und'][0]['value']; // picking loading date
        $timestamp = strtotime($picking_ld);
        $picking_ld_stamp = date("d", $timestamp);
        ######  logic for MOC ####
        if ($picking_ld_stamp < 21) {
            $month = date("m", $timestamp);
            $node->MOC = "MOC" . $month;
        } else {
            $newdate = strtotime('+1 month', strtotime($picking_ld));
            $next_month = date("m", $newdate);
            $node->MOC = "MOC" . $next_month;
        }

        ##### End MOC logic #######
        ######  logic for TDP ####
        if (($picking_ld_stamp >= 1) && ($picking_ld_stamp <= 10)) {
            $node->TDP = "TDP2";
        } elseif (($picking_ld_stamp >= 11) && ($picking_ld_stamp <= 20)) {
            $node->TDP = "TDP3";
        } else {
            $node->TDP = "TDP1";
        }
        ##### End TDP logic #######

        $node->field_picking_loading_date['und'][0]['value'] = strtotime($picking_ld);
        $node->field_picking_picking_date['und'][0]['value'] = strtotime($node->field_picking_picking_date['und'][0]['value']);
        $node->pick_productivity_pick = variable_get('pick_productivity_pick', '');
        $node->picking_compliance = variable_get('picking_compliance', '');
        $compliance = variable_get('picking_compliance', '');
        $compliance_seconds = strtotime("1970-01-01 $compliance UTC");
        ######  logic for Compliant ####

        if (empty($end_time)) {
            $node->compliance = "";
        } else {
            if ($end_time > $compliance_seconds) {
                $node->compliance = "Non Compliant";
            } else {
                $node->compliance = "Compliant";
            }
        }


        ##### End TDP Compliant #######
        $status = $node->field_picking_status['und'][0]['value'];
        if ($status == 1) {
            $status = "In Process";
        } else if ($status == 2) {
            $status = "Completed";
        } else {
            $status = "Null";
        }
        $distributor_id = $node->field_distributor_uid['und'][0]['value'];
        $distributor_name = change_feeds_import_get_distributor_name($distributor_id);

        db_merge('flat_picking')
                ->key(array('nid' => $node->nid))
                ->fields(array(
                    'nid' => $node->nid,
                    'van_id' => $node->field_picking_van_id['und'][0]['value'] ? $node->field_picking_van_id['und'][0]['value'] : 0,
                    'loading_date' => $node->field_picking_loading_date['und'][0]['value'] ? $node->field_picking_loading_date['und'][0]['value'] : 0,
                    'godown_area_id' => $node->field_picking_godown_area_id['und'][0]['value'],
                    'picking_type' => $node->field_picking_picking_type['und'][0]['value'],
                    'picking_date' => $node->field_picking_picking_date['und'][0]['value'] ? $node->field_picking_picking_date['und'][0]['value'] : 0,
                    'picking_start_time' => $start_time ? $start_time : 0,
                    'picking_end_time' => $end_time ? $end_time : 0,
                    'pick_lines' => $node->field_pick_lines['und'][0]['value'] ? $node->field_pick_lines['und'][0]['value'] : 0,
                    'pick_units' => $node->field_pick_units['und'][0]['value'],
                    'pick_clds' => $node->field_pick_clds['und'][0]['value'] ? $node->field_pick_clds['und'][0]['value'] : 0,
                    'pick_supervisor' => $node->field_picking_pick_supervisor['und'][0]['value'],
                    'picker_name' => $node->field_picking_picker_name['und'][0]['value'],
                    'picking_team_count' => $node->field_picking_picking_team_count['und'][0]['value'] ? $node->field_picking_picking_team_count['und'][0]['value'] : 0,
                    'status' => $status,
                    'pick_productivity_pick' => $node->pick_productivity_pick ? $node->pick_productivity_pick : 0,
                    'picking_compliance' => $compliance_seconds ? $compliance_seconds : 0,
                    'moc' => $node->MOC,
                    'tdp' => $node->TDP,
                    'complaince' => $node->compliance,
                    'distributor_name' => $distributor_name
                ))
                ->execute();
    }

    if ($node->type == 'egir') { // if content type is EGIR
        $invoice_date = $node->field_invoice_date['und'][0]['value']; // invoice date
        $invoice_timestamp = strtotime($invoice_date);
        $node->field_invoice_date['und'][0]['value'] = $invoice_timestamp;

        $uploading_date = $node->field_unloading_date['und'][0]['value']; // unloading date
        $uploading_timestamp = strtotime($uploading_date);
        $node->field_unloading_date['und'][0]['value'] = $uploading_timestamp;


        ######### Loagic for MOC #######
        $uploading_stamp = date("d", $uploading_timestamp);
        if ($uploading_stamp < 21) {
            $month = date("m", $uploading_timestamp);
            $node->MOC = "MOC" . $month;
        } else {
            $newdate = strtotime('+1 month', strtotime($uploading_date));
            $next_month = date("m", $newdate);
            $node->MOC = "MOC" . $next_month;
        }
        ########### End Logic for MOC #######
        ######### Loagic for TDP #######
        if (($uploading_stamp >= 1) && ($uploading_stamp <= 10)) {
            $node->TDP = "TDP2";
        } elseif (($uploading_stamp >= 11) && ($uploading_stamp <= 20)) {
            $node->TDP = "TDP3";
        } else {
            $node->TDP = "TDP1";
        }
        ########### End Logic for TDP #######

        $egir_date = $node->field_egir_date['und'][0]['value'];
        $egir_timestamp = strtotime($egir_date);
        $node->field_egir_date['und'][0]['value'] = $egir_timestamp;

        $node->egir_end_time_cutoff = variable_get('egir_end_time_cutoff', ''); // value from setting form
        $node->unloading_end_time_cutOff = variable_get('unloading_end_time_cutOff', ''); // value from setting form

        $egir_cutoff = variable_get('egir_end_time_cutoff', '');
        $egir_cutoff_seconds = strtotime("1970-01-01 $egir_cutoff UTC");

        $egir_end_time = strtotime($node->field_egir_end_time['und'][0]['value']);
        ######  logic for EGIR Compliant ####


        if (empty($egir_end_time)) {
            $node->compliance = "";
        } else {
            if ($egir_end_time > $egir_cutoff_seconds) {
                $node->compliance = "Non Compliant";
            } else {
                $node->compliance = "Compliant";
            }
        }


        ##### End logic for EGIR Compliant #######

        $unloading_cutoff = variable_get('unloading_end_time_cutOff', '');
        $unloading_cutoff_seconds = strtotime("1970-01-01 $unloading_cutoff UTC");

        $unloading_end_time = strtotime($node->field_unloading_end_time['und'][0]['value']);
        ######  logic for Unloading Compliant ####

        if (empty($unloading_end_time)) {
            $node->compliance = "";
        } else {
            if ($unloading_end_time > $unloading_cutoff_seconds) {
                $node->compliance = "Non Compliant";
            } else {
                $node->compliance = "Compliant";
            }
        }

        ##### End logic for unloading Compliant #######

        $status = $node->field_unloading_status['und'][0]['value'];
        if ($status == 1) {
            $status = "In Process";
        } else if ($status == 2) {
            $status = "Completed";
        } else {
            $status = "Null";
        }
        $distributor_id = $node->field_distributor_uid['und'][0]['value'];
        $distributor_name = change_feeds_import_get_distributor_name($distributor_id);
        // insert in flat_unloading table when node update.(if record is not in table then create new record)
        db_merge('flat_unloading')
                ->key(array('nid' => $node->nid))
                ->fields(array(
                    'nid' => $node->nid,
                    'invoice_number' => $node->field_invoice_number['und'][0]['value'],
                    'invoice_date' => $node->field_invoice_date['und'][0]['value'] ? $node->field_invoice_date['und'][0]['value'] : 0,
                    'truck_no' => $node->field_truck_no['und'][0]['value'],
                    'from_location' => $node->field_from_location['und'][0]['value'],
                    'unloading_date' => $node->field_unloading_date['und'][0]['value'] ? $node->field_unloading_date['und'][0]['value'] : 0,
                    'unloading_start_time' => strtotime($node->field_unloading_start_time['und'][0]['value']) ? strtotime($node->field_unloading_start_time['und'][0]['value']) : 0,
                    'unloading_end_time' => strtotime($node->field_unloading_end_time['und'][0]['value']) ? strtotime($node->field_unloading_end_time['und'][0]['value']) : 0,
                    'status' => $status,
                    'egir_date' => $node->field_egir_date['und'][0]['value'] ? $node->field_egir_date['und'][0]['value'] : 0,
                    'egir_start_time' => strtotime($node->field_egir_start_time['und'][0]['value']) ? strtotime($node->field_egir_start_time['und'][0]['value']) : 0,
                    'egir_end_time' => strtotime($node->field_egir_end_time['und'][0]['value']) ? strtotime($node->field_egir_end_time['und'][0]['value']) : 0,
                    'egir_end_cutoff' => $egir_cutoff_seconds ? $egir_cutoff_seconds : 0,
                    'unloading_end_cutoff' => $unloading_cutoff_seconds ? $unloading_cutoff_seconds : 0,
                    'tdp' => $node->TDP,
                    'moc' => $node->MOC,
                    'unloading_compliance' => $node->unloading_end_time_cutOff,
                    'egir_complaince' => $node->compliance,
                    'distributor_name' => $distributor_name
                ))
                ->execute();
    }
}

/**
 * 
 * @param type $node
 * Implements hook_delete
 */
function change_feeds_import_node_delete($node) {
    // Delete Nid's entry from  party_packing Flat table  on deletion of Party Packing Node
    if ($node->type == 'party_packing') {
        db_delete('flat_party_packing')
                ->condition('nid', $node->nid)
                ->execute();
    }
    // Delete Nid's entry from  EGIR Flat table  on deletion of EGIR Node
    if ($node->type == 'egir') {
        db_delete('flat_unloading')
                ->condition('nid', $node->nid)
                ->execute();
    }

    // Delete Nid's entry from  packing Flat table  on deletion of EGIR Node
    if ($node->type == 'picking') {
        db_delete('flat_picking')
                ->condition('nid', $node->nid)
                ->execute();
    }

    // Delete Nid's entry from  OTIF Flat table  on deletion of EGIR Node
    if ($node->type == 'billing_data') {
        db_delete('flat_billing_data')
                ->condition('nid', $node->nid)
                ->execute();
    }
}

// Required hul code & distributor id only to check hul address verified or not
function check_hul_code_exists($hul_code,$distributor_id) {
    //global $user;
    $hu_code = '';
    //$distributor_id = change_feeds_import_get_distributor_id($user->uid);
    if (!empty($hul_code)) {
        $query = db_select('node', 'hul');
        $query->condition('hul.type', 'hul_code_master');
        $query->condition('hul.uid', $distributor_id, '=');
        //Hul code  $hul_code,
        $query->fields('hul', array('title'));
        $query->condition('hul.title', $hul_code, '=');
        // Hul Status Not confirmed   $hul_status!  =1
        $query->leftJoin('field_data_field_hul_status', 'hul_st', 'hul_st.entity_id = hul.nid');
        $query->condition('hul_st.field_hul_status_value', 1, '!=');
        $hu_code = $query->execute()->fetchField();
    }
    return $hu_code;
}

/**
 * 
 * Implements hook_feeds_presave($source, $entity, $item)
 */
function change_feeds_import_feeds_presave($source, $entity, $item, $entity_id) {
    require_once drupal_get_path('module', 'change_feeds_import') . '/form/upload_billing_data.inc';
    if (!empty($item)) {
        foreach ($item as $key => $value) {
            $item[$key] = mb_convert_encoding($value, 'UTF-8', 'UTF-8');
        }
    }
    global $user;
    // Store distributor id in author in each node
    $distributor_id = change_feeds_import_get_distributor_id($user->uid);
    $distributor_id = change_feeds_import_get_distributor_id($user->uid);
    $logged_in_distributor_id = $distributor_id;
    $distributor_wise_template = explode(',', variable_get('distributor_feed_importer'));
    if (in_array($entity->feeds_item->id, $distributor_wise_template)) {
        if (in_array('administrator', $user->roles) || in_array('central_distributor', $user->roles)) {
            if (empty($item['distributor name'])) {
                drupal_set_message("Distributor Name Column Missing", 'error');
                $entity->feeds_item->skip = TRUE;
                return;
            } else {
                $distributor_id = validate_distributor_name(trim($item['distributor name']));
                if (empty($distributor_id)) {
                    drupal_set_message("Invalid Distributor Name:" . $item['distributor name'], 'error');
                    $entity->feeds_item->skip = TRUE;
                    return;
                }
                $entity->distributorid = $distributor_id;
            }
            $central_distributor_id = $logged_in_distributor_id;
        }
        // if child distributor logged in 
        else {
            $central_distributor_id = get_central_distributor_id($logged_in_distributor_id);
            if (!empty($item['distributor name'])) {
                drupal_set_message("Template Mismatch.", 'error');
                $entity->feeds_item->skip = TRUE;
            } else {
                $distributor_id = $distributor_id;
                $entity->distributorid = $distributor_id;
            }
        }
    }
    // For other templates other than outlet_master,hul_code_master,hul_area_code_mapping
    // This is for central distributor datas
    else {
        $central_distributor_id = $logged_in_distributor_id;
    }
    // This will return uid of distributor if present in the system
    $is_valid_distributor = check_valid_distributor($distributor_id);
    if (empty($is_valid_distributor)) {
        drupal_set_message("Invalid Distributor Name:" . $item['distributor name'], 'error', FALSE);
        $entity->feeds_item->skip = TRUE;
    }
    if ($entity->feeds_item->id == 'sku7_code_master_leanbox') {
        $query = db_select('node', 'n');
        $query->condition('n.type', 'product_validation_master');
        //$query->condition('n.uid', $distributor_id);
        $query->fields('n', array('title'));
        $product_list_array = $query->execute()->fetchAllKeyed(0, 0);

        $sku = $entity->title;
        if (!empty($product_list_array)) {

            // commenting old code
//      $product_list = variable_get('sku_product_list', '');
//         $product_list = explode(",", $product_list);
//         foreach ($product_list as $key => $val) {
//            $product_list_array[] = strtolower(trim($val));
//         }
            //$sku = $entity->field_sku7_code['und'][0]['value'];
//      $sku = $entity->title;
            $product_name = $entity->field_product_name['und'][0]['value'];
            $product_name = explode(" ", $product_name);
            $product_name_first_word = trim($product_name[0]);
            if (isset($item['sub division'])) {
                $sub_division = $item['sub division'];
            }
            // temporary fix
//      if (($sub_division != $product_name_first_word ) || (!in_array($product_name_first_word, $product_list_array))) {
//        drupal_set_message("Please enter correct name and sub division for sku $sku", 'error');
//        $entity->feeds_item->skip = TRUE;
//      }
            // temporary fix
        }

        //columns validation

        $col_sku_wt = $item['sku weight'];
        if (!empty($col_sku_wt)) {
            if (!is_numeric($col_sku_wt)) {
                drupal_set_message("Please enter correct sku weight for sku $sku", 'error');
                $entity->feeds_item->skip = TRUE;
            }
        }

        $col_carton_len = $item['carton length (ft)'];
        if (!empty($col_carton_len)) {
            if (!is_numeric($col_carton_len)) {
                drupal_set_message("Please enter correct carton length for sku $sku", 'error');
                $entity->feeds_item->skip = TRUE;
            }
        }

        $col_carton_bh = $item['carton breadth (ft)'];
        if (!empty($col_carton_bh)) {
            if (!is_numeric($col_carton_bh)) {
                drupal_set_message("Please enter correct carton breadth for sku $sku", 'error');
                $entity->feeds_item->skip = TRUE;
            }
        }

        $col_carton_ht = $item['carton height (ft)'];
        if (!empty($col_carton_ht)) {
            if (!is_numeric($col_carton_ht)) {
                drupal_set_message("Please enter correct carton height for sku $sku", 'error');
                $entity->feeds_item->skip = TRUE;
            }
        }

        $col_carton_vol = $item['carton volume (cft)'];
        if (!empty($col_carton_vol)) {
            if (!is_numeric($col_carton_vol)) {
                drupal_set_message("Please enter correct carton volume for sku $sku", 'error');
                $entity->feeds_item->skip = TRUE;
            }
        }

        $col_carton_wt = $item['carton weight (kgs)'];
        if (!empty($col_carton_wt)) {
            if (!is_numeric($col_carton_wt)) {
                drupal_set_message("Please enter correct carton weight for sku $sku", 'error');
                $entity->feeds_item->skip = TRUE;
            }
        }

        // If empty anyone column and other are not in length, breadth and height
        if (empty($col_carton_len) && (!empty($col_carton_bh) || !empty($col_carton_ht))) {
            drupal_set_message("Please enter carton length for sku $sku", 'error');
            $entity->feeds_item->skip = TRUE;
        } else if (empty($col_carton_bh) && (!empty($col_carton_len) || !empty($col_carton_ht))) {
            drupal_set_message("Please enter carton breadth for sku $sku", 'error');
            $entity->feeds_item->skip = TRUE;
        } else if (empty($col_carton_ht) && (!empty($col_carton_len) || !empty($col_carton_bh))) {
            drupal_set_message("Please enter carton height for sku $sku", 'error');
            $entity->feeds_item->skip = TRUE;
        }

        // sub category validation
        $sub_category = $item['sub category'];
        $check_sub_category_nid = check_product_sub_category_exist($sub_category);
        if (!empty($sub_category)) {
            if (empty($check_sub_category_nid)) {
                drupal_set_message("Please enter correct sub category for sku $sku", 'error');
                $entity->feeds_item->skip = TRUE;
            } else {
                $entity->field_sub_category['und'][0]['nid'] = $check_sub_category_nid;
            }
        }

        // sub-putaway group validation
        $sub_putaway_grp = $item['sub-putaway group'];
        $check_sub_putaway_grp_nid = check_sub_putaway_group_exist($sub_putaway_grp);
        //temporary fix
//    if(!empty($sub_putaway_grp)) {
//      if(empty($check_sub_putaway_grp_nid)) {
//        drupal_set_message("Please enter correct sub putaway group for sku $sku", 'error');
//        $entity->feeds_item->skip = TRUE;
//      }
//      else {
//        $entity->field_sub_putaway_group['und'][0]['nid'] = $check_sub_putaway_grp_nid;
//      }
//    }
        //temporary fix
        // Brand Validation.
        if (!empty($item['brand'])) {
            $brand = brand_validate($item['brand']);
            if (empty($brand)) {
                drupal_set_message("Brand " . $item['brand'] . " does not exist in Brand Master", 'error');
                $entity->feeds_item->skip = TRUE;
            }
        } else {
            drupal_set_message("Please enter Brand for SKU Code- $sku.", 'error');
            $entity->feeds_item->skip = TRUE;
        }

        // Update the sku7 code in SKU7_CODE field
        $entity->field_sku7_code['und'][0]['value'] = $sku;

        // code for volume calculation
        //$sku_vol = $entity->field_sku_volume['und'][0]['value'];
        $carton_vol = $entity->field_carton_volume['und'][0]['value'];
        $upc = $entity->field_unit_case_units_['und'][0]['value'];

        $carton_length = $entity->field_carton_length['und'][0]['value'];
        $carton_breadth = $entity->field_carton_breadth['und'][0]['value'];
        $carton_height = $entity->field_carton_height['und'][0]['value'];

        //if(empty($sku_vol)) {
        if (!empty($carton_vol)) {
            $entity->field_sku_volume['und'][0]['value'] = round(($carton_vol / $upc), 2);
        } else {
            $carton_volume = $carton_length * $carton_breadth * $carton_height;
            $entity->field_sku_volume['und'][0]['value'] = round(($carton_volume / $upc), 2);
            $entity->field_carton_volume['und'][0]['value'] = $carton_volume;
        }
//    }
//    else {
//      if(empty($carton_vol)) {
//        $entity->field_carton_volume['und'][0]['value'] = $sku_vol * $upc;
//      }
//    }
        // code for weight calculation
        $sku_wt = $entity->field_sku_weight['und'][0]['value'];
        $carton_wt = $entity->field_carton_weight['und'][0]['value'];

        if (empty($sku_wt)) {
            $entity->field_sku_weight['und'][0]['value'] = round(($carton_wt / $upc), 2);
        } else {
            if (empty($carton_wt)) {
                $entity->field_carton_weight['und'][0]['value'] = $sku_wt * $upc;
            }
        }
    }

    // Godown Short Reason Master
    if ($entity->feeds_item->id == 'godown_short_reason_master') {
        $reason = $item['reason'];
        $approval_flag = strtolower($item['approval flag']);
        if (!empty($reason)) {
            if (empty($approval_flag)) {
                drupal_set_message("Please enter the approval flag for reason $reason.", 'error');
                $entity->feeds_item->skip = TRUE;
            } else {
                if ($approval_flag == 'yes' || $approval_flag == 'no') {
                    $entity->field_approval_flag['und'][0]['value'] = $approval_flag;
                } else {
                    drupal_set_message("Please enter the correct approval flag for reason $reason.", 'error');
                    $entity->feeds_item->skip = TRUE;
                }
            }
        }
    }

    if ($entity->feeds_item->id == 'product_sub_category_master') {

        // columns validation
        $sub_category = $item['sub category'];
        $rs_per_kg = $item['rs/kg'];
        $rs_per_cft = $item['rs/cft'];


        if (!empty($rs_per_kg)) {
            if (!is_numeric($rs_per_kg)) {
                drupal_set_message("Please enter correct rs per kg for sub category $sub_category.", 'error');
                $entity->feeds_item->skip = TRUE;
            }
        }

        if (!empty($rs_per_cft)) {
            if (!is_numeric($rs_per_cft)) {
                drupal_set_message("Please enter correct rs per cft for sub category $sub_category.", 'error');
                $entity->feeds_item->skip = TRUE;
            }
        }
        // category validation
        $category = $item['category'];
        $check_category_nid = check_product_category_exist($category, $distributor_id);
        if (!empty($category)) {
            if (empty($check_category_nid)) {
                drupal_set_message("Please enter correct category for sub category $sub_category", 'error');
                $entity->feeds_item->skip = TRUE;
            } else {
                $entity->field_product_category['und'][0]['nid'] = $check_category_nid;
            }
        }
    }

    if ($entity->feeds_item->id == 'update_hul_updated_address') {
        $title = $entity->title;
        $existing_uid = check_hul_code_exist($title);
        if (!empty($existing_uid) && ($existing_uid != $distributor_id)) {
            drupal_set_message("You can not update hul_code_master because same title is already uploaded by another distributor", 'error', FALSE);
            $entity->feeds_item->skip = TRUE;
        }

        $hul_add_status = $entity->field_hul_status['und'][0]['value'];
        if ($hul_add_status != 1) {
            drupal_set_message("You can not update hul_code_master because Address is not Confirmed", 'error', FALSE);
            $entity->feeds_item->skip = TRUE;
        }
        $node = node_load($entity->nid, NULL, TRUE);
        //$entity->field_updated_address['und'][0]['country'] = $node->field_updated_address['und'][0]['country'];
        $entity->field_updated_address['und'][0]['administrative_area'] = $node->field_updated_address['und'][0]['administrative_area'];
        $entity->field_updated_address['und'][0]['sub_administrative_area'] = $node->field_updated_address['und'][0]['sub_administrative_area'];
        $entity->field_updated_address['und'][0]['postal_code'] = $node->field_updated_address['und'][0]['postal_code'];
        $entity->field_updated_address['und'][0]['thoroughfare'] = $node->field_updated_address['und'][0]['thoroughfare'];
        $entity->field_updated_address['und'][0]['premise'] = $node->field_updated_address['und'][0]['premise'];
        $entity->field_updated_address['und'][0]['organisation_name'] = $node->field_updated_address['und'][0]['organisation_name'];
        $entity->field_updated_address['und'][0]['name_line'] = $node->field_updated_address['und'][0]['name_line'];
        $entity->field_updated_address['und'][0]['first_name'] = $node->field_updated_address['und'][0]['first_name'];
        $entity->field_updated_address['und'][0]['last_name'] = $node->field_updated_address['und'][0]['last_name'];
    }

// Add presave/alter code for van stop master uploader
    if ($entity->feeds_item->id == 'target_master_import') {
        $dis_id = leanbox_mobile_get_distributor_using_rscode($entity->title);
        if (!empty($dis_id)) {
            $entity->title = $dis_id; // storing dis id here
            $entity->uid = $dis_id;   // storing dis id in author
        } else {
            drupal_set_message("Please enter correct Rs Code $node_title", 'error');
            $entity->feeds_item->skip = TRUE;
        }
        foreach ($item as $k => $val) {
            if ($k == 'stop size' || $k == 'del per van' || $k == 'dets bulk' || $k == 'dets loose' || $k == 'fnb bulk' || $k == 'fnb loose' || $k == 'non-pp' || $k == 'pp' || $k == 'pp bulk' || $k == 'pp loose' || $k == 'Sales reg days') {
                if (!is_numeric($val)) {
                    drupal_set_message("Please enter numaric value for $k", 'error');
                    $entity->feeds_item->skip = TRUE;
                }
            }
        }
        $pp_finish_time = $entity->field_pp_finish_time['und'][0]['value'];
        if (!empty($pp_finish_time)) {
            $pp_finish_time = strtotime($pp_finish_time);
            if (empty($pp_finish_time)) {
                drupal_set_message("Please enter correct value for PP finish time", 'error');
                $entity->feeds_item->skip = TRUE;
            } else {
                $entity->field_pp_finish_time['und'][0]['value'] = date('h:i A', $pp_finish_time);
            }
        }
        $picking_finish_time = $entity->field_picking_finish_time['und'][0]['value'];
        if (!empty($picking_finish_time)) {
            $picking_finish_time = strtotime($picking_finish_time);
            if (empty($picking_finish_time)) {
                drupal_set_message("Please enter correct value for Picking finish time", 'error');
                $entity->feeds_item->skip = TRUE;
            } else {
                $entity->field_picking_finish_time['und'][0]['value'] = date('h:i A', $picking_finish_time);
            }
        }
        $unloading_finish_time = $entity->field_unloading_finish_time['und'][0]['value'];
        if (!empty($unloading_finish_time)) {
            $unloading_finish_time = strtotime($unloading_finish_time);
            if (empty($unloading_finish_time)) {
                drupal_set_message("Please enter correct value for Unloading finish time", 'error');
                $entity->feeds_item->skip = TRUE;
            } else {
                $entity->field_unloading_finish_time['und'][0]['value'] = date('h:i A', $unloading_finish_time);
            }
        }
        $otf_finish_time = $entity->field_otif_finish_time['und'][0]['value'];
        if (!empty($otf_finish_time)) {
            $otf_finish_time = strtotime($otf_finish_time);
            if (empty($otf_finish_time)) {
                drupal_set_message("Please enter correct value for otif finish time", 'error');
                $entity->feeds_item->skip = TRUE;
            } else {
                $entity->field_otif_finish_time['und'][0]['value'] = date('h:i A', $otf_finish_time);
            }
        }
    }

    if (!empty($distributor_id)) {
        $entity->uid = $distributor_id;
        if ($entity->type == 'pdd_master') {
            $entity->title = $distributor_id;
        }

        if ($entity->type == 'holiday_master') {
            $entity->title = $distributor_id;
        }
    }
    if ($entity->type == 'egir') {
//    $title = $entity->title;
//    $res = modify_views_forms_master_feed_validate($entity->title, 'egir');
//    if (!empty($res)) {
//      drupal_set_message("$title already exist in EGIR Master", 'error');
//      $entity->feeds_item->skip = TRUE;
//    }
        $egir_start_explode = explode(" ", $entity->field_egir_start_time[LANGUAGE_NONE][0]['value']);
        $egir_end_explode = explode(" ", $entity->field_egir_end_time[LANGUAGE_NONE][0]['value']);
        $egir_date_explode = explode(" ", $entity->field_egir_date[LANGUAGE_NONE][0]['value']);
        $entity->field_egir_start_time[LANGUAGE_NONE][0]['value'] = $egir_date_explode[0] . ' ' . $egir_start_explode[1];
        $entity->field_egir_end_time[LANGUAGE_NONE][0]['value'] = $egir_date_explode[0] . ' ' . $egir_end_explode[1];
    }

    if ($entity->feeds_item->id == 'outlet_area_hook_mapping') {
        // we have custom upload for outlet area hook
    }


    if ($entity->feeds_item->id == 'area_hook_group_master') {
        $area_id = $entity->field_area_hook_group_id['und'][0]['value'];
        $area_array = check_area_id_exists($area_id);
        if (!empty($area_array)) {
            if ($area_id_bool = in_array($area_id, $area_array)) {
                drupal_set_message("$area_id Area Id Already exist in Area Hook Master", 'error');
                $entity->feeds_item->skip = TRUE;
            }
        }
    }
    if ($entity->feeds_item->id == 'outlet_sequence' || $entity->feeds_item->id == 'user_defined_outlet_sequence') {

        $import_id = $entity->feeds_item->id;
        $title = $entity->title;
        $res = check_node_title_exists($entity->title, 'outlet_master');
        if (empty($res)) {
            drupal_set_message("$title Party code does not exist in Outlet master", 'error');
            $entity->feeds_item->skip = TRUE;
        } else {
            $query = db_select('node', 'n');
            $query->fields('n', array('nid'));
            $query->addTag('node_uid');
            if ($import_id == 'user_defined_outlet_sequence') {
                $query->join('field_data_field_sequence', 'fs', 'fs.entity_id = n.nid');
            }
            $query->join('field_data_field_hul_code', 'h', 'h.entity_id = n.nid');
            $query->join('field_data_field_area_hook_group_hul', 'gh', 'gh.entity_id = n.nid');
            $query->join('node', 'n1');
            $query->join('field_data_field_hul_status', 's', 's.entity_id = n1.nid');
            $query->condition('n.nid', $res);
            $query->condition('n1.type', 'hul_code_master');
            $query->condition('gh.field_area_hook_group_hul_value', 1);
            $query->condition('s.field_hul_status_value', 1);
            $query->condition('n1.uid', $distributor_id);
            $nid = $query->execute()->fetchField();
            if (empty($nid)) {
                drupal_set_message("$title Party code does not have address confirmed or Area Hook Confirmed", 'error');
                $entity->feeds_item->skip = TRUE;
            }
        }
    }

    if ($entity->type == 'return_bill') {
        $title = $entity->title;
        $res = modify_views_forms_master_feed_validate($entity->title, 'return_bill');
        if (!empty($res)) {
            drupal_set_message("$title already exist in return bill master", 'error');
            $entity->feeds_item->skip = TRUE;
        }
    }
    if ($entity->type == 'ccfot') {
        $title = $entity->title;
        $res = modify_views_forms_master_feed_validate($entity->title, 'ccfot');
        if (!empty($res)) {
            drupal_set_message("$title already exist in ccoft master", 'error');
            $entity->feeds_item->skip = TRUE;
        }
        if (empty($entity->field_bill_quantity[LANGUAGE_NONE])) {
            $entity->feeds_item->skip = TRUE;
        }
        if ($entity->field_actual_order_quantity[LANGUAGE_NONE] == NULL) {
            $entity->feeds_item->skip = TRUE;
        }
        if ($entity->field_suggested_order_quantity[LANGUAGE_NONE] == NULL) {
            $entity->feeds_item->skip = TRUE;
        }
    }
    if (($entity->type == 'billing_data') || ($entity->type == 'return_bill')) {
        if ($entity->field_sum_of_net_sales_value[LANGUAGE_NONE] == NULL) {
            $entity->feeds_item->skip = TRUE;
        }
        if ($entity->field_sum_of_sales_ret_value[LANGUAGE_NONE] == NULL) {
            $entity->feeds_item->skip = TRUE;
        }
        if ($entity->field_sum_of_sales_value[LANGUAGE_NONE] == NULL) {
            $entity->feeds_item->skip = TRUE;
        }
        if ($entity->field_mrp[LANGUAGE_NONE] == NULL) {
            $entity->feeds_item->skip = TRUE;
        }
        if ($entity->field_tur[LANGUAGE_NONE] == NULL) {
            $entity->feeds_item->skip = TRUE;
        }
        if ($entity->field_sum_of_total_sales_qty[LANGUAGE_NONE] == NULL) {
            $entity->feeds_item->skip = TRUE;
        }
        if ($entity->field_sum_of_total_sales_ret_qty[LANGUAGE_NONE] == NULL) {
            $entity->feeds_item->skip = TRUE;
        }
        if ($entity->field_sum_of_net_sales_qty[LANGUAGE_NONE] == NULL) {
            $entity->feeds_item->skip = TRUE;
        }
        if ($entity->field_sum_of_sales_free_qty[LANGUAGE_NONE] == NULL) {
            $entity->feeds_item->skip = TRUE;
        }
        if ($entity->field_sum_of_sales_ret_free_qty[LANGUAGE_NONE] == NULL) {
            $entity->feeds_item->skip = TRUE;
        }
    }


    if ($entity->type == 'resource_master') {
        $resurce_type_value = $entity->field_resource_type[LANGUAGE_NONE][0]['value'];
        $res = modify_views_forms_master_feed_validate($resurce_type_value, 'resource_type');
        if (empty($res)) {
            drupal_set_message("$resurce_type_value does not exist in Resource type", 'error');
            $entity->feeds_item->skip = TRUE;
        }
    }
    if ($entity->type == 'party_pack_master') {
        $channel = $entity->field_channel[LANGUAGE_NONE][0]['value'];
        $pl_group = $entity->field_pl_group[LANGUAGE_NONE][0]['value'];
        $party_packing = $entity->field_party_packing[LANGUAGE_NONE][0]['value'];

        $res2 = modify_views_forms_master_feed_validate($channel, 'channel_master');
        $res3 = modify_views_forms_master_feed_validate($pl_group, 'pl_group_master');
        $res4 = check_unique_group_channle_combination($channel, $pl_group);
        if (empty($res2)) {
            drupal_set_message("$channel does not exist in Channel Master", 'error');
            $entity->feeds_item->skip = TRUE;
        } else if (empty($res3)) {
            drupal_set_message("$pl_group does not exist in PL Group Master", 'error');
            $entity->feeds_item->skip = TRUE;
        }
//    else  if (!empty($res4)) {
//      drupal_set_message("There is already Node present for $channel-$pl_group in Party Pack Master", 'error');
//      $entity->feeds_item->skip = TRUE;
//    }
        elseif (( (strpos($party_packing, 'y') !== false) || (strpos($party_packing, 'Y') !== false) ) && ($party_packing != "YES")) {
            drupal_set_message("$party_packing Should be YES", 'error');
            $entity->feeds_item->skip = TRUE;
        } elseif ((strpos($party_packing, 'n') !== false) || (strpos($party_packing, 'N') !== false) && ($party_packing != "NO")) {
            drupal_set_message("$party_packing Should be NO", 'error');
            $entity->feeds_item->skip = TRUE;
        } else {
            if (($party_packing != "YES") && ($party_packing != "NO")) {
                drupal_set_message("$party_packing Should be YES or NO", 'error');
                $entity->feeds_item->skip = TRUE;
            }
        }
    }

    if ($entity->type == 'dispatch_data') {
        $title = $entity->title;
        $res = modify_views_forms_master_feed_validate($entity->title, 'dispatch_data');
        if (!empty($res)) {
            drupal_set_message("$title already exist in dispatch data", 'error');
            $entity->feeds_item->skip = TRUE;
        }
    }
    if ($entity->type == 'channel_master') {
//    $title = $entity->title;
//    $res = modify_views_forms_master_feed_validate($entity->title, 'channel_master');
//    if (!empty($res)) {
//      drupal_set_message("$title already exist in channel master", 'error');
//      $entity->feeds_item->skip = TRUE;
//    }
    }
    if ($entity->type == 'godown_master') {
//    $title = $entity->title;
//    $res = modify_views_forms_master_feed_validate($entity->title, 'godown_master');
//    if (!empty($res)) {
//      drupal_set_message("$title already exist in godown master", 'error');
//      $entity->feeds_item->skip = TRUE;
//    }
    }
    if ($entity->type == 'party_pack_master') {
//    $title = $entity->title;
//    $res = modify_views_forms_master_feed_validate($entity->title, 'party_pack_master');
//    if (!empty($res)) {
//      drupal_set_message("$title already exist in party pack master", 'error');
//      $entity->feeds_item->skip = TRUE;
//    }
    }
    if ($entity->type == 'sku7_code_master') {
//    $title = $entity->title;
//    $res = modify_views_forms_master_feed_validate($entity->title, 'sku7_code_master');
//    if (!empty($res)) {
//      drupal_set_message("$title already exist in sku7 code master", 'error');
//      $entity->feeds_item->skip = TRUE;
//    }
    }
    if ($entity->type == 'pl_group_master') {
//    $title = $entity->title;
//    $res = modify_views_forms_master_feed_validate($entity->title, 'pl_group_master');
//    if (!empty($res)) {
//      drupal_set_message("$title already exist in pl group master", 'error');
//      $entity->feeds_item->skip = TRUE;
//    }
    }
    if ($entity->type == 'vehicle_master') {
//    $title = $entity->title;
//    $res = modify_views_forms_master_feed_validate($entity->title, 'vehicle_master');
//    if (!empty($res)) {
//      drupal_set_message("$title already exist in vehicle master ", 'error');
//      $entity->feeds_item->skip = TRUE;
//    }
    }
    if ($entity->feeds_item->id == 'hul_code_area_code_mapping') {
        $entity->changetype = 'hul_code_area_code_mapping';
        $hul_code = $entity->title;
        $area_code = $item['area code'];
        $areacode_exist = check_hul_area_code_exist($area_code, $central_distributor_id);
        $existing_uid = check_hul_code_exist($title);
        if (!empty($existing_uid) && ($existing_uid != $distributor_id)) {
            drupal_set_message("Invalid HUL Code:$hul_code", 'error', FALSE);
            $entity->feeds_item->skip = TRUE;
        }
        if (empty($areacode_exist)) {
            drupal_set_message("Area Code :$area_code does not exist.", 'error', FALSE);
            $entity->feeds_item->skip = TRUE;
        }
    }
    if ($entity->feeds_item->id == 'area_code_master') {
        $area_code = trim($entity->title);
        $nearby_area_code = trim($item['nearby area code']);
        if ($area_code == $nearby_area_code) {
            drupal_set_message("Area Code:$area_code and Nearby Area Code :$nearby_area_code can not be same. ", 'error', FALSE);
            $entity->feeds_item->skip = TRUE;
        } else {
            $near_by_areacode_nid = check_hul_area_code_exist($nearby_area_code, $central_distributor_id);
            // Create nearby area code first
            if (empty($near_by_areacode_nid) && !empty($nearby_area_code)) {
                //drupal_set_message("Nearby Area Code :$nearby_area_code does not exist.Please create $nearby_area_code first. ", 'error', FALSE);
                //$entity->feeds_item->skip = TRUE;
                $node = new StdClass();
                $node->type = 'area_code_master';
                $node->status = 1;
                $node->title = $nearby_area_code;
                $node->language = '';
                node_save($node);
                if (!empty($node->nid)) {
                    $entity->field_linked_area_code[LANGUAGE_NONE][0]['nid'] = $node->nid;
                }
            }
        }
    }
    if ($entity->feeds_item->id == 'hul_code_master') {
        $title = $entity->title;
        $existing_uid = check_hul_code_exist($title);
        if (!empty($existing_uid) && ($existing_uid != $distributor_id)) {
            drupal_set_message("You can not update hul_code_master because same title is already uploaded by another distributor", 'error', FALSE);
            $entity->feeds_item->skip = TRUE;
        }

        $ph_no = trim($item['hul phone no']); //trim($entity->field_hul_phone_no[LANGUAGE_NONE][0]['value']);
        $hul_address = $entity->field_hul_address[LANGUAGE_NONE][0]['value'];
        $hul_lat = $entity->field_hul_lat[LANGUAGE_NONE][0]['value'];
        $hul_long = $entity->field_hul_long[LANGUAGE_NONE][0]['value'];
        if (!empty($ph_no)) {
            if (!preg_match('/^[0-9]*$/', $ph_no)) {
                drupal_set_message("Hul Phone No must be numeric for HUL Code - $title", 'error', FALSE);
                $entity->feeds_item->skip = TRUE;
            } else if (strlen($ph_no) != 10) {
                drupal_set_message("Hul Phone No has to be 10 digits for HUL Code - $title", 'error', FALSE);
                $entity->feeds_item->skip = TRUE;
            }
        }
        if (empty($hul_address)) {
            drupal_set_message("Hul Address Can Not Be Null", 'error', FALSE);
            $entity->feeds_item->skip = TRUE;
        }
        if (!isset($hul_lat) || !isset($hul_long)) {
            drupal_set_message("Lat Long cannot be blank for HUL Code $title", 'error', FALSE);
            $entity->feeds_item->skip = TRUE;
        }
        if (floatval($hul_lat) == 0 || floatval($hul_long) == 0) {
            drupal_set_message("Lat Long cannot be zero for HUL Code $title", 'error', FALSE);
            $entity->feeds_item->skip = TRUE;
        }
        if (($hul_lat < 0) || ($hul_long < 0)) {
            drupal_set_message("Lat Long cannot be negative for HUL Code $title", 'error', FALSE);
            $entity->feeds_item->skip = TRUE;
        }
    }

    if ($entity->feeds_item->id == 'outlet_master') {

        $sales_day = strtolower($entity->field_sales_day[LANGUAGE_NONE][0]['value']);
        $delivery_day = strtolower($entity->field_delivery_day[LANGUAGE_NONE][0]['value']);
        $sales_day_tid = leanbox_check_taxonomy_exists_by_name($sales_day, 'Outlet days');
        $entity->field_party_code[LANGUAGE_NONE][0]['value'] = $entity->title;
        //$delivery_day_tid = leanbox_check_taxonomy_exists_by_name($delivery_day, 'Outlet days');
        if (empty($sales_day_tid)) {
            drupal_set_message("$sales_day does not exist in Sales Day", 'error');
            $entity->feeds_item->skip = TRUE;
        }
        $salesman = $entity->field_salesman[LANGUAGE_NONE][0]['value'];
        $salesman_code = $entity->field_salesman_code[LANGUAGE_NONE][0]['value'];
        if (empty($salesman)) {
            drupal_set_message("Salesman Can Not Be Null", 'error', FALSE);
            $entity->feeds_item->skip = TRUE;
        }
        if (empty($salesman_code)) {
            drupal_set_message("Salesman Code Can Not Be Null", 'error', FALSE);
            $entity->feeds_item->skip = TRUE;
        }

//    if (empty($delivery_day_tid)) {
//      drupal_set_message("$delivery_day does not exist in Delivery Day", 'error');
//      $entity->feeds_item->skip = TRUE;
//    }
        $hul_code = $entity->field_hul_code[LANGUAGE_NONE][0]['value'];
        $channel = $entity->field_channel[LANGUAGE_NONE][0]['value'];
        $pl_group = $entity->field_pl_group[LANGUAGE_NONE][0]['value'];
        $distributor_name = $item['distributor name'];
        /* $res1 = modify_views_forms_master_feed_validate($hul_code, 'hul_code_master');
          $res2 = modify_views_forms_master_feed_validate($channel, 'channel_master');
          $res3 = modify_views_forms_master_feed_validate($pl_group, 'pl_group_master');
          if (empty($res1)) {
          drupal_set_message("$hul_code does not exist in HUL Code Master", 'error');
          $entity->feeds_item->skip = TRUE;
          } else if (empty($res2)) {
          drupal_set_message("$channel does not exist in Channel Master", 'error');
          $entity->feeds_item->skip = TRUE;
          } else if (empty($res3)) {
          drupal_set_message("$pl_group does not exist in PL Group Master", 'error');
          $entity->feeds_item->skip = TRUE;
          } */
        $res1 = validate_distributor_content($hul_code, 'hul_code_master', $distributor_id);
        $res2 = validate_master_data($channel, 'channel_master');
        $res3 = validate_master_data($pl_group, 'pl_group_master');
        if (empty($res1)) {
            drupal_set_message("Invalid Hul Code:$hul_code", 'error');
            $entity->feeds_item->skip = TRUE;
        }
        if (empty($res2)) {
            drupal_set_message("$channel does not exist in Channel Master", 'error');
            $entity->feeds_item->skip = TRUE;
        }
        if (empty($res3)) {
            drupal_set_message("$pl_group does not exist in PL Group Master", 'error');
            $entity->feeds_item->skip = TRUE;
        }
        // Hul code of selected distributor
        if (!empty($res1)) {
            $entity->field_hul_code_reference[LANGUAGE_NONE][0]['nid'] = $res1;
        }
    }
    if ($entity->feeds_item->id == 'sales_delivery_day_importer') {
        $sales_day = strtolower($entity->title);
        $delivery_day = strtolower($entity->field_sales_delivery_day[LANGUAGE_NONE][0]['value']);
        $sales_day_tid = leanbox_check_taxonomy_exists_by_name($sales_day, 'Outlet days');
        $delivery_day_tid = leanbox_check_taxonomy_exists_by_name($delivery_day, 'Outlet days');
        if (empty($sales_day_tid)) {
            drupal_set_message("$sales_day does not exist in Sales Day", 'error');
            $entity->feeds_item->skip = TRUE;
        }
        if (empty($delivery_day_tid)) {
            drupal_set_message("$delivery_day does not exist in Delivery Day", 'error');
            $entity->feeds_item->skip = TRUE;
        }
    }

    // Validate Payment Terms Importer
    if ($entity->feeds_item->id == 'payment_terms') {
        $title = $entity->title;
        $res = validate_outlet_master_data($title, $distributor_id);
        // Outlet Master node is updated for existing party code.
        // No new node will be created.
        if (empty($res)) {
            drupal_set_message("You can not update payment term because party code- .'$entity->title'. does not exists.", 'error');
            $entity->feeds_item->skip = TRUE;
        }
        // check the character limit of "Payment Term" field.
        $max_payment_term_character_limit = strlen($entity->field_payment_terms[LANGUAGE_NONE][0]['value']);
        if ($max_payment_term_character_limit > 12) {
            drupal_set_message("The character limit of payment term of party code- .'$entity->title'. should be less than or Equal to 12.", 'error');
            $entity->feeds_item->skip = TRUE;
        }
        // check the integer value of "Credit Days" field.
        $credit_days = $entity->field_credit_days[LANGUAGE_NONE][0]['value'];
        if (!is_numeric($credit_days)) {
            drupal_set_message("The credit days of party code- .'$entity->title'. should be numeric.", 'error');
            $entity->feeds_item->skip = TRUE;
        } else {
            $whole_number = floor($credit_days);
            $fraction = ($credit_days - $whole_number);
            if (($fraction != 0) || ($credit_days < 0)) {
                drupal_set_message("The credit days of party code- .'$entity->title'. should be integer.", 'error');
                $entity->feeds_item->skip = TRUE;
            }
        }

        $updated_by = $item['updated by'];
        $resource_type = 'PT-CT Incharge';
        $resource_name = check_resource_name_exists($updated_by, $resource_type, $central_distributor_id);
        if (empty($resource_name) && !empty($updated_by)) {
            drupal_set_message("Updated By name does not match with resource master - Resource type PT-CT Incharge for Party code: $entity->title.", 'error');
            $entity->feeds_item->skip = TRUE;
        }

        $party_code = $entity->title;
        $reason_for_change = $item['reason for change'];
        $get_change_reason = get_change_reason($reason_for_change, $distributor_id);
        $check_party_code = check_exsiting_record_for_party_code($party_code, $distributor_id);

        if (empty($get_change_reason) && !empty($check_party_code) && !empty($reason_for_change)) {
            drupal_set_message("Reason for Change does not match with PT-CT Change Reason Master for Party code: $entity->title.", 'error');
            $entity->feeds_item->skip = TRUE;
        }

        if (empty($reason_for_change) && !empty($check_party_code)) {
            drupal_set_message("Reason for Change field is required for Party code: $entity->title.", 'error');
            $entity->feeds_item->skip = TRUE;
        }
        if (empty($updated_by)) {
            drupal_set_message("Updated By field is required for Party code: $entity->title.", 'error');
            $entity->feeds_item->skip = TRUE;
        }
        $payment_term = $entity->field_payment_terms[LANGUAGE_NONE][0]['value'];
        if (empty($payment_term)) {
            drupal_set_message("Payment Term field is required for Party code: $entity->title.", 'error');
            $entity->feeds_item->skip = TRUE;
        }

        $updated_by_name = $item['updated by'];
        $updated_by_name_nid = get_nid_of_resource($updated_by_name);
        $entity->field_updated_by['und'][0]['nid'] = $updated_by_name_nid;
    }
    //dispatch planning reason master
    if ($entity->feeds_item->id == 'dispatch_planning_reason_master') {
        $reason_type = $entity->field_reason_type[LANGUAGE_NONE][0]['value'];
        $dp_reason = $entity->field_dp_reason[LANGUAGE_NONE][0]['value'];
        $reason_type_exist = check_dp_reason_type_exist($reason_type);
        if ($reason_type_exist == 1 && !empty($reason_type)) {
            drupal_set_message("Reason Type : $reason_type does not exists.Allowed values are deliver,undeliver,partial_deliver,delivery_pending", 'error');
            $entity->feeds_item->skip = TRUE;
        }
        $reason_exist = check_dispatch_planning_reason_exist($reason_type, $dp_reason);
        if (!empty($reason_exist) && !empty($dp_reason)) {
            drupal_set_message("Reason Type-Reason: $reason_type-$dp_reason already exists.", 'error');
            $entity->feeds_item->skip = TRUE;
        }
    }

    if ($entity->feeds_item->id == 'putaway_group_master') {
        $subputaway_grp = $entity->title;
        $putaway_grp = $entity->field_putaway_group[LANGUAGE_NONE][0]['value'];
        if (empty($subputaway_grp)) {
            drupal_set_message("Sub-putaway group cannot be empty.", 'error');
            $entity->feeds_item->skip = TRUE;
        }
        if (empty($putaway_grp)) {
            drupal_set_message("Putaway group cannot be empty.", 'error');
            $entity->feeds_item->skip = TRUE;
        }
    }

    if ($entity->feeds_item->id == 'dispatch_short_reason') {
        global $user;
        $dis_id = change_feeds_import_get_distributor_id($user->uid);
        $trip_type = $item['type'];
        $title = $entity->title;
        $query = db_select('node', 'n');
        $query->condition('n.type', 'dispatch_short_reason');
        $query->condition('n.uid', $dis_id, "=");
        $query->condition('n.title', $title, "=");
        $query->condition('n.status', 1);
        $query->join('field_data_field_dispatch_trip_type', 'tt', 'tt.entity_id = n.nid');
        $query->condition('tt.field_dispatch_trip_type_value', $trip_type);
        $query->fields('n', array('title'));
        $short_reason = $query->execute()->fetchField();
        if ($short_reason) {
            drupal_set_message('Short reason and type already exists for short reason: ' . $short_reason, 'error');
            $entity->feeds_item->skip = TRUE;
        }

        $trip_type_exist = check_dp_dispatch_type_exist($trip_type);
        if ($trip_type_exist == 0 && !empty($trip_type)) {
            drupal_set_message("Type : $trip_type does not exists.", 'error');
            $entity->feeds_item->skip = TRUE;
        }
    }

    // Bounce Cheque reason master uploader.
    if ($entity->feeds_item->id == 'bounce_cheque_reason_master') {
        $reason = $item['bounce cheque reason'];
        if (empty($reason)) {
            drupal_set_message("Please enter bounce check reason.", 'error');
            $entity->feeds_item->skip = TRUE;
        }
    }

    if ($entity->feeds_item->id == 'cancel_discard_reason_master_importer') {
        $reason = trim($item['cancel/discard reason']);
        $reason_type = trim($item['reason type']);

        $field = field_info_field('field_type');
        $allowed_values = list_allowed_values($field);
        $allowed_reason_types = array_keys($allowed_values);
        $allowed_reason_types_str = implode(' or ', $allowed_reason_types);

        if (!in_array($reason_type, $allowed_reason_types)) {
            drupal_set_message("Invalid Reason Type- $reason_type given for Reason- $reason (Allowed Reason Type is $allowed_reason_types_str)", 'error');
            $entity->feeds_item->skip = TRUE;
        }
    }
}

// function check trip type exist in system
function check_dp_dispatch_type_exist($trip_type) {
    $field_dispatch_trip_type = field_info_field('field_dispatch_trip_type');
    $field_dispatch_trip_type = list_allowed_values($field_dispatch_trip_type);
    if (!isset($field_dispatch_trip_type[$trip_type])) {
        return 0;
    }
    return 1;
}

// function check reason type exist in system
function check_dp_reason_type_exist($reason_type) {
    $field_reason_type = field_info_field('field_reason_type');
    $field_reason_type = list_allowed_values($field_reason_type);
    if (!isset($field_reason_type[$reason_type])) {
        return 1;
    }
    return 0;
}

// Check reason type and dp reason exist in dispatch planning reason master
function check_dispatch_planning_reason_exist($reason_type, $dp_reason) {
    $results = 0;
    global $user;
    $user_id = $user->uid;
    $distributor_id = change_feeds_import_get_distributor_id($user_id);
    if (!empty($reason_type) && !empty($dp_reason)) {
        $query = db_select('node', 'n');
        $query->condition('n.type', 'dispatch_planning_reason_master');
        $query->leftjoin('field_data_field_reason_type', 'r_type', 'r_type.entity_id = n.nid');
        $query->leftjoin('field_data_field_dp_reason', 'dp_reason', 'dp_reason.entity_id = n.nid');
        $query->condition('n.uid', $distributor_id);
        $query->fields('n', array('nid'));
        $query->condition('r_type.field_reason_type_value', $reason_type);
        $query->condition('dp_reason.field_dp_reason_value', $dp_reason);
        $results = $query->execute()->fetchField();
    }
    return $results;
}

/**
 * 
 * @param type $title
 * @return string
 */
function check_hul_code_exist($title) {
    $query = db_select('node', 'n');
    $query->condition('n.type', 'hul_code_master');
    $query->fields('n', array('uid'));
    $query->condition('n.title', $title);
    $results = $query->execute()->fetchField();
    return $results;
}

function check_hul_area_code_exist($title, $distributor_id) {
    if (!empty($title)) {
        $query = db_select('node', 'n');
        $query->condition('n.type', 'area_code_master');
        $query->fields('n', array('title'));
        $query->condition('n.title', $title);
        $query->condition('n.uid', $distributor_id);
        $results = $query->execute()->fetchField();
    }
    return $results;
}

/**
 * 
 * @param type $title
 * @return string
 */
function check_product_sub_category_exist($title, $distributor_id) {
    $query = db_select('node', 'n');
    $query->condition('n.type', 'product_sub_category_master');
    $query->fields('n', array('nid'));
    $query->condition('n.title', $title);
   // $query->condition('n.uid', $distributor_id);
    $results = $query->execute()->fetchField();
    return $results;
}

function check_product_category_exist($title, $distributor_id) {
    $query = db_select('node', 'n');
    $query->condition('n.type', 'product_category_master');
    $query->fields('n', array('nid'));
    $query->condition('n.title', $title);
    $query->condition('n.uid', $distributor_id);
    $results = $query->execute()->fetchField();
    return $results;
}

function check_sub_putaway_group_exist($title, $distributor_id) {
    $query = db_select('node', 'n');
    $query->condition('n.type', 'putaway_group_master');
    $query->fields('n', array('nid'));
    $query->condition('n.title', $title);
    //$query->condition('n.uid', $distributor_id);
    $results = $query->execute()->fetchField();
    return $results;
}

/**
 * 
 * @param text $feed
 * @param text $content_type
 */
function modify_views_forms_master_feed_validate($feed_title, $content_type) {
    /* Distributor ID condition not required in 
      'channel_master'
      'pl_group_master'
     * *
     */
    $system_level_content_types = array('channel_master', 'pl_group_master');
    $query = db_select('node', 'n');
    $query->fields('n', array('title'));
    $query->condition('n.type', $content_type);
    $query->condition('n.title', $feed_title);
    if (!in_array($content_type, $system_level_content_types)) {
        $query->addTag('node_uid');
    }
    $result = $query->execute()->fetchField();
    return $result;
}

function change_feeds_import_views_api() {
    return array(
        'api' => '3.0',
        'path' => drupal_get_path('module', 'change_feeds_import') . '/views',
    );
}

/**
 * Implements hook_node_presave()
 */
function change_feeds_import_node_presave($node) {

    global $user;
    $user_id = $user->uid;
    $distributor_id = change_feeds_import_get_distributor_id($user_id);

    if ($node->type == 'egir') {
        $node->field_distributor_uid['und'][0]['value'] = $distributor_id;
    }
    /* if (!in_array('hul_admin', $user->roles)) {
      if ($node->type != 'user_manual' && $node->type != 'impact_cron_mobile_data') {
      if (!empty($distributor_id) && ($node->is_new == TRUE)) {
      $node->uid = $distributor_id;
      }
      }
      } */
    if (!in_array('hul_admin', $user->roles)) {
        if ($node->type != 'user_manual' && $node->type != 'impact_cron_mobile_data') {
            if (!empty($distributor_id) && ($node->is_new == TRUE)) {
                if (!empty($node->distributorid)) {
                    $node->uid = $node->distributorid;
                } else {
                    $node->uid = $distributor_id;
                }
            }
            // Feed importer update. or Node update
            else {
                if (!empty($node->distributorid)) {
                    $node->uid = $node->distributorid;
                }
            }
        }
    }

    // PICK CONFIRM TYPE
    if ($node->type == 'pick_confirm') {

        if (!empty($node->field_pc_start_time['und']) && !empty($node->field_pc_end_time['und'])) {
            $node->field_pc_status[LANGUAGE_NONE][0]['value'] = 2;
        }
        if (!empty($node->field_pc_start_time['und']) && empty($node->field_pc_end_time['und'])) {
            $node->field_pc_status[LANGUAGE_NONE][0]['value'] = 1;
        }
    }

    // PICKING TYPE
    if ($node->type == 'picking') {

        if ($node->is_new == TRUE) {
            $node->field_combined_nid['und'][0]['value'] = $node->created;
        }

        if (!empty($node->field_picking_start_time['und']) && !empty($node->field_picking_end_time['und'])) {
            $node->field_picking_status[LANGUAGE_NONE][0]['value'] = 2;
        }
        if (!empty($node->field_picking_start_time['und']) && empty($node->field_picking_end_time['und'])) {
            $node->field_picking_status[LANGUAGE_NONE][0]['value'] = 1;
        }
    }

    if (!empty($node->field_party_packing_start_time['und']) && !empty($node->field_party_packing_end_time['und'])) {
        $node->field__party_packingstatus[LANGUAGE_NONE][0]['value'] = 2;
    }
    if (!empty($node->field_party_packing_start_time['und']) && empty($node->field_party_packing_end_time['und'])) {
        $node->field__party_packingstatus[LANGUAGE_NONE][0]['value'] = 1;
    }
    if (!empty($node->field_unloading_start_time['und']) && !empty($node->field_unloading_end_time['und'])) {
        $node->field_unloading_status[LANGUAGE_NONE][0]['value'] = 2;
    }
    if (!empty($node->field_unloading_start_time['und']) && empty($node->field_unloading_end_time['und'])) {
        $node->field_unloading_status[LANGUAGE_NONE][0]['value'] = 1;
    }

    // Validate Dispatch Planning Reason Master Importer
    if ($node->type == 'dispatch_planning_reason_master') {
        $reason_type = $node->field_reason_type[LANGUAGE_NONE][0]['value'];
        $dp_reason = $node->field_dp_reason[LANGUAGE_NONE][0]['value'];
        if (!empty($reason_type) && !empty($dp_reason)) {
            $node->title = $reason_type . '_' . $dp_reason;
        }
        //Update reason in API
        call_reason_code_master_api($node);
    }

    // Saving the date time stamp in received assets screen
    if ($node->type == 'assets_count') {
        if (arg(0) == 'received-assets-screen') {
            $node->field_received_asset_time[LANGUAGE_NONE][0]['value'] = REQUEST_TIME;
        }
    }

    if ($node->type == 'bank_master') {
        call_bank_master_api($node);
    }

    if ($node->type == 'outlet_master') {
        call_location_api($node);
    }
}

function holiday_get_working_day($date_timestamp, $day, $holidays, $weeklyoff) {
    $date = date('Y-m-d', $date_timestamp);

    while ($day != 0) {
        $date_timestamp = strtotime('+1 days', $date_timestamp);
        $date = date('Y-m-d', $date_timestamp);
        $day_name = date("l", $date_timestamp);
        if (in_array($date, $holidays)) {
            
        } elseif (in_array($day_name, $weeklyoff)) {
            
        } else {
            $day--;
        }
    }
    return $date;
}

function change_feeds_import_get_distributor_id($user_id) {
    $query = db_select('users', 'u');
    $query->innerjoin('field_data_field_distributor', 'd', 'd.entity_id = u.uid');
    $query->condition('d.entity_id', $user_id, '=');
    $query->fields('u', array('uid'));
    $query->fields('d', array('field_distributor_value'));
    $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    $distributor_id = $result[0]['field_distributor_value'];
    return $distributor_id;
}

function change_feeds_import_get_distributor_name($distributor_id) {
    $query = db_select('field_data_field_distributor', 'd');
    $query->innerjoin('field_data_field_name', 'n', 'n.entity_id = d.entity_id');
    $query->condition('n.entity_id', $distributor_id, '=');
    $query->fields('n', array('	field_name_value'));
    $query->fields('d', array('field_distributor_value'));
    $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    $distributor_name = $result[0]['field_name_value'];
    return $distributor_name;
}

function change_feeds_import_prevent_import_validate($form, $form_state) {
    if (!isset($form_state['values']['feeds']["FeedsFileFetcher"]['file'])) {
        form_set_error('upload', t('No new file uploaded'));
        //return false;
    }
}

function change_feeds_import_form_alter(&$form, &$form_state, $form_id) {

    if ($form_id == 'feeds_import_form') {
        unset($form['feeds']["FeedsFileFetcher"]['upload']['#file_info']);
        $form['#validate'][] = 'change_feeds_import_prevent_import_validate';

        if ($form['#importer_id'] == 'dispatch_planning_reason_master') {
            $text = "<br>Please enter the below values in resource type field:";
            $field = field_info_field('field_reason_type');
            $allowed_values = list_allowed_values($field);
            foreach ($allowed_values as $key => $value) {
                $allowed[] = $value;
            }
            $form['feeds']['FeedsCSVParser']['help']['title'] = array(
                '#markup' => $text,
            );
            $form['feeds']['FeedsCSVParser']['help']['final_text'] = array(
                '#theme' => 'item_list',
                '#items' => $allowed,
            );
        }

        if ($form['#importer_id'] == 'cancel_discard_reason_master_importer') {
            $text = "<br>Please enter the below values in reason type field:";
            $field = field_info_field('field_type');
            $allowed_values = list_allowed_values($field);
            foreach ($allowed_values as $key => $value) {
                $allowed[] = $value;
            }
            $form['feeds']['FeedsCSVParser']['help']['title'] = array(
                '#markup' => $text,
            );
            $form['feeds']['FeedsCSVParser']['help']['final_text'] = array(
                '#theme' => 'item_list',
                '#items' => $allowed,
            );
        }


        if ($form['#importer_id'] == 'dispatch_short_reason') {
            $text = "<br>Please enter the below values in type field:";
            $field = field_info_field('field_dispatch_trip_type');
            $allowed_values = list_allowed_values($field);
            $form['feeds']['FeedsCSVParser']['help']['title'] = array(
                '#markup' => $text,
            );
            $form['feeds']['FeedsCSVParser']['help']['final_text'] = array(
                '#theme' => 'item_list',
                '#items' => $allowed_values,
            );
        }

        if ($form['#importer_id'] == 'sku7_code_master_leanbox') {
            /*
              $res = feeds_tamper_load_by_importer($form['#importer_id']);
              $required_column_arr = array();
              $required_column_str = "";
              foreach($res as $key => $value){
              if($value[0]->plugin_id == 'required'){
              array_push($required_column_arr, $key);
              }
              }
              array_push($required_column_arr, 'Brand');
              $required_column_str = implode(', ', $required_column_arr);
              //$description_help_text = 'Import <a href="http://en.wikipedia.org/wiki/Comma-separated_values">CSV files</a> with these mandatory columns: '.$required_column_str;
             */

            $description_help_text = '';
            $form['feeds']['FeedsCSVParser']['help']['description']['#markup'] = $description_help_text;

            $list_help_text = t('Column <strong>SKU7 CODE</strong> is considered unique: only one item per SKU7 CODE value will be created.');
            $form['feeds']['FeedsCSVParser']['help']['list']['#items'][0] = $list_help_text;
        }
    }
    if ($form_id == 'user_register_form' || $form_id == 'user_profile_form') {
        $form['#validate'][] = 'registration_validate';
        return $form;
    }
    if (isset($form_state['node'])) {
        $node = $form_state['node'];
        if (!isset($node->nid) || isset($node->is_new)) {
            // This is a new node.
            if ($form_id == 'product_division_master_node_form' || $form_id == 'pricelist_group_master_node_form') {
                $form['#submit'][] = 'change_feeds_import_custom_node_add_submit';
            }
        }
    }

    if ($form_id == 'user_register') {
        drupal_set_title(t('Transaction Platform'));
    } elseif ($form_id == 'user_pass') {
        drupal_set_title(t('Transaction Platform'));
    } elseif ($form_id == 'user_login') {
        drupal_set_title(t('Transaction Platform'));
    }
}

function change_feeds_import_custom_node_add_submit($form, &$form_state) {
    change_feeds_import_change_status_of_error_billing_table();
    drupal_set_message("Data is created successfully");
}

function registration_validate($form, &$form_state) {
    global $user;
    $roles = $user->roles;
    if (in_array("administrator", $roles)) {
        //  form_set_error('failed_account', 'administrator can not create account only distributor can create account');
    }
}

function change_feeds_import_feeds_after_import(FeedsSource $source) {
    if ($source->id == 'sku7_code_master' || $source->id == 'outlet_master' || $source->id == 'sku7_code_master_leanbox') { // if importing through sku7_code_master OR outlet_master.  
        change_feeds_import_change_status_of_error_billing_table();
    }
}

function change_feeds_import_change_status_of_error_billing_table() {
    global $user;
    $user_id = $user->uid;
    $distributor_id = change_feeds_import_get_distributor_id($user_id);

    $status_updated = db_update('error_billing_data') // update status in error_billing_data condition based on (Distributor Id )
            ->fields(array(
                'status' => "Validate",
            ))
            ->condition('distributor_id', $distributor_id, '=')
            ->condition('status', 'Error', '=')
            ->execute();
}

function change_feeds_import_services_resources() {
    $android_services_resource = array(
        '#api_version' => 3002,
    );
    $android_services_resource = array(
        'loading' => array(
            'actions' => array(
                'get-details' => array(
                    'help' => 'Get data according party packing or not',
                    'callback' => 'change_feeds_import_check_party_packing_or_not',
                    'args' => array(
                        array(
                            'name' => 'van_type',
                            'type' => 'string',
                            'description' => 'pass param as van_type',
                            'source' => array('data' => 'van_type'),
                            'optional' => FALSE,
                        ),
                        array(
                            'name' => 'nid',
                            'type' => 'string',
                            'description' => 'pass param as nid',
                            'source' => array('data' => 'nid'),
                            'optional' => FALSE,
                        ),
                    ),
                    'access arguments' => array('Distributor Upload File'),
                    'file' => array('type' => 'inc', 'module' => 'change_feeds_import', 'name' => 'includes/change_feeds_import_loading'),
                ),
            ),
        ),
    );
    return $android_services_resource;
}

function change_feeds_import_query_alter(QueryAlterableInterface $query) {
    $view_name = 'van_planning_report';
    if ($query->hasTag('views_' . $view_name)) {
        $query->groupBy('field_sales_day_value');
        $query->groupBy('field_static_delivery_beat_code_value');
        // $query->groupBy('field_area_hook_nid');
        $query->addExpression('SUM(if(field_sales_day_value != 1, 1, 0))', 'total_rec');
    }
}

function change_feeds_import_views_query_alter(&$view, &$query) {

    // remove 19800 condition which is default added by view
    if ($view->base_table == 'petty_cash') {
        foreach ($query->where[1]['conditions'] as $key => $val) {
            if ((strpos($val['field'], 'petty_cash.voucher_date') !== false) || (strpos($val['field'], 'petty_cash.file_date') !== false)) {
                $data = str_replace('+ 19800', '', $val['field']);
                $data = str_replace('%Y-%m-%d\T%H:%i:%s', '%Y-%m-%d', $data);
                $query->where[1]['conditions'][$key]['field'] = $data;
            }
        }
    }

    if (($view->base_table == 'node') && ($view->name == 'payment_terms_view')) {
        foreach ($query->where[1]['conditions'] as $key => $val) {
            if ((strpos($val['field'], 'node.changed') !== false)) {
                $data = str_replace('+ 19800', '', $val['field']);
                $data = str_replace('%Y-%m-%d\T%H:%i:%s', '%Y-%m-%d', $data);
                $query->where[1]['conditions'][$key]['field'] = $data;
            }
        }
    }

    if (($view->base_table == 'node_revision') && ($view->name == 'pt_ct_history_download')) {
        foreach ($query->where[1]['conditions'] as $key => $val) {
            if ((strpos($val['field'], 'node_revision.timestamp') !== false)) {
                $data = str_replace('+ 19800', '', $val['field']);
                $data = str_replace('%Y-%m-%d\T%H:%i:%s', '%Y-%m-%d', $data);
                $query->where[1]['conditions'][$key]['field'] = $data;
            }
        }
    }

    if (isset($_GET['field_third_party_username_value'])) {
        foreach ($query->where[1]['conditions'] as $key => $val) {
            $val_array = explode('.', $val['field']);
            if ($val_array[1] == 'field_third_party_username_value') {
                //unset($query->where[1]['conditions'][$key]['operator']); 
                $query->where[1]['conditions'][$key]['operator'] = 'IN';
            }
        }
    }
    // Do the actual join
    global $user;
    // Store distributor id in author in each node
    $distributor_id = change_feeds_import_get_distributor_id($user->uid);
    // Do the actual join
    // This function returns distributor_ids based on  super central,central,child distributor role
    $distributor_ids = get_distributor_ids();

    // This view will be visible to all authenticated user in the sytem
    $all_views_names = variable_get('views_name');
    // area-code-master,product-sub-category-master,sku-cp-view,brand-master-report,bank-master-download,non-bankable-reason-master,cancel-discard-reason-master,reason-for-update,sku7-code-master-report,product-category-master,sku7-ean-and-mrp,product-sub-division,pdd-master,notes-denominations-download,short-reason-master,non-bankable-reason-master,handover-master
    $admin_view_names = variable_get('admin_views');
    $views_array = explode(",", $all_views_names);
    $admin_views = explode(",", $admin_view_names);
    $central_distributor_master_views = explode(',', variable_get('central_distributor_master_views'));
    $logged_in_distributor_id = $distributor_id;
     
   
    if (in_array('central_distributor', $user->roles)) {
        $central_distributor_id = $logged_in_distributor_id;
    }
    else if (in_array('super_central_distributor', $user->roles)) {
        $distributor_ids+= get_child_distributor_ids($logged_in_distributor_id);
    }
    else {
         $central_distributor_id = get_central_distributor_id($logged_in_distributor_id);
         $distributor_ids[] = $central_distributor_id;
    }
    if (in_array($view->name, $central_distributor_master_views)) {
            $distributor_ids = array();
            $distributor_ids[] = $central_distributor_id;
     }
    $distributor_ids = array_unique($distributor_ids); 
//  $views_array = array('central_bill_trip', 'channel_master_central_report' , 
//    'central_picking_report' ,  'central_party_pack_report',  'central_unloading_form', 
//    'central_mobile_return_analysis', 'user_manual',  'hul_impact_delete', 'impact_delivery_cron_2', 
//    'impact_delivery_cron_evening_2', 'impact_party_master', 'impact_party_master_morning',
//    'hul_code_distributor_wise', 'van_stop_master_report', 'update_sales_register_party_code',
//    'central_outlet_master_report', 'central_party_pack_master_report','ofd_mailer','ofd_mailer2');
    //&& !in_array($view->name,$admin_views)
    if (!in_array($view->name, $views_array) && !in_array($view->name, $admin_views)) {
         foreach ($query->table_queue as $key => $val) {
            if (($val['table'] == 'node')) {
               
                if (empty($val['join'])) { 
                    $query->add_where(0, $val['alias'] . '.uid', $distributor_ids, 'IN');
                } else {
                    $query->table_queue[$key]['join']->extra[] = array('field' => 'uid', 'value' => $distributor_ids, 'operator' => 'IN');
                    // $query->table_queue[$key]['join']->extra[] = array('field' => 'uid', 'value' => $distributor_id);
                    //$query->table_queue[$key]['join']->extra[] = array('field' => 'uid', 'left_field' => 'uid', 'left_table'=>'node');
                }
            }
        }
    }

    //Custom Table join query 
    //Custom tables require distributor_id condition
    // mrc_inventory,mrc_inventory_new,custom_billing_data,godown_data,primary_data_upload,petty_cash,petty_cash_sequence_table,ptl_data_configuration,master_ptl_data,dispatch_planning_api_data,van_cld_data_table,closing_stock,vrs_handover,vrs_handover_history,vrs_trip_denominations,vrs_trip_denominations_history,vrs_trip_items,vrs_trip_items_history,vrs_trip_total,vrs_trip_total_history,custom_sales_data,dispatch_planning_api_log,dispatch_qty_confirmation,dispatch_delivered_vrs_details,dispatch_qty_preprocess,excess_qty,impact_data,inventory_versioning_api_data,ptl_header_data,ptl_put_qty,sku_ean_mrp,stage_billing_data,trip_id_sequence,van_live_tracking,handover_confirmation_new,inventory_ledger,inventory_opening
    $custom_tables = explode(',', variable_get('custom_tables'));
    if (!empty($custom_tables)) {
        if (false !== $table_key = array_search($view->base_table, $custom_tables)) {
            // Sku Master is central distributor Data
            /* if ($view->base_table == 'sku_ean_mrp') {
              $distributor_ids = array();
              $distributor_ids[] = $central_distributor_id;
              } */
            $query->add_where(0, "$custom_tables[$table_key].distributor_id", $distributor_ids, 'IN');
        } else {
            // do something else
        }
    }

    // Alter the distributor id of role leanbox in ofd_mailer view.
    $views_array = array('ofd_mailer', 'ofd_mailer2');
    //$dist_id = 23466;
    if (in_array($view->name, $views_array)) {
        foreach ($query->table_queue as $key => $val) {
            if (($val['table'] == 'node')) {
                if (empty($val['join'])) {
                    $query->add_where(0, $val['alias'] . '.uid', _DISTRIBUTOR_ID, '=');
                } else {
                    $query->table_queue[$key]['join']->extra[] = array('field' => 'uid', 'value' => _DISTRIBUTOR_ID);
                }
            }
        }
    }
    /* $distributor_views_tables = array('parkstop_api_log','dispatch_planning_api_log','dispatch_planning_api_data','sms_integration_api_log','outlet_order_crate');
      if (in_array($view->base_table,$distributor_views_tables)) {
      $query->add_where(0, "$view->base_table.distributor_id", $distributor_id, '=');
      }

      if ($view->base_table == 'custom_billing_data' && ($view->name != 'impact_delivery_cron_2') && ($view->name != 'impact_delivery_cron_evening_2')) {
      $query->add_where(0, 'custom_billing_data.distributor_id', $distributor_id, '=');
      }
      if (($view->base_table == 'taxonomy_term_data') && ($view->name == 'petty_cash_edit')) {
      $query->where[0]['conditions'][] = array(
      'field' => 'field_data_field_petty_cash_distributor.field_petty_cash_distributor_uid',
      'value' => $distributor_id,
      'operator' => '=',
      );
      } */



    /* if ($view->base_table == 'mrc_inventory') {
      $query->add_where(0, 'mrc_inventory.distributor_id', $distributor_id, '=');
      }*
      if ($view->base_table == 'custom_billing_data' && ($view->name != 'impact_delivery_cron_2') && ($view->name != 'impact_delivery_cron_evening_2')) {
      //$query->add_where(0, 'custom_billing_data.distributor_id', $distributor_id, '=');
      } */
    if (($view->base_table == 'taxonomy_term_data') && ($view->name == 'petty_cash_edit')) {
        /* $query->where[0]['conditions'][] = array(
          'field' => 'field_data_field_petty_cash_distributor.field_petty_cash_distributor_uid',
          'value' => $distributor_id,
          'operator' => '=',
          ); */
        $query->where[0]['conditions'][] = array(
            'field' => 'field_data_field_petty_cash_distributor.field_petty_cash_distributor_uid',
            'value' => $distributor_ids,
            'operator' => 'IN',
        );
    }

    /* if ($view->base_table == 'petty_cash') {
      $query->add_where(0, 'petty_cash.distributor_id', $distributor_id, '=');
      }
      if (($view->base_table == 'ptl_data_configuration') && ($view->name == 'ptl_data_report' || $view->name == 'ptl_loose_sheet' || $view->name == 'short_put_report' || $view->name == 'ptl_cld_sheet')) {
      $rs_code = dispatch_planning_get_rscode_using_uid($distributor_id);
      $query->add_where(0, 'ptl_data_configuration.rs_code', $rs_code, '=');
      $query->add_where(0, 'ptl_data_configuration.distributor_id', $distributor_id, '=');
      }
      if (($view->base_table == 'master_ptl_data') && ($view->name == 'master_ptl_data_report' || $view->name == 'master_ptl_loose_sheet' || $view->name == 'master_short_put_report' || $view->name == 'master_ptl_cld_sheet')) {
      $rs_code = dispatch_planning_get_rscode_using_uid($distributor_id);
      $query->add_where(0, 'master_ptl_data.rs_code', $rs_code, '=');
      $query->add_where(0, 'master_ptl_data.distributor_id', $distributor_id, '=');
      }
      if ($view->base_table == 'ptl_put_qty'){
      $rs_code = dispatch_planning_get_rscode_using_uid($distributor_id);
      $query->add_where(0, 'ptl_put_qty.rs_code', $rs_code, '=');
      $query->add_where(0, 'ptl_put_qty.distributor_id', $distributor_id, '=');
      }
      if ($view->base_table == 'ptl_header_data'){
      $rs_code = dispatch_planning_get_rscode_using_uid($distributor_id);
      $query->add_where(0, 'ptl_header_data.rs_code', $rs_code, '=');
      $query->add_where(0, 'ptl_header_data.distributor_id', $distributor_id, '=');
      }

      //if (($view->base_table == 'master_ptl_data') && ($view->name == 'master_ptl_loose_sheet')) {
      //$query->add_orderby(NULL, "SUBSTRING(master_ptl_data.product_name, 1, 1)", 'ASC','order_master_ptl_data_product_name_first');
      //$query->add_orderby(NULL, "SUBSTRING_INDEX(SUBSTRING_INDEX(master_ptl_data.product_name,' ',2),' ',-1)", 'ASC','order_master_ptl_data_product_name_second');
      //$query->add_orderby(NULL, "SUBSTRING(master_ptl_data.product_name, length(SUBSTRING_INDEX(master_ptl_data.product_name, ' ', 2))+2, length(master_ptl_data.product_name))", 'ASC','order_master_ptl_data_product_name_last');

      //new condition added
      //$query->add_orderby(NULL, "CASE WHEN node_field_data_field_product_category.title in ('FNB','PP','PP-A','PP-B') THEN node_field_data_field_brand.title END", 'ASC','master_ptl_data_fnb_pp_brand');
      //$query->add_orderby(NULL, "CASE WHEN node_field_data_field_product_category.title not in ('FNB','PP','PP-A','PP-B') THEN node_field_data_field_product_devision_reference__field_data_field_product_sequence.field_product_sequence_value END", 'ASC','master_ptl_data_fnb_pp_else_sequence');
      //}
      if ($view->base_table == 'van_cld_data_table') {
      $query->add_where(0, 'van_cld_data_table.distributor_id', $distributor_id, '=');
      } */
    if ($view->name == 'pending_delivery_outstanding_report') {
        $query->add_field('custom_billing_data', 'bill_number', 'custom_billing_data_bill_number', array('function' => 'groupby'));
        $query->add_groupby('custom_billing_data.bill_number');
    }

    if ($view->name == 'impact_delivery_report' || $view->name == 'impact_delivery_report_2' || $view->name == 'impact_delivery_cron_2' || $view->name == 'impact_delivery_cron_evening_2') {
        $sub_query = db_select('custom_billing_data', 'b');
        if ($view->name == 'impact_delivery_cron_2' || $view->name == 'impact_delivery_cron_evening_2') {
            $query1 = db_select('users', 'u');
            $query1->fields('u', array('uid'));
            $query1->join('field_data_field_idd', 'd1', 'd1.entity_id= u.uid');

            $query1->condition('d1.field_idd_value', 1);
            $dis_ids = $query1->execute()->fetchCol();
            if ($view->name == 'impact_delivery_cron_evening_2') {
                $next_day = strtotime(date('Y-m-d', strtotime("+1 days")));
            }
            if ($view->name == 'impact_delivery_cron_2') {
                $next_day = strtotime(date('Y-m-d'));
            }
            $next_day_end = $next_day + 86399;

            $sub_query->join('node', 'n', 'n.title = b.bill_number AND b.distributor_id = n.uid');
            $sub_query->join('field_data_field_trip_id_reference', 'ftr', 'ftr.entity_id=n.nid');
            $sub_query->join('field_data_field_trip_executon_date', 'fd', 'ftr.field_trip_id_reference_nid=fd.entity_id');

            $sub_query->condition('fd.field_trip_executon_date_value', $next_day, '>=');
            $sub_query->condition('fd.field_trip_executon_date_value', $next_day_end, '<=');
            $sub_query->condition('b.distributor_id', $dis_ids, 'IN');
            // $sub_query->condition('n.uid', $dis_ids, 'IN');
        } else {
            $sub_query->join('node', 'n', 'n.title = b.bill_number');
            $sub_query->condition('b.distributor_id', $distributor_id);
            $sub_query->condition('n.uid', $distributor_id);
        }

        $sub_query->join('field_data_field_bill_value', 'v', 'v.entity_id = n.nid');
        $sub_query->addField('b', 'bill_number', 'bill_number');
        $sub_query->addField('v', 'field_bill_value_value', 'field_bill_value_value');
        $sub_query->addField('b', 'distributor_id', 'distributor_id');

        if ($view->name == 'impact_delivery_report') {
            if (isset($view->exposed_raw_input['date_filter']['min']) && isset($view->exposed_raw_input['date_filter']['max'])) {
                $min = intval(strtotime($view->exposed_raw_input['date_filter']['min']));
                $max = intval(strtotime($view->exposed_raw_input['date_filter']['max']));

                $sub_query->condition('b.loading_date', $min, '>=');
                $sub_query->condition('b.loading_date', $max, '<=');
            }
        }
        if ($view->name == 'impact_delivery_report_2') {
            if (isset($view->exposed_raw_input['date_filter']['min']) && isset($view->exposed_raw_input['date_filter']['max'])) {
                $min = intval(strtotime($view->exposed_raw_input['date_filter']['min']));
                $max = intval(strtotime($view->exposed_raw_input['date_filter']['max']));

                $sub_query->join('field_data_field_trip_id_reference', 'ftr', 'ftr.entity_id=n.nid');
                $sub_query->join('field_data_field_trip_executon_date', 'fd', 'ftr.field_trip_id_reference_nid=fd.entity_id');

                $sub_query->condition('fd.field_trip_executon_date_value', $min, '>=');
                $sub_query->condition('fd.field_trip_executon_date_value', $max, '<=');
            }
        }

        //$sub_query->addExpression('ifnull(v.field_bill_value_value, 5)', 'field_bill_value_value');
        $sub_query->addExpression('MIN(sku7_code)', 'minimum');
        $sub_query->groupBy('b.bill_number');
        if ($view->name == 'impact_delivery_cron_2' || $view->name == 'impact_delivery_cron_evening_2') {
            $sub_query->groupBy('b.distributor_id');
        }
        $join = new views_join();
        $join->definition = array('table formula' => $sub_query, 'left_field' => 'bill_number', 'field' => 'bill_number', 'left_table' => 'custom_billing_data');
        $join->left_table = 'custom_billing_data'; // or wathever table you want to join with
        $join->table = 'custom_billing_data';
        $join->field = 'bill_number';
        $join->left_field = 'bill_number'; // or wathever column you want to join with
        $join->type = 'LEFT'; // if you want another join type play with this value
        $join->extra = array(
            array('field' => 'minimum', 'left_field' => 'sku7_code'),
            array('field' => 'distributor_id', 'left_field' => 'distributor_id'),
        );

        $join->extra_type = 'AND';

        // Do the actual join
        $query->table_queue['temp'] = array(
            'alias' => 'temp', // I believe this is optional
            'table' => $sub_query,
            'relationship' => 'custom_billing_data',
            'join' => $join,
        );

        $query->add_field('temp', 'field_bill_value_value');
    }


    if ($view->name == 'drs_report') {
        $trip_id = $view->args[0];
        $sub_query = db_select('node', 'n');
        $sub_query->addTag('node_uid');
        $sub_query->addField('n', 'title', 'bill_number');
        $sub_query->join('field_data_field_trip_id_reference', 'tp', 'tp.entity_id = n.nid');
        $sub_query->join('node', 'dd', 'dd.nid = tp.field_trip_id_reference_nid');
        $sub_query->condition('dd.title', $trip_id, "=");
        $sub_query->join('field_data_field_sales_party_code', 'spc', 'spc.entity_id = n.nid');
        $sub_query->join('node', 'nd', 'nd.title = spc.field_sales_party_code_value');
        $sub_query->condition('nd.type', 'outlet_master', '=');
        $sub_query->condition('nd.uid', $distributor_id, '=');
        $sub_query->join('field_data_field_beat_name', 'bn', 'bn.entity_id = nd.nid');
        $sub_query->addField('bn', 'field_beat_name_value', 'BEAT_NAME');
        $sub_query->groupBy('BEAT_NAME');
        //$sub_query->addExpression('ifnull(v.field_bill_value_value, 5)', 'field_bill_value_value');
        $sub_query->addExpression('MIN(n.title)', 'minimum');



        $join = new views_join();
        $join->definition = array('table formula' => $sub_query, 'left_field' => 'title', 'field' => 'minimum', 'left_table' => 'node');
        $join->table = 'node';
        $join->field = 'minimum';
        $join->left_table = 'node'; // or wathever table you want to join with
        $join->left_field = 'title'; // or wathever column you want to join with
        $join->type = 'LEFT'; // if you want another join type play with this value
//    $join->extra = array(
//      array('field' => 'minimum', 'left_field' => 'title'),
//    );
        // Do the actual join
        $query->table_queue['temp'] = array(
            'alias' => 'temp', // I believe this is optional
            'table' => $sub_query,
            'relationship' => 'node',
            'join' => $join,
        );

        $query->add_field('temp', 'BEAT_NAME');
    }

    if ($view->name == 'Outlet_Master_Report') {

//    $sub_query = db_select('node', 'n');
//    $sub_query->addTag('node_uid');
//    
//    $sub_query->join('field_data_field_channel', 'fc', 'fc.entity_id = n.nid');
//    $sub_query->join('field_data_field_pl_group', 'fp', 'fp.entity_id = n.nid');
//    $sub_query->join('field_data_field_van_pl_group', 'fv', 'fv.entity_id = n.nid');
//    
//    $sub_query->addField('fc', 'field_channel_value', 'channel');
//    $sub_query->addField('fp', 'field_pl_group_value', 'pl_group');
//    $sub_query->addField('fv', 'field_van_pl_group_value', 'van_pl_group');
//    
//    $join = new views_join();
//    $join->definition = array('table formula' => $sub_query, 'left_field' => 'field_data_field_channel_node_entity_type', 'field' => 'channel', 'left_table' => 'node');
//    $join->left_table = 'node'; // or wathever table you want to join with
//    $join->table = 'node';
//    $join->field = 'channel';
//    $join->left_field = 'field_data_field_channel_node_entity_type'; // or wathever column you want to join with
//    $join->type = 'LEFT'; // if you want another join type play with this value
//    $join->extra = array(
//      array('field' => 'pl_group', 'left_field' => 'field_data_field_pl_group_node_entity_type'),
//    );
        // Do the actual join
//    $query->table_queue['temp'] = array(
//      'alias' => 'temp', // I believe this is optional
//      'table' => $sub_query,
//      'relationship' => 'van_pl',
//      'join' => $join,
//    );
//
//    $query->add_field('temp', 'van_pl_group');
    }
    // This code is only for hul_admin role 
    if ($view->name == 'central_bill_trip' || $view->name == 'channel_master_central_report' || $view->name == 'central_picking_report' || $view->name == 'central_party_pack_report' || $view->name == 'central_unloading_form' || $view->name == 'central_mobile_return_analysis' || $view->name == 'van_stop_master_report') {
        //unset($query->where[0]['conditions'][0]);
        $values = fetch_rs_field_data();
        if (!empty($values)) {
            $query->add_where(0, 'node.uid', $values, 'IN');
        }
    }
    if ($view->base_table == 'delivery_details') {
        //$query->add_where(0, 'delivery_details.distributor_id', $distributor_id, '=');
    }

    if ($view->name == 'latest_live_tracking_report') {
        if ($view->base_table == 'van_live_tracking') {
            $query->add_groupby('van_live_tracking.employeecode');
        }
    }

    if ($view->name == 'trip_bill_sku_return_report2' && ($view->current_display == 'page' || $view->current_display == 'views_data_export_1')) {
        //$query->add_where(1, 'dispatch_planning_item_details.return_qty', 0, '>');
    }
}

/**
 * 
 * @param type $channel = Party pack master channle
 * @param type $pl_group = Party pack master group
 */
function check_unique_group_channle_combination($channel, $pl_group) {
    $query = db_select('field_data_field_channel', 'ch');
    $query->join('node', 'n', 'n.nid = ch.entity_id');
    $query->condition('ch.bundle', 'party_pack_master');
    $query->condition('ch.field_channel_value', $channel, '=');
    $query->join('field_data_field_pl_group', 'ppmpl', 'ppmpl.entity_id = ch.entity_id');
    $query->condition('ppmpl.bundle', 'party_pack_master');
    $query->condition('ppmpl.field_pl_group_value', $pl_group, '=');
    $query->fields('ppmpl', array('entity_id'));
    $query->addTag('node_uid');
    $result = $query->execute()->fetchAllKeyed(0, 0);
    return $result;
}

/**
 * implements hook query alter to allow ordering by weight
 * @param QueryAlterableInterface $query
 */
function change_feeds_import_query_node_uid_alter(QueryAlterableInterface $query) {

    global $user;
    $user_id = $user->uid;
    $distributor_id = change_feeds_import_get_distributor_id($user_id);

    // altering the dynamic query object having tag => node_uid
    $query->condition('n.uid', $distributor_id);
}

/**
 * Implements hook_feeds_plugins().
 */
function change_feeds_import_feeds_plugins() {
    $path = drupal_get_path('module', 'change_feeds_import') . '/plugins';
    $info['FeedsNodeCustomProcessor'] = array(
        'name' => 'Custom Node processor',
        'description' => 'Create and update nodes.',
        'help' => 'Create and update nodes from parsed content.',
        'handler' => array(
            'parent' => 'FeedsNodeProcessor',
            'class' => 'FeedsNodeCustomProcessor',
            'file' => 'FeedsNodeCustomProcessor.inc',
            'path' => $path,
        ),
    );
    $info['FeedsNodeTargetMasterProcessor'] = array(
        'name' => 'Target Master Node processor',
        'description' => 'Create and update nodes.',
        'help' => 'Create and update nodes from parsed content.',
        'handler' => array(
            'parent' => 'FeedsNodeProcessor',
            'class' => 'FeedsNodeTargetMasterProcessor',
            'file' => 'FeedsNodeTargetMasterProcessor.inc',
            'path' => $path,
        ),
    );
    return $info;
}

/**
 * Returns all terms list using vocabulary
 */
function change_feeds_import_get_terms_using_vocubulary($vanme) {
    $res = '';
    $query = db_select('taxonomy_term_data', 't');
    $query->join('taxonomy_vocabulary', 'v', 'v.vid = t.vid');
    $query->condition('v.name', 'Outlet Days');
    $query->fields('t', array('tid', 'name'));
    $res = $query->execute()->fetchAllKeyed();
    return $res;
}

/**
 * Return Area Id From Master
 */
function check_area_id_exists($title) {
    $query = db_select('node', 'n');
    $query->condition('n.type', "area_hook_group_master", '=');
    $query->join('field_data_field_area_hook_group_id', 'agi', 'agi.entity_id = n.nid');
    $query->fields('agi', array('field_area_hook_group_id_value'));
    $query->addTag('node_uid');
    $area_id = $query->execute()->fetchAllKeyed(0, 0);
    return $area_id;
}

function change_feeds_import_form_views_exposed_form_alter(&$form, &$form_state) {
    if (isset($form['field_petty_cash_type_value']['#options'])) {
        $default = array('All' => '- Any -');
        global $user;
        // Store distributor id in author in each node
        $distributor_id = change_feeds_import_get_distributor_id($user->uid);

        $query = db_select('field_data_field_petty_cash_type', 'pc');
        $query->join('field_data_field_petty_cash_distributor', 'd', 'd.entity_id = pc.entity_id');
        $query->fields('pc', array('field_petty_cash_type_value'));
        $query->condition('d.field_petty_cash_distributor_uid', $distributor_id);
        $options = $query->execute()->fetchAllKeyed(0, 0);
        $form['field_petty_cash_type_value']['#options'] = $default + $options;
    }
    if ($form['#id'] == 'views-exposed-form-Outlet-Master-Report-page') {


        $van_pl_options = get_van_pl('van', NULL, NULL);
        $select = array('' => '- Any -');

        $days = change_feeds_import_get_terms_using_vocubulary('Outlet Days');
        $sales_day_options = array_combine($days, $days);

        $select = array('' => '- Any -');

        $area_grp_name_options = get_van_pl(NULL, NULL, 'name');
        $select = array('' => '- Any -');


        $van_pl_options = $select + $van_pl_options;
        $sales_day_options = $select + $sales_day_options;
        $area_grp_name_options = $select + $area_grp_name_options;


        if (isset($form['field_dva_van_pl_group_value'])) {
            $form['field_dva_van_pl_group_value']['#type'] = 'select';
            $form['field_dva_van_pl_group_value']['#size'] = null;
            $form['field_dva_van_pl_group_value']['#options'] = $van_pl_options;
            $form['field_dva_van_pl_group_value']['#validated'] = TRUE;
        }

        if (isset($form['field_sales_day_value'])) {
            $form['field_sales_day_value']['#type'] = 'select';
            $form['field_sales_day_value']['#size'] = null;
            $form['field_sales_day_value']['#options'] = $sales_day_options;
            $form['field_sales_day_value']['#validated'] = TRUE;
        }

        if (isset($form['field_dva_area_hook_group_name_value'])) {
            $form['field_dva_area_hook_group_name_value']['#type'] = 'select';
            $form['field_dva_area_hook_group_name_value']['#size'] = null;
            $form['field_dva_area_hook_group_name_value']['#options'] = $area_grp_name_options;
            $form['field_dva_area_hook_group_name_value']['#validated'] = TRUE;
        }
    }


    if ($form['#id'] == 'views-exposed-form-Outlet-Master-Report-page') {


        $van_pl_options = get_van_pl('van', NULL, NULL);
        $select = array('' => '- Any -');

        $days = change_feeds_import_get_terms_using_vocubulary('Outlet Days');
        $sales_day_options = array_combine($days, $days);

        $select = array('' => '- Any -');

        $area_grp_name_options = get_van_pl(NULL, NULL, 'name');
        $select = array('' => '- Any -');


        $van_pl_options = $select + $van_pl_options;
        $sales_day_options = $select + $sales_day_options;
        $area_grp_name_options = $select + $area_grp_name_options;


        $salesman = get_all_salesman_data("salesman", NULL);
        $salesman = $select + $salesman;
        $salesman_code = get_all_salesman_data(NULL, "slaesman_code");
        $salesman_code = $select + $salesman_code;
        if (isset($form['field_dva_van_pl_group_value'])) {
            $form['field_dva_van_pl_group_value']['#type'] = 'select';
            $form['field_dva_van_pl_group_value']['#size'] = null;
            $form['field_dva_van_pl_group_value']['#options'] = $van_pl_options;
            $form['field_dva_van_pl_group_value']['#validated'] = TRUE;
        }

        if (isset($form['field_sales_day_value'])) {
            $form['field_sales_day_value']['#type'] = 'select';
            $form['field_sales_day_value']['#size'] = null;
            $form['field_sales_day_value']['#options'] = $sales_day_options;
            $form['field_sales_day_value']['#validated'] = TRUE;
        }

        if (isset($form['field_dva_area_hook_group_name_value'])) {
            $form['field_dva_area_hook_group_name_value']['#type'] = 'select';
            $form['field_dva_area_hook_group_name_value']['#size'] = null;
            $form['field_dva_area_hook_group_name_value']['#options'] = $area_grp_name_options;
            $form['field_dva_area_hook_group_name_value']['#validated'] = TRUE;
        }

        if (isset($form['field_salesman_value'])) {
            $form['field_salesman_value']['#type'] = 'select';
            $form['field_salesman_value']['#size'] = null;
            $form['field_salesman_value']['#options'] = $salesman;
            $form['field_salesman_value']['#validated'] = TRUE;
        }


        if (isset($form['field_salesman_code_value'])) {
            $form['field_salesman_code_value']['#type'] = 'select';
            $form['field_salesman_code_value']['#size'] = null;
            $form['field_salesman_code_value']['#options'] = $salesman_code;
            $form['field_salesman_code_value']['#validated'] = TRUE;
        }
    }

    if ($form['#id'] == 'views-exposed-form-payment-collection-page' || $form['#id'] == 'views-exposed-form-signed-bills-upload-page-2' || $form['#id'] == 'views-exposed-form-signed-bills-upload-page-3' || $form['#id'] == 'views-exposed-form-bills-collection-page' || $form['#id'] == 'views-exposed-form-day-wise-collection-page' || $form['#id'] == 'views-exposed-form-collection-history-page' || $form['#id'] == 'views-exposed-form-assignment-history-page' || $form['#id'] == 'views-exposed-form-collection-closure-page' || $form['#id'] == 'views-exposed-form-bills-assignment-acknowledgement-page' || $form['#id'] == 'views-exposed-form-dispatch-planning-inventory-return-sheet-page' || $form['#id'] == 'views-exposed-form-trip-asset-report-detailed-page' || $form['#id'] == 'views-exposed-form-trip-asset-report-detailed-page-1' || $form['#id'] == 'views-exposed-form-bill-return-report-page') {
        $select = array('' => '- Any -');
        $salesman = get_all_salesman_data("salesman", NULL);
        $salesman = $select + $salesman;
        if (isset($form['field_assigned_person_value'])) {
            $form['field_assigned_person_value']['#type'] = 'select';
            $form['field_assigned_person_value']['#size'] = null;
            $form['field_assigned_person_value']['#options'] = $salesman;
            $form['field_assigned_person_value']['#validated'] = TRUE;
        }
        if (isset($form['field_salesman_value'])) {
            $form['field_salesman_value']['#type'] = 'select';
            $form['field_salesman_value']['#size'] = null;
            $form['field_salesman_value']['#options'] = $salesman;
            $form['field_salesman_value']['#validated'] = TRUE;
        }
        if (isset($form['field_assign_to_value'])) {
            $form['field_assign_to_value']['#type'] = 'select';
            $form['field_assign_to_value']['#size'] = null;
            $form['field_assign_to_value']['#options'] = $salesman;
            $form['field_assign_to_value']['#validated'] = TRUE;
        }
        // Salesman field in Farey API Data in inventory return sheet view
        if (isset($form['salesman'])) {
            $form['salesman']['#type'] = 'select';
            $form['salesman']['#size'] = null;
            $form['salesman']['#options'] = $salesman;
            $form['salesman']['#validated'] = TRUE;
        }
        $beatname = get_all_beatname_data();
        $beatname = $select + $beatname;

        if (isset($form['field_beat_name_value'])) {
            $form['field_beat_name_value']['#type'] = 'select';
            $form['field_beat_name_value']['#size'] = null;
            $form['field_beat_name_value']['#options'] = $beatname;
            $form['field_beat_name_value']['#validated'] = TRUE;
        }

        $cashiername = get_all_cashier_data();
        $cashiername = $select + $cashiername;

        if (isset($form['field_cashier_name_value'])) {
            $form['field_cashier_name_value']['#type'] = 'select';
            $form['field_cashier_name_value']['#size'] = null;
            $form['field_cashier_name_value']['#options'] = $cashiername;
            $form['field_cashier_name_value']['#validated'] = TRUE;
            //$form['field_cashier_name_value']['#multiple'] = TRUE;
        }

        if (isset($form['field_sr_bill_date_value'])) {
            $form['field_sr_bill_date_value']['min']['#title'] = 'Bill Start Date';
            $form['field_sr_bill_date_value']['max']['#title'] = 'Bill End Date';
        }

        if (isset($form['field_assignment_date_value'])) {
            $form['field_assignment_date_value']['min']['#title'] = 'Assignment Start Date';
            $form['field_assignment_date_value']['max']['#title'] = 'Assignment End Date';
        }

        if (isset($form['field_declaration_date_value'])) {
            $form['field_declaration_date_value']['min']['#title'] = 'Declaration Start Date';
            $form['field_declaration_date_value']['max']['#title'] = 'Declaration End Date';
        }

        if (isset($form['field_file_upload_date_value'])) {
            $form['field_file_upload_date_value']['min']['#title'] = 'Upload Start Date';
            $form['field_file_upload_date_value']['max']['#title'] = 'Upload End Date';
        }

        if (isset($form['field_collection_date_value'])) {
            $form['field_collection_date_value']['min']['#title'] = 'Collection Start Date';
            $form['field_collection_date_value']['max']['#title'] = 'Collection End Date';
        }

        if (isset($form['field_collection_history_date_value'])) {
            $form['field_collection_history_date_value']['min']['#title'] = 'Collection Start Date';
            $form['field_collection_history_date_value']['max']['#title'] = 'Collection End Date';
        }

        if (isset($form['field_assign_date_value'])) {
            $form['field_assign_date_value']['min']['#title'] = 'Assignment Start Date';
            $form['field_assign_date_value']['max']['#title'] = 'Assignment End Date';
        }

        if ($form['#id'] == 'views-exposed-form-signed-bills-upload-page-3') {
            $form['field_cheque_date_value']['min']['#title'] = 'Cheque From Date';
            $form['field_cheque_date_value']['max']['#title'] = 'Cheque To Date';
        }
    }

    if ($form['#id'] == 'views-exposed-form-signed-bills-upload-page' || $form['#id'] == 'views-exposed-form-signed-bills-upload-page-1') {
        $options = array('=' => '- Any -', 'empty' => 'No', 'not empty' => 'Yes');
        $form['field_file_fid']['value']['#type'] = 'hidden';
        if (isset($form['field_file_fid_op'])) {
            $form['field_file_fid_op']['#options'] = $options;
        }

        if (isset($form['field_sr_bill_date_value'])) {
            $form['field_sr_bill_date_value']['min']['#title'] = 'Bill Start Date';
            $form['field_sr_bill_date_value']['max']['#title'] = 'Bill End Date';
        }

        if (isset($form['field_declaration_date_value'])) {
            $form['field_declaration_date_value']['min']['#title'] = 'Declaration Start Date';
            $form['field_declaration_date_value']['max']['#title'] = 'Declaration End Date';
        }
    }

    // Updated By filter in Payment Terms View.
    if (isset($form['field_updated_by_nid']['#options'])) {
        $default = array('All' => '- Any -');
        global $user;
        // Store distributor id in author in each node
        $distributor_id = change_feeds_import_get_distributor_id($user->uid);
        $resource_type = 'PT-CT Incharge';

        $query = db_select('node', 'n');
        $query->condition('n.type', 'resource_master');
        $query->join('field_data_field_resource_type', 'rt', 'rt.entity_id = n.nid');
        if (!empty($resource_type)) {
            $query->condition('rt.field_resource_type_value', $resource_type);
        }
        $query->condition('n.uid', $distributor_id);
        $query->fields('n', array('nid'));
        $query->fields('n', array('title'));
        $options = $query->execute()->fetchAllKeyed(0, 1);

        $form['field_updated_by_nid']['#options'] = $default + $options;
    }
}

function get_all_beatname_data() {
    $query = db_select('node', 'n');
    $query->condition('n.type', 'outlet_master');
    $query->addTag('node_uid');
    $query->join('field_data_field_beat_name', 'bn', 'bn.entity_id = n.nid');
    $query->fields('bn', array('field_beat_name_value'));

    $results = $query->execute()->fetchAllKeyed(0, 0);
    return $results;
}

function get_all_cashier_data() {
    $query = db_select('node', 'n');
    $query->condition('n.type', 'dispatch_data');
    $query->addTag('node_uid');
    $query->join('field_data_field_cashier_name', 'cn', 'cn.entity_id = n.nid');
    $query->fields('cn', array('field_cashier_name_value'));

    $results = $query->execute()->fetchAllKeyed(0, 0);
    return $results;
}

function get_all_salesman_data($salesman, $salesman_code) {
    $query = db_select('node', 'n');
    $query->condition('n.type', 'outlet_master');
    $query->addTag('node_uid');
    if (!is_null($salesman)) {
        $query->join('field_data_field_salesman', 'fs', 'fs.entity_id = n.nid');
        $query->fields('fs', array('field_salesman_value'));
    }
    if (!is_null($salesman_code)) {
        $query->join('field_data_field_salesman_code', 'fsc', 'fsc.entity_id = n.nid');
        $query->fields('fsc', array('field_salesman_code_value'));
    }
    $results = $query->execute()->fetchAllKeyed(0, 0);
    return $results;
}

function get_van_pl($van, $day, $name) {
    $query = db_select('node', 'n');
    $query->condition('n.type', 'day_van_pl_gp_area_hook_grouping');
    $query->addTag('node_uid');

    if (!is_null($van)) {
        $query->join('field_data_field_dva_van_pl_group', 'ppplg', 'ppplg.entity_id = n.nid');
        $query->fields('ppplg', array('field_dva_van_pl_group_value'));
    }
    if (!is_null($day)) {
        $query->join('field_data_field_dva_sales_day', 'dsd', 'dsd.entity_id = n.nid');
        $query->fields('dsd', array('field_dva_sales_day_value'));
    }
    if (!is_null($name)) {
        $query->join('field_data_field_dva_area_hook_group_name', 'gn', 'gn.entity_id = n.nid');
        $query->fields('gn', array('field_dva_area_hook_group_name_value'));
    }

    $pl_van = $query->execute()->fetchAllKeyed(0, 0);
    return $pl_van;
}

/**
 * 
 * @param type $batch
 * @param type $batch_redirect
 */
function change_feeds_import_views_data_export_batch_alter(&$batch, &$batch_redirect) {
    
    watchdog('cron1', '<pre>' . print_r(array(), TRUE) . '</pre>');

    $views_names = array('impact_delivery_cron_2', 'impact_party_master', 'impact_delivery_cron_evening_2', 'impact_party_master_morning'); //  Download files for this Views only

    if (in_array($batch['view_name'], $views_names)) {

        $batch['operations'][] = array(
            'change_feeds_import_views_data_export_batch_finish', array($batch['eid'], $batch['view_name']),
        );
    }
}

/**
 * 
 * Implements Additional Batch Process to Save Export All views Data Into Files
 */
function change_feeds_import_views_data_export_batch_finish($eid, $view_name) {
    $export = views_data_export_get($eid);
    $data = array();
    $view = views_data_export_view_retrieve($eid);
    watchdog('cron2', '<pre>' . print_r(array(), TRUE) . '</pre>');
    // Allow Dump Creation for Export 2 Only to avoid Overriding
    // change file name for file sent in mornings
    if ($view_name == 'impact_delivery_cron_2' || $view_name == 'impact_party_master_morning') {
        $date = date('Ymdhis') . '_' . date('dmY');
    } else {
        $date = date('Ymdhis') . '_' . date('dmY', strtotime("+1 days"));
    }

    if ($view_name == 'impact_delivery_cron_2' || $view_name == 'impact_delivery_cron_evening_2') {
        watchdog('impact_delivery', '<pre>' . print_r(array(), TRUE) . '</pre>');
        $view->set_display($export->view_display_id);
        $view->display_handler->batched_execution_state = $export;
        $view->display_handler->remove_index();
        // Naming of file below

        $file_name = 'TP2IMPACT_DELIVERY_' . $date . '.csv';

        $file_uri = 'public://TP2IMPACT_DELIVERY/' . $file_name;
        $temp_file = $view->display_handler->outputfile_path();

        // create directory if not exist
        $dir = 'public://TP2IMPACT_DELIVERY';
        file_prepare_directory($dir, FILE_CREATE_DIRECTORY);

        $uri_path = file_unmanaged_copy($temp_file, $file_uri, FILE_EXISTS_REPLACE);

        $files = file_load_multiple(array(), array('uri' => $uri_path));
    } else {
        watchdog('PARTYMASTER', '<pre>' . print_r(array(), TRUE) . '</pre>');
        $view->set_display($export->view_display_id);
        $view->display_handler->batched_execution_state = $export;
        $view->display_handler->remove_index();
        // Naming of file below

        $file_name = 'TP2IMPACT_PARTYMASTER_' . $date . '.csv';

        $file_uri = 'public://TP2IMPACT_PARTYMASTER/' . $file_name;
        $temp_file = $view->display_handler->outputfile_path();

        // create directory if not exist
        $dir = 'public://TP2IMPACT_PARTYMASTER';
        file_prepare_directory($dir, FILE_CREATE_DIRECTORY);

        $uri_path = file_unmanaged_copy($temp_file, $file_uri, FILE_EXISTS_REPLACE);

        $files = file_load_multiple(array(), array('uri' => $uri_path));
    }

    //_send_file_using_sftp($file_name, $file_uri);
    _send_file_using_shellexec($file_name, $file_uri);
}

/**
 * 
 */
function impact_delivery_cron() {
    $date = date('m/d/y', strtotime("+1 days"));

    $param['date_filter[min][date]'] = $date;
    $param['date_filter[max][date]'] = $date;

    drupal_goto('impact-delivery-cron2/export', array('query' => $param));
}

/**
 * 
 */
function impact_delivery_partypack_cron() {
    drupal_goto('impact-party-master/export');
}

function _send_file_using_sftp($file_name, $file_uri) {
    if (!empty($file_name) && !empty($file_uri)) {
        $strServer = "103.233.76.251";  // ip address
        $strServerPort = 22;
        $strServerUsername = "sftpuser03";
        $strServerPassword = "Techub123#";
        $csv_realfilename = drupal_realpath($file_uri);

        //Send file via sftp to server
        //connect to server
        $resConnection = ssh2_connect($strServer, $strServerPort);

        if (ssh2_auth_password($resConnection, $strServerUsername, $strServerPassword)) {
            //Initialize SFTP subsystem

            $output = ssh2_scp_send($resConnection, $csv_realfilename, $file_name);
            ssh2_exec($resConnection, 'exit');

            if ($output)
                watchdog('$file_name$output', '<pre>' . print_r(var_dump($output), TRUE) . '</pre>');
        }
        else {
            $data['error'] = 'File was not sent';
            $data['file_name'] = $file_name;
            $data['file_uri'] = $file_uri;
            watchdog('File error', '<pre>' . print_r($data, TRUE) . '</pre>');
        }
    } else {
        return '';
    }
}

/**
 * 
 * @param type $file_name
 * @param type $file_uri
 * If above function "_send_file_using_sftp" will not work then
 *  We can move the file directly thought the linux command 
 */
function _send_file_using_shellexec($file_name, $file_uri) {
    if (!empty($file_name) && !empty($file_uri)) {
        $csv_realfilename = drupal_realpath($file_uri);
        $command = 'sshpass -p "Techub123#" scp -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -r ' . $csv_realfilename . ' sftpuser03@103.233.76.251:/';
        shell_exec($command);
    }
}

/**
 * Function to get user id of distributor
 */
function fetch_rs_field_data() {
    $query = db_select('users', 'u');
    $query->join('field_data_field_rs_view_report', 'rs', 'u.uid = rs.entity_id');
    $query->join('field_data_field_distributor', 'ds', 'u.uid = ds.entity_id');
    $query->fields('ds', array('field_distributor_value'));
    $query->condition('rs.field_rs_view_report_value', 1, '=');
    $result = $query->execute()->fetchAllKeyed(0, 0);
    return $result;
}

/**
 * Implement hook_form_FORM_ID_alter()
 * @param type $form
 * @param type $form_state
 */
function change_feeds_import_form_feeds_import_form_alter(&$form, $form_state, $form_id) {
    if ($form['#importer_id'] == 'target_master_import') {
        $form['feeds']['download_template'] = array(
            '#type' => 'link',
            '#title' => t('Download target master'),
            '#href' => 'central-van-stop-master-report-download',
            '#weight' => -10,
        );
    }
    // This for validate HUL_Address Confirmation
    if ($form['#importer_id'] == 'outlet_master') {
        if (user_access('hul_address_confirm_upload')) {
            $form['#submit'][] = 'hul_code_address_confirmation';
        }
    }
}

/*
 * // This for validate HUL_Address Confirmation
 */

function hul_code_address_confirmation($form, &$form_state) {
    global $base_url,$user;
    $dis_id = change_feeds_import_get_distributor_id($user->uid);
    $logged_in_distributor_id = change_feeds_import_get_distributor_id($user->uid);
    // it for address confirmation checking user has permission to confirm address after outlet upload & sales register upload   
    if (user_access('hul_address_confirm_upload')) {
        $page_url = $base_url . '/address/confirm';
        if ($form['#importer_id'] == 'outlet_master') {
            $filepath = $form_state['values']['feeds']['FeedsFileFetcher']['file']->uri;
            $datas = array();
            if (($handle = fopen($filepath, "r")) !== FALSE) {
                $header = fgetcsv($handle, 0, ',', '"');
                while (($row = fgetcsv($handle) ) !== FALSE) {
                    foreach ($row as $key => &$value) {
                        $value = mb_convert_encoding(trim($value), 'UTF-8', 'UTF-8');
                    }
                    $datas[] = array_combine($header, $row);
                }
                fclose($handle);
            }
            $area_code_warning = array();
            foreach ($datas as $item) {
                $party_code = $item['Party Code'];
                $pl_group = $item['PL_GROUP'];
                $sales_day = $item['Sales Day'];
                $beat_name = $item['Beat Name'];
                $hu_code = $item['HUL_Code'];
                $dist =  validate_distributor_name(trim($item['distributor name']));
                $distributor_id = $dist? $dist: $logged_in_distributor_id; 
                // returns hul code
                $hul_code_exist = check_hul_code_exists($hu_code,$distributor_id); //returns hul_code, 
                if (!empty($hul_code_exist)) {
                    $arugments = '?pl_group=' . urlencode($pl_group) . '&sales_day=' . urlencode($sales_day) . '&beat_name=' . urlencode($beat_name) . '&hul_status=' . urlencode(0);
                    $url = $page_url . $arugments;
                    drupal_set_message('Please confirm the address for Party Code:  ' . l($party_code . '- (HUL Code:' . $hu_code . ')', $url, array('attributes' => array('target' => '_blank'))), 'error');
                }
                $pt_ct_status = check_exsiting_record_for_party_code($party_code, $distributor_id);
                if (empty($pt_ct_status)) {
                    $url = $base_url . '/import/payment_terms';
                    drupal_set_message('Please maintain PT-CT for Party Code:  ' . l($party_code, $url, array('attributes' => array('target' => '_blank'))), 'error');
                }
                if ($hu_code) {
                    if (!in_array($hu_code, $area_code_warning)) {
                        $area_code_warning[] = $hu_code;
                        $area_code_exist = check_area_code_exist_in_hul_code($hu_code,$distributor_id);
                        if (empty($area_code_exist)) {
                            $url = 'import/hul_code_area_code_mapping';
                            drupal_set_message("Please link Area Code in Hul Code:" . l($hu_code, $url, array('attributes' => array('target' => '_blank'))), 'warning');
                        }
                    }
                }
            }
        }
    }
}

/**
 * 
 * @global type $user
 * @param type $trip_id
 * @return array
 */
function _check_dispatch_value_and_bill_value_mismatch($trip_id) {
    global $user;
    // Store distributor id in author in each node
    $dis_id = change_feeds_import_get_distributor_id($user->uid);
    $query = db_select('node', 'n');
    $query->join('field_data_field_bill_count', 'dv', 'dv.entity_id = n.nid');
    $query->condition('n.title', $trip_id);
    $query->condition('n.uid', $dis_id);
    $query->addfield('dv', 'field_bill_count_value', 'dispatch_bill_value');
    $query->join('field_data_field_trip_id_reference', 't', 't.field_trip_id_reference_nid = n.nid');
    //$query->join('field_data_field_bill_value', 'bv', 'bv.entity_id = t.entity_id');
    $query->addExpression('COUNT(t.field_trip_id_reference_nid)', 'sales_bill_value');
    $res = $query->execute()->fetch(PDO::FETCH_ASSOC);
    return $res;
}

/*
 * function to check the dispatch date of each trip
 */

function check_dispatch_date($trip_id) {
    $query = db_select('field_data_field_dispatch_date', 'dd');
    $query->condition('dd.entity_id', $trip_id, '=');
    $query->fields('dd', array('field_dispatch_date_value'));
    $dispatch_date = $query->execute()->fetchField();
    return $dispatch_date;
}

function check_area_code_exist_in_hul_code($hul_code,$distributor_id) {
    global $user;
    $hu_code = '';
    //$distributor_id = change_feeds_import_get_distributor_id($user->uid);
    if (!empty($hul_code) && !empty($distributor_id)) {
        $query = db_select('node', 'hul');
        $query->condition('hul.type', 'hul_code_master');
        $query->condition('hul.uid', $distributor_id, '=');
        $query->fields('ac', array('field_area_code_nid'));
        $query->condition('hul.title', $hul_code, '=');
        $query->Join('field_data_field_area_code', 'ac', 'ac.entity_id = hul.nid');
        $area_code = $query->execute()->fetchField();
    }
    return $area_code;
}

/**
 * 
 * @param type $unique_skus
 * return skuwise weight volume rs_per_kg and rs_per_cft
 */
function get_weight_volume_by_skus($unique_skus, $distributor_id) {
    $query = db_select('node', 'n');
    $query->condition('n.type', 'sku7_code_master');
    $query->condition('n.title', $unique_skus, 'IN');
    //$query->condition('n.uid', $distributor_id);
    $query->leftjoin('field_data_field_sku_weight', 'fsw', 'fsw.entity_id = n.nid'); //MRC_WEIGHT
    $query->leftjoin('field_data_field_sku_volume', 'fsv', 'fsv.entity_id = n.nid');
    $query->leftjoin('field_data_field_sub_category', 'fc', 'fc.entity_id = n.nid');
    $query->leftjoin('node', 'n1', "n1.nid = fc.field_sub_category_nid and n1.type = 'product_sub_category_master' ");

    $query->leftjoin('field_data_field_rs_kg', 'frk', 'frk.entity_id = n1.nid');
    $query->leftjoin('field_data_field_rs_cft', 'frc', 'frc.entity_id = n1.nid');

    $query->addField('n', 'title', 'sku7_code');
    $query->addField('fsw', 'field_sku_weight_value', 'weight');
    $query->addField('fsv', 'field_sku_volume_value', 'volume');
    $query->addField('frk', 'field_rs_kg_value', 'rs_per_kg');
    $query->addField('frc', 'field_rs_cft_value', 'rs_per_cft');
    $res = $query->execute()->fetchAll(PDO::FETCH_GROUP | PDO::FETCH_UNIQUE | PDO::FETCH_ASSOC);
    return $res;
}

// DRS (Invoice vs Actual Dispatched) Report.
function drs_invoice_vs_actual_dispatched_report_table($trip_id, $distributor_id) {
    $query = db_select('difference_qty', 'diff');
    $query->join('node', 'n', 'n.title = diff.bill_number AND n.uid = diff.distributor_id');
    $query->condition('n.type', 'sales_register_data', '=');
    $query->join('field_data_field_party_code_reference', 'pc', 'pc.entity_id = n.nid');
    $query->join('node', 'oun', 'oun.nid = pc.field_party_code_reference_nid');
    $query->join('field_data_field_party_name', 'pn', 'oun.nid = pn.entity_id');
    $query->join('custom_billing_data', 'cbd', 'diff.bill_number = cbd.bill_number and diff.sku_code = cbd.sku7_code and diff.distributor_id = cbd.distributor_id');
    $query->condition('diff.trip_id', $trip_id, '=');
    $query->condition('diff.distributor_id', $distributor_id, '=');
    $query->fields('diff', array('bill_number', 'sku_code', 'revised_host_qty', 'to_be_dispatch_qty', 'difference', 'reason'));
    $query->addexpression("(CASE WHEN diff.to_be_dispatch_qty != diff.revised_host_qty THEN cbd.product_name END)", 'product_name');
    $query->fields('pn', array('field_party_name_value'));
    $query->fields('cbd', array('line_level_value'));
    $query->havingCondition('revised_host_qty', 0, '>');
    $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

    $row = array();
    $total = array();
    $sr_no = 0;
    if (!empty($result)) {

        foreach ($result as $value) {
            $sr_no++;
            $row['sr_no'] = $sr_no;
            $total['sr_no'] = '';
            $row['bill_number'] = $value['bill_number'];
            $total['bill_number'] = '';
            $row['field_party_name_value'] = $value['field_party_name_value'];
            $total['field_party_name_value'] = '';
            $row['sku_code'] = $value['sku_code'];
            $total['sku_code'] = '';
            $row['product_name'] = $value['product_name'];
            $total['product_name'] = '';
            $row['revised_host_qty'] = $value['revised_host_qty'];
            $total['revised_host_qty'] = '';
            $row['to_be_dispatch_qty'] = $value['to_be_dispatch_qty'];
            $total['to_be_dispatch_qty'] = '<b>Difference Value</b>';
            $row['difference'] = $value['difference'];
            $total['difference'] += ($value['difference'] * $value['line_level_value']);
            $row['reason'] = $value['reason'];
            $total['reason'] = '';
            $rows[] = $row;
        }
        $rows[] = $total;
        $title = "<table border='0' width='100%' cellpadding='0'><tr> <td style='font-weight:bold; text-align:center'>DRS (Invoice vs Actual Dispatched) Report</td></tr></table>";
        $header = array('Sr. No.', 'Bill Number', 'Party Name', 'SKU7 Code', 'Product Name', 'Invoice quantity', 'Dispatched quantity', 'Difference', 'Difference Reason');
        $html = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('width' => "100%", 'cellspacing' => "0", 'style' => "font-size: 13px; color:#000; font-family:arial", 'cellpadding' => "5", 'border' => "1", 'align' => "center", 'class' => "preview_table")));
    }
    return $title . $html;
}

// Manual VRS Report.
/* function manual_vrs_report_table($trip_id, $distributor_id) {
  $query = db_select('dispatch_qty_confirmation', 'dqc');
  $query->join('node', 'n', 'n.title = dqc.bill_number AND n.uid = dqc.distributor_id');
  $query->condition('n.type', 'sales_register_data', '=');
  $query->join('field_data_field_party_code_reference', 'pc', 'pc.entity_id = n.nid');
  $query->join('node', 'oun', 'oun.nid = pc.field_party_code_reference_nid');
  $query->join('field_data_field_party_name', 'pn', 'oun.nid = pn.entity_id');
  $query->condition('dqc.trip_id', $trip_id, '=');
  $query->condition('dqc.distributor_id', $distributor_id, '=');
  $query->fields('dqc', array('trip_id', 'bill_number'));
  $query->fields('pn', array('field_party_name_value'));
  $query->groupBy('dqc.bill_number');
  $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

  $rows = array();
  $sr_no = 0;
  if (!empty($result)) {
  foreach ($result as $value) {
  $sundry_expenses = array();
  $exchanged_notes = array();
  $total = array();
  $sr_no++;

  $row['sr_no'] = $sr_no;
  $sundry_expenses['sr_no'] = '';
  $exchanged_notes['sr_no'] = '';
  $total['sr_no'] = '';
  $row['bill_number'] = $value['bill_number'];
  $sundry_expenses['bill_number'] = '<b>Sundry Expenses</b>';
  $exchanged_notes['bill_number'] = '<b>Exchanged Notes</b>';
  $total['bill_number'] = '<b>Total</b>';
  $row['field_party_name_value'] = $value['field_party_name_value'];
  $sundry_expenses['field_party_name_value'] = '';
  $exchanged_notes['field_party_name_value'] = '';
  $total['field_party_name_value'] = '';
  $row['collected_value'] = '';
  $sundry_expenses['collected_value'] = '';
  $exchanged_notes['collected_value'] = '';
  $total['collected_value'] = '';
  $row['returned_value'] = '';
  $sundry_expenses['returned_value'] = '';
  $exchanged_notes['returned_value'] = '';
  $total['returned_value'] = '';
  $row['2000'] = '';
  $sundry_expenses['2000'] = '';
  $exchanged_notes['2000'] = '';
  $total['2000'] = '';
  $row['500'] = '';
  $sundry_expenses['500'] = '';
  $exchanged_notes['500'] = '';
  $total['500'] = '';
  $row['200'] = '';
  $sundry_expenses['200'] = '';
  $exchanged_notes['200'] = '';
  $total['200'] = '';
  $row['100'] = '';
  $sundry_expenses['100'] = '';
  $exchanged_notes['100'] = '';
  $total['100'] = '';
  $row['50'] = '';
  $sundry_expenses['50'] = '';
  $exchanged_notes['50'] = '';
  $total['50'] = '';
  $row['20'] = '';
  $sundry_expenses['20'] = '';
  $exchanged_notes['20'] = '';
  $total['20'] = '';
  $row['10'] = '';
  $sundry_expenses['10'] = '';
  $exchanged_notes['10'] = '';
  $total['10'] = '';
  $row['coins'] = '';
  $sundry_expenses['coins'] = '';
  $exchanged_notes['coins'] = '';
  $total['coins'] = '';
  $row['exchanges_notes'] = '';
  $sundry_expenses['exchanges_notes'] = '';
  $exchanged_notes['exchanges_notes'] = '';
  $total['exchanges_notes'] = '';
  $row['cash_total'] = '';
  $sundry_expenses['cash_total'] = '';
  $exchanged_notes['cash_total'] = '';
  $total['cash_total'] = '';
  $row['cheque'] = '';
  $sundry_expenses['cheque'] = '';
  $exchanged_notes['cheque'] = '';
  $total['cheque'] = '';
  $row['signed_bill'] = '';
  $sundry_expenses['signed_bill'] = '';
  $exchanged_notes['signed_bill'] = '';
  $total['signed_bill'] = '';
  $rows[] = $row;
  }
  $rows[] = $sundry_expenses;
  $rows[] = $exchanged_notes;
  $rows[] = $total;
  $header = array('S.N.', 'Bill Number', 'Party Name','Collected Value', 'Returned Value', '2000', '500', '200', '100', '50', '20', '10', 'Coins', 'Exchanged Notes (Rs.)', 'Cash Total', 'Cheque', 'Signed Bill',);
  $output = "<h3 align='center'>Manual VRS Report</h3>";
  $output .= "<table width='100%'><tr><td style='text-align:center'>Trip ID:$trip_id</td></tr></table>";
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('width' => "100%", 'cellspacing' => "0", 'style' => "font-size: 13px; color:#000; font-family:arial", 'cellpadding' => "5", 'border' => "1", 'align' => "center", 'class' => "preview_table")));
  }
  return $output;
  } */

// Check Brand Master value and SKU7 Code Master uploader Brand column value.
function brand_validate($sku_brand) {
    $query = db_select('node', 'n');
    $query->condition('n.type', 'brand_master');
    //$query->condition('n.uid', $distributor_id);
    $query->condition('n.title', $sku_brand, '=');
    $query->fields('n', array('title'));
    $result = $query->execute()->fetchField();

    return $result;
}

// DRS printout excess table
function drs_excess_table($trip_id, $distributor_id) {
    $query = db_select('excess_qty', 'e');
    $query->join('node', 'n', 'n.title = e.bill_number AND n.uid = e.distributor_id');
    $query->condition('n.type', 'sales_register_data', '=');
    $query->join('field_data_field_party_code_reference', 'pc', 'pc.entity_id = n.nid');
    $query->join('node', 'oun', 'oun.nid = pc.field_party_code_reference_nid');
    $query->join('field_data_field_party_name', 'pn', 'oun.nid = pn.entity_id');
    $query->join('custom_billing_data', 'cbd', 'e.bill_number = cbd.bill_number and e.sku_code = cbd.sku7_code and e.distributor_id = cbd.distributor_id');
    $query->condition('e.distributor_id', $distributor_id, '=');
    $query->condition('e.trip_id', $trip_id);
    $query->fields('e', array('bill_number'));
    $query->fields('pn', array('field_party_name_value'));
    $query->fields('e', array('sku_code'));
    $query->fields('cbd', array('product_name'));
    $query->fields('e', array('excess_qty', 'reason_code'));
    $rows = $query->execute()->fetchAll(PDO::FETCH_ASSOC);

    $header = array('Bill No', 'Party Name', 'Sku', 'Product Name', 'Excess Qty', 'Reason');
    if (!empty($rows)) {
        $title = "<table border='0' width='100%' cellpadding='0'><tr> <td style='font-weight:bold; text-align:center'>Excess Report</td></tr></table>";
        $excess_table = theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('width' => "100%", 'cellspacing' => "0", 'style' => "font-size: 13px; color:#000; font-family:arial", 'cellpadding' => "5", 'border' => "1", 'align' => "center", 'class' => "preview_table")));
    }
    return $title . $excess_table;
}

function check_resource_name_exists($title, $resource_type, $distributor_id) {
    $query1 = db_select('node', 'n');
    $query1->condition('n.type', 'resource_master');
    $query1->join('field_data_field_resource_type', 'rt', 'rt.entity_id = n.nid');
    if (!empty($resource_type)) {
        $query1->condition('rt.field_resource_type_value', $resource_type);
    }
    $query1->condition('n.title', $title);
    $query1->condition('n.uid', $distributor_id);
    $query1->fields('n', array('title'));
    $res = $query1->execute()->fetchField();
    return $res;
}
// Not required distributor id all reason masters
function get_change_reason($title, $distributor_id) {
    $query = db_select('node', 'n');
    $query->condition('n.type', 'pt_ct_change_reason_master');
    $query->condition('n.title', $title);
    // Not required distributor id all reason masters
    //$query->condition('n.uid', $distributor_id);
    $query->fields('n', array('title'));
    $res = $query->execute()->fetchField();
    return $res;
}

function check_exsiting_record_for_party_code($party_code, $distributor_id) {
    $query = db_select('node', 'n');
    $query->condition('n.type', 'outlet_master');
    $query->join('field_data_field_party_code', 'pc', 'pc.entity_id = n.nid');
    $query->join('field_data_field_payment_terms', 'pt', 'pc.entity_id = pt.entity_id');
    $query->condition('pc.field_party_code_value', $party_code);
    $query->condition('n.uid', $distributor_id);
    $query->fields('pt', array('field_payment_terms_value'));
    $res = $query->execute()->fetchField();

    return $res;
}

/**
 * 
 * @param type $string
 */
function _get_hul_code_autocomplete($distributor_id,$string = '') {
   $result = array();

    watchdog('hulcode', '<pre>' . print_r(array($distributor_id,$string), TRUE) . '</pre>');
   if ($string) {
      $query = db_select('node', 'n');
      $query->condition('n.type', 'hul_code_master');
      $query->condition('n.uid', $distributor_id);
      $query->addField('n', 'title', 'hul_code');
      $query->condition('n.title', db_like($string) . '%', 'LIKE');
      $query->fields('n', array('title'));
      $query->range(0, 15);
      //$query->addTag('node_distributor_access');
      $result = $query->execute()->fetchAllKeyed(0, 0);
   }

   drupal_json_output($result);
}


function call_bank_master_api($node) {
    $bank_name = $node->title;
    $original_bank_name = $node->original->title;
    $dis_id = $node->uid;
    $api_type = 'bank_master';

    if (!empty($bank_name) && ($bank_name != $original_bank_name)) {
        $bank_name_arr = array(array('bank_name' => $bank_name, 'merchant' => array(array('name' => 'hul'))));
        $bank_name_json = json_encode($bank_name_arr);

        $sql_ins_id = bank_master_api_log($bank_name, $bank_name_json, $api_type, $dis_id);

        $request_headers = array('Content-Type' => 'application/json', 'Authorization' => 'Token 2972f506c41448cb3456c1c074aed6102183aff9');
        $order_api_url = variable_get('bank_master_api_url');
        $options = array('headers' => $request_headers, 'method' => 'POST', 'data' => $bank_name_json);
        $response_data = drupal_http_request($order_api_url, $options);
        $response = $response_data->data;
        masters_api_log_update($response, $sql_ins_id);
    }
}

function call_reason_code_master_api($node) {
    $reason = $node->field_dp_reason['und'][0]['value'];
    $og_reason = $node->original->field_dp_reason['und'][0]['value'];
    $reason_type = $node->field_reason_type['und'][0]['value'];
    $og_reason_type = $node->original->field_reason_type['und'][0]['value'];
    $dis_id = $node->uid;
    $api_type = 'reason_code_master';

    if (!empty($reason) && !empty($reason_type) && ($reason != $og_reason || $reason_type != $og_reason_type)) {
        $reason_arr = array(array('reason_text' => $reason, 'reason_description' => $reason, 'reason_type' => $reason_type, 'is_active' => True, 'merchant' => array(array('name' => 'hul'))));
        $reason_json = json_encode($reason_arr);

        $sql_ins_id = reason_code_master_api_log($reason, $reason_type, $reason_json, $api_type, $dis_id);
        $request_headers = array('Content-Type' => 'application/json', 'Authorization' => 'Token 2972f506c41448cb3456c1c074aed6102183aff9');
        $order_api_url = variable_get('reason_code_master_api_url');
        $options = array('headers' => $request_headers, 'method' => 'POST', 'data' => $reason_json);
        $response_data = drupal_http_request($order_api_url, $options);
        $response = $response_data->data;
        masters_api_log_update($response, $sql_ins_id);
    }
}

function call_location_api($node) {
    $location_type = 'Retailer';
    $party_code = $node->field_party_code['und'][0]['value'];
    $og_party_code = $node->original->field_party_code['und'][0]['value'];
    $hul_code = $node->field_hul_code['und'][0]['value'];
    $og_hul_code = $node->original->field_hul_code['und'][0]['value'];
    $party_name = $node->field_party_name['und'][0]['value'];
    $og_party_name = $node->original->field_party_name['und'][0]['value'];
    $payment_term = $node->field_payment_terms['und'][0]['value'];
    $og_payment_term = $node->original->field_payment_terms['und'][0]['value'];
    $credit_days = $node->field_credit_days['und'][0]['value'];
    $og_credit_days = $node->original->field_credit_days['und'][0]['value'];
    $nid = $node->field_hul_code_reference['und'][0]['nid'];
    $og_nid = $node->original->field_hul_code_reference['und'][0]['nid'];
    $dis_id = $node->uid;
    $api_type = 'location_master';

    if (!empty($party_code) && !empty($party_name) && ($party_code != $og_party_code || $hul_code != $og_hul_code || $party_name != $og_party_name || $payment_term != $og_payment_term || $credit_days != $og_credit_days || $nid != $og_nid)) {
        $res = get_lat_long_and_area_code($nid);
        $lat = $res[0]['field_hul_updated_lat_value'];
        $long = $res[0]['field_hul_updated_long_value'];
        $area_code = $res[0]['n1_title'];

        $location_arr = array(array('party_code' => $party_code, 'party_name' => $party_name, 'location_type' => $location_type, 'merchant' => array(array('name' => 'hul'))));
        if (!empty($hul_code)) {
            $location_arr[0]['hul_code'] = $hul_code;
        }
        if (!empty($lat)) {
            $location_arr[0]['latitude'] = $lat;
        }
        if (!empty($long)) {
            $location_arr[0]['longitude'] = $long;
        }
        if (!empty($area_code)) {
            $location_arr[0]['area_code'] = $area_code;
        }
        if (!empty($payment_term)) {
            $location_arr[0]['payment_term'] = $payment_term;
        }
        if (!empty($credit_days)) {
            $location_arr[0]['credit_days'] = $credit_days;
        }
        $location_json = json_encode($location_arr);

        $sql_ins_id = outlet_master_api_log($party_code, $location_json, $api_type, $dis_id);

        $request_headers = array('Content-Type' => 'application/json', 'Authorization' => 'Token 2972f506c41448cb3456c1c074aed6102183aff9');
        $order_api_url = variable_get('outlet_master_api_url');
        $options = array('headers' => $request_headers, 'method' => 'POST', 'data' => $location_json);
        $response_data = drupal_http_request($order_api_url, $options);
        $response = $response_data->data;
        masters_api_log_update($response, $sql_ins_id);
    }
}

function bank_master_api_log($bank_name, $bank_name_json, $api_type, $dis_id) {
    $sql_ins_id = db_insert('masters_api_log')
            ->fields(array(
                'bank_name' => $bank_name,
                'api_type' => $api_type,
                'distributor_id' => $dis_id,
                'request_data' => $bank_name_json,
                'request_time' => time(),
            ))
            ->execute();
    return $sql_ins_id;
}

function outlet_master_api_log($party_code, $location_json, $api_type, $dis_id) {
    $sql_ins_id = db_insert('masters_api_log')
            ->fields(array(
                'party_code' => $party_code,
                'api_type' => $api_type,
                'distributor_id' => $dis_id,
                'request_data' => $location_json,
                'request_time' => time(),
            ))
            ->execute();
    return $sql_ins_id;
}

function reason_code_master_api_log($reason, $reason_type, $reason_json, $api_type, $dis_id) {
    $sql_ins_id = db_insert('masters_api_log')
            ->fields(array(
                'reason' => $reason,
                'reason_type' => $reason_type,
                'api_type' => $api_type,
                'distributor_id' => $dis_id,
                'request_data' => $reason_json,
                'request_time' => time(),
            ))
            ->execute();
    return $sql_ins_id;
}

function masters_api_log_update($response, $sql_ins_id) {
    db_update('masters_api_log')
            ->fields(array(
                'response_data' => $response,
                'response_time' => time(),
            ))
            ->condition('id', $sql_ins_id, '=')
            ->execute();
}

function get_lat_long_and_area_code($nid) {
    $query = db_select('node', 'n');
    $query->condition('n.type', 'hul_code_master');
    $query->condition('n.nid', $nid);
    $query->fields('n', array('title'));
    $query->addTag('node_distributor_access');
    $query->leftjoin('field_data_field_hul_updated_lat', 'lat', 'n.nid = lat.entity_id');
    $query->leftjoin('field_data_field_hul_updated_long', 'long1', 'n.nid = long1.entity_id');
    $query->leftjoin('field_data_field_area_code', 'area', 'n.nid = area.entity_id');
    $query->join('node', 'n1', 'n1.nid = area.field_area_code_nid');
    $query->fields('lat', array('field_hul_updated_lat_value'));
    $query->fields('long1', array('field_hul_updated_long_value'));
    $query->fields('n1', array('title'));
    $result = $query->execute()->fetchAll(PDO::FETCH_ASSOC);
    return $result;
}

function get_nid_of_resource($updated_by_name) {
    $query = db_select('node', 'n');
    $query->condition('n.type', 'resource_master');
    $query->condition('n.title', $updated_by_name);
    $query->join('field_data_field_resource_type', 'rt', 'rt.entity_id = n.nid');
    $query->condition('rt.field_resource_type_value', 'PT-CT Incharge');
    $query->fields('n', array('nid'));
    $result = $query->execute()->fetchField();
    return $result;
}

function update_parkstop_count($distributor_id) {
    if (!empty($distributor_id)) {
        $transaction = db_transaction();
        $query = db_select('node', 'n');
        $query->condition('n.type', 'dispatch_data');
        $query->condition('n.uid', $distributor_id);
        $query->join('field_data_field_delivery_boy_count', 'dboy_cnt', 'dboy_cnt.entity_id = n.nid');
        $query->condition('api_log.distributor_id', $distributor_id);
        $query->join('parkstop_api_log', 'api_log', 'api_log.trip_id = n.title');
        $query->fields('api_log', array('trip_id', 'api_response'));
        $parkstop_data = $query->execute()->fetchAllKeyed(0, 1);
        foreach ($parkstop_data as $trip_id => $api_response) {
            $res_decode = json_decode($api_response);
            $stops = $res_decode->Van;
            $n = $p = 0;
            $seq = array();
            foreach ($stops as $key => $value) {
                $bills = $value->OptimalStop;
                $c = 0;
                if (array_key_exists($bills, $seq) === FALSE) {//ignor if present at other place
                    $seq[$bills]['park_seq'] = ++$p . '.' . str_pad($c, 2, 0, STR_PAD_LEFT); //handle till .99
                    $seq[$bills]['sequence'] = ++$n;
                }
                $completion_time = $value->ApproxCompletionTime;
                $clusterStops = $completion_time[$delivery_boy - 2]->ClusterStops;
                foreach ($clusterStops as $child => $v2) {
                    $child_bills = $v2->ChildStop;
                    if (array_key_exists($child_bills, $seq) === FALSE) {//ignor if present at other place
                        $seq[$child_bills]['park_seq'] = $p . '.' . str_pad( ++$c, 2, 0, STR_PAD_LEFT);
                        $seq[$child_bills]['sequence'] = ++$n;
                    }
                }
            }
            $parkstop_count = $p;
            $nodes = node_load_multiple(NULL, array("title" => $trip_id, 'type' => 'dispatch_data', 'uid' => $distributor_id));
            $node = current($nodes);
            $node->field_parkstop_count[LANGUAGE_NONE][0]['value'] = $parkstop_count;
            node_save($node);
        }
    }
}

// This function returns logged user related distributor_ids
function get_distributor_ids() {
    global $user;
    $distributor_id = change_feeds_import_get_distributor_id($user->uid);
    $distributor_ids = array();
    /* /Super Central Distributor login it returns childs of super central such as central_rs1,central_rs2
     *  Having to fech child distributor_id of each central rs
     */
    if (in_array('super_central_distributor', $user->roles)) {
        $central_rs_distributor_ids = get_child_distributor_ids($distributor_id);
        if (!empty($central_rs_distributor_ids)) {
            foreach ($central_rs_distributor_ids as $central_rs_distributor_id) {
                $child_distributor_ids = get_child_distributor_ids($central_rs_distributor_id);
                if (!empty($child_distributor_ids)) {
                    $distributor_ids+= $child_distributor_ids;
                }
            }
            // Central distributor id passing
            $distributor_ids+= $central_rs_distributor_ids;
        }
    }
    // if central rs logged in central child's returns
    else if (in_array('central_distributor', $user->roles)) {
        $distributor_ids = get_child_distributor_ids($distributor_id);
        if (empty($distributor_ids)) {
            $distributor_ids = array();
        }
    }
    // child distributor logged in return its id + central_distributor_id
    else {
        // have to fetch parent distributor id
        $central_distributor_id = get_central_distributor_id($distributor_id);
        if (!empty($central_distributor_id)) {
            $distributor_ids[] = $central_distributor_id;
        }
    }
    $distributor_ids[$distributor_id] = $distributor_id;
    //array_push($distributor_ids, $distributor_id);
    return $distributor_ids;
}

// @distributor_id = parent distributor_id
function get_child_distributor_ids($distributor_id) {
    $distributorids = array();
    if (!empty($distributor_id)) {
        global $user;
        $query = db_select('field_data_field_central_distributorid_ref', 'central_ref');
        $query->condition('central_ref.field_central_distributorid_ref_uid', $distributor_id, '=');
        $query->fields('central_ref', array('entity_id'));
        $distributor_uids = $query->execute()->fetchCol();
        $distributorids = get_distributor_id($distributor_uids);
    }
    return $distributorids;
}

function get_distributor_id($user_ids) {
    $distributor_ids = array();
    if (!empty($user_ids)) {
        $query = db_select('users', 'u');
        $query->innerjoin('field_data_field_distributor', 'd', 'd.entity_id = u.uid');
        $query->condition('d.entity_id', $user_ids, 'IN');
        $query->fields('d', array('field_distributor_value'));
        $distributor_ids = $query->execute()->fetchAllKeyed(0, 0);
    }
    return $distributor_ids;
}

// returns parent distributor id
function get_central_distributor_id($child_distributor_id) {
    $parent_dist = 0;
    if (!empty($child_distributor_id)) {
        $query = db_select('field_data_field_central_distributorid_ref', 'central_ref');
        $query->isNotNull('central_ref.field_central_distributorid_ref_uid');
        $query->condition('central_ref.entity_id', $child_distributor_id);
        $query->fields('central_ref', array('field_central_distributorid_ref_uid'));
        $parent_dist = $query->execute()->fetchField();
        if (empty($parent_dist)) {
            $central_distributor_role = 'central_distributor';
            $query = db_select('users_roles', 'ur');
            $query->condition('ur.uid', $child_distributor_id, '=');
            $query->join('role', 'role', 'role.rid = ur.rid');
            $query->condition('role.name', $central_distributor_role, '=');
            $query->fields('ur', array('uid'));
            $parent_dist = $query->execute()->fetchField();
        }
    }
    return $parent_dist;
}

/*
  $table_name = 'field_data_field_distributor_name';
  $table_column = 'field_distributor_name_value';
 * 
 */
/* function get_child_distributor_rsname($distributor_id){
  $res = array();
  global $table_name;
  global $table_column;
  if(!empty($distributor_id)){
  $query = db_select('field_data_field_central_distributorid_ref', 'cdr');
  $query->join($table_name, 'rs', 'cdr.entity_id = rs.entity_id');
  $query->join('field_data_field_distributor','distributor', 'cdr.entity_id = distributor.entity_id');
  $query->condition('cdr.field_central_distributorid_ref_uid', $distributor_id, '=');
  $query->fields('distributor', array('field_distributor_value'));
  $query->fields('rs', array($table_column));
  $res = $query->execute()->fetchAllKeyed(0, 1); // will get child uids=>rs_name
  }
  return $res;
  } */

/*
  $table_name = 'field_data_field_distributor_name';
  $table_column = 'field_distributor_name_value';
 * 
 */

// This function returns logged user related distributor_ids
function get_child_distributor_rsname() {
    global $user;
    $res = array();
    global $table_name;
    global $table_column;
    $distributor_id = change_feeds_import_get_distributor_id($user->uid);
    $distributor_ids = array();
    /* /Super Central Distributor login it returns childs of super central such as central_rs1,central_rs2
     *  Having to fech child distributor_id of each central rs
     */
    if (in_array('super_central_distributor', $user->roles)) {
        $central_rs_distributor_ids = get_child_distributor_ids($distributor_id);
        if (!empty($central_rs_distributor_ids)) {
            foreach ($central_rs_distributor_ids as $central_rs_distributor_id) {
                $child_distributor_ids = get_child_distributor_ids($central_rs_distributor_id);
                if (!empty($child_distributor_ids)) {
                    $distributor_ids+= $child_distributor_ids;
                }
            }
        }
    }
    // if central rs logged in central child's returns
    else if (in_array('central_distributor', $user->roles)) {
        $distributor_ids = get_child_distributor_ids($distributor_id);
        if (empty($distributor_ids)) {
            $distributor_ids = array();
        }
    }

    if (!empty($distributor_ids)) {
        $query = db_select('field_data_field_central_distributorid_ref', 'cdr');
        $query->join($table_name, 'rs', 'cdr.entity_id = rs.entity_id');
        $query->join('field_data_field_distributor', 'distributor', 'cdr.entity_id = distributor.entity_id');
        $query->condition('distributor.entity_id', $distributor_ids, 'IN');
        $query->fields('distributor', array('field_distributor_value'));
        $query->fields('rs', array($table_column));
        $res = $query->execute()->fetchAllKeyed(0, 1); // will get child uids=>rs_name
    }
    return $res;
}

function change_feeds_import_importer_template($importer_id) {
    global $user;
    $importer = feeds_importer($importer_id);
    if ($importer->parser instanceof FeedsCSVParser) {
        $mappings = feeds_importer($importer_id)->processor->config['mappings'];
        $sources = $uniques = array();
        foreach ($mappings as $mapping) {
            if (!empty($mapping['unique'])) {
                $uniques[] = check_plain($mapping['source']);
            } else {
                $sources[] = check_plain($mapping['source']);
            }
        }
        $sep = ',';
        $columns = array();
        foreach (array_merge($uniques, $sources) as $col) {
            if (strpos($col, $sep) !== FALSE) {
                $col = '"' . str_replace('"', '""', $col) . '"';
            }
            $columns[] = $col;
        }
        // If central RS or administrator is   logged in then only DistributorID column will be display
        if (in_array('super_central_distributor', $user->roles) || in_array('central_distributor', $user->roles)) {
            // get distributor wise feed template
            $distributor_wise_template = explode(',', variable_get('distributor_feed_importer'));
            if (in_array($importer_id, $distributor_wise_template)) {
                $columns[] = 'Distributor Name';
            }
        }
        drupal_add_http_header('Cache-Control', 'max-age=60, must-revalidate');
        drupal_add_http_header('Content-Disposition', 'attachment; filename="' . $importer_id . '_template.csv"');
        drupal_add_http_header('Content-type', 'text/csv; charset=utf-8');
        ob_clean();
        print implode($sep, $columns);
        return;
    }
    return drupal_not_found();
}

function change_feeds_import_menu_alter(&$items) {
    ob_clean();
    $items['import/%/template']['access callback'] = TRUE;
    $items['import/%/template']['page arguments'] = array(1);
    $items['import/%/template']['access arguments'] = array('import', 1);
    $items['import/%/template']['page callback'] = 'change_feeds_import_importer_template';
}

function master_api_config_form($form, $form_state) {
    $form['bank_master_api_url'] = array(
        '#type' => 'textfield',
        '#title' => t('Bank Master API URL'),
        '#description' => t('Bank Master URL'),
        '#default_value' => variable_get('bank_master_api_url'),
        '#required' => TRUE,
    );

    $form['reason_code_master_api_url'] = array(
        '#type' => 'textfield',
        '#title' => t('Reason Code Master API URL'),
        '#description' => t(' Reason Code Master API URL'),
        '#default_value' => variable_get('reason_code_master_api_url'),
        '#required' => TRUE,
    );

    $form['outlet_master_api_url'] = array(
        '#type' => 'textfield',
        '#title' => t('Location Master API URL'),
        '#description' => t('Location Master API URL'),
        '#default_value' => variable_get('outlet_master_api_url'),
        '#required' => TRUE,
    );

    return system_settings_form($form);
}

function validate_distributor_name($distributor_name) {
    $distributor_id = 0;
    global $table_name;
    global $table_column;
    if (!empty($distributor_name)) {
        $query = db_select($table_name, 'dn');
        $query->join('field_data_field_distributor', 'distributor_id', 'distributor_id.entity_id=dn.entity_id');
        $query->condition("dn.$table_column", $distributor_name);
        $query->fields('distributor_id', array('field_distributor_value'));
        $distributor_id = $query->execute()->fetchField();
    }
    return $distributor_id;
}

function validate_distributor_content($feed_title, $content_type, $distributor_id) {
    if (!empty($distributor_id) && isset($feed_title) && !empty($content_type)) {
        $query = db_select('node', 'n');
        $query->fields('n', array('nid'));
        $query->condition('n.type', $content_type);
        $query->condition('n.title', $feed_title);
        $query->condition('n.uid', $distributor_id);
        $result = $query->execute()->fetchField();
    }
    return $result;
}

function validate_master_data($feed_title, $content_type) {
    $query = db_select('node', 'n');
    $query->fields('n', array('title'));
    $query->condition('n.type', $content_type);
    $query->condition('n.title', $feed_title);
    $result = $query->execute()->fetchField();
    return $result;
}
function check_valid_distributor($distributor_id) {
  if (!empty($distributor_id)) {
      $dis_ids = get_distributor_ids();
      if (in_array($distributor_id, $dis_ids)) {
        return $distributor_id;
      }else {
        return 0;
      }
  } 
  return 0;
}
function validate_outlet_master_data($title,$distributor_id) {
  if (!empty($title) && !empty($distributor_id))   {
    $query1 = db_select('node', 'n');
    $query1->condition('n.type', 'outlet_master');
    $query1->condition('n.title', $title);
    $query1->fields('n', array('nid'));
    $query1->condition('n.uid',$distributor_id);
    $nid = $query1->execute()->fetchField();
  }
  return $nid;
}
function check_node_title_exist_of_distributor($title, $type,$sales_data = FALSE, $dis_id) {
  $query1 = db_select('node', 'n');
  $query1->condition('n.type', $type);
  $query1->condition('n.title', $title);
  $query1->condition('n.uid', $dis_id);
  $query1->fields('n', array('nid'));
  //$query1->addTag('node_uid');
  if ($sales_data) {
    $date = strtotime(date('Y-m-d'));
    $query1->join('field_data_field_sr_bill_date', 'd', 'd.entity_id = n.nid');
    $query1->condition('d.field_sr_bill_date_value', $date);
  }
  $nid = $query1->execute()->fetchField();
  return $nid;
}
function get_distributor_name($distributor_id) {
  $query = db_select('field_data_field_distributor', 'd');
  $query->innerjoin('field_data_field_distributor_name', 'n', 'n.entity_id = d.entity_id');
  $query->condition('n.entity_id', $distributor_id, '=');
  $query->fields('n', array('field_distributor_name_value'));
  $distributor_name = $query->execute()->fetchField();
  return $distributor_name;
}

function get_rs_code_of_distributor($distributor_id) {
  global $user;
  if (empty($distributor_id)) {
   $distributor_id = change_feeds_import_get_distributor_id($user->uid);
  }
  if(!empty($distributor_id)) {
    $query = db_select('field_data_field_third_party_username', 'rs');
    $query->condition('rs.entity_id', $distributor_id);
    $query->fields('rs', array('field_third_party_username_value'));
    $rs_code = $query->execute()->fetchField();
  }
  return $rs_code;
}
function get_distributorid_of_trip($trip_id) {
  $distributor_id = 0;
  if (!empty($trip_id)) {
    $distributor_ids = get_distributor_ids();
    if (!empty($distributor_ids)) {
      $query = db_select('node', 'n');
      $query->condition('type', 'dispatch_data');
      $query->condition('uid', $distributor_ids, 'IN');
      $query->condition('title',$trip_id);
      $query->fields('n',array('uid'));
      $distributor_id = $query->execute()->fetchField();
    }
  }
  return $distributor_id;
}
function get_trip_distributor_id_using_rs_code($rs_code,$trip_id) {
  $distributor_id = '';
  if(!empty($rs_code) && !empty($trip_id)) {
     $query = db_select('dispatch_planning_api_data', 'ad');
     $query->join('node', 'n', 'n.title = ad.runsheet_number and n.uid = ad.distributor_id');
     $query->condition('ad.hub', $rs_code, '=');
     $query->condition('n.type', 'dispatch_data', '=');
     $query->condition('ad.runsheet_number', $trip_id, '=');
     $query->fields('ad', array('distributor_id'));
     $distributor_id = $query->execute()->fetchField();
  }
  return $distributor_id;
}