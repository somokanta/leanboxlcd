<?php

/**
 * Implements hook_menu
 */
function leanbox_pod_menu() {
   $items = array();
   $items['pod-threshold'] = array(
     'title' => 'Pod Threshold',
     'page callback' => 'drupal_get_form',
     'page arguments' => array('_set_pod_threshold_callback'),
     'access arguments' => array('pod threshold'),
     'type' => MENU_CALLBACK,
     'file' => 'form/leanbox_pod.form.inc',
   );
   $items['declare-fr-flag'] = array(
     'title' => 'Declare full return',
     'page callback' => 'drupal_get_form',
     'page arguments' => array('_declare_fr_flag_callback'),
     'access arguments' => array('pod threshold'),
     'type' => MENU_CALLBACK,
     'file' => 'form/full_return.form.inc',
   );
   return $items;
}

/**
 * Implement hook_permission()
 *  Add custom permission Central sales delivery report
 */
function leanbox_pod_permission() {
   return array(
     'pod threshold' => array(
       'title' => t('pod threshold'),
       'description' => t('pod threshold')
     )
   );
}

/**
 * 
 * @param type $dis_id
 * @return int
 */
function _get_pod_threshold_value($dis_id) {
   $query = db_select('pod_flat_table', 'pt');
   $query->fields('pt', array('pod_threshold'));
   $query->condition('pt.distributor_id', $dis_id);
   $user_pod_value = $query->execute()->fetchField();
   return $user_pod_value;
}

/**
 * Implements hook_taxonomy_term_presave($term)
 * @param type $term
 */
function leanbox_pod_taxonomy_term_presave($term) {
   if ($term->vocabulary_machine_name === 'pod_call_status') {
      $user_id = $GLOBALS['user']->uid;
      $distributor_id = change_feeds_import_get_distributor_id($user_id);
      $term->field_call_status_user['und'][0]['uid'] = $distributor_id;
   }
   if ($term->vocabulary_machine_name === 'pod_delivery_status') {
      $user_id = $GLOBALS['user']->uid;
      $distributor_id = change_feeds_import_get_distributor_id($user_id);
      $term->field_delivery_status_user['und'][0]['uid'] = $distributor_id;
   }
}

/**
 * Implements hook_node_presave()
 * Once the User change the value related to POD. we are maintaining a history
 */
function leanbox_pod_node_presave($node) {
  if ($node->type == 'sales_register_data') {
    if ($node->original->field_sales_remarks['und'][0]['value'] != $node->field_sales_remarks['und'][0]['value'] || $node->original->field_sales_call_status['und'][0]['tid'] != $node->field_sales_call_status['und'][0]['tid'] || $node->original->field_sales_delivery_status['und'][0]['tid'] != $node->field_sales_delivery_status['und'][0]['tid']) {
      // New node Create for pod_history
      $pod_history = new StdClass();
      $pod_history->type = 'pod_history';
      node_object_prepare($pod_history); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().
      $pod_history->language = LANGUAGE_NONE; // Or e.g. 'en' if locale is enabled
      $pod_history->uid = $node->uid;
      $pod_history->status = 1; //(1 or 0): published or not
      $pod_history->comment = 0; // 0 = comments disabled, 1 = read only, 2 = read/write
      $pod_history->title = $node->title;
      $pod_history->field_remarks_history['und'][0]['value'] = $node->field_sales_remarks['und'][0]['value'];
      if ($node->field_sales_call_status['und'][0]['tid']) {
        $pod_history->field_pod_call_history['und'][0]['tid'] = $node->field_sales_call_status['und'][0]['tid'];
      }
      if ($node->field_sales_delivery_status['und'][0]['tid']) {
        $pod_history->field_pod_delivery_history['und'][0]['tid'] = $node->field_sales_delivery_status['und'][0]['tid'];
      }
      $pod_history->field_pod_bill_reference['und'][0]['nid'] = $node->nid;
      node_save($pod_history);
    }
  }
}
